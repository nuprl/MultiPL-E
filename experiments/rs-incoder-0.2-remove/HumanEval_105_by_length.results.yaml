language: rs
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() && arr[j] < 10 {\n            j += 1\n        }\n    \
    \    let mut k = j;\n        while k < arr.len() && arr[k] > 9 {\n           \
    \ k += 1\n        }\n        if j > i {\n            result.push(by_length(arr[i..k].clone()));\n\
    \        } else {\n            result.push(by_length(arr[k..j].clone()));\n  \
    \      }\n        i = k;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clone` found for slice `[isize]` in the\
    \ current scope\n  --> /tmp/tmp_yj31cdb.rs:27:45\n   |\n27 |             result.push(by_length(arr[i..k].clone()));\n\
    \   |                                             ^^^^^ method not found in `[isize]`\n\
    \nerror[E0599]: no method named `clone` found for slice `[isize]` in the current\
    \ scope\n  --> /tmp/tmp_yj31cdb.rs:29:45\n   |\n29 |             result.push(by_length(arr[k..j].clone()));\n\
    \   |                                             ^^^^^ method not found in `[isize]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_yj31cdb.rs:33:5\n   |\n11 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n33 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            i += 1;\n        }\n        if j\
    \ == i {\n            break;\n        }\n        let mut temp = arr[i];\n    \
    \    arr[i] = arr[j];\n        arr[j] = temp;\n        result.push(&name[arr[i]\
    \ - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `name` in this scope\n  --> /tmp/tmpqu8wa7mx.rs:31:22\n\
    \   |\n31 |         result.push(&name[arr[i] - 1]);\n   |                    \
    \  ^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut tmp: Vec<String> = vec![];\n        while j < arr.len()\
    \ {\n            if arr[j] == i {\n                tmp[k] = \"One\";\n       \
    \         j += 1;\n                i += 1;\n                break;\n         \
    \   }\n            if arr[j] > i {\n                break;\n            }\n  \
    \          tmp[k] = \"Two\";\n            j += 1;\n            k += 1;\n     \
    \   }\n        result = result.concat(tmp);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl0p9sc1m.rs:26:26\n   |\n\
    26 |             if arr[j] == i {\n   |                          ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n26 |             if arr[j] == i.try_into().unwrap()\
    \ {\n   |                          ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl0p9sc1m.rs:27:26\n   |\n27 |                 tmp[k] =\
    \ \"One\";\n   |                          ^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                          |\n   |              \
    \            expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl0p9sc1m.rs:32:25\n   |\n32 |             if arr[j] > i\
    \ {\n   |                         ^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n32 |             if arr[j] > i.try_into().unwrap() {\n   |      \
    \                   ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl0p9sc1m.rs:35:22\n   |\n35 |             tmp[k] = \"Two\";\n \
    \  |                      ^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                      |\n   |                      expected struct `String`,\
    \ found `&str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument\
    \ was supplied\n   --> /tmp/tmpl0p9sc1m.rs:39:25\n    |\n39  |         result\
    \ = result.concat(tmp);\n    |                         ^^^^^^ --- supplied 1 argument\n\
    \    |                         |\n    |                         expected 0 arguments\n\
    \    |\nnote: associated function defined here\n\nerror[E0271]: type mismatch\
    \ resolving `<[String] as Concat<str>>::Output == Vec<String>`\n  --> /tmp/tmpl0p9sc1m.rs:39:25\n\
    \   |\n39 |         result = result.concat(tmp);\n   |                       \
    \  ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected\
    \ struct `String`\n              found struct `Vec<String>`\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome err"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < arr.len() {\n        if\
    \ arr[i] > 9 {\n            i += 1;\n            continue;\n        }\n      \
    \  if arr[i] < 1 {\n            i += 1;\n            continue;\n        }\n  \
    \      let mut k = i;\n        while k > 0 && arr[k - 1] > 9 {\n            k\
    \ -= 1;\n        }\n        if k == i {\n            i += 1;\n            continue;\n\
    \        }\n        let mut k = i;\n        while k > 0 && arr[k - 1] < 1 {\n\
    \            k -= 1;\n        }\n        if k == i {\n            i += 1;\n  \
    \          continue;\n        }\n        let mut k = i;\n        while k > 0 &&\
    \ arr[k - 1] > 9 {\n            k -= 1;\n        }\n        if k == i {\n    \
    \        i += 1;\n            continue;\n        }\n        let mut k = i;\n \
    \       while k > 0 && arr[k - 1] < 1 {\n            k -= 1;\n        }\n    \
    \    if k == i {\n            i += 1;\n            continue;\n        }\n    \
    \    let mut k = i;\n        while k > 0 && arr[k - 1] > 9 {\n            k -=\
    \ 1;\n        }\n        if k == i {\n            i += 1;\n            continue;\n\
    \        }\n        let mut k = i;\n        while k > 0 && arr[k - 1] < 1 {\n\
    \            k -= 1;\n        }\n        if k == i {\n            i += 1;\n  \
    \          continue;\n        }\n        let mut k = i;\n        while k > 0 &&\
    \ arr[k - 1] > 9 {\n            k -= 1;\n        }\n        if k == i {\n    \
    \        i += 1;\n            continue;\n        }\n        let mut k = i;\n \
    \       while k > 0 && arr[k - 1] < 1 {\n            k -= 1;\n        }\n    \
    \    if k == i {\n            i += 1;\n            continue;\n        }\n    \
    \    let mut k = i;\n        while k > 0 && arr[k - 1] > 9 {\n            k -=\
    \ 1;\n        }\n        if k == i {\n            i += 1;\n            continue;\n\
    \        }\n        let mut k = i;\n        while k > 0 && arr[k - 1] < 1 {\n\
    \            k -= 1;\n        }\n        if k == i {\n            i += 1;\n  \
    \          continue;\n        }\n        let mut k = i;\n        while k > 0 &&\
    \ arr[k - 1] > 9 {\n            k -= 1;\n        }\n        if k == i {\n    \
    \        i += 1;\n            continue;\n        }\n        let mut k = i;\n \
    \       while k > 0 && arr[k - 1] < 1 {\n            k -= 1;\n        }\n    \
    \    if k == i {\n            i += \n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpfg13c2dy.rs:130:3\n\
    \    |\n11  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n18  |     while\
    \ i < arr.len() {\n    |                         - unclosed delimiter\n...\n119\
    \ |         if k == i {\n    |                   - this delimiter might not be\
    \ properly closed...\n120 |             i += \n121 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n130 | }\n    |   ^\n\nerror: expected\
    \ expression, found `}`\n   --> /tmp/tmpfg13c2dy.rs:121:1\n    |\n121 | }\n  \
    \  | ^ expected expression\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpfg13c2dy.rs:18:5\n\
    \    |\n11  |   fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |        \
    \                            ----------- expected `Vec<String>` because of return\
    \ type\n...\n18  | /     while i < arr.len() {\n19  | |         if arr[i] > 9\
    \ {\n20  | |             i += 1;\n21  | |             continue;\n...   |\n129\
    \ | |     assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"), String::from(\"\
    Eight\"), String::from(\"Four\")]);\n130 | | }\n    | |__^ expected struct `Vec`,\
    \ found `()`\n    |\n    = note: expected struct `Vec<String>`\n            found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    let mut counter = 1;\n    let mut digit = arr[0];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < digit {\n\
    \            digit = arr[i];\n            digits.push(digit);\n            i +=\
    \ 1;\n        } else {\n            counter = counter * 10;\n            digit\
    \ = digit - digit;\n            digits.push(counter);\n            i += 1;\n \
    \       }\n    }\n    for i in 0..digits.len() {\n        let digit = digits[i];\n\
    \        let name = match digit {\n            1 => \"One\",\n            2 =>\
    \ \"Two\",\n            3 => \"Three\",\n            4 => \"Four\",\n        \
    \    5 => \"Five\",\n            6 => \"Six\",\n            7 => \"Seven\",\n\
    \            8 => \"Eight\",\n            9 => \"Nine\",\n            _ => \"\"\
    .to_string(),\n        };\n        result.push(name);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpziaojxvi.rs:44:18\n\
    \   |\n34 |           let name = match digit {\n   |  ____________________-\n\
    35 | |             1 => \"One\",\n36 | |             2 => \"Two\",\n37 | |   \
    \          3 => \"Three\",\n...  |\n43 | |             9 => \"Nine\",\n   | |\
    \                  ------ this and all prior arms are found to be of type `&str`\n\
    44 | |             _ => \"\".to_string(),\n   | |                  ^^^^^^^^^^^^^^\n\
    \   | |                  |\n   | |                  expected `&str`, found struct\
    \ `String`\n   | |                  help: consider borrowing here: `&\"\".to_string()`\n\
    45 | |         };\n   | |_________- `match` arms have incompatible types\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == i {\n      \
    \          result.push(by_name(arr[j]));\n                i += 1;\n          \
    \      break;\n            }\n            j += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp7oyrisdx.rs:25:29\n\
    \   |\n25 |                 result.push(by_name(arr[j]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7oyrisdx.rs:24:26\n   |\n24 |             if arr[j] == i {\n  \
    \ |                          ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n24 |             if arr[j] == i.try_into().unwrap() {\n   |     \
    \                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > 9 {\n    \
    \        result.push(by_length(arr.iter().skip(i).take(1).collect()));\n     \
    \       break;\n        }\n        result.push(by_name(&arr[i]));\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp1zcw25lg.rs:22:21\n\
    \   |\n22 |         result.push(by_name(&arr[i]));\n   |                     ^^^^^^^\
    \ not found in this scope\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `&isize`\n  --> /tmp/tmp1zcw25lg.rs:19:35\n\
    \   |\n19 |             result.push(by_length(arr.iter().skip(i).take(1).collect()));\n\
    \   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1zcw25lg.rs:25:5\n   |\n11 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n25 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        result.push(by_length(arr.subslice(i..j)));\n        i = j;\n\
    \    }\n    if i == arr.len() {\n        result.push(by_length(arr.subslice(i..)));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `subslice` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp1hwwd5m9.rs:26:35\n   |\n26 |         result.push(by_length(arr.subslice(i..j)));\n\
    \   |                                   ^^^^^^^^ method not found in `Vec<isize>`\n\
    \nerror[E0599]: no method named `subslice` found for struct `Vec<isize>` in the\
    \ current scope\n  --> /tmp/tmp1hwwd5m9.rs:30:35\n   |\n30 |         result.push(by_length(arr.subslice(i..)));\n\
    \   |                                   ^^^^^^^^ method not found in `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1hwwd5m9.rs:32:5\n   |\n11 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n32 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            j = j + 1;\n        }\n        if\
    \ j == i {\n            break;\n        }\n        let mut temp = vec![];\n  \
    \      for _ in 0..(j - i) {\n            temp.push(\"One\");\n        }\n   \
    \     for _ in 0..(i - j) {\n            temp.push(\"Two\");\n        }\n    \
    \    for _ in 0..(j - i) {\n            temp.push(\"Three\");\n        }\n   \
    \     for _ in 0..(i - j) {\n            temp.push(\"Four\");\n        }\n   \
    \     for _ in 0..(j - i) {\n            temp.push(\"Five\");\n        }\n   \
    \     for _ in 0..(i - j) {\n            temp.push(\"Six\");\n        }\n    \
    \    for _ in 0..(j - i) {\n            temp.push(\"Seven\");\n        }\n   \
    \     for _ in 0..(i - j) {\n            temp.push(\"Eight\");\n        }\n  \
    \      for _ in 0..(j - i) {\n            temp.push(\"Nine\");\n        }\n  \
    \      for _ in 0..(i - j) {\n            temp.push(\"Ten\");\n        }\n   \
    \     for _ in 0..(j - i) {\n            temp.push(\"Eleven\");\n        }\n \
    \       for _ in 0..(i - j) {\n            temp.push(\"Twelve\");\n        }\n\
    \        for _ in 0..(j - i) {\n            temp.push(\"Thirteen\");\n       \
    \ }\n        for _ in 0..(i - j) {\n            temp.push(\"Fourteen\");\n   \
    \     }\n        for _ in 0..(j - i) {\n            temp.push(\"Fifteen\");\n\
    \        }\n        for _ in 0..(i - j) {\n            temp.push(\"Sixteen\");\n\
    \        }\n        for _ in 0..(j - i) {\n            temp.push(\"Seventeen\"\
    );\n        }\n        for _ in 0..(i - j) {\n            temp.push(\"Eighteen\"\
    );\n        }\n        for _ in 0..(j - i) {\n            temp.push(\"Nineteen\"\
    );\n        }\n        for _ in 0..(i - j) {\n            temp.push(\"Twenty\"\
    );\n        }\n        for _ in 0..(j - i) {\n            temp.push(\"TwentyOne\"\
    );\n        }\n        for _ in 0..(i - j) {\n            temp.push(\"TwentyTwo\"\
    );\n        }\n        for _ in 0..(j - i) {\n            temp.push(\"Twent\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmpo9zoqka9.rs:105:110\n\
    \    |\n105 |       assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n    |  ______________________________________________________________________________________________________________^\n\
    106 | | }\n    | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr.to_owned();\n\
    \    let mut len = arr.len();\n    let mut result = vec![];\n    while len > 0\
    \ {\n        let mut i = 0;\n        while i < len {\n            if arr[i] <\
    \ 1 || arr[i] > 9 {\n                i += 1;\n                continue;\n    \
    \        }\n            result.push(by_digit(arr[i]));\n            i += 1;\n\
    \        }\n        len = arr.len();\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpmc8tp_zi.rs:25:25\n\
    \   |\n25 |             result.push(by_digit(arr[i]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        result.push(by_length(arr.iter().skip(j).rev().take(i).collect()));\n\
    \        i = j;\n    }\n    if i == 0 {\n        result.push(\"One\");\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n  --> /tmp/tmpcqt1wmuc.rs:26:31\n   |\n26 |\
    \         result.push(by_length(arr.iter().skip(j).rev().take(i).collect()));\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcqt1wmuc.rs:30:21\n   |\n30 |\
    \         result.push(\"One\");\n   |                     ^^^^^ expected struct\
    \ `Vec`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n      \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcqt1wmuc.rs:32:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n32 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<Vec<String>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                result.push(by_name(arr[i]));\n\
    \                i += 1;\n                j += 1;\n                continue;\n\
    \            }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpawr9uxmm.rs:29:29\n\
    \   |\n29 |                 result.push(by_name(arr[i]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            i += 1;\n            j += 1\n   \
    \     }\n        result.push(&names[arr[i] - 1]);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1,\
    \ 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmpyambje7a.rs:26:22\n\
    \   |\n26 |         result.push(&names[arr[i] - 1]);\n   |                   \
    \   ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        let mut j = i;\n        while j < digits.len() && digits[j] < 10\
    \ {\n            j += 1\n        }\n        if j == i {\n            break;\n\
    \        }\n        let mut digit = digits[i];\n        digits[i] = digits[j];\n\
    \        digits[j] = digit;\n        result.push(by_digit(digit));\n        i\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpr_t1f1xt.rs:29:21\n\
    \   |\n29 |         result.push(by_digit(digit));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            i += 1;\n            j += 1\n   \
    \     }\n        let mut temp = arr[i];\n        arr[i] = arr[j];\n        arr[j]\
    \ = temp;\n        result.push(&names[arr[i] - 1]);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmp7jagdai_.rs:29:22\n\
    \   |\n29 |         result.push(&names[arr[i] - 1]);\n   |                   \
    \   ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut reversed = arr\n        .iter()\n        .cloned()\n        .enumerate()\n\
    \        .map(|(i, x)| {\n            if x < 10 {\n                let name =\
    \ match x {\n                    1 => \"One\",\n                    2 => \"Two\"\
    ,\n                    3 => \"Three\",\n                    4 => \"Four\",\n \
    \                   5 => \"Five\",\n                    6 => \"Six\",\n      \
    \              7 => \"Seven\",\n                    8 => \"Eight\",\n        \
    \            9 => \"Nine\",\n                    _ => return \"\".to_string(),\n\
    \                };\n                result.push(name);\n            }\n     \
    \       \"\".to_string()\n        })\n        .collect::<Vec<String>>();\n   \
    \ reversed.reverse();\n    for &s in reversed {\n        result.push(s);\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2vtdr2th.rs:40:9\n   |\n\
    40 |     for &s in reversed {\n   |         ^^    -------- this expression has\
    \ type `String`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |\n   = note: expected struct `String`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2vtdr2th.rs:43:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    43 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                result.push(by_length(arr.iter().skip(i).take(j\
    \ - i)));\n                i += j - i;\n                break;\n            }\n\
    \            j += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]),\
    \ vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"\
    ), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"\
    One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9x5g9kj0.rs:29:39\n   |\n\
    29 |                 result.push(by_length(arr.iter().skip(i).take(j - i)));\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `std::iter::Take`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `std::iter::Take<Skip<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9x5g9kj0.rs:36:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n36 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() && arr[j] < 10 {\n            j += 1\n        }\n    \
    \    if j == i {\n            break;\n        }\n        let mut k = i;\n    \
    \    while k < j {\n            result.append(&name[arr[k]]);\n            k +=\
    \ 1;\n        }\n        i = j;\n    }\n    result.reverse();\n    result\n}\n\
    \nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `name` in this scope\n  --> /tmp/tmpn25m7icp.rs:27:28\n\
    \   |\n27 |             result.append(&name[arr[k]]);\n   |                  \
    \          ^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       if arr[i] > 9 {\n            result.push(by_length(arr.iter().filter(|&x|\
    \ x > 9).collect()));\n            break;\n        }\n        result.push(by_length(arr.iter().filter(|&x|\
    \ x > 1 && x < 9).collect()));\n        i += 1;\n    }\n    if arr.len() == 0\
    \ {\n        return result;\n    }\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] == 0 {\n            result.push(by_length(arr.iter().filter(|&x|\
    \ x > 1 && x < 9).collect()));\n            break;\n        }\n        i += 1;\n\
    \    }\n    if arr.len() == 0 {\n        return result;\n    }\n    let mut i\
    \ = 0;\n    while i < arr.len() {\n        if arr[i] == 0 {\n            result.push(by_length(arr.iter().filter(|&x|\
    \ x > 9).collect()));\n            break;\n        }\n        i += 1;\n    }\n\
    \    if arr.len() == 0 {\n        return result;\n    }\n    let mut i = 0;\n\
    \    while i < arr.len() {\n        if arr[i] == 0 {\n            result.push(by_length(arr.iter().filter(|&x|\
    \ x > 1 && x < 9).collect()));\n            break;\n        }\n        i += 1;\n\
    \    }\n    if arr.len() == 0 {\n        return result;\n    }\n    let mut i\
    \ = 0;\n    while i < arr.len() {\n        if arr[i] == 0 {\n            result.push(by_length(arr.iter().filter(|&x|\
    \ x > 9).collect()));\n            break;\n        }\n        i += 1;\n    }\n\
    \    if arr.len() == 0 {\n        return result;\n    }\n    let mut i = 0;\n\
    \    while i < arr.len() {\n        if arr[i] == 0 {\n            result.push(by_length(arr.iter().filter(|&x|\
    \ x > 1 && x < 9).collect()));\n            break;\n        }\n        i += 1;\n\
    \    }\n    if arr.len() == 0 {\n        return result;\n    }\n    let mut i\
    \ = 0;\n    while i < arr.len() {\n        if arr[i] == 0 {\n            result.push(by_length(arr.iter().filter(|&x|\
    \ x > 9).collect()));\n            break;\n        }\n        i += 1;\n    }\n\
    \    if arr.len() == 0 {\n        return result;\n    }\n    let mut i = 0;\n\
    \    while i < arr.len() {\n        if arr[i] == 0 {\n            result.push(by_length(arr.iter().filter(|&x|\
    \ x > 1 && x < 9).collect()));\n            break;\n        }\n        i += 1;\n\
    \    }\n    if arr.len() == 0 {\n        return result;\n    }\n    let mut i\
    \ = 0;\n    while i < arr.len() {\n        if arr[i] == 0 {\n            result.push(by_length(arr.iter().filter(\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpw5wn_xq4.rs:115:3\n\
    \    |\n11  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n103 |     while\
    \ i < arr.len() {\n    |                         - unclosed delimiter\n104 | \
    \        if arr[i] == 0 {\n    |                        - this delimiter might\
    \ not be properly closed...\n105 |             result.push(by_length(arr.iter().filter(\n\
    106 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    115 | }\n    |   ^\n\nerror: mismatched closing delimiter: `}`\n   --> /tmp/tmpw5wn_xq4.rs:105:52\n\
    \    |\n11  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - closing delimiter possibly meant for this\n\
    ...\n105 |             result.push(by_length(arr.iter().filter(\n    |       \
    \                                             ^ unclosed delimiter\n106 | }\n\
    \    | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpw5wn_xq4.rs:16:62\n   |\n16 |             result.push(by_length(arr.iter().filter(|&x|\
    \ x > 9).collect()));\n   |                                                  \
    \            ^\n   |                                                         \
    \     |\n   |                                                              expected\
    \ `&isize`, found integer\n   |                                              \
    \                help: consider borrowing here: `&9`\n\nerror[E0277]: a value\
    \ of type `Vec<isize>` cannot be built from an iterator over elements of type\
    \ `&isize`\n    --> /tmp/tmpw5wn_xq4.rs:16:35\n     |\n16   |             result.push(by_length(arr.iter().filter(|&x|\
    \ x > 9).collect()));\n     |                         --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                         |\n     |                         required by\
    \ a bound introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Ve"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut reversed = arr;\n    reversed.sort();\n    for i in 0..(reversed.len()\
    \ - 1) {\n        if reversed[i] >= 1 && reversed[i] <= 9 {\n            result.push(by_digit(reversed[i]));\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp5zykwtuv.rs:20:25\n\
    \   |\n20 |             result.push(by_digit(reversed[i]));\n   |            \
    \             ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            continue;\n        }\n        let mut j = i;\n        while\
    \ j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n               \
    \ break;\n            }\n            if arr[j] == arr[i] {\n                result.push(by_length(arr.iter().skip(j).rev().collect()));\n\
    \                break;\n            }\n            j += 1\n        }\n      \
    \  result.push(by_length(arr.iter().skip(i).rev().collect()));\n        i = j;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpbtgrv764.rs:27:39\n     |\n\
    27   |                 result.push(by_length(arr.iter().skip(j).rev().collect()));\n\
    \     |                             --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                             |\n     |                             required\
    \ by a bound introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpbtgrv764.rs:32:31\n     |\n32   |        \
    \ result.push(by_length(arr.iter().skip(i).rev().collect()));\n     |        \
    \             --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value of type `Vec<isize>`\
    \ cannot be built from `std::iter::Iterator<Item=&isize>`\n     |            \
    \         |\n     |                     required by a bound introduced by this\
    \ call\n     |\n     = help: the trait `FromIterator<&isize>` is not implemented\
    \ for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for\
    \ `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbtgrv764.rs:35:5\n   |\n11 | fn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n   |                                  ----------- expected\
    \ `Vec<String>` because of return type\n...\n35 |     result\n   |     ^^^^^^\
    \ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct\
    \ `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpblwkfmtg.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut digits_len\
    \ = digits.len();\n    let mut i = 0;\n    while i < digits_len {\n        let\
    \ mut j = i;\n        while j < digits_len && digits[j] == digits[j - 1] + 1 {\n\
    \            j += 1\n        }\n        if j == digits_len {\n            result.push(format!(\"\
    One\", digits[i..]));\n            break;\n        }\n        let mut k = j;\n\
    \        while k < digits_len && digits[k] == digits[k - 1] + 2 {\n          \
    \  k += 1\n        }\n        if k == digits_len {\n            result.push(format!(\"\
    Two\", digits[i..]));\n            break;\n        }\n        let mut l = k;\n\
    \        while l < digits_len && digits[l] == digits[l - 1] + 3 {\n          \
    \  l += 1\n        }\n        if l == digits_len {\n            result.push(format!(\"\
    Three\", digits[i..]));\n            break;\n        }\n        let mut m = l;\n\
    \        while m < digits_len && digits[m] == digits[m - 1] + 4 {\n          \
    \  m += 1\n        }\n        if m == digits_len {\n            result.push(format!(\"\
    Four\", digits[i..]));\n            break;\n        }\n        let mut n = m;\n\
    \        while n < digits_len && digits[n] == digits[n - 1] + 5 {\n          \
    \  n += 1\n        }\n        if n == digits_len {\n            result.push(format!(\"\
    Five\", digits[i..]));\n            break;\n        }\n        let mut o = n;\n\
    \        while o < digits_len && digits[o] == digits[o - 1] + 6 {\n          \
    \  o += 1\n        }\n        if o == digits_len {\n            result.push(format!(\"\
    Six\", digits[i..]));\n            break;\n        }\n        let mut p = o;\n\
    \        while p < digits_len && digits[p] == digits[p - 1] + 7 {\n          \
    \  p += 1\n        }\n        if p == digits_len {\n            result.push(format!(\"\
    Seven\", digits[i..]));\n            break;\n        }\n        let mut q = p;\n\
    \        while q < digits_len && digits[q] == digits[q - 1] + 8 {\n          \
    \  q += 1\n        }\n        if q == digits_len {\n            result.push(format!(\"\
    Eight\", digits[i..]));\n            break;\n        }\n        let mut r = q;\n\
    \        while r < digits_len && digits[r] == \n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpoeb3_w5u.rs:95:3\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                                 - unclosed delimiter\n...\n19 |     while i\
    \ < digits_len {\n   |                          - this delimiter might not be\
    \ properly closed...\n...\n86 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n95 | }\n   |   ^\n\nerror: expected expression, found `}`\n\
    \  --> /tmp/tmpoeb3_w5u.rs:86:1\n   |\n85 |         while r < digits_len && digits[r]\
    \ == \n   |         ----- while parsing the condition of this `while` expression\n\
    86 | }\n   | ^ expected expression\n\nerror: argument never used\n  --> /tmp/tmpoeb3_w5u.rs:25:40\n\
    \   |\n25 |             result.push(format!(\"One\", digits[i..]));\n   |    \
    \                             -----  ^^^^^^^^^^^ argument never used\n   |   \
    \                              |\n   |                                 formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmpoeb3_w5u.rs:33:40\n\
    \   |\n33 |             result.push(format!(\"Two\", digits[i..]));\n   |    \
    \                             -----  ^^^^^^^^^^^ argument never used\n   |   \
    \                              |\n   |                                 formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmpoeb3_w5u.rs:41:42\n\
    \   |\n41 |             result.push(format!(\"Three\", digits[i..]));\n   |  \
    \                               -------  ^^^^^^^^^^^ argument never used\n   |\
    \                                 |\n   |                                 formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmpoeb3_w5u.rs:49:41\n\
    \   |\n49 |             result.push(format!(\"Four\", digits[i..]));\n   |   \
    \                              ------  ^^^^^^^^^^^ argument never used\n   | \
    \                                |\n   |                                 formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmpoeb3_w5u.rs:57:41\n\
    \   |\n57 |             result.push(format!(\"Five\", digits[i..]));\n   |   \
    \                              ------  ^^^"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == arr[i] {\n \
    \               j += 1;\n                continue;\n            }\n          \
    \  if arr[j] > arr[i] {\n                break;\n            }\n            result.push(by_length(arr.iter().cloned().skip(j).take(arr[i]\
    \ - 1).collect()));\n            i += 1;\n            j += 1;\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5irxt0m3.rs:31:68\n   |\n\
    31 |             result.push(by_length(arr.iter().cloned().skip(j).take(arr[i]\
    \ - 1).collect()));\n   |                                                    \
    \                ^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n31 |             result.push(by_length(arr.iter().cloned().skip(j).take((arr[i]\
    \ - 1).try_into().unwrap()).collect()));\n   |                               \
    \                                     +          +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5irxt0m3.rs:36:5\n   |\n11 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |                                  -----------\
    \ expected `Vec<String>` because of return type\n...\n36 |     result\n   |  \
    \   ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    if arr.is_empty() {\n        return result;\n\
    \    }\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 ||\
    \ arr[i] > 9 {\n            i += 1;\n            continue;\n        }\n      \
    \  let mut j = i;\n        while j < arr.len() {\n            if arr[j] == arr[i]\
    \ {\n                j += 1;\n                continue;\n            }\n     \
    \       if arr[j] > arr[i] {\n                break;\n            }\n        \
    \    result.push(by_length(arr.iter().cloned().skip(i).take(j - i).collect()));\n\
    \            i += 1;\n            j += 1;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpizsaw2iq.rs:31:25\n   |\n\
    31 |             result.push(by_length(arr.iter().cloned().skip(i).take(j - i).collect()));\n\
    \   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct\
    \ `String`\n              found struct `Vec<String>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > 9 {\n    \
    \        result.push(by_length(arr.iter().skip(i).take(1).collect()));\n     \
    \       break;\n        }\n        result.push(by_name(&arr[i]));\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp1zcw25lg.rs:22:21\n\
    \   |\n22 |         result.push(by_name(&arr[i]));\n   |                     ^^^^^^^\
    \ not found in this scope\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `&isize`\n  --> /tmp/tmp1zcw25lg.rs:19:35\n\
    \   |\n19 |             result.push(by_length(arr.iter().skip(i).take(1).collect()));\n\
    \   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1zcw25lg.rs:25:5\n   |\n11 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n25 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 101
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.clone();\n    let mut digits_len = digits.len();\n \
    \   let mut i = 0;\n    while i < digits_len {\n        if digits[i] < 1 || digits[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < digits_len && digits[j] == digits[i] {\n         \
    \   j += 1\n        }\n        let mut k = j;\n        while k < digits_len &&\
    \ digits[k] == digits[i] {\n            k += 1\n        }\n        let mut reversed_digits\
    \ = digits[..i].iter().cloned().rev();\n        let mut reversed_digits_len =\
    \ reversed_digits.len();\n        while reversed_digits_len > 0 {\n          \
    \  let mut reversed_digit = reversed_digits.next().unwrap();\n            if reversed_digit\
    \ < 10 {\n                result.push(\"One\".to_string());\n            } else\
    \ if reversed_digit < 100 {\n                result.push(\"Two\".to_string());\n\
    \            } else if reversed_digit < 1000 {\n                result.push(\"\
    Three\".to_string());\n            } else if reversed_digit < 10000 {\n      \
    \          result.push(\"Four\".to_string());\n            } else if reversed_digit\
    \ < 100000 {\n                result.push(\"Five\".to_string());\n           \
    \ } else if reversed_digit < 1000000 {\n                result.push(\"Six\".to_string());\n\
    \            } else if reversed_digit < 10000000 {\n                result.push(\"\
    Seven\".to_string());\n            } else if reversed_digit < 100000000 {\n  \
    \              result.push(\"Eight\".to_string());\n            } else if reversed_digit\
    \ < 1000000000 {\n                result.push(\"Nine\".to_string());\n       \
    \     } else {\n                result.push(\"One\".to_string());\n          \
    \  }\n            reversed_digits_len -= 1;\n        }\n        i = j;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"\
    One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"\
    , \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"\
    ]`,\n right: `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]`', /tmp/tmpvqteja9b.rs:66:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = arr.len() - 1;\n    while\
    \ i < k {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n      \
    \      continue;\n        }\n        let mut cur = arr[i];\n        while j >\
    \ i && arr[j] > cur {\n            result[k] = \"Nine\";\n            j -= 1;\n\
    \        }\n        result[k] = by_digit(cur);\n        j += 1;\n        i +=\
    \ 1;\n        k -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmppai9dae2.rs:29:21\n\
    \   |\n29 |         result[k] = by_digit(cur);\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppai9dae2.rs:34:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n34 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            continue;\n        }\n        let mut j = i;\n        while\
    \ j < arr.len() {\n            if arr[j] == i {\n                j += 1;\n   \
    \             continue;\n            }\n            if arr[j] > i {\n        \
    \        break;\n            }\n            result.push(by_length(vec![arr[j],\
    \ arr[i]]));\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_76i9kwc.rs:23:26\n   |\n\
    23 |             if arr[j] == i {\n   |                          ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n23 |             if arr[j] == i.try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_76i9kwc.rs:27:25\n   |\n27 |             if arr[j] > i\
    \ {\n   |                         ^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n27 |             if arr[j] > i.try_into().unwrap() {\n   |      \
    \                    ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_76i9kwc.rs:35:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n35 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<Vec<String>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    if arr.len() == 0 {\n        return result;\n\
    \    }\n    let mut digits = vec![];\n    let mut digits_len = arr.len();\n  \
    \  let mut i = 0;\n    while i < digits_len {\n        let digit = arr[i];\n \
    \       if digit < 1 || digit > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        digits.push(digit);\n        i += 1;\n    }\n    digits.sort_unstable();\n\
    \    for digit in digits {\n        let index = digit as usize;\n        let name\
    \ = match index {\n            0 => \"One\",\n            1 => \"Two\",\n    \
    \        2 => \"Three\",\n            3 => \"Four\",\n            4 => \"Five\"\
    ,\n            5 => \"Six\",\n            6 => \"Seven\",\n            7 => \"\
    Eight\",\n            8 => \"Nine\",\n            _ => return vec![],\n      \
    \  };\n        result.push(name);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]),\
    \ vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"\
    ), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"\
    One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6e75j720.rs:43:21\n   |\n\
    43 |         result.push(name);\n   |                     ^^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                     |\n   |      \
    \               expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] >= 1 && arr[j] <= 9 {\n     \
    \           result.push(by_name(arr[j]));\n                j += 1;\n         \
    \   } else {\n                break;\n            }\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpkgd2jzwp.rs:21:29\n\
    \   |\n21 |                 result.push(by_name(arr[j]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n        }\n   \
    \     result.push(&arr[..j]);\n        i = j;\n    }\n    if i == 0 {\n      \
    \  return vec![];\n    }\n    let mut i = 0;\n    while i < arr.len() {\n    \
    \    let mut j = i;\n        while j > 0 && arr[j - 1] < arr[j] {\n          \
    \  j -= 1;\n        }\n        result.push(&arr[..j]);\n        i = j;\n    }\n\
    \    result.reverse();\n    for i in 0..result.len() {\n        result[i] = match\
    \ result[i] {\n            1 => \"One\",\n            2 => \"Two\",\n        \
    \    3 => \"Three\",\n            4 => \"Four\",\n            5 => \"Five\",\n\
    \            6 => \"Six\",\n            7 => \"Seven\",\n            8 => \"Eight\"\
    ,\n            9 => \"Nine\",\n            _ => \"\".to_string(),\n        };\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsvmdgmgu.rs:40:13\n   |\n\
    39 |         result[i] = match result[i] {\n   |                           ---------\
    \ this expression has type `&[isize]`\n40 |             1 => \"One\",\n   |  \
    \           ^ expected slice `[isize]`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsvmdgmgu.rs:41:13\n   |\n39 |         result[i] = match\
    \ result[i] {\n   |                           --------- this expression has type\
    \ `&[isize]`\n40 |             1 => \"One\",\n41 |             2 => \"Two\",\n\
    \   |             ^ expected slice `[isize]`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsvmdgmgu.rs:42:13\n   |\n39 |         result[i] = match\
    \ result[i] {\n   |                           --------- this expression has type\
    \ `&[isize]`\n...\n42 |             3 => \"Three\",\n   |             ^ expected\
    \ slice `[isize]`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsvmdgmgu.rs:43:13\n\
    \   |\n39 |         result[i] = match result[i] {\n   |                      \
    \     --------- this expression has type `&[isize]`\n...\n43 |             4 =>\
    \ \"Four\",\n   |             ^ expected slice `[isize]`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsvmdgmgu.rs:44:13\n   |\n39 |         result[i]\
    \ = match result[i] {\n   |                           --------- this expression\
    \ has type `&[isize]`\n...\n44 |             5 => \"Five\",\n   |            \
    \ ^ expected slice `[isize]`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsvmdgmgu.rs:45:13\n   |\n39 |         result[i] = match result[i]\
    \ {\n   |                           --------- this expression has type `&[isize]`\n\
    ...\n45 |             6 => \"Six\",\n   |             ^ expected slice `[isize]`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsvmdgmgu.rs:46:13\n\
    \   |\n39 |         result[i] = match result[i] {\n   |                      \
    \     --------- this expression has type `&[isize]`\n...\n46 |             7 =>\
    \ \"Seven\",\n   |             ^ expected slice `[isize]`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsvmdgmgu."
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr.to_owned();\n\
    \    arr.sort_unstable();\n    arr.iter().for_each(|x| {\n        if x < 1 ||\
    \ x > 9 {\n            return;\n        }\n        arr[x - 1] = \"One\";\n   \
    \     arr[x - 2] = \"Two\";\n        arr[x - 3] = \"Three\";\n        arr[x -\
    \ 4] = \"Four\";\n        arr[x - 5] = \"Five\";\n        arr[x - 6] = \"Six\"\
    ;\n        arr[x - 7] = \"Seven\";\n        arr[x - 8] = \"Eight\";\n        arr[x\
    \ - 9] = \"Nine\";\n    });\n    arr\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprc7raf4z.rs:18:16\n   |\n\
    18 |         if x < 1 || x > 9 {\n   |                ^\n   |                |\n\
    \   |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&1`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprc7raf4z.rs:18:25\n\
    \   |\n18 |         if x < 1 || x > 9 {\n   |                         ^\n   |\
    \                         |\n   |                         expected `&isize`, found\
    \ integer\n   |                         help: consider borrowing here: `&9`\n\n\
    error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprc7raf4z.rs:21:9\n\
    \   |\n21 |         arr[x - 1] = \"One\";\n   |         ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprc7raf4z.rs:22:9\n   |\n22 |         arr[x\
    \ - 2] = \"Two\";\n   |         ^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmprc7raf4z.rs:23:9\n   |\n23 |         arr[x - 3] = \"Three\";\n\
    \   |         ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprc7raf4z.rs:24:9\n\
    \   |\n24 |         arr[x - 4] = \"Four\";\n   |         ^^"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut reversed = arr;\n    reversed.sort();\n    for i in 0..(reversed.len()\
    \ - 1) {\n        let mut j = i;\n        while j > 0 && reversed[j - 1] > reversed[j]\
    \ {\n            j -= 1;\n        }\n        result.push(by_digit(reversed[j],\
    \ &mut reversed[j..]));\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpasr_s35z.rs:23:21\n\
    \   |\n23 |         result.push(by_digit(reversed[j], &mut reversed[j..]));\n\
    \   |                     ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut reversed\
    \ = digits.iter().cloned().rev().collect::<Vec<_>>();\n    let mut i = 0;\n  \
    \  while i < reversed.len() {\n        let mut j = reversed.len() - 1;\n     \
    \   while j >= i {\n            if reversed[j] < 10 {\n                result.push(by_digit(digits[reversed[j]]));\n\
    \                j -= 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpbdzum28r.rs:23:29\n\
    \   |\n23 |                 result.push(by_digit(digits[reversed[j]]));\n   |\
    \                             ^^^^^^^^ not found in this scope\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbdzum28r.rs:23:38\n\
    \   |\n23 |                 result.push(by_digit(digits[reversed[j]]));\n   |\
    \                                      ^^^^^^^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr.clone();\n\
    \    arr.sort();\n    arr.sort_by_key(|x| {\n        match x {\n            1\
    \ => 1,\n            2 => 2,\n            3 => 3,\n            4 => 4,\n     \
    \       5 => 5,\n            6 => 6,\n            7 => 7,\n            8 => 8,\n\
    \            9 => 9,\n            _ => 0,\n        }\n    });\n    arr.iter().map(|x|\
    \ {\n        match x {\n            1 => \"One\",\n            2 => \"Two\",\n\
    \            3 => \"Three\",\n            4 => \"Four\",\n            5 => \"\
    Five\",\n            6 => \"Six\",\n            7 => \"Seven\",\n            8\
    \ => \"Eight\",\n            9 => \"Nine\",\n            _ => \"\",\n        }\n\
    \    }).collect()\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpgpj230iw.rs:44:8\n     |\n44 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                result.push(by_length(arr.iter().skip(j).rev()));\n\
    \                break;\n            }\n            j += 1;\n        }\n     \
    \   i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6pw44ecg.rs:29:39\n   |\n\
    29 |                 result.push(by_length(arr.iter().skip(j).rev()));\n   | \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found struct `Rev`\n   |\n   = note: expected struct `Vec<isize>`\n \
    \             found struct `Rev<Skip<std::slice::Iter<'_, isize>>>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6pw44ecg.rs:36:5\n   |\n11 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |                                  -----------\
    \ expected `Vec<String>` because of return type\n...\n36 |     result\n   |  \
    \   ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    if arr.len() == 0 {\n        return result;\n\
    \    }\n    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n\
    \        while j < arr.len() {\n            if arr[j] < 10 {\n               \
    \ result.push(\"One\");\n                break;\n            }\n            if\
    \ arr[j] < 100 {\n                result.push(\"Two\");\n                break;\n\
    \            }\n            if arr[j] < 1000 {\n                result.push(\"\
    Three\");\n                break;\n            }\n            if arr[j] < 10000\
    \ {\n                result.push(\"Four\");\n                break;\n        \
    \    }\n            if arr[j] < 100000 {\n                result.push(\"Five\"\
    );\n                break;\n            }\n            if arr[j] < 1000000 {\n\
    \                result.push(\"Six\");\n                break;\n            }\n\
    \            if arr[j] < 10000000 {\n                result.push(\"Seven\");\n\
    \                break;\n            }\n            if arr[j] < 100000000 {\n\
    \                result.push(\"Eight\");\n                break;\n           \
    \ }\n            if arr[j] < 1000000000 {\n                result.push(\"Nine\"\
    );\n                break;\n            }\n            if arr[j] < 10000000000\
    \ {\n                result.push(\"Ten\");\n                break;\n         \
    \   }\n            if arr[j] < 100000000000 {\n                result.push(\"\
    Eleven\");\n                break;\n            }\n            if arr[j] < 1000000000000\
    \ {\n                result.push(\"Twelve\");\n                break;\n      \
    \      }\n            if arr[j] < 10000000000000 {\n                result.push(\"\
    Thirteen\");\n                break;\n            }\n            if arr[j] < 100000000000000\
    \ {\n                result.push(\"Fourteen\");\n                break;\n    \
    \        }\n            if arr[j] < 1000000000000000 {\n                result.push(\"\
    Fifteen\");\n                break;\n            }\n            if arr[j] < 10000000000000000\
    \ {\n                result.push(\"Sixteen\");\n                break;\n     \
    \       }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Seventeen\");\n                break;\n            }\n            if arr[j] <\
    \ 100000000000000000 {\n                result.push(\"Eighteen\");\n         \
    \       break;\n            }\n            if arr[j] < 100000000000000000 {\n\
    \                result.push(\"Nineteen\");\n                break;\n        \
    \    }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Twenty\");\n                break;\n            }\n            if arr[j] < 100000000000000000\
    \ {\n                result.push(\"Twenty one\");\n                break;\n  \
    \          }\n            if arr[j] < 100000000000000000 {\n                result.push(\"\
    Twenty two\");\n                break;\n            }\n            if arr[j] <\
    \ 100000000000000000 {\n                result.push(\"Twenty three\");\n     \
    \           break;\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp8ljlohba.rs:120:3\n\
    \    |\n11  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n17  |     while\
    \ i < arr.len() {\n    |                         - unclosed delimiter\n18  | \
    \        let mut j = i;\n19  |         while j < arr.len() {\n    |          \
    \                   - unclosed delimiter\n...\n108 |             if arr[j] < 100000000000000000\
    \ {\n    |                                            - this delimiter might not\
    \ be properly closed...\n...\n111 | }\n    | - ...as it matches this but it has\
    \ different indentation\n...\n120 | }\n    |   ^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8ljlohba.rs:21:29\n   |\n21 |                 result.push(\"One\"\
    );\n   |                             ^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                             |\n   |                   \
    \          expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8ljlohba.rs:25:29\n   |\n25 |                 result.push(\"\
    Two\");\n   |                             ^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                             |\n   |           \
    \                  expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8ljlohba.rs:29:29\n   |\n29 |                 result.push(\"\
    Three\");\n   |                             ^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                             |\n   |           \
    \                  expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8ljlohba.rs:33:29\n   |\n33 |                 result.push(\"\
    Four\");\n   |                             ^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                             |\n   |           \
    \                  expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8ljlohba.rs:37:29\n   |\n37 |                 result.push(\"\
    Five\");\n   |                      "
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n        }\n   \
    \     result.push(&arr[..j]);\n        i = j;\n    }\n    if i == 0 {\n      \
    \  result.push(&[]);\n    }\n    result.reverse();\n    for i in 0..result.len()\
    \ {\n        result[i] = match result[i] {\n            1 => \"One\",\n      \
    \      2 => \"Two\",\n            3 => \"Three\",\n            4 => \"Four\",\n\
    \            5 => \"Five\",\n            6 => \"Six\",\n            7 => \"Seven\"\
    ,\n            8 => \"Eight\",\n            9 => \"Nine\",\n            _ => panic!(\"\
    Invalid number: {}\", result[i]),\n        };\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8o5eim2j.rs:31:13\n   |\n\
    30 |         result[i] = match result[i] {\n   |                           ---------\
    \ this expression has type `&[isize]`\n31 |             1 => \"One\",\n   |  \
    \           ^ expected slice `[isize]`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8o5eim2j.rs:32:13\n   |\n30 |         result[i] = match\
    \ result[i] {\n   |                           --------- this expression has type\
    \ `&[isize]`\n31 |             1 => \"One\",\n32 |             2 => \"Two\",\n\
    \   |             ^ expected slice `[isize]`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8o5eim2j.rs:33:13\n   |\n30 |         result[i] = match\
    \ result[i] {\n   |                           --------- this expression has type\
    \ `&[isize]`\n...\n33 |             3 => \"Three\",\n   |             ^ expected\
    \ slice `[isize]`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8o5eim2j.rs:34:13\n\
    \   |\n30 |         result[i] = match result[i] {\n   |                      \
    \     --------- this expression has type `&[isize]`\n...\n34 |             4 =>\
    \ \"Four\",\n   |             ^ expected slice `[isize]`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8o5eim2j.rs:35:13\n   |\n30 |         result[i]\
    \ = match result[i] {\n   |                           --------- this expression\
    \ has type `&[isize]`\n...\n35 |             5 => \"Five\",\n   |            \
    \ ^ expected slice `[isize]`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8o5eim2j.rs:36:13\n   |\n30 |         result[i] = match result[i]\
    \ {\n   |                           --------- this expression has type `&[isize]`\n\
    ...\n36 |             6 => \"Six\",\n   |             ^ expected slice `[isize]`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8o5eim2j.rs:37:13\n\
    \   |\n30 |         result[i] = match result[i] {\n   |                      \
    \     --------- this expression has type `&[isize]`\n...\n37 |             7 =>\
    \ \"Seven\",\n   |             ^ expected slice `[isize]`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8o5eim2j."
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            j = j + 1;\n        }\n        if\
    \ j - i > 1 {\n            result.push(by_length(arr.split_to(j - i).rev()));\n\
    \        }\n        result.push(by_name(arr.split_to(j).rev()));\n        i =\
    \ j;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpq_gtbypa.rs:28:21\n\
    \   |\n28 |         result.push(by_name(arr.split_to(j).rev()));\n   |       \
    \              ^^^^^^^ not found in this scope\n\nerror[E0599]: no method named\
    \ `split_to` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpq_gtbypa.rs:26:39\n\
    \   |\n26 |             result.push(by_length(arr.split_to(j - i).rev()));\n \
    \  |                                       ^^^^^^^^ help: there is an associated\
    \ function with a similar name: `split`\n\nerror[E0599]: no method named `split_to`\
    \ found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpq_gtbypa.rs:28:33\n\
    \   |\n28 |         result.push(by_name(arr.split_to(j).rev()));\n   |       \
    \                          ^^^^^^^^ help: there is an associated function with\
    \ a similar name: `split`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq_gtbypa.rs:31:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n31 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let len = arr[i] - 1;\n\
    \        if len < 1 || len > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        result.push(by_length(arr.iter().skip(i).take(len).collect()));\n\
    \        i += len;\n    }\n    if arr.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut i = 0;\n    while i < arr.len() {\n        let len = arr[i]\
    \ - 1;\n        if len < 1 || len > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        result.push(by_name(arr.iter().skip(i).take(len).collect()));\n\
    \        i += len;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpsxd9ww5p.rs:36:21\n\
    \   |\n36 |         result.push(by_name(arr.iter().skip(i).take(len).collect()));\n\
    \   |                     ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsxd9ww5p.rs:23:55\n   |\n23 |         result.push(by_length(arr.iter().skip(i).take(len).collect()));\n\
    \   |                                                       ^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n23 |         result.push(by_length(arr.iter().skip(i).take(len.try_into().unwrap()).collect()));\n\
    \   |                                                          ++++++++++++++++++++\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpsxd9ww5p.rs:23:31\n     |\n\
    23   |         result.push(by_length(arr.iter().skip(i).take(len).collect()));\n\
    \     |                     --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                     |\n     |                     required by a bound\
    \ introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsxd9ww5p.rs:24:14\n   |\n24 |         i += len;\n\
    \   |              ^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `usize`\n  --> /tmp/tmpsxd9ww5p.rs:24:11\n   |\n24 | \
    \        i += len;\n   |           ^^ no implementation for `usize += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            "
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() && arr[j] < 10 {\n            j += 1\n        }\n    \
    \    if j == i {\n            break;\n        }\n        let mut k = j;\n    \
    \    while k < arr.len() && arr[k] > 9 {\n            k += 1\n        }\n    \
    \    if k == j {\n            break;\n        }\n        result.push(by_length(arr.split_off(j,\
    \ k).reverse()));\n        i = k;\n    }\n    if i == arr.len() {\n        result.push(by_length(arr.split_off(i,\
    \ i).reverse()));\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 2 arguments were supplied\n\
    \    --> /tmp/tmpkgy5r4pj.rs:32:35\n     |\n32   |         result.push(by_length(arr.split_off(j,\
    \ k).reverse()));\n     |                                   ^^^^^^^^^ -  - supplied\
    \ 2 arguments\n     |                                   |\n     |            \
    \                       expected 1 argument\n     |\nnote: associated function\
    \ defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkgy5r4pj.rs:32:31\n\
    \   |\n32 |         result.push(by_length(arr.split_off(j, k).reverse()));\n \
    \  |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \  found unit type `()`\n\nerror[E0061]: this function takes 1 argument but 2\
    \ arguments were supplied\n    --> /tmp/tmpkgy5r4pj.rs:36:35\n     |\n36   | \
    \        result.push(by_length(arr.split_off(i, i).reverse()));\n     |      \
    \                             ^^^^^^^^^ -  - supplied 2 arguments\n     |    \
    \                               |\n     |                                   expected\
    \ 1 argument\n     |\nnote: associated function defined here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkgy5r4pj.rs:36:31\n   |\n36 |         result.push(by_length(arr.split_off(i,\
    \ i).reverse()));\n   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkgy5r4pj.rs:38:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n38 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut digits_len\
    \ = digits.len();\n    let mut i = 0;\n    while i < digits_len {\n        if\
    \ digits[i] < 1 || digits[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j < digits_len {\n         \
    \   if digits[j] == digits[i] {\n                break;\n            }\n     \
    \       j += 1;\n        }\n        let mut reversed = vec![];\n        reversed.extend_from_slice(&digits[..j]);\n\
    \        reversed.extend_from_slice(&digits[j..]);\n        result.push(by_digits(reversed));\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digits` in this scope\n  --> /tmp/tmp7jtulg4e.rs:34:21\n\
    \   |\n34 |         result.push(by_digits(reversed));\n   |                  \
    \   ^^^^^^^^^ help: a local variable with a similar name exists: `digits`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == i {\n      \
    \          result.push(by_length(arr.iter().skip(j).rev().collect()));\n     \
    \           break;\n            }\n            j += 1\n        }\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwrebs1b9.rs:24:26\n   |\n\
    24 |             if arr[j] == i {\n   |                          ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n24 |             if arr[j] == i.try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror[E0277]: a value\
    \ of type `Vec<isize>` cannot be built from an iterator over elements of type\
    \ `&isize`\n    --> /tmp/tmpwrebs1b9.rs:25:39\n     |\n25   |                \
    \ result.push(by_length(arr.iter().skip(j).rev().collect()));\n     |        \
    \                     --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\
    \                             |\n     |                             required by\
    \ a bound introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwrebs1b9.rs:32:5\n   |\n11 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |                                  -----------\
    \ expected `Vec<String>` because of return type\n...\n32 |     result\n   |  \
    \   ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut reversed = arr;\n    reversed.sort();\n    for &n in &reversed {\n\
    \        if n >= 1 && n <= 9 {\n            result.push(by_digit(n));\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpair_5hl4.rs:20:25\n\
    \   |\n20 |             result.push(by_digit(n));\n   |                      \
    \   ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n        }\n   \
    \     result.push(by_length(arr.subslice(i, j)));\n        i = j;\n    }\n   \
    \ if i == 0 {\n        result.push(\"One\");\n    }\n    if i == arr.len() - 1\
    \ {\n        result.push(\"Nine\");\n    }\n    if i != arr.len() - 1 {\n    \
    \    result.push(by_length(arr.subslice(i + 1, arr.len())));\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `subslice` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpi6w3np9_.rs:22:35\n   |\n22 |         result.push(by_length(arr.subslice(i,\
    \ j)));\n   |                                   ^^^^^^^^ help: there is an associated\
    \ function with a similar name: `splice`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpi6w3np9_.rs:26:21\n   |\n26 |         result.push(\"One\");\n  \
    \ |                     ^^^^^ expected struct `Vec`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n           found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpi6w3np9_.rs:29:21\n   |\n29 |\
    \         result.push(\"Nine\");\n   |                     ^^^^^^ expected struct\
    \ `Vec`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n      \
    \     found reference `&'static str`\n\nerror[E0599]: no method named `subslice`\
    \ found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpi6w3np9_.rs:32:35\n\
    \   |\n32 |         result.push(by_length(arr.subslice(i + 1, arr.len())));\n\
    \   |                                   ^^^^^^^^ help: there is an associated\
    \ function with a similar name: `splice`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpi6w3np9_.rs:34:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n34 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<Vec<String>>`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        let mut k = j;\n        while k < arr.len() && arr[k] > arr[k\
    \ + 1] {\n            k += 1;\n        }\n        let mut reversed = vec![0; arr.len()\
    \ - j];\n        reversed.copy_from_slice(&arr[j..k]);\n        reversed.reverse();\n\
    \        let mut reversed_str = String::new();\n        for &n in reversed {\n\
    \            reversed_str.push_str(&names[n]);\n        }\n        result.push(reversed_str);\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmplmrer13d.rs:35:36\n\
    \   |\n35 |             reversed_str.push_str(&names[n]);\n   |              \
    \                      ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplmrer13d.rs:34:13\n   |\n34 |         for &n in reversed\
    \ {\n   |             ^^    -------- this expression has type `Option<isize>`\n\
    \   |             |\n   |             expected `isize`, found reference\n   |\
    \             help: you can probably remove the explicit borrow: `n`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut len = arr.len();\n    if len == 0 {\n\
    \        return result;\n    }\n    let mut i = 0;\n    while i < len {\n    \
    \    let mut j = i;\n        while j < len {\n            if arr[j] < 1 {\n  \
    \              j += 1;\n                continue;\n            }\n           \
    \ if arr[j] > 9 {\n                j += 1;\n                continue;\n      \
    \      }\n            if arr[j] == 1 {\n                result.push(\"One\");\n\
    \                i += 1;\n                break;\n            }\n            if\
    \ arr[j] == 2 {\n                result.push(\"Two\");\n                i += 1;\n\
    \                break;\n            }\n            if arr[j] == 3 {\n       \
    \         result.push(\"Three\");\n                i += 1;\n                break;\n\
    \            }\n            if arr[j] == 4 {\n                result.push(\"Four\"\
    );\n                i += 1;\n                break;\n            }\n         \
    \   if arr[j] == 5 {\n                result.push(\"Five\");\n               \
    \ i += 1;\n                break;\n            }\n            if arr[j] == 6 {\n\
    \                result.push(\"Six\");\n                i += 1;\n            \
    \    break;\n            }\n            if arr[j] == 7 {\n                result.push(\"\
    Seven\");\n                i += 1;\n                break;\n            }\n  \
    \          if arr[j] == 8 {\n                result.push(\"Eight\");\n       \
    \         i += 1;\n                break;\n            }\n            if arr[j]\
    \ == 9 {\n                result.push(\"Nine\");\n                i += 1;\n  \
    \              break;\n            }\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpulxxms0d.rs:30:29\n   |\n\
    30 |                 result.push(\"One\");\n   |                             ^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \           |\n   |                             expected struct `String`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpulxxms0d.rs:35:29\n\
    \   |\n35 |                 result.push(\"Two\");\n   |                      \
    \       ^^^^^- help: try using a conversion method: `.to_string()`\n   |     \
    \                        |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpulxxms0d.rs:40:29\n\
    \   |\n40 |                 result.push(\"Three\");\n   |                    \
    \         ^^^^^^^- help: try using a conversion method: `.to_string()`\n   | \
    \                            |\n   |                             expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpulxxms0d.rs:45:29\n\
    \   |\n45 |                 result.push(\"Four\");\n   |                     \
    \        ^^^^^^- help: try using a conversion method: `.to_string()`\n   |   \
    \                          |\n   |                             expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpulxxms0d.rs:50:29\n\
    \   |\n50 |                 result.push(\"Five\");\n   |                     \
    \        ^^^^^^- help: try using a conversion method: `.to_string()`\n   |   \
    \                          |\n   |                             expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpulxxms0d.rs:55:29\n\
    \   |\n55 |                 result.push(\"Six\");\n   |                      \
    \       ^^^^^- help: try using a conversion method: `.to_string()`\n   |     \
    \                        |\n   |                             expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpulxxms0d.rs:60:29\n\
    \   |\n60 |                 result.push(\"Seven\");\n   |                    \
    \         ^^^^^^^- help: try using a conversion meth"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() && arr[j] < 10 {\n            j += 1\n        }\n    \
    \    if j == i {\n            break;\n        }\n        let mut k = j;\n    \
    \    while k < arr.len() && arr[k] > 9 {\n            k += 1\n        }\n    \
    \    if k == j {\n            break;\n        }\n        let mut reversed = vec![arr[i],\
    \ arr[j], arr[k]];\n        reversed.reverse();\n        for i in 0..(reversed.len()\
    \ - 1) {\n            let mut j = i;\n            while j < reversed.len() &&\
    \ reversed[j] < 10 {\n                j += 1\n            }\n            if j\
    \ == i {\n                break;\n            }\n            let mut k = j;\n\
    \            while k < reversed.len() && reversed[k] > 9 {\n                k\
    \ += 1\n            }\n            if k == j {\n                break;\n     \
    \       }\n            result.push(reversed[i]);\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphbm8urbi.rs:53:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    53 |     result\n   |     ^^^^^^ expected struct `String`, found `isize`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        result.push(by_length(arr.subslice(i..j)));\n        i = j;\n\
    \    }\n    if i == arr.len() {\n        result.push(by_length(arr.subslice(i..)));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `subslice` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp1hwwd5m9.rs:26:35\n   |\n26 |         result.push(by_length(arr.subslice(i..j)));\n\
    \   |                                   ^^^^^^^^ method not found in `Vec<isize>`\n\
    \nerror[E0599]: no method named `subslice` found for struct `Vec<isize>` in the\
    \ current scope\n  --> /tmp/tmp1hwwd5m9.rs:30:35\n   |\n30 |         result.push(by_length(arr.subslice(i..)));\n\
    \   |                                   ^^^^^^^^ method not found in `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1hwwd5m9.rs:32:5\n   |\n11 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n32 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j < arr.len() {\n          \
    \  if arr[j] > arr[j + 1] {\n                let tmp = arr[j];\n             \
    \   arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n            }\n \
    \           j += 1;\n        }\n        let mut tmp = \"\";\n        while i <\
    \ j {\n            tmp += &name[arr[i]];\n            i += 1;\n        }\n   \
    \     result.push(tmp);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `name` in this scope\n  --> /tmp/tmpc__gbkd0.rs:30:21\n\
    \   |\n30 |             tmp += &name[arr[i]];\n   |                     ^^^^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc__gbkd0.rs:35:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n35 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] > arr[i] {\n  \
    \              break;\n            }\n            i += 1;\n            j += 1\n\
    \        }\n        let mut k = i;\n        while k < arr.len() {\n          \
    \  if arr[k] < arr[i] {\n                break;\n            }\n            i\
    \ += 1;\n            k += 1\n        }\n        let mut l = i;\n        while\
    \ l < arr.len() {\n            if arr[l] > arr[i] {\n                break;\n\
    \            }\n            i += 1;\n            l += 1\n        }\n        let\
    \ mut m = i;\n        while m < arr.len() {\n            if arr[m] < arr[i] {\n\
    \                break;\n            }\n            i += 1;\n            m +=\
    \ 1\n        }\n        let mut n = i;\n        while n < arr.len() {\n      \
    \      if arr[n] > arr[i] {\n                break;\n            }\n         \
    \   i += 1;\n            n += 1\n        }\n        let mut o = i;\n        while\
    \ o < arr.len() {\n            if arr[o] < arr[i] {\n                break;\n\
    \            }\n            i += 1;\n            o += 1\n        }\n        let\
    \ mut p = i;\n        while p < arr.len() {\n            if arr[p] > arr[i] {\n\
    \                break;\n            }\n            i += 1;\n            p +=\
    \ 1\n        }\n        let mut q = i;\n        while q < arr.len() {\n      \
    \      if arr[q] < arr[i] {\n                break;\n            }\n         \
    \   i += 1;\n            q += 1\n        }\n        let mut r = i;\n        while\
    \ r < arr.len() {\n            if arr[r] > arr[i] {\n                break;\n\
    \            }\n            i += 1;\n            r += 1\n        }\n        let\
    \ mut s = i;\n        while s < arr.len() {\n            if arr[s] < arr[i] {\n\
    \                break;\n            }\n            i += 1;\n            s +=\
    \ 1\n        }\n        let mut t = i;\n        while t < arr.len() {\n      \
    \      if arr[t] > arr[i] {\n                break;\n            }\n         \
    \   i += 1;\n            t += 1\n        }\n        let mut u = i;\n        while\
    \ u < arr.len() {\n            if arr[u] < arr[i] {\n                break;\n\
    \            }\n            i += 1;\n            u += 1\n        }\n        let\
    \ mut v = i;\n        while v < arr.len() {\n            if arr[v] > arr[i] {\n\
    \                break;\n            }\n            i += 1;\n            v +=\
    \ 1\n        }\n        let mut w = i;\n        while w < \n}\n\nfn main() {\n\
    \    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5,\
    \ 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpgxy6jkuo.rs:137:3\n\
    \    |\n11  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n17  |     while\
    \ i < arr.len() {\n    |                         - this delimiter might not be\
    \ properly closed...\n...\n128 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n137 | }\n    |   ^\n\nerror: expected expression, found `}`\n\
    \   --> /tmp/tmpgxy6jkuo.rs:128:1\n    |\n127 |         while w < \n    |    \
    \     ----- while parsing the condition of this `while` expression\n128 | }\n\
    \    | ^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgxy6jkuo.rs:11:34\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------\
    \                     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == arr[j - 1] {\n\
    \                j += 1;\n                continue;\n            }\n         \
    \   break;\n        }\n        let mut k = i;\n        while k >= 0 && arr[k]\
    \ == arr[k - 1] {\n            k -= 1;\n        }\n        if k == -1 {\n    \
    \        i += 1;\n            continue;\n        }\n        result.push(by_length(arr.iter().skip(i).take(k\
    \ - i)));\n        i = k;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0600]: cannot apply unary operator `-` to type `usize`\n  --> /tmp/tmprkftkbjq.rs:34:17\n\
    \   |\n34 |         if k == -1 {\n   |                 ^^\n   |              \
    \   |\n   |                 cannot apply unary operator `-`\n   |            \
    \     help: you may have meant the maximum value of `usize`: `usize::MAX`\n  \
    \ |\n   = note: unsigned values cannot be negated\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprkftkbjq.rs:38:31\n   |\n38 |         result.push(by_length(arr.iter().skip(i).take(k\
    \ - i)));\n   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `std::iter::Take`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `std::iter::Take<Skip<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprkftkbjq.rs:41:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n41 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0600.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       let mut j = i;\n        while j < arr.len() {\n            if arr[j] <\
    \ 1 || arr[j] > 9 {\n                j += 1;\n                continue;\n    \
    \        }\n            result.push(by_digit(arr[j]));\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpclvwp7ep.rs:21:25\n\
    \   |\n21 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n        }\n   \
    \     result.push(by_length(arr.iter().take(j).rev()));\n        result.push(by_length(arr.iter().skip(j).rev()));\n\
    \        result.push(by_length(arr.iter().take(j).rev()));\n        result.push(by_length(arr.iter().skip(j).rev()));\n\
    \        i += j - 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp34qj5na.rs:22:31\n   |\n\
    22 |         result.push(by_length(arr.iter().take(j).rev()));\n   |         \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct\
    \ `Rev`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct\
    \ `Rev<std::iter::Take<std::slice::Iter<'_, isize>>>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpp34qj5na.rs:23:31\n   |\n23 |         result.push(by_length(arr.iter().skip(j).rev()));\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Rev`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Rev<Skip<std::slice::Iter<'_, isize>>>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp34qj5na.rs:24:31\n   |\n24 |         result.push(by_length(arr.iter().take(j).rev()));\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Rev`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Rev<std::iter::Take<std::slice::Iter<'_, isize>>>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp34qj5na.rs:25:31\n   |\n25 |         result.push(by_length(arr.iter().skip(j).rev()));\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Rev`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Rev<Skip<std::slice::Iter<'_, isize>>>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp34qj5na.rs:28:5\n   |\n11 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |                                  -----------\
    \ expected `Vec<String>` because of return type\n...\n28 |     result\n   |  \
    \   ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] > arr[j + 1] {\n\
    \                let tmp = arr[j];\n                arr[j] = arr[j + 1];\n   \
    \             arr[j + 1] = tmp;\n            }\n            j += 1;\n        }\n\
    \        let mut tmp: Vec<String> = vec![];\n        for &n in arr {\n       \
    \     tmp.push(by_digit(n));\n        }\n        result = result.concat(tmp);\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6iua2773.rs:33:22\n\
    \   |\n33 |             tmp.push(by_digit(n));\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6iua2773.rs:32:13\n\
    \   |\n32 |         for &n in arr {\n   |             ^^    --- this expression\
    \ has type `Option<isize>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `n`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \   --> /tmp/tmp6iua2773.rs:35:25\n    |\n35  |         result = result.concat(tmp);\n\
    \    |                         ^^^^^^ --- supplied 1 argument\n    |         \
    \                |\n    |                         expected 0 arguments\n    |\n\
    note: associated function defined here\n\nerror[E0271]: type mismatch resolving\
    \ `<[String] as Concat<str>>::Output == Vec<String>`\n  --> /tmp/tmp6iua2773.rs:35:25\n\
    \   |\n35 |         result = result.concat(tmp);\n   |                       \
    \  ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected\
    \ struct `String`\n              found struct `Vec<String>`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0271,\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    arr.sort_by_key(|x| x.cmp(&1));\n    arr.sort_by_key(|x| x.cmp(&9));\n  \
    \  arr.sort_by_key(|x| x.cmp(&0));\n    arr.iter().map(|x| {\n        match x\
    \ {\n            1 => \"One\",\n            2 => \"Two\",\n            3 => \"\
    Three\",\n            4 => \"Four\",\n            5 => \"Five\",\n           \
    \ 6 => \"Six\",\n            7 => \"Seven\",\n            8 => \"Eight\",\n  \
    \          9 => \"Nine\",\n            _ => panic!(\"Invalid number in array:\
    \ {}\", x),\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmp_cmfl82y.rs:32:8\n     |\n32 \
    \  |     }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot\
    \ be built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr.iter().cloned().collect::<Vec<_>>();\n\
    \    arr.sort_by_key(|x| x.checked_sub(1));\n    let mut result = vec![];\n  \
    \  for &i in arr {\n        if i > 9 {\n            result.push(by_length(vec![i\
    \ / 10, i % 10].iter().cloned().collect()));\n        } else {\n            result.push(by_length(vec![i\
    \ / 10, i % 10].iter().cloned().collect()));\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyezrkpwd.rs:18:9\n   |\n\
    18 |     for &i in arr {\n   |         ^^    --- this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyezrkpwd.rs:25:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n25 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<Vec<String>>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == i {\n      \
    \          result.push(by_name(arr[j]));\n                i += 1;\n          \
    \      break;\n            }\n            j += 1\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpd0wb1io3.rs:25:29\n\
    \   |\n25 |                 result.push(by_name(arr[j]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd0wb1io3.rs:24:26\n   |\n24 |             if arr[j] == i {\n  \
    \ |                          ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n24 |             if arr[j] == i.try_into().unwrap() {\n   |     \
    \                      ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut temp: Vec<String> = vec![];\n        while j < arr.len()\
    \ {\n            if arr[j] == i {\n                temp.push(&names[j]);\n   \
    \             j += 1;\n                break;\n            }\n            j +=\
    \ 1;\n        }\n        result.push(&temp);\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmpcxqo_mzk.rs:27:28\n\
    \   |\n27 |                 temp.push(&names[j]);\n   |                      \
    \      ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcxqo_mzk.rs:26:26\n   |\n26 |             if arr[j] == i {\n   |   \
    \                       ^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n26 |             if arr[j] == i.try_into().unwrap() {\n   |           \
    \                ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcxqo_mzk.rs:36:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n36 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found `&Vec<String>`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&Vec<String>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let len = arr[i] - 1;\n\
    \        if len < 1 || len > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        result.push(by_length(arr.iter().skip(i).take(len).cloned().collect()));\n\
    \        i += len;\n    }\n    if arr.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut i = 0;\n    while i < arr.len() {\n        let len = arr[i]\
    \ - 1;\n        if len < 1 || len > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        result.push(by_name(arr.iter().skip(i).take(len).cloned().collect()));\n\
    \        i += len;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp8vt1uqmn.rs:36:21\n\
    \   |\n36 |         result.push(by_name(arr.iter().skip(i).take(len).cloned().collect()));\n\
    \   |                     ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8vt1uqmn.rs:23:55\n   |\n23 |         result.push(by_length(arr.iter().skip(i).take(len).cloned().collect()));\n\
    \   |                                                       ^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n23 |         result.push(by_length(arr.iter().skip(i).take(len.try_into().unwrap()).cloned().collect()));\n\
    \   |                                                          ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8vt1uqmn.rs:24:14\n   |\n24 |\
    \         i += len;\n   |              ^^^ expected `usize`, found `isize`\n\n\
    error[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmp8vt1uqmn.rs:24:11\n\
    \   |\n24 |         i += len;\n   |           ^^ no implementation for `usize\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8vt1uqmn.rs:36:53\n\
    \   |\n36 |         result.push(by_name(arr.iter().skip(i).take(len).cloned().collect()));\n\
    \   |                                                     ^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n36 |         result.push(by_name(arr.iter().skip(i).take(len.try_into().unwrap()).cloned().collect()));\n\
    \   |                                              "
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut reversed\
    \ = digits.iter().cloned().rev().collect::<Vec<_>>();\n    let mut i = 0;\n  \
    \  while i < digits.len() {\n        if reversed[i] < 10 {\n            result.push(by_digit(reversed[i],\
    \ &digits, &mut i));\n        } else {\n            result.push(by_digit(reversed[i]\
    \ - 10, &digits, &mut i));\n        }\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpd_jwdx_3.rs:21:25\n\
    \   |\n21 |             result.push(by_digit(reversed[i], &digits, &mut i));\n\
    \   |                         ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `by_digit` in this scope\n  --> /tmp/tmpd_jwdx_3.rs:23:25\n\
    \   |\n23 |             result.push(by_digit(reversed[i] - 10, &digits, &mut i));\n\
    \   |                         ^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n        }\n   \
    \     result.push(&arr[..j]);\n        i = j;\n    }\n    if i == 0 {\n      \
    \  result.push(&[]);\n    }\n    result.reverse();\n    for i in 0..result.len()\
    \ {\n        result[i] = match result[i] {\n            1 => \"One\",\n      \
    \      2 => \"Two\",\n            3 => \"Three\",\n            4 => \"Four\",\n\
    \            5 => \"Five\",\n            6 => \"Six\",\n            7 => \"Seven\"\
    ,\n            8 => \"Eight\",\n            9 => \"Nine\",\n            _ => panic!(\"\
    Unexpected number in array: {}\", result[i]),\n        };\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsfbaxoci.rs:31:13\n   |\n\
    30 |         result[i] = match result[i] {\n   |                           ---------\
    \ this expression has type `&[isize]`\n31 |             1 => \"One\",\n   |  \
    \           ^ expected slice `[isize]`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsfbaxoci.rs:32:13\n   |\n30 |         result[i] = match\
    \ result[i] {\n   |                           --------- this expression has type\
    \ `&[isize]`\n31 |             1 => \"One\",\n32 |             2 => \"Two\",\n\
    \   |             ^ expected slice `[isize]`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsfbaxoci.rs:33:13\n   |\n30 |         result[i] = match\
    \ result[i] {\n   |                           --------- this expression has type\
    \ `&[isize]`\n...\n33 |             3 => \"Three\",\n   |             ^ expected\
    \ slice `[isize]`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsfbaxoci.rs:34:13\n\
    \   |\n30 |         result[i] = match result[i] {\n   |                      \
    \     --------- this expression has type `&[isize]`\n...\n34 |             4 =>\
    \ \"Four\",\n   |             ^ expected slice `[isize]`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsfbaxoci.rs:35:13\n   |\n30 |         result[i]\
    \ = match result[i] {\n   |                           --------- this expression\
    \ has type `&[isize]`\n...\n35 |             5 => \"Five\",\n   |            \
    \ ^ expected slice `[isize]`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsfbaxoci.rs:36:13\n   |\n30 |         result[i] = match result[i]\
    \ {\n   |                           --------- this expression has type `&[isize]`\n\
    ...\n36 |             6 => \"Six\",\n   |             ^ expected slice `[isize]`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsfbaxoci.rs:37:13\n\
    \   |\n30 |         result[i] = match result[i] {\n   |                      \
    \     --------- this expression has type `&[isize]`\n...\n37 |             7 =>\
    \ \"Seven\",\n   |             ^ expected slice `[isize]`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsfbaxoci."
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == arr[i] {\n \
    \               j += 1;\n                continue;\n            }\n          \
    \  if arr[j] < arr[i] {\n                break;\n            }\n            result.push(by_length(vec![arr[i],\
    \ arr[j]]));\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_hl1lywb.rs:36:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    36 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut reversed\
    \ = digits.iter().cloned().rev().collect::<Vec<_>>();\n    let mut i = 0;\n  \
    \  while i < reversed.len() {\n        let mut j = i;\n        while j < reversed.len()\
    \ && reversed[j] == i + 1 {\n            j += 1\n        }\n        if j == reversed.len()\
    \ {\n            break;\n        }\n        let mut digit = reversed[j];\n   \
    \     let mut digit = digit.to_string();\n        let mut digit = digit.chars().nth(digit\
    \ as usize).unwrap();\n        let mut digit = digit.to_string();\n        let\
    \ mut digit = digit.chars().nth(digit as usize).unwrap();\n        let mut digit\
    \ = digit.to_string();\n        let mut digit = digit.chars().nth(digit as usize).unwrap();\n\
    \        let mut digit = digit.to_string();\n        let mut digit = digit.chars().nth(digit\
    \ as usize).unwrap();\n        let mut digit = digit.to_string();\n        let\
    \ mut digit = digit.chars().nth(digit as usize).unwrap();\n        let mut digit\
    \ = digit.to_string();\n        let mut digit = digit.chars().nth(digit as usize).unwrap();\n\
    \        let mut digit = digit.to_string();\n        let mut digit = digit.chars().nth(digit\
    \ as usize).unwrap();\n        let mut digit = digit.to_string();\n        let\
    \ mut digit = digit.chars().nth(digit as usize).unwrap();\n        let mut digit\
    \ = digit.to_string();\n        let mut digit = digit.chars().nth(digit as usize).unwrap();\n\
    \        let mut digit = digit.to_string();\n        let mut digit = digit.chars().nth(digit\
    \ as usize).unwrap();\n        let mut digit = digit.to_string();\n        let\
    \ mut digit = digit.chars().nth(digit as usize).unwrap();\n        let mut digit\
    \ = digit.to_string();\n        let mut digit = digit.chars().nth(digit as usize).unwrap();\n\
    \        let mut digit = digit.to_string();\n        let mut digit = digit.chars().nth(digit\
    \ as usize).unwrap();\n        let mut digit = digit.to_string();\n        let\
    \ mut digit = \n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp5oj94cnb.rs:65:3\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                                 - unclosed delimiter\n...\n19 |     while i\
    \ < reversed.len() {\n   |                              - this delimiter might\
    \ not be properly closed...\n...\n56 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n65 | }\n   |   ^\n\nerror: expected expression,\
    \ found `}`\n  --> /tmp/tmp5oj94cnb.rs:56:1\n   |\n56 | }\n   | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5oj94cnb.rs:21:52\n   |\n21 |\
    \         while j < reversed.len() && reversed[j] == i + 1 {\n   |           \
    \                                         ^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n21 |         while j < reversed.len() && reversed[j]\
    \ == (i + 1).try_into().unwrap() {\n   |                                     \
    \               +     +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5oj94cnb.rs:11:34\n   |\n11 | fn by_length(arr: Vec<isize>) ->\
    \ Vec<String> {\n   |    ---------                     ^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found unit type `()`\n\nerror[E0605]: non-primitive cast: `String`\
    \ as `usize`\n  --> /tmp/tmp5oj94cnb.rs:29:43\n   |\n29 |         let mut digit\
    \ = digit.chars().nth(digit as usize).unwrap();\n   |                        \
    \                   ^^^^^^^^^^^^^^ an `as` expression can only be used to convert\
    \ between primitive types or to coerce to a specific trait object\n\nerror[E0605]:\
    \ non-primitive cast: `String` as `usize`\n  --> /tmp/tmp5oj94cnb.rs:31:43\n \
    \  |\n31 |         let mut digit = digit.chars().nth(digit as usize).unwrap();\n\
    \   |                                           ^^^^^^^^^^^^^^ an `as` expression\
    \ can only be used to convert between primitive types or to coer"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr.to_owned();\n\
    \    arr.sort();\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n\
    \            continue;\n        }\n        let index = arr[i] - 1;\n        result.push(by_length(arr.iter().skip(i).take(index)));\n\
    \        i += index;\n    }\n    if arr.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut i = 0;\n    while i < arr.len() {\n        let index = arr[i]\
    \ - 1;\n        result.push(by_length(arr.iter().skip(i).take(index)));\n    \
    \    i += index;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn1q9b5ls.rs:25:55\n   |\n\
    25 |         result.push(by_length(arr.iter().skip(i).take(index)));\n   |   \
    \                                                    ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n25 |         result.push(by_length(arr.iter().skip(i).take(index.try_into().unwrap())));\n\
    \   |                                                            ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpn1q9b5ls.rs:25:31\n   |\n25 |\
    \         result.push(by_length(arr.iter().skip(i).take(index)));\n   |      \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `std::iter::Take`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `std::iter::Take<Skip<std::slice::Iter<'_, isize>>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpn1q9b5ls.rs:26:14\n   |\n26 |\
    \         i += index;\n   |              ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmpn1q9b5ls.rs:26:11\n\
    \   |\n26 |         i += index;\n   |           ^^ no implementation for `usize\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn1q9b5ls.rs:34:55\n\
    \   |\n34 |         result.push(by_length(arr.iter().skip(i).take(index)));\n\
    \   |                                                       ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n34 |         result.push(by_length(arr.iter("
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        result.push(by_length(arr.subslice(i, j)));\n        i = j;\n\
    \    }\n    if i == 0 {\n        result.push(\"One\");\n    }\n    if i == arr.len()\
    \ {\n        result.push(\"Nine\");\n    }\n    if i < arr.len() {\n        result.push(by_length(arr.subslice(i)));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `subslice` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpljt7pcv9.rs:26:35\n   |\n26 |         result.push(by_length(arr.subslice(i,\
    \ j)));\n   |                                   ^^^^^^^^ help: there is an associated\
    \ function with a similar name: `splice`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpljt7pcv9.rs:30:21\n   |\n30 |         result.push(\"One\");\n  \
    \ |                     ^^^^^ expected struct `Vec`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n           found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpljt7pcv9.rs:33:21\n   |\n33 |\
    \         result.push(\"Nine\");\n   |                     ^^^^^^ expected struct\
    \ `Vec`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n      \
    \     found reference `&'static str`\n\nerror[E0599]: no method named `subslice`\
    \ found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpljt7pcv9.rs:36:35\n\
    \   |\n36 |         result.push(by_length(arr.subslice(i)));\n   |           \
    \                        ^^^^^^^^ help: there is an associated function with a\
    \ similar name: `splice`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpljt7pcv9.rs:38:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n38 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpblwkfmtg.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                result.push(by_length_helper(arr,\
    \ i, j));\n                i += 1;\n                j += 1;\n                continue;\n\
    \            }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_length_helper` in this scope\n \
    \ --> /tmp/tmp96ods2pa.rs:29:29\n   |\n29 |                 result.push(by_length_helper(arr,\
    \ i, j));\n   |                             ^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    if arr.len() == 0 {\n        return result;\n\
    \    }\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 ||\
    \ arr[i] > 9 {\n            i += 1;\n            continue;\n        }\n      \
    \  let mut j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j\
    \ -= 1;\n        }\n        result.push(by_digit(arr[i], arr[j]));\n        i\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp60z426q_.rs:26:21\n\
    \   |\n26 |         result.push(by_digit(arr[i], arr[j]));\n   |             \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        result.push(by_length(arr.iter().take(j).rev().collect()));\n\
    \        result.push(by_length(arr.iter().skip(j).collect()));\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpnjeft4yy.rs:26:31\n     |\n\
    26   |         result.push(by_length(arr.iter().take(j).rev().collect()));\n \
    \    |                     --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                     |\n     |                     required by a bound\
    \ introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n    --> /tmp/tmpnjeft4yy.rs:27:31\n     |\n27   |        \
    \ result.push(by_length(arr.iter().skip(j).collect()));\n     |              \
    \       --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=&isize>`\n     |                   \
    \  |\n     |                     required by a bound introduced by this call\n\
    \     |\n     = help: the trait `FromIterator<&isize>` is not implemented for\
    \ `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpnjeft4yy.rs:30:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n30 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<Vec<String>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j],\
    \ &mut i));\n            j += 1;\n        }\n    }\n    result.reverse();\n  \
    \  result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpr8yg42bl.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j], &mut i));\n   |         \
    \                ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] > arr[j + 1] {\n\
    \                let tmp = arr[j];\n                arr[j] = arr[j + 1];\n   \
    \             arr[j + 1] = tmp;\n            }\n            j += 1;\n        }\n\
    \        let mut tmp: Vec<String> = vec![];\n        for &n in arr {\n       \
    \     tmp.push(by_digit(n));\n        }\n        result.push(tmp);\n        i\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp30nd5pza.rs:33:22\n\
    \   |\n33 |             tmp.push(by_digit(n));\n   |                      ^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp30nd5pza.rs:32:13\n\
    \   |\n32 |         for &n in arr {\n   |             ^^    --- this expression\
    \ has type `Option<isize>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `n`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp30nd5pza.rs:38:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    38 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let len = arr[i] - 1;\n\
    \        if len < 1 || len > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        result.push(by_length(arr.iter().skip(i).take(len).cloned()));\n\
    \        i += len;\n    }\n    if result.is_empty() {\n        return vec![];\n\
    \    }\n    let mut i = 0;\n    while i < result.len() {\n        let len = result[i]\
    \ - 1;\n        if len < 1 || len > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        result[i] = by_name(&result[i..i + len]);\n        i += len;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpgcb5370l.rs:36:21\n\
    \   |\n36 |         result[i] = by_name(&result[i..i + len]);\n   |          \
    \           ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgcb5370l.rs:23:55\n   |\n23 |         result.push(by_length(arr.iter().skip(i).take(len).cloned()));\n\
    \   |                                                       ^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n23 |         result.push(by_length(arr.iter().skip(i).take(len.try_into().unwrap()).cloned()));\n\
    \   |                                                          ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgcb5370l.rs:23:31\n   |\n23 |\
    \         result.push(by_length(arr.iter().skip(i).take(len).cloned()));\n   |\
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `Cloned`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Cloned<std::iter::Take<Skip<std::slice::Iter<'_,\
    \ isize>>>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgcb5370l.rs:24:14\n\
    \   |\n24 |         i += len;\n   |              ^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmpgcb5370l.rs:24:11\n\
    \   |\n24 |         i += len;\n   |           ^^ no implementation for `usize\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0369]: cannot subtract `{integer}` from `Vec<String>`\n\
    \  --> /tmp/tmpgcb5370l.rs:31:29\n   |\n31 |         let len = result[i] - 1;\n\
    \   |             "
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let len = arr[i] - 1;\n\
    \        if len < 1 || len > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j < arr.len() {\n          \
    \  if arr[j] == len {\n                result.push(by_name(len));\n          \
    \      i += 1;\n                break;\n            }\n            j += 1\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp9igfr0tt.rs:26:29\n\
    \   |\n26 |                 result.push(by_name(len));\n   |                 \
    \            ^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    for n in arr {\n        if n > 0 && n < 10 {\n\
    \            result.push(by_digit(n));\n        } else {\n            result.push(\"\
    One\");\n        }\n    }\n    result.reverse();\n    result\n}\n\nfn main() {\n\
    \    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5,\
    \ 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpkb3dkwuc.rs:15:25\n\
    \   |\n15 |             result.push(by_digit(n));\n   |                      \
    \   ^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpkb3dkwuc.rs:21:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n21 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n   \
    \           found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > 9 {\n    \
    \        result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n  \
    \          break;\n        }\n        let mut j = i;\n        while j < arr.len()\
    \ && arr[j] <= 9 {\n            j += 1\n        }\n        result.push(by_length(arr.iter().filter(|&x|\
    \ x > 9).take(j - i).collect()));\n        i = j;\n    }\n    if i == arr.len()\
    \ {\n        result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_7_kf6ce.rs:19:62\n   |\n\
    19 |             result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n\
    \   |                                                              ^\n   |   \
    \                                                           |\n   |          \
    \                                                    expected `&isize`, found\
    \ integer\n   |                                                              help:\
    \ consider borrowing here: `&9`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmp_7_kf6ce.rs:19:35\n\
    \     |\n19   |             result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n\
    \     |                         --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                         |\n     |                         required by\
    \ a bound introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_7_kf6ce.rs:26:58\n   |\n26 |         result.push(by_length(arr.iter().filter(|&x|\
    \ x > 9).take(j - i).collect()));\n   |                                      \
    \                    ^\n   |                                                 \
    \         |\n   |                                                          expected\
    \ `&isize`, found integer\n   |                                              \
    \            help: consider borrowing here: `&9`\n\nerror[E0277]: a value of type\
    \ `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \    --> /tmp/tmp_7_kf6ce.rs:26:31\n     |\n26   |         result.push(by_length(arr.iter().filter(|&x|\
    \ x > 9).take(j - i).collect()));\n     |                     --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                result.push(by_length(arr.iter().skip(j).rev()));\n\
    \                break;\n            }\n            j += 1;\n        }\n     \
    \   i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6pw44ecg.rs:29:39\n   |\n\
    29 |                 result.push(by_length(arr.iter().skip(j).rev()));\n   | \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found struct `Rev`\n   |\n   = note: expected struct `Vec<isize>`\n \
    \             found struct `Rev<Skip<std::slice::Iter<'_, isize>>>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6pw44ecg.rs:36:5\n   |\n11 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |                                  -----------\
    \ expected `Vec<String>` because of return type\n...\n36 |     result\n   |  \
    \   ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j > 0 && arr[j - 1] > arr[j]\
    \ {\n            j -= 1;\n        }\n        let mut k = j;\n        while k <\
    \ arr.len() && arr[k] < arr[j] {\n            k += 1;\n        }\n        let\
    \ mut reversed = vec![0; arr.len()];\n        reversed[k] = arr[k];\n        reversed[j..]\
    \ = arr[j..].iter().rev();\n        for &n in reversed {\n            result.push(by_name(n));\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpqpc65cfi.rs:31:25\n\
    \   |\n31 |             result.push(by_name(n));\n   |                       \
    \  ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqpc65cfi.rs:29:25\n\
    \   |\n29 |         reversed[j..] = arr[j..].iter().rev();\n   |         -------------\
    \   ^^^^^^^^^^^^^^^^^^^^^ expected slice `[isize]`, found struct `Rev`\n   | \
    \        |\n   |         expected due to the type of this binding\n   |\n   =\
    \ note: expected slice `[isize]`\n             found struct `Rev<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0277]: the size for values of type `[isize]` cannot be known\
    \ at compilation time\n  --> /tmp/tmpqpc65cfi.rs:29:9\n   |\n29 |         reversed[j..]\
    \ = arr[j..].iter().rev();\n   |         ^^^^^^^^^^^^^ doesn't have a size known\
    \ at compile-time\n   |\n   = help: the trait `Sized` is not implemented for `[isize]`\n\
    \   = note: the left-hand-side of an assignment must have a statically known size\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqpc65cfi.rs:30:13\n   |\n30 |\
    \         for &n in reversed {\n   |             ^^    -------- this expression\
    \ has type `Option<isize>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `n`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            j = j + 1;\n        }\n        let\
    \ mut k = i;\n        while k >= j {\n            result.push(by_digit(arr[k]));\n\
    \            k = k - 1;\n        }\n        i = j;\n    }\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpflff00pk.rs:27:25\n\
    \   |\n27 |             result.push(by_digit(arr[k]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let len = arr[i];\n  \
    \      if len > 9 {\n            result.push(by_length(arr.iter().skip(i).take(len).collect()));\n\
    \            i += len;\n        } else {\n            result.push(by_name(len));\n\
    \            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]),\
    \ vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"\
    ), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"\
    One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpw9ai6y_2.rs:23:25\n\
    \   |\n23 |             result.push(by_name(len));\n   |                     \
    \    ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpw9ai6y_2.rs:20:59\n   |\n20 |             result.push(by_length(arr.iter().skip(i).take(len).collect()));\n\
    \   |                                                           ^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |             result.push(by_length(arr.iter().skip(i).take(len.try_into().unwrap()).collect()));\n\
    \   |                                                              ++++++++++++++++++++\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpw9ai6y_2.rs:20:35\n     |\n\
    20   |             result.push(by_length(arr.iter().skip(i).take(len).collect()));\n\
    \     |                         --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                         |\n     |                         required by\
    \ a bound introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw9ai6y_2.rs:21:18\n   |\n21 |             i\
    \ += len;\n   |                  ^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `usize`\n  --> /tmp/tmpw9ai6y_2.rs:21:15\n   |\n\
    21 |             i += len;\n   |               ^^ no implementation for `usize\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as Ad"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let digit = arr[i] - 1;\n        if digit < 0 || digit > 9 {\n      \
    \      i += 1;\n            continue;\n        }\n        digits.push(digit);\n\
    \        i += 1;\n    }\n    let mut i = 0;\n    while i < arr.len() {\n     \
    \   let digit = arr[i] - 1;\n        if digit < 0 || digit > 9 {\n           \
    \ i += 1;\n            continue;\n        }\n        let index = digits.iter().position(|&x|\
    \ x == digit).unwrap();\n        let name = match index {\n            0 => \"\
    One\",\n            1 => \"Two\",\n            2 => \"Three\",\n            3\
    \ => \"Four\",\n            4 => \"Five\",\n            5 => \"Six\",\n      \
    \      6 => \"Seven\",\n            7 => \"Eight\",\n            8 => \"Nine\"\
    ,\n            _ => \"\".to_string(),\n        };\n        result.push(name);\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp7srkpcfh.rs:45:18\n\
    \   |\n35 |           let name = match index {\n   |  ____________________-\n\
    36 | |             0 => \"One\",\n37 | |             1 => \"Two\",\n38 | |   \
    \          2 => \"Three\",\n...  |\n44 | |             8 => \"Nine\",\n   | |\
    \                  ------ this and all prior arms are found to be of type `&str`\n\
    45 | |             _ => \"\".to_string(),\n   | |                  ^^^^^^^^^^^^^^\n\
    \   | |                  |\n   | |                  expected `&str`, found struct\
    \ `String`\n   | |                  help: consider borrowing here: `&\"\".to_string()`\n\
    46 | |         };\n   | |_________- `match` arms have incompatible types\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr.to_owned();\n\
    \    let mut len = arr.len();\n    let mut i = 0;\n    while i < len {\n     \
    \   if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n        } else {\n   \
    \         let mut j = i;\n            while j > 0 && arr[j - 1] > arr[j] {\n \
    \               j -= 1;\n            }\n            arr[i] = by_digit(arr[j]);\n\
    \            i += 1;\n        }\n    }\n    arr\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpynlut7pl.rs:26:22\n\
    \   |\n26 |             arr[i] = by_digit(arr[j]);\n   |                     \
    \ ^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpynlut7pl.rs:30:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n30 |     arr\n   |     ^^^ expected struct `String`, found `isize`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                result.push(by_length(arr.iter().skip(i).take(j\
    \ - i).cloned()));\n                i += j - i;\n                break;\n    \
    \        }\n            j += 1;\n        }\n        i += j - i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8gkt92w9.rs:29:39\n   |\n\
    29 |                 result.push(by_length(arr.iter().skip(i).take(j - i).cloned()));\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found struct `Cloned`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Cloned<std::iter::Take<Skip<std::slice::Iter<'_,\
    \ isize>>>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8gkt92w9.rs:37:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n37 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            j = j + 1;\n        }\n        let\
    \ mut k = i;\n        while k > i && arr[k] > 9 {\n            k = k - 1;\n  \
    \      }\n        result.push(&arr[..k].iter().map(|x| match x {\n           \
    \ 1 => \"One\",\n            2 => \"Two\",\n            3 => \"Three\",\n    \
    \        4 => \"Four\",\n            5 => \"Five\",\n            6 => \"Six\"\
    ,\n            7 => \"Seven\",\n            8 => \"Eight\",\n            9 =>\
    \ \"Nine\",\n            _ => \"\".to_string(),\n        }).collect::<Vec<_>>().join(\"\
    \"));\n        i = k;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpp9j0r9dj.rs:39:18\n\
    \   |\n29 |           result.push(&arr[..k].iter().map(|x| match x {\n   |  ______________________________________________-\n\
    30 | |             1 => \"One\",\n31 | |             2 => \"Two\",\n32 | |   \
    \          3 => \"Three\",\n...  |\n38 | |             9 => \"Nine\",\n   | |\
    \                  ------ this and all prior arms are found to be of type `&str`\n\
    39 | |             _ => \"\".to_string(),\n   | |                  ^^^^^^^^^^^^^^\n\
    \   | |                  |\n   | |                  expected `&str`, found struct\
    \ `String`\n   | |                  help: consider borrowing here: `&\"\".to_string()`\n\
    40 | |         }).collect::<Vec<_>>().join(\"\"));\n   | |_________- `match` arms\
    \ have incompatible types\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp9j0r9dj.rs:43:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n43 |     result\n   |     ^^^^^^ expected struct `String`, found `&String`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        result.push(&names[arr[i] - 1]);\n        i = j;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmpl_4vxg4v.rs:26:22\n\
    \   |\n26 |         result.push(&names[arr[i] - 1]);\n   |                   \
    \   ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr.to_owned();\n\
    \    let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        let mut j = i;\n        while j < arr.len() && arr[j] >= 1 && arr[j]\
    \ <= 9 {\n            j = j + 1;\n        }\n        if j == i {\n           \
    \ break;\n        }\n        let mut reversed = vec![];\n        reversed.extend_from_slice(&arr[i..j]);\n\
    \        reversed.extend_from_slice(&arr[j..]);\n        reversed.reverse();\n\
    \        reversed.iter().for_each(|x| result.push(by_digit(x)));\n        i =\
    \ j;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpm8ye5k6p.rs:30:50\n\
    \   |\n30 |         reversed.iter().for_each(|x| result.push(by_digit(x)));\n\
    \   |                                                  ^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n\
    \    while i < arr.len() {\n        let digit = arr[i] - 1;\n        if digit\
    \ < 1 || digit > 9 {\n            i += 1;\n            continue;\n        }\n\
    \        digits.push(digit);\n        i += 1;\n    }\n    if digits.is_empty()\
    \ {\n        return result;\n    }\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        let digit = digits[i];\n        let name = match digit {\n      \
    \      1 => \"One\",\n            2 => \"Two\",\n            3 => \"Three\",\n\
    \            4 => \"Four\",\n            5 => \"Five\",\n            6 => \"Six\"\
    ,\n            7 => \"Seven\",\n            8 => \"Eight\",\n            9 =>\
    \ \"Nine\",\n            _ => return vec![],\n        };\n        result.push(name);\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmv01zwp0.rs:42:21\n   |\n\
    42 |         result.push(name);\n   |                     ^^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                     |\n   |      \
    \               expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j < arr.len() {\n          \
    \  if arr[j] < 1 || arr[j] > 9 {\n                j += 1;\n                continue;\n\
    \            }\n            if arr[j] == arr[i] {\n                result.push(by_name(arr[i]));\n\
    \                i += 1;\n                j += 1;\n                continue;\n\
    \            }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmppzpyi85e.rs:26:29\n\
    \   |\n26 |                 result.push(by_name(arr[i]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpblwkfmtg.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr.clone();\n\
    \    arr.sort();\n    arr.sort_by_key(|x| {\n        if x < 1 || x > 9 {\n   \
    \         0\n        } else {\n            x - 1\n        }\n    });\n    arr.iter().map(|x|\
    \ {\n        match x {\n            1 => \"One\",\n            2 => \"Two\",\n\
    \            3 => \"Three\",\n            4 => \"Four\",\n            5 => \"\
    Five\",\n            6 => \"Six\",\n            7 => \"Seven\",\n            8\
    \ => \"Eight\",\n            9 => \"Nine\",\n            _ => panic!(\"Invalid\
    \ number: {}\", x),\n        }\n    }).collect()\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3e6o8dj4.rs:18:16\n   |\n\
    18 |         if x < 1 || x > 9 {\n   |                ^\n   |                |\n\
    \   |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&1`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3e6o8dj4.rs:18:25\n\
    \   |\n18 |         if x < 1 || x > 9 {\n   |                         ^\n   |\
    \                         |\n   |                         expected `&isize`, found\
    \ integer\n   |                         help: consider borrowing here: `&9`\n\n\
    error[E0277]: a value of type `Vec<String>` cannot be built from an iterator over\
    \ elements of type `&str`\n    --> /tmp/tmp3e6o8dj4.rs:37:8\n     |\n37   |  \
    \   }).collect()\n     |        ^^^^^^^ value of type `Vec<String>` cannot be\
    \ built from `std::iter::Iterator<Item=&str>`\n     |\n     = help: the trait\
    \ `FromIterator<&str>` is not implemented for `Vec<String>`\n     = help: the\
    \ trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound\
    \ in `collect`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        let mut k = j;\n        while k >= 0 && arr[k - 1] < arr[k]\
    \ {\n            k -= 1;\n        }\n        if k > j {\n            result.push(by_length(arr.iter().take(k).cloned()));\n\
    \        } else {\n            result.push(by_length(arr.iter().take(j).cloned()));\n\
    \            result.push(by_length(arr.iter().take(k).cloned()));\n        }\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeem3abnw.rs:31:35\n   |\n\
    31 |             result.push(by_length(arr.iter().take(k).cloned()));\n   |  \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found struct `Cloned`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Cloned<std::iter::Take<std::slice::Iter<'_, isize>>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpeem3abnw.rs:33:35\n   |\n33 |\
    \             result.push(by_length(arr.iter().take(j).cloned()));\n   |     \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Cloned`\n   |\n   = note: expected struct `Vec<isize>`\n     \
    \         found struct `Cloned<std::iter::Take<std::slice::Iter<'_, isize>>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpeem3abnw.rs:34:35\n   |\n34 |\
    \             result.push(by_length(arr.iter().take(k).cloned()));\n   |     \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Cloned`\n   |\n   = note: expected struct `Vec<isize>`\n     \
    \         found struct `Cloned<std::iter::Take<std::slice::Iter<'_, isize>>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpeem3abnw.rs:38:5\n   |\n11 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n38 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < arr.len() {\n        let\
    \ mut cur = arr[i];\n        let mut cur2 = arr[i];\n        while cur2 > 9 {\n\
    \            cur2 /= 10;\n        }\n        if cur2 > 1 {\n            result.push(by_digit(cur));\n\
    \            result.push(by_digit(cur2));\n        } else {\n            result.push(by_digit(cur));\n\
    \        }\n        i += 1;\n        j += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp_c8qrpsn.rs:25:25\n\
    \   |\n25 |             result.push(by_digit(cur));\n   |                    \
    \     ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `by_digit`\
    \ in this scope\n  --> /tmp/tmp_c8qrpsn.rs:26:25\n   |\n26 |             result.push(by_digit(cur2));\n\
    \   |                         ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `by_digit` in this scope\n  --> /tmp/tmp_c8qrpsn.rs:28:25\n\
    \   |\n28 |             result.push(by_digit(cur));\n   |                    \
    \     ^^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut arr = arr.to_owned();\n    if arr.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        let mut j = i;\n        while j < arr.len() {\n            if arr[j]\
    \ < 1 || arr[j] > 9 {\n                break;\n            }\n            j =\
    \ j + 1;\n        }\n        let mut k = i;\n        while k >= j {\n        \
    \    result.append(&names[arr[k]]);\n            k = k - 1;\n        }\n     \
    \   i = j;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmpr6rh1xok.rs:28:28\n\
    \   |\n28 |             result.append(&names[arr[k]]);\n   |                 \
    \           ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            i += 1;\n            result += &[\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][arr[j] - 1];\n            j += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[&str]` cannot be indexed by `isize`\n  --> /tmp/tmpmk6ompct.rs:24:24\n\
    \   |\n24 |             result += &[\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][arr[j] - 1];\n   |          \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[&str]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `[&str]`\n\nerror[E0368]:\
    \ binary assignment operation `+=` cannot be applied to type `Vec<_>`\n  --> /tmp/tmpmk6ompct.rs:24:13\n\
    \   |\n24 |             result += &[\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][arr[j] - 1];\n   |          \
    \   ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |             |\n   |             cannot use `+=` on type `Vec<_>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            j = j + 1;\n        }\n        if\
    \ j == i {\n            break;\n        }\n        result.push(&arr[i .. j]);\n\
    \        i = j;\n    }\n    if i == arr.len() {\n        return vec![];\n    }\n\
    \    for i in 0..result.len() {\n        result[i] = match result[i] {\n     \
    \       1 => \"One\",\n            2 => \"Two\",\n            3 => \"Three\",\n\
    \            4 => \"Four\",\n            5 => \"Five\",\n            6 => \"Six\"\
    ,\n            7 => \"Seven\",\n            8 => \"Eight\",\n            9 =>\
    \ \"Nine\",\n            _ => panic!(\"Invalid number: {}\", result[i]),\n   \
    \     };\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcydkh566.rs:36:13\n   |\n\
    35 |         result[i] = match result[i] {\n   |                           ---------\
    \ this expression has type `&[isize]`\n36 |             1 => \"One\",\n   |  \
    \           ^ expected slice `[isize]`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcydkh566.rs:37:13\n   |\n35 |         result[i] = match\
    \ result[i] {\n   |                           --------- this expression has type\
    \ `&[isize]`\n36 |             1 => \"One\",\n37 |             2 => \"Two\",\n\
    \   |             ^ expected slice `[isize]`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcydkh566.rs:38:13\n   |\n35 |         result[i] = match\
    \ result[i] {\n   |                           --------- this expression has type\
    \ `&[isize]`\n...\n38 |             3 => \"Three\",\n   |             ^ expected\
    \ slice `[isize]`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcydkh566.rs:39:13\n\
    \   |\n35 |         result[i] = match result[i] {\n   |                      \
    \     --------- this expression has type `&[isize]`\n...\n39 |             4 =>\
    \ \"Four\",\n   |             ^ expected slice `[isize]`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcydkh566.rs:40:13\n   |\n35 |         result[i]\
    \ = match result[i] {\n   |                           --------- this expression\
    \ has type `&[isize]`\n...\n40 |             5 => \"Five\",\n   |            \
    \ ^ expected slice `[isize]`, found integer\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcydkh566.rs:41:13\n   |\n35 |         result[i] = match result[i]\
    \ {\n   |                           --------- this expression has type `&[isize]`\n\
    ...\n41 |             6 => \"Six\",\n   |             ^ expected slice `[isize]`,\
    \ found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcydkh566.rs:42:13\n\
    \   |\n35 |         result[i] = match result[i] {\n   |                      \
    \     --------- this expression has type `&[isize]`\n...\n42 |             7 =>\
    \ \"Seven\",\n   |             ^ expected slice `[isize]`, found integer\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcydkh566."
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > 9 {\n    \
    \        result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n  \
    \          break;\n        }\n        let mut j = i;\n        while j < arr.len()\
    \ {\n            if arr[j] < 1 {\n                break;\n            }\n    \
    \        if arr[j] > 9 {\n                result.push(by_length(arr.iter().filter(|&x|\
    \ x > 9).collect()));\n                break;\n            }\n            j +=\
    \ 1\n        }\n        result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf50wa26n.rs:19:62\n   |\n\
    19 |             result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n\
    \   |                                                              ^\n   |   \
    \                                                           |\n   |          \
    \                                                    expected `&isize`, found\
    \ integer\n   |                                                              help:\
    \ consider borrowing here: `&9`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpf50wa26n.rs:19:35\n\
    \     |\n19   |             result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n\
    \     |                         --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                         |\n     |                         required by\
    \ a bound introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf50wa26n.rs:28:66\n   |\n28 |              \
    \   result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n   |   \
    \                                                               ^\n   |      \
    \                                                            |\n   |         \
    \                                                         expected `&isize`, found\
    \ integer\n   |                                                              \
    \    help: consider borrowing here: `&9`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpf50wa26n.rs:28:39\n\
    \     |\n28   |                 result.push(by_length(arr.iter().filter(|&x| x\
    \ > 9).collect()));\n     |                             --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` ca"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       let mut j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n       \
    \     j -= 1;\n        }\n        result.push(&arr[..j].iter().map(|x| to_name(x)).collect::<Vec<_>>().join(\"\
    \"));\n        i = j;\n    }\n    if arr.len() == 0 {\n        result\n    } else\
    \ {\n        result\n    }\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `to_name` in this scope\n  --> /tmp/tmpsirt3h4_.rs:19:46\n\
    \   |\n19 |         result.push(&arr[..j].iter().map(|x| to_name(x)).collect::<Vec<_>>().join(\"\
    \"));\n   |                                              ^^^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsirt3h4_.rs:23:9\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n23 |         result\n   |         ^^^^^^ expected struct `String`, found\
    \ `&String`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsirt3h4_.rs:25:9\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n25 |         result\n   |         ^^^^^^ expected struct `String`, found\
    \ `&String`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&String>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr.to_owned();\n\
    \    arr.sort();\n    let mut result = vec![];\n    let mut i = 0;\n    while\
    \ i < arr.len() {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n\
    \            continue;\n        }\n        let mut j = i;\n        while j > 0\
    \ && arr[j - 1] > arr[j] {\n            j -= 1;\n        }\n        result.push(by_name(arr[j],\
    \ arr[i]));\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpkrhdcy5h.rs:28:21\n\
    \   |\n28 |         result.push(by_name(arr[j], arr[i]));\n   |              \
    \       ^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > 9 {\n    \
    \        i += 1;\n            continue;\n        }\n        let mut j = i;\n \
    \       while j < arr.len() {\n            if arr[j] < 1 {\n                j\
    \ += 1;\n                continue;\n            }\n            if arr[j] > 9 {\n\
    \                j += 1;\n                continue;\n            }\n         \
    \   if arr[j] == 1 {\n                result.push(\"One\");\n                continue;\n\
    \            }\n            if arr[j] == 2 {\n                result.push(\"Two\"\
    );\n                continue;\n            }\n            if arr[j] == 3 {\n \
    \               result.push(\"Three\");\n                continue;\n         \
    \   }\n            if arr[j] == 4 {\n                result.push(\"Four\");\n\
    \                continue;\n            }\n            if arr[j] == 5 {\n    \
    \            result.push(\"Five\");\n                continue;\n            }\n\
    \            if arr[j] == 6 {\n                result.push(\"Six\");\n       \
    \         continue;\n            }\n            if arr[j] == 7 {\n           \
    \     result.push(\"Seven\");\n                continue;\n            }\n    \
    \        if arr[j] == 8 {\n                result.push(\"Eight\");\n         \
    \       continue;\n            }\n            if arr[j] == 9 {\n             \
    \   result.push(\"Nine\");\n                continue;\n            }\n       \
    \     i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk7g1t9_k.rs:71:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    71 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = arr.len() - 1;\n    while\
    \ i <= k {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n     \
    \       continue;\n        }\n        let mut tmp: Vec<String> = vec![];\n   \
    \     while j <= k {\n            if arr[j] < 1 || arr[j] > 9 {\n            \
    \    j += 1;\n                continue;\n            }\n            if arr[j]\
    \ == arr[i] {\n                tmp.push(by_length(vec![arr[j], arr[i]]));\n  \
    \              j += 1;\n                i += 1;\n                continue;\n \
    \           }\n            if arr[j] > arr[i] {\n                tmp.push(by_length(vec![arr[j],\
    \ arr[i]]));\n                i += 1;\n                continue;\n           \
    \ }\n            if arr[j] < arr[i] {\n                j += 1;\n             \
    \   continue;\n            }\n        }\n        result.push(tmp);\n        i\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp3ql6g83.rs:31:26\n   |\n\
    31 |                 tmp.push(by_length(vec![arr[j], arr[i]]));\n   |        \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ struct `Vec`\n   |\n   = note: expected struct `String`\n              found\
    \ struct `Vec<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp3ql6g83.rs:37:26\n\
    \   |\n37 |                 tmp.push(by_length(vec![arr[j], arr[i]]));\n   | \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found struct `Vec`\n   |\n   = note: expected struct `String`\n            \
    \  found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp3ql6g83.rs:49:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n49 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                result.push(by_length(arr.iter().skip(i).take(j\
    \ - i)));\n                i += j - i;\n                j += 1;\n            \
    \    break;\n            }\n            j += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph4vyel1r.rs:29:39\n   |\n\
    29 |                 result.push(by_length(arr.iter().skip(i).take(j - i)));\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `std::iter::Take`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `std::iter::Take<Skip<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph4vyel1r.rs:37:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n37 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == i {\n      \
    \          result.push(by_name(arr[j]));\n                i += 1;\n          \
    \      break;\n            }\n            j += 1\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpd0wb1io3.rs:25:29\n\
    \   |\n25 |                 result.push(by_name(arr[j]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd0wb1io3.rs:24:26\n   |\n24 |             if arr[j] == i {\n  \
    \ |                          ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n24 |             if arr[j] == i.try_into().unwrap() {\n   |     \
    \                      ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        result.push(by_length(arr.split_off(j).reverse()));\n    \
    \    i = j;\n    }\n    if i == 0 {\n        result.push(\"One\");\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp48hmmqgg.rs:26:31\n   |\n\
    26 |         result.push(by_length(arr.split_off(j).reverse()));\n   |       \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found\
    \ `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type\
    \ `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp48hmmqgg.rs:30:21\n  \
    \ |\n30 |         result.push(\"One\");\n   |                     ^^^^^ expected\
    \ struct `Vec`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \           found reference `&'static str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp48hmmqgg.rs:32:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n32 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<Vec<String>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == i {\n      \
    \          result.push(by_name(arr[j]));\n                i += 1;\n          \
    \      break;\n            }\n            j += 1\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpd0wb1io3.rs:25:29\n\
    \   |\n25 |                 result.push(by_name(arr[j]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd0wb1io3.rs:24:26\n   |\n24 |             if arr[j] == i {\n  \
    \ |                          ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n24 |             if arr[j] == i.try_into().unwrap() {\n   |     \
    \                      ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let len = arr[i] - 1;\n\
    \        if len < 1 || len > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        result.push(by_length(arr.iter().skip(i).take(len).cloned()));\n\
    \        i += len;\n    }\n    if arr.len() == 0 {\n        return vec![];\n \
    \   }\n    let mut i = 0;\n    while i < arr.len() {\n        let len = arr[i]\
    \ - 1;\n        if len < 1 || len > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        result.push(by_name(arr.iter().skip(i).take(len).cloned()));\n\
    \        i += len;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp2742w_6f.rs:36:21\n\
    \   |\n36 |         result.push(by_name(arr.iter().skip(i).take(len).cloned()));\n\
    \   |                     ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2742w_6f.rs:23:55\n   |\n23 |         result.push(by_length(arr.iter().skip(i).take(len).cloned()));\n\
    \   |                                                       ^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n23 |         result.push(by_length(arr.iter().skip(i).take(len.try_into().unwrap()).cloned()));\n\
    \   |                                                          ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2742w_6f.rs:23:31\n   |\n23 |\
    \         result.push(by_length(arr.iter().skip(i).take(len).cloned()));\n   |\
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `Cloned`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Cloned<std::iter::Take<Skip<std::slice::Iter<'_,\
    \ isize>>>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2742w_6f.rs:24:14\n\
    \   |\n24 |         i += len;\n   |              ^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmp2742w_6f.rs:24:11\n\
    \   |\n24 |         i += len;\n   |           ^^ no implementation for `usize\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2742w_6f.rs:36:53\n\
    \   |\n36 |         result.push(by_name(arr.iter().skip(i).take(len).clon"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > 9 {\n    \
    \        result.push(by_length(arr.iter().skip(i).take(1).collect()));\n     \
    \       break;\n        }\n        result.push(by_name(arr[i]));\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmprq_1_1zs.rs:22:21\n\
    \   |\n22 |         result.push(by_name(arr[i]));\n   |                     ^^^^^^^\
    \ not found in this scope\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `&isize`\n    --> /tmp/tmprq_1_1zs.rs:19:35\n\
    \     |\n19   |             result.push(by_length(arr.iter().skip(i).take(1).collect()));\n\
    \     |                         --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                         |\n     |                         required by\
    \ a bound introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprq_1_1zs.rs:25:5\n   |\n11 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |                                  -----------\
    \ expected `Vec<String>` because of return type\n...\n25 |     result\n   |  \
    \   ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == arr[i] {\n \
    \               i += 1;\n                break;\n            }\n            j\
    \ += 1;\n        }\n        result.push(by_name(arr[i]));\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpb_srz6xi.rs:30:21\n\
    \   |\n30 |         result.push(by_name(arr[i]));\n   |                     ^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 10 {\n                result.push(\"\
    One\");\n                break;\n            }\n            if arr[j] < 100 {\n\
    \                result.push(\"Two\");\n                break;\n            }\n\
    \            if arr[j] < 1000 {\n                result.push(\"Three\");\n   \
    \             break;\n            }\n            if arr[j] < 10000 {\n       \
    \         result.push(\"Four\");\n                break;\n            }\n    \
    \        if arr[j] < 100000 {\n                result.push(\"Five\");\n      \
    \          break;\n            }\n            if arr[j] < 1000000 {\n        \
    \        result.push(\"Six\");\n                break;\n            }\n      \
    \      if arr[j] < 10000000 {\n                result.push(\"Seven\");\n     \
    \           break;\n            }\n            if arr[j] < 100000000 {\n     \
    \           result.push(\"Eight\");\n                break;\n            }\n \
    \           if arr[j] < 1000000000 {\n                result.push(\"Nine\");\n\
    \                break;\n            }\n            j += 1\n        }\n      \
    \  i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_kzai974.rs:60:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    60 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        result.push(by_length(arr.subslice(i, j)));\n        i = j;\n\
    \    }\n    if i == 0 {\n        result.push(\"One\");\n    }\n    if i == arr.len()\
    \ {\n        result.push(\"Nine\");\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `subslice` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmpawlsmt3a.rs:26:35\n   |\n26 |         result.push(by_length(arr.subslice(i,\
    \ j)));\n   |                                   ^^^^^^^^ help: there is an associated\
    \ function with a similar name: `splice`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpawlsmt3a.rs:30:21\n   |\n30 |         result.push(\"One\");\n  \
    \ |                     ^^^^^ expected struct `Vec`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n           found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpawlsmt3a.rs:33:21\n   |\n33 |\
    \         result.push(\"Nine\");\n   |                     ^^^^^^ expected struct\
    \ `Vec`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n      \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpawlsmt3a.rs:35:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n35 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<Vec<String>>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j],\
    \ &mut i));\n            j += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpiio3jqf0.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j], &mut i));\n   |         \
    \                ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       let mut j = i;\n        while j < arr.len() {\n            if arr[j] <\
    \ 1 || arr[j] > 9 {\n                j += 1;\n                continue;\n    \
    \        }\n            result.push(by_digit(arr[j]));\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpclvwp7ep.rs:21:25\n\
    \   |\n21 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut digits_len\
    \ = digits.len();\n    let mut i = 0;\n    while i < digits_len {\n        let\
    \ mut j = i;\n        while j < digits_len && digits[j] == digits[j - 1] + 1 {\n\
    \            j += 1\n        }\n        if j == digits_len {\n            break;\n\
    \        }\n        let mut digit = digits[j];\n        let mut digits_len = digits_len;\n\
    \        while digit > 9 {\n            digit /= 10;\n            digits_len -=\
    \ 1\n        }\n        result.push(by_digit(digit));\n        i = j;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpevzqcwf5.rs:33:21\n\
    \   |\n33 |         result.push(by_digit(digit));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut cur = arr[0];\n    let mut i = 0;\n    while i < arr.len() {\n  \
    \      if cur > 9 {\n            result.push(\"Nine\");\n            cur = cur\
    \ - 10;\n        } else {\n            result.push(by_digit(cur));\n         \
    \   cur = arr[i];\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpymwicog8.rs:23:25\n\
    \   |\n23 |             result.push(by_digit(cur));\n   |                    \
    \     ^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpymwicog8.rs:28:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n28 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n   \
    \           found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] >= 1 && arr[j] <= 9 {\n     \
    \           result.push(by_digit(arr[j]));\n                j += 1;\n        \
    \    } else {\n                break;\n            }\n        }\n        i +=\
    \ 1;\n    }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpuml7yp_o.rs:21:29\n\
    \   |\n21 |                 result.push(by_digit(arr[j]));\n   |             \
    \                ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            i += 1;\n        }\n        if j\
    \ == arr.len() {\n            break;\n        }\n        result.push(format!(\"\
    {}\", arr[j]));\n    }\n    result.reverse();\n    for i in result {\n       \
    \ if let Some(digit) = i.parse::<usize>() {\n            match digit {\n     \
    \           1 => result.push(\"One\"),\n                2 => result.push(\"Two\"\
    ),\n                3 => result.push(\"Three\"),\n                4 => result.push(\"\
    Four\"),\n                5 => result.push(\"Five\"),\n                6 => result.push(\"\
    Six\"),\n                7 => result.push(\"Seven\"),\n                8 => result.push(\"\
    Eight\"),\n                9 => result.push(\"Nine\"),\n                _ => (),\n\
    \            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5e47ko5b.rs:32:16\n   |\n\
    32 |         if let Some(digit) = i.parse::<usize>() {\n   |                ^^^^^^^^^^^\
    \   ------------------ this expression has type `Result<usize, ParseIntError>`\n\
    \   |                |\n   |                expected enum `Result`, found enum\
    \ `Option`\n   |\n   = note: expected enum `Result<usize, ParseIntError>`\n  \
    \            found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5e47ko5b.rs:34:34\n\
    \   |\n34 |                 1 => result.push(\"One\"),\n   |                 \
    \                 ^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                                  |\n   |                               \
    \   expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5e47ko5b.rs:35:34\n   |\n35 |                 2 => result.push(\"\
    Two\"),\n   |                                  ^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                  |\n   |      \
    \                            expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5e47ko5b.rs:36:34\n   |\n36 |              \
    \   3 => result.push(\"Three\"),\n   |                                  ^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \                |\n   |                                  expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5e47ko5b.rs:37:34\n\
    \   |\n37 |                 4 => result.push(\"Four\"),\n   |                \
    \                  ^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                                  |\n   |                               \
    \   expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5e47ko5b.rs:38:34\n   |\n38 |                 5 => result.push(\"\
    Five\"),\n   |                                  ^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                                  |\n   |      \
    \                            expected struct `S"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j < arr.len() {\n          \
    \  if arr[j] == i {\n                result.push(by_name(j));\n              \
    \  i += 1;\n                break;\n            }\n            j += 1\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpmgnobuum.rs:22:29\n\
    \   |\n22 |                 result.push(by_name(j));\n   |                   \
    \          ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmgnobuum.rs:21:26\n   |\n21 |             if arr[j] == i {\n  \
    \ |                          ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n21 |             if arr[j] == i.try_into().unwrap() {\n   |     \
    \                      ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] > arr[j + 1] {\n\
    \                j = j + 1;\n                continue;\n            }\n      \
    \      break;\n        }\n        let mut k = i;\n        while k > j {\n    \
    \        result.append(&names[arr[k] - 1]);\n            k -= 1;\n        }\n\
    \        i = j;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmplwj6hgic.rs:32:28\n\
    \   |\n32 |             result.append(&names[arr[k] - 1]);\n   |             \
    \               ^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut curr = 1;\n    let mut prev = 0;\n    let mut i = 0;\n    while i\
    \ < arr.len() {\n        if arr[i] < prev {\n            result.push(String::from(&arr[prev..i]));\n\
    \            prev = arr[i];\n        }\n        i += 1;\n    }\n    if prev >\
    \ 0 {\n        result.push(String::from(&arr[prev..i]));\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn7ct0u8w.rs:21:49\n   |\n\
    21 |             result.push(String::from(&arr[prev..i]));\n   |             \
    \                                    ^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmpn7ct0u8w.rs:21:39\n\
    \   |\n21 |             result.push(String::from(&arr[prev..i]));\n   |      \
    \                                 ^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `std::ops::Range<isize>`\n   = help: the following other types\
    \ implement trait `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<isize>>` for\
    \ `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn7ct0u8w.rs:27:45\n\
    \   |\n27 |         result.push(String::from(&arr[prev..i]));\n   |          \
    \                                   ^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmpn7ct0u8w.rs:27:35\n\
    \   |\n27 |         result.push(String::from(&arr[prev..i]));\n   |          \
    \                         ^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `std::ops::Range<isize>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <std::ops::Range<usize> as SliceIndex<[T]>>\n\
    \             <std::ops::Range<usize> as SliceIndex<str>>\n   = note: required\
    \ because of the requirements on the impl of `Index<std::ops::Range<isize>>` for\
    \ `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            j += 1\n        }\n        let mut\
    \ temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        result.push(&names[arr[i]\
    \ - 1]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmp9y5yv6_p.rs:28:22\n\
    \   |\n28 |         result.push(&names[arr[i] - 1]);\n   |                   \
    \   ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut digits_len\
    \ = digits.len();\n    let mut i = 0;\n    while i < digits_len {\n        let\
    \ mut j = i;\n        while j < digits_len && digits[j] == digits[j - 1] + 1 {\n\
    \            j += 1\n        }\n        if j == digits_len {\n            result.push(format!(\"\
    One\", digits[i..]));\n            break;\n        }\n        let mut k = j;\n\
    \        while k < digits_len && digits[k] == digits[k - 1] + 2 {\n          \
    \  k += 1\n        }\n        if k == digits_len {\n            result.push(format!(\"\
    Two\", digits[i..]));\n            break;\n        }\n        let mut l = k;\n\
    \        while l < digits_len && digits[l] == digits[l - 1] + 3 {\n          \
    \  l += 1\n        }\n        if l == digits_len {\n            result.push(format!(\"\
    Three\", digits[i..]));\n            break;\n        }\n        let mut m = l;\n\
    \        while m < digits_len && digits[m] == digits[m - 1] + 4 {\n          \
    \  m += 1\n        }\n        if m == digits_len {\n            result.push(format!(\"\
    Four\", digits[i..]));\n            break;\n        }\n        let mut n = m;\n\
    \        while n < digits_len && digits[n] == digits[n - 1] + 5 {\n          \
    \  n += 1\n        }\n        if n == digits_len {\n            result.push(format!(\"\
    Five\", digits[i..]));\n            break;\n        }\n        let mut o = n;\n\
    \        while o < digits_len && digits[o] == digits[o - 1] + 6 {\n          \
    \  o += 1\n        }\n        if o == digits_len {\n            result.push(format!(\"\
    Six\", digits[i..]));\n            break;\n        }\n        let mut p = o;\n\
    \        while p < digits_len && digits[p] == digits[p - 1] + 7 {\n          \
    \  p += 1\n        }\n        if p == digits_len {\n            result.push(format!(\"\
    Seven\", digits[i..]));\n            break;\n        }\n        let mut q = p;\n\
    \        while q < digits_len && digits[q] == digits[q - 1] + 8 {\n          \
    \  q += 1\n        }\n        if q == digits_len {\n            result.push(format!(\"\
    Eight\", digits[i..]));\n            break;\n        }\n        let mut r = q;\n\
    \        while r < digits_len && digits[r] == \n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpoeb3_w5u.rs:95:3\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                                 - unclosed delimiter\n...\n19 |     while i\
    \ < digits_len {\n   |                          - this delimiter might not be\
    \ properly closed...\n...\n86 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n95 | }\n   |   ^\n\nerror: expected expression, found `}`\n\
    \  --> /tmp/tmpoeb3_w5u.rs:86:1\n   |\n85 |         while r < digits_len && digits[r]\
    \ == \n   |         ----- while parsing the condition of this `while` expression\n\
    86 | }\n   | ^ expected expression\n\nerror: argument never used\n  --> /tmp/tmpoeb3_w5u.rs:25:40\n\
    \   |\n25 |             result.push(format!(\"One\", digits[i..]));\n   |    \
    \                             -----  ^^^^^^^^^^^ argument never used\n   |   \
    \                              |\n   |                                 formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmpoeb3_w5u.rs:33:40\n\
    \   |\n33 |             result.push(format!(\"Two\", digits[i..]));\n   |    \
    \                             -----  ^^^^^^^^^^^ argument never used\n   |   \
    \                              |\n   |                                 formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmpoeb3_w5u.rs:41:42\n\
    \   |\n41 |             result.push(format!(\"Three\", digits[i..]));\n   |  \
    \                               -------  ^^^^^^^^^^^ argument never used\n   |\
    \                                 |\n   |                                 formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmpoeb3_w5u.rs:49:41\n\
    \   |\n49 |             result.push(format!(\"Four\", digits[i..]));\n   |   \
    \                              ------  ^^^^^^^^^^^ argument never used\n   | \
    \                                |\n   |                                 formatting\
    \ specifier missing\n\nerror: argument never used\n  --> /tmp/tmpoeb3_w5u.rs:57:41\n\
    \   |\n57 |             result.push(format!(\"Five\", digits[i..]));\n   |   \
    \                              ------  ^^^"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut cur = arr[0];\n    let mut i = 0;\n    while i < arr.len() {\n  \
    \      if cur == 1 {\n            result.push(\"One\");\n        } else if cur\
    \ == 2 {\n            result.push(\"Two\");\n        } else if cur == 3 {\n  \
    \          result.push(\"Three\");\n        } else if cur == 4 {\n           \
    \ result.push(\"Four\");\n        } else if cur == 5 {\n            result.push(\"\
    Five\");\n        } else if cur == 6 {\n            result.push(\"Six\");\n  \
    \      } else if cur == 7 {\n            result.push(\"Seven\");\n        } else\
    \ if cur == 8 {\n            result.push(\"Eight\");\n        } else if cur ==\
    \ 9 {\n            result.push(\"Nine\");\n        } else {\n            result.push(by_length(arr.iter().skip(i\
    \ + 1).take(3).collect()));\n        }\n        cur = arr[i];\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmp7j13qwjd.rs:38:35\n     |\n\
    38   |             result.push(by_length(arr.iter().skip(i + 1).take(3).collect()));\n\
    \     |                         --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                         |\n     |                         required by\
    \ a bound introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7j13qwjd.rs:38:25\n   |\n38 |             result.push(by_length(arr.iter().skip(i\
    \ + 1).take(3).collect()));\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found struct `Vec`\n   |\n   = note: expected reference `&str`\n\
    \                 found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7j13qwjd.rs:43:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n43 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n   \
    \           found struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == arr[i] {\n \
    \               j += 1;\n                continue;\n            }\n          \
    \  if arr[j] < arr[i] {\n                break;\n            }\n            result.push(by_length(vec![arr[j],\
    \ arr[i]]));\n            i += 1;\n            j += 1;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyro9i1oa.rs:36:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    36 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j],\
    \ &mut i));\n            j += 1;\n        }\n    }\n    result.reverse();\n  \
    \  result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpr8yg42bl.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j], &mut i));\n   |         \
    \                ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpblwkfmtg.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == arr[i] {\n \
    \               j += 1;\n                continue;\n            }\n          \
    \  if arr[j] < arr[i] {\n                break;\n            }\n            result.push(by_length(vec![arr[i],\
    \ arr[j]]));\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_hl1lywb.rs:36:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    36 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let len = arr[i] - 1;\n\
    \        if len < 1 || len > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j < arr.len() {\n          \
    \  if arr[j] == len {\n                result.push(by_name(len));\n          \
    \      i += 1;\n                break;\n            }\n            j += 1\n  \
    \      }\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp9igfr0tt.rs:26:29\n\
    \   |\n26 |                 result.push(by_name(len));\n   |                 \
    \            ^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > 9 {\n    \
    \        result.push(by_length(arr[i..i + 1]));\n            i += 1;\n       \
    \ } else {\n            result.push(by_name(arr[i]));\n            i += 1;\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpz743hug1.rs:22:25\n\
    \   |\n22 |             result.push(by_name(arr[i]));\n   |                  \
    \       ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpz743hug1.rs:19:35\n   |\n19 |             result.push(by_length(arr[i..i\
    \ + 1]));\n   |                                   ^^^^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_vec()`\n   |                                   |\n\
    \   |                                   expected struct `Vec`, found slice `[isize]`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n               found slice `[isize]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpz743hug1.rs:26:5\n   |\n11 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n26 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr.to_owned();\n\
    \    let mut len = arr.len();\n    let mut reversed = vec![];\n    let mut i =\
    \ 0;\n    while i < len {\n        let mut j = i;\n        while j > 0 && arr[j\
    \ - 1] > arr[j] {\n            j -= 1;\n        }\n        reversed.push(arr[j]);\n\
    \        i += 1;\n    }\n    let mut i = 0;\n    while i < len {\n        let\
    \ mut j = i;\n        while j > 0 && arr[j - 1] < arr[j] {\n            j -= 1;\n\
    \        }\n        reversed.push(arr[j]);\n        i += 1;\n    }\n    for &n\
    \ in reversed {\n        arr.swap(i, j);\n        i += 1;\n        j -= 1;\n \
    \   }\n    let mut i = 0;\n    while i < len {\n        let mut j = i;\n     \
    \   while j > 0 && arr[j - 1] != arr[j] {\n            j -= 1;\n        }\n  \
    \      arr.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    arr\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `j` in this scope\n  --> /tmp/tmpsr74khb8.rs:37:21\n\
    \   |\n37 |         arr.swap(i, j);\n   |                     ^ help: a local\
    \ variable with a similar name exists: `i`\n\nerror[E0425]: cannot find value\
    \ `j` in this scope\n  --> /tmp/tmpsr74khb8.rs:39:9\n   |\n39 |         j -= 1;\n\
    \   |         ^ help: a local variable with a similar name exists: `i`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsr74khb8.rs:36:9\n   |\n36 |     for &n in reversed\
    \ {\n   |         ^^    -------- this expression has type `Option<isize>`\n  \
    \ |         |\n   |         expected `isize`, found reference\n   |         help:\
    \ you can probably remove the explicit borrow: `n`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsr74khb8.rs:51:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n51 |     arr\n   |     ^^^ expected struct `String`,\
    \ found `isize`\n   |\n   = note: expected struct `Vec<String>`\n            \
    \  found struct `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0425.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == i {\n      \
    \          result.push(by_name(arr[j]));\n                i += 1;\n          \
    \      break;\n            }\n            j += 1\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpd0wb1io3.rs:25:29\n\
    \   |\n25 |                 result.push(by_name(arr[j]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd0wb1io3.rs:24:26\n   |\n24 |             if arr[j] == i {\n  \
    \ |                          ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n24 |             if arr[j] == i.try_into().unwrap() {\n   |     \
    \                      ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                i += 1;\n                j +=\
    \ 1;\n                continue;\n            }\n            if arr[j] > arr[i]\
    \ {\n                result.push(by_length(arr.iter().cloned().skip(j).take(1).collect()));\n\
    \                i += 1;\n                j += 1;\n                continue;\n\
    \            }\n            if arr[j] < arr[i] {\n                result.push(by_length(arr.iter().cloned().skip(j).take(1).collect()));\n\
    \                i += 1;\n                j += 1;\n                continue;\n\
    \            }\n        }\n        result.push(by_length(arr.iter().cloned().skip(i).take(1).collect()));\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpukru3t0h.rs:49:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    49 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == arr[i] {\n \
    \               j += 1;\n                continue;\n            }\n          \
    \  if arr[j] > arr[i] {\n                break;\n            }\n            result.push(by_length(vec![arr[j],\
    \ arr[i]]));\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp94yj27uc.rs:36:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    36 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.iter().cloned().collect::<Vec<isize>>();\n    let mut\
    \ reversed = digits.iter().cloned().rev().collect::<Vec<isize>>();\n    let mut\
    \ i = 0;\n    while i < reversed.len() {\n        if reversed[i] < 10 {\n    \
    \        result.push(by_digit(reversed[i], &digits[i .. i + 1]));\n          \
    \  i += 1;\n        } else {\n            result.push(by_digit(reversed[i] - 10,\
    \ &digits[i .. i + 1]));\n            i += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpjh_broat.rs:21:25\n\
    \   |\n21 |             result.push(by_digit(reversed[i], &digits[i .. i + 1]));\n\
    \   |                         ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find function `by_digit` in this scope\n  --> /tmp/tmpjh_broat.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(reversed[i] - 10, &digits[i .. i\
    \ + 1]));\n   |                         ^^^^^^^^ not found in this scope\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       let mut j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n       \
    \     j -= 1;\n        }\n        result.push(&arr[..j]);\n        i = j;\n  \
    \  }\n    if arr.len() > 0 {\n        result.push(&arr[..i]);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl_312nk8.rs:25:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    25 |     result\n   |     ^^^^^^ expected struct `String`, found `&[isize]`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&[isize]>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut last_digit\
    \ = arr[0];\n    let mut last_digit_index = 0;\n    while i < arr.len() {\n  \
    \      let digit = arr[i];\n        if digit < 1 || digit > 9 {\n            i\
    \ += 1;\n            continue;\n        }\n        if digit == last_digit {\n\
    \            i += 1;\n            continue;\n        }\n        if digit > last_digit\
    \ {\n            i += 1;\n            continue;\n        }\n        if digit <\
    \ last_digit {\n            i += 1;\n            continue;\n        }\n      \
    \  if digit == last_digit + 1 {\n            result[j] = \"One\";\n          \
    \  i += 1;\n            j += 1;\n            last_digit_index += 1;\n        \
    \    last_digit = digit;\n            continue;\n        }\n        if digit ==\
    \ last_digit + 2 {\n            result[j] = \"Two\";\n            i += 1;\n  \
    \          j += 1;\n            last_digit_index += 1;\n            last_digit\
    \ = digit;\n            continue;\n        }\n        if digit == last_digit +\
    \ 3 {\n            result[j] = \"Three\";\n            i += 1;\n            j\
    \ += 1;\n            last_digit_index += 1;\n            last_digit = digit;\n\
    \            continue;\n        }\n        if digit == last_digit + 4 {\n    \
    \        result[j] = \"Four\";\n            i += 1;\n            j += 1;\n   \
    \         last_digit_index += 1;\n            last_digit = digit;\n          \
    \  continue;\n        }\n        if digit == last_digit + 5 {\n            result[j]\
    \ = \"Five\";\n            i += 1;\n            j += 1;\n            last_digit_index\
    \ += 1;\n            last_digit = digit;\n            continue;\n        }\n \
    \       if digit == last_digit + 6 {\n            result[j] = \"Six\";\n     \
    \       i += 1;\n            j += 1;\n            last_digit_index += 1;\n   \
    \         last_digit = digit;\n            continue;\n        }\n        if digit\
    \ == last_digit + 7 {\n            result[j] = \"Seven\";\n            i += 1;\n\
    \            j += 1;\n            last_digit_index += 1;\n            last_digit\
    \ = digit;\n            continue;\n        }\n        if digit == last_digit +\
    \ 8 {\n            result[j] = \"Eight\";\n            i += 1;\n            j\
    \ += 1;\n            last_digit_index += 1;\n            last_digit = digit;\n\
    \            continue;\n        }\n        if digit == last_digit + 9 {\n    \
    \        result[j] = \"Nine\";\n            i += 1;\n            j += 1;\n   \
    \         last_digit_index += 1;\n            last_digit = digit;\n          \
    \  continue;\n        }\n        result[j] = \"Unknown\";\n        i += 1;\n \
    \       j += 1;\n        last_digit_index += \n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp8rw9kys4.rs:124:3\n\
    \    |\n11  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n21  |     while\
    \ i < arr.len() {\n    |                         - this delimiter might not be\
    \ properly closed...\n...\n115 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n124 | }\n    |   ^\n\nerror: expected expression, found `}`\n\
    \   --> /tmp/tmp8rw9kys4.rs:115:1\n    |\n115 | }\n    | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8rw9kys4.rs:11:34\n   |\n11 |\
    \ fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------          \
    \           ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |   \
    \ implicitly returns `()` as its body has no tail or `return` expression\n   |\n\
    \   = note: expected struct `Vec<String>`\n           found unit type `()`\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       let mut j = i;\n        while j < arr.len() && arr[j] >= 1 && arr[j] <=\
    \ 9 {\n            j = j + 1;\n        }\n        if j == i {\n            break;\n\
    \        }\n        let mut k = j;\n        while k < arr.len() && arr[k] >= 1\
    \ && arr[k] <= 9 {\n            k = k + 1;\n        }\n        if k == j {\n \
    \           break;\n        }\n        result.push(by_length(arr.split_off(j).reverse()));\n\
    \        i = j;\n    }\n    if i == arr.len() {\n        return result;\n    }\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] >= 1 && arr[i]\
    \ <= 9 {\n            result.push(by_name(&arr[i]));\n        } else {\n     \
    \       result.push(String::from(\"\"));\n        }\n        i = i + 1;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp58mrqbc3.rs:38:25\n\
    \   |\n38 |             result.push(by_name(&arr[i]));\n   |                 \
    \        ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp58mrqbc3.rs:29:31\n   |\n29 |         result.push(by_length(arr.split_off(j).reverse()));\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \  found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp58mrqbc3.rs:33:16\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n33 |         return result;\n   |                ^^^^^^ expected struct `String`,\
    \ found struct `Vec`\n   |\n   = note: expected struct `Vec<String>`\n       \
    \       found struct `Vec<Vec<String>>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp58mrqbc3.rs:40:25\n   |\n40 |             result.push(String::from(\"\
    \"));\n   |                         ^^^^^^^^^^^^^^^^ expected struct `Vec`, found\
    \ struct `String`\n   |\n   = note: expected struct `Vec<String>`\n          \
    \    found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp58mrqbc3.rs:44:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n44 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    if arr.is_empty() {\n        return result;\n\
    \    }\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 ||\
    \ arr[i] > 9 {\n            i += 1;\n            continue;\n        }\n      \
    \  let mut j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j\
    \ -= 1;\n        }\n        result.push(by_length(arr.iter().take(j).rev()));\n\
    \        result.push(by_length(arr.iter().skip(j).rev()));\n        result.push(by_length(arr.iter().take(i).rev()));\n\
    \        result.push(by_length(arr.iter().skip(i).rev()));\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphypftg6w.rs:26:31\n   |\n\
    26 |         result.push(by_length(arr.iter().take(j).rev()));\n   |         \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct\
    \ `Rev`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct\
    \ `Rev<std::iter::Take<std::slice::Iter<'_, isize>>>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphypftg6w.rs:26:21\n   |\n26 |         result.push(by_length(arr.iter().take(j).rev()));\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `String`\n  \
    \            found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphypftg6w.rs:27:31\n   |\n27 |         result.push(by_length(arr.iter().skip(j).rev()));\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Rev`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Rev<Skip<std::slice::Iter<'_, isize>>>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphypftg6w.rs:27:21\n   |\n27 |         result.push(by_length(arr.iter().skip(j).rev()));\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `String`\n  \
    \            found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphypftg6w.rs:28:31\n   |\n28 |         result.push(by_length(arr.iter().take(i).rev()));\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Rev`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Rev<std::iter::Take<std::slice::Iter<'_, isize>>>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphypftg6w.rs:28:21\n   |\n28 |         result.push(by_length(arr.iter().take(i).rev()));\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `String`\n  \
    \            found struct `Vec<String>`\n\nerror[E0308]: mismatched "
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    if arr.len() == 0 {\n        return result;\n\
    \    }\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = arr.len() - 1;\n\
    \    while i < k {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n\
    \            continue;\n        }\n        let mut tmp: Vec<String> = vec![];\n\
    \        while j < k {\n            if arr[j] == i {\n                tmp.push(by_length(arr.clone()));\n\
    \                j += 1;\n                break;\n            }\n            tmp.push(by_length(arr.clone()));\n\
    \            j += 1\n        }\n        i += 1;\n        result.push(&tmp[tmp.len()\
    \ - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1zgyclkd.rs:26:26\n   |\n\
    26 |             if arr[j] == i {\n   |                          ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n26 |             if arr[j] == i.try_into().unwrap()\
    \ {\n   |                           ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1zgyclkd.rs:27:26\n   |\n27 |                 tmp.push(by_length(arr.clone()));\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found struct `Vec`\n   |\n   = note: expected struct `String`\n            \
    \  found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1zgyclkd.rs:31:22\n\
    \   |\n31 |             tmp.push(by_length(arr.clone()));\n   |              \
    \        ^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `String`\n              found struct `Vec<String>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1zgyclkd.rs:35:21\n   |\n35 |\
    \         result.push(&tmp[tmp.len() - 1]);\n   |                     ^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\nhelp: consider removing the\
    \ borrow\n   |\n35 -         result.push(&tmp[tmp.len() - 1]);\n35 +         result.push(tmp[tmp.len()\
    \ - 1]);\n   | \n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j < arr.len() {\n          \
    \  if arr[j] == arr[j - 1] + 1 {\n                result.push(\"One\");\n    \
    \            break;\n            }\n            if arr[j] == arr[j - 1] + 2 {\n\
    \                result.push(\"Two\");\n                break;\n            }\n\
    \            if arr[j] == arr[j - 1] + 3 {\n                result.push(\"Three\"\
    );\n                break;\n            }\n            if arr[j] == arr[j - 1]\
    \ + 4 {\n                result.push(\"Four\");\n                break;\n    \
    \        }\n            if arr[j] == arr[j - 1] + 5 {\n                result.push(\"\
    Five\");\n                break;\n            }\n            if arr[j] == arr[j\
    \ - 1] + 6 {\n                result.push(\"Six\");\n                break;\n\
    \            }\n            if arr[j] == arr[j - 1] + 7 {\n                result.push(\"\
    Seven\");\n                break;\n            }\n            if arr[j] == arr[j\
    \ - 1] + 8 {\n                result.push(\"Eight\");\n                break;\n\
    \            }\n            if arr[j] == arr[j - 1] + 9 {\n                result.push(\"\
    Nine\");\n                break;\n            }\n            i += 1;\n       \
    \ }\n    }\n    if result.is_empty() {\n        return vec![];\n    }\n    result.reverse();\n\
    \    for i in result {\n        if let Some(index) = arr.iter().position(|&x|\
    \ x == i) {\n            arr[index] = i;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppyl43gde.rs:65:60\n   |\n\
    65 |         if let Some(index) = arr.iter().position(|&x| x == i) {\n   |   \
    \                                                         ^ expected `isize`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppyl43gde.rs:66:26\n\
    \   |\n66 |             arr[index] = i;\n   |             ----------   ^ expected\
    \ `isize`, found `&str`\n   |             |\n   |             expected due to\
    \ the type of this binding\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppyl43gde.rs:69:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n69 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       let mut j = i;\n        while j < arr.len() {\n            if arr[j] <\
    \ 1 || arr[j] > 9 {\n                j += 1;\n                continue;\n    \
    \        }\n            result.push(by_digit(arr[j]));\n            j += 1;\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpclvwp7ep.rs:21:25\n\
    \   |\n21 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > 9 {\n    \
    \        result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n  \
    \          break;\n        }\n        result.push(by_length(arr.iter().filter(|&x|\
    \ x > 1 && x <= 9).collect()));\n        i += 1;\n    }\n    result.push(by_length(arr.iter().filter(|&x|\
    \ x > 1 && x <= 9).collect()));\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpovnlwab1.rs:19:62\n   |\n\
    19 |             result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n\
    \   |                                                              ^\n   |   \
    \                                                           |\n   |          \
    \                                                    expected `&isize`, found\
    \ integer\n   |                                                              help:\
    \ consider borrowing here: `&9`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpovnlwab1.rs:19:35\n\
    \     |\n19   |             result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n\
    \     |                         --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                         |\n     |                         required by\
    \ a bound introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpovnlwab1.rs:22:58\n   |\n22 |         result.push(by_length(arr.iter().filter(|&x|\
    \ x > 1 && x <= 9).collect()));\n   |                                        \
    \                  ^\n   |                                                   \
    \       |\n   |                                                          expected\
    \ `&isize`, found integer\n   |                                              \
    \            help: consider borrowing here: `&1`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpovnlwab1.rs:22:68\n   |\n22 |         result.push(by_length(arr.iter().filter(|&x|\
    \ x > 1 && x <= 9).collect()));\n   |                                        \
    \                            ^\n   |                                         \
    \                           |\n   |                                          \
    \                          expe"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < arr.len() {\n        if\
    \ arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n   \
    \     }\n        let mut k = i;\n        while k < arr.len() {\n            if\
    \ arr[k] > 9 {\n                i += 1;\n                k += 1;\n           \
    \     continue;\n            }\n            if arr[k] < 1 {\n                i\
    \ += 1;\n                k += 1;\n                continue;\n            }\n \
    \           result.push(by_digit(arr[k]));\n            i += 1;\n            k\
    \ += 1;\n        }\n    }\n    result.reverse();\n    for i in result {\n    \
    \    if let Some(digit) = by_digit(i) {\n            result.insert(i, digit);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpvid613c4.rs:35:25\n\
    \   |\n35 |             result.push(by_digit(arr[k]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `by_digit` in this scope\n  --> /tmp/tmpvid613c4.rs:42:30\n   |\n42 |      \
    \   if let Some(digit) = by_digit(i) {\n   |                              ^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvid613c4.rs:46:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n46 |     result\n   |     ^^^^^^ expected struct `String`, found `usize`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == i {\n      \
    \          result.push(by_name(arr[j]));\n                i += 1;\n          \
    \      break;\n            }\n            j += 1\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpd0wb1io3.rs:25:29\n\
    \   |\n25 |                 result.push(by_name(arr[j]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd0wb1io3.rs:24:26\n   |\n24 |             if arr[j] == i {\n  \
    \ |                          ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n24 |             if arr[j] == i.try_into().unwrap() {\n   |     \
    \                      ++++++++++++++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j > 0 && arr[j - 1] > arr[j]\
    \ {\n            j -= 1;\n        }\n        result.push(&arr[..j].iter().map(|x|\
    \ match x {\n            1 => \"One\",\n            2 => \"Two\",\n          \
    \  3 => \"Three\",\n            4 => \"Four\",\n            5 => \"Five\",\n \
    \           6 => \"Six\",\n            7 => \"Seven\",\n            8 => \"Eight\"\
    ,\n            9 => \"Nine\",\n            _ => \"\".to_string(),\n        }).collect::<Vec<_>>().join(\"\
    \"));\n        i = j;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmps_p7azcp.rs:33:18\n\
    \   |\n23 |           result.push(&arr[..j].iter().map(|x| match x {\n   |  ______________________________________________-\n\
    24 | |             1 => \"One\",\n25 | |             2 => \"Two\",\n26 | |   \
    \          3 => \"Three\",\n...  |\n32 | |             9 => \"Nine\",\n   | |\
    \                  ------ this and all prior arms are found to be of type `&str`\n\
    33 | |             _ => \"\".to_string(),\n   | |                  ^^^^^^^^^^^^^^\n\
    \   | |                  |\n   | |                  expected `&str`, found struct\
    \ `String`\n   | |                  help: consider borrowing here: `&\"\".to_string()`\n\
    34 | |         }).collect::<Vec<_>>().join(\"\"));\n   | |_________- `match` arms\
    \ have incompatible types\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps_p7azcp.rs:37:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n37 |     result\n   |     ^^^^^^ expected struct `String`, found `&String`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&String>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut cur = arr[0];\n    let mut i = 0;\n    while cur > 0 {\n        if\
    \ cur % 10 == 0 {\n            result.push(by_digit(cur / 10).unwrap());\n   \
    \         i += 1;\n        }\n        cur /= 10;\n    }\n    if i == 0 {\n   \
    \     result.push(by_digit(cur).unwrap());\n    }\n    result.reverse();\n   \
    \ result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpqc_2l11y.rs:20:25\n\
    \   |\n20 |             result.push(by_digit(cur / 10).unwrap());\n   |      \
    \                   ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ function `by_digit` in this scope\n  --> /tmp/tmpqc_2l11y.rs:26:21\n   |\n26\
    \ |         result.push(by_digit(cur).unwrap());\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == arr[j - 1] {\n\
    \                j += 1;\n                continue;\n            }\n         \
    \   break;\n        }\n        let mut k = i;\n        while k > 0 && arr[k -\
    \ 1] > arr[k] {\n            k -= 1;\n        }\n        result.push(by_length(vec![arr[i],\
    \ arr[k]]));\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyjuhv1gi.rs:37:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    37 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() && arr[j] < 10 {\n            j += 1\n        }\n    \
    \    if j == i {\n            result.push(format!(\"One\", arr[i]));\n       \
    \     i += 1;\n            continue;\n        }\n        let mut k = i;\n    \
    \    while k < j {\n            result.push(format!(\"{}\", arr[k]));\n      \
    \      k += 1;\n        }\n        result.push(format!(\"{}\", arr[j]));\n   \
    \     i = j;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: argument never used\n  --> /tmp/tmpwqscdrpb.rs:23:40\n   |\n23 |\
    \             result.push(format!(\"One\", arr[i]));\n   |                   \
    \              -----  ^^^^^^ argument never used\n   |                       \
    \          |\n   |                                 formatting specifier missing\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        let mut k = j;\n        while k < arr.len() && arr[k] > arr[k\
    \ + 1] {\n            k += 1;\n        }\n        let mut tmp = arr[k];\n    \
    \    arr[k] = arr[j];\n        arr[j] = tmp;\n        result.push(&name[arr[i]\
    \ - 1]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `name` in this scope\n  --> /tmp/tmpxdll4qt6.rs:33:22\n\
    \   |\n33 |         result.push(&name[arr[i] - 1]);\n   |                    \
    \  ^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result.reverse();\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpblwkfmtg.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        result.push(by_length(arr.subslice(i..j)));\n        i = j;\n\
    \    }\n    if i == 0 {\n        result.push(\"One\");\n    }\n    if i == arr.len()\
    \ {\n        result.push(\"Nine\");\n    }\n    result\n}\n\nfn main() {\n   \
    \ let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `subslice` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmplegoxy12.rs:26:35\n   |\n26 |         result.push(by_length(arr.subslice(i..j)));\n\
    \   |                                   ^^^^^^^^ help: there is an associated\
    \ function with a similar name: `splice`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmplegoxy12.rs:30:21\n   |\n30 |         result.push(\"One\");\n  \
    \ |                     ^^^^^ expected struct `Vec`, found `&str`\n   |\n   =\
    \ note: expected struct `Vec<String>`\n           found reference `&'static str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplegoxy12.rs:33:21\n   |\n33 |\
    \         result.push(\"Nine\");\n   |                     ^^^^^^ expected struct\
    \ `Vec`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n      \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplegoxy12.rs:35:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n35 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<Vec<String>>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 101
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut reversed = arr\n        .iter()\n        .cloned()\n        .enumerate()\n\
    \        .map(|(i, x)| {\n            if x > 9 {\n                let mut s =\
    \ String::new();\n                s.push_str(&format!(\"{}\", x - 10));\n    \
    \            s.push_str(&format!(\"{}\", x));\n                s.push_str(&format!(\"\
    {}\", x + 10));\n                s.push_str(\"One\");\n                return\
    \ s;\n            }\n            String::from(format!(\"{}\", x))\n        })\n\
    \        .collect::<Vec<_>>();\n    reversed.reverse();\n    for s in reversed\
    \ {\n        result.push(s);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"3\", \"2\", \"8\", \"5\", \"4\", \"1\", \"1\", \"2\"]`,\n right: `[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]`', /tmp/tmpzz8gjrvz.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            i += 1;\n            j += 1\n   \
    \     }\n        let mut k = i;\n        while k > 0 {\n            let mut j\
    \ = k;\n            while j < arr.len() {\n                if arr[j] < 1 || arr[j]\
    \ > 9 {\n                    break;\n                }\n                j += 1;\n\
    \            }\n            let mut k = j;\n            while k > 0 {\n      \
    \          let mut j = k;\n                while j < arr.len() {\n           \
    \         if arr[j] < 1 || arr[j] > 9 {\n                        break;\n    \
    \                }\n                    j += 1;\n                }\n         \
    \       let mut k = j;\n                while k > 0 {\n                    let\
    \ mut j = k;\n                    while j < arr.len() {\n                    \
    \    if arr[j] < 1 || arr[j] > 9 {\n                            break;\n     \
    \                   }\n                        j += 1;\n                    }\n\
    \                    let mut k = j;\n                    while k > 0 {\n     \
    \                   let mut j = k;\n                        while j < arr.len()\
    \ {\n                            if arr[j] < 1 || arr[j] > 9 {\n             \
    \                   break;\n                            }\n                  \
    \          j += 1;\n                        }\n                        let mut\
    \ k = j;\n                        while k > 0 {\n                            let\
    \ mut j = k;\n                            while j < arr.len() {\n            \
    \                    if arr[j] < 1 || arr[j] > 9 {\n                         \
    \           break;\n                                }\n                      \
    \          j += 1;\n                            }\n                          \
    \  let mut k = j;\n                            while k > 0 {\n               \
    \                 let mut j = k;\n                                while j < arr.len()\
    \ {\n                                    if arr[j] < 1 || arr[j] > 9 {\n     \
    \                                   break;\n                                 \
    \   }\n                                    j += 1;\n                         \
    \       }\n                                let mut k = j;\n                  \
    \              while k > 0 {\n                                    let mut j =\
    \ k;\n                                    while j < arr.len() {\n            \
    \                            if arr[j] < 1 || arr[j] > 9 {\n                 \
    \                           break;\n                                        }\n\
    \                                        j += 1;\n                           \
    \         }\n                                    let mut k = j;\n            \
    \                        while k > 0 {\n                                     \
    \   let mut j = k;\n                                        while j < arr.len()\
    \ {\n                                            if arr[j] < 1 || arr[j] > 9 {\n\
    \                                                break;\n                    \
    \                        }\n                                            j += 1;\n\
    \                                        }\n                                 \
    \       let mut k = j;\n                                        while k > 0 {\n\
    \                                            let mut j = k;\n                \
    \                            while j < arr.len() {\n                         \
    \                       if arr[j] < 1 || arr\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp5n1j6j1g.rs:112:3\n\
    \    |\n11  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n17  |     while\
    \ i < arr.len() {\n    |                         - unclosed delimiter\n...\n27\
    \  |         while k > 0 {\n    |                     - unclosed delimiter\n...\n\
    36  |             while k > 0 {\n    |                         - unclosed delimiter\n\
    ...\n45  |                 while k > 0 {\n    |                             -\
    \ unclosed delimiter\n...\n54  |                     while k > 0 {\n    |    \
    \                             - unclosed delimiter\n...\n63  |               \
    \          while k > 0 {\n    |                                     - unclosed\
    \ delimiter\n...\n72  |                             while k > 0 {\n    |     \
    \                                    - unclosed delimiter\n...\n81  |        \
    \                         while k > 0 {\n    |                               \
    \              - unclosed delimiter\n...\n90  |                              \
    \       while k > 0 {\n    |                                                 -\
    \ unclosed delimiter\n...\n99  |                                         while\
    \ k > 0 {\n    |                                                     - unclosed\
    \ delimiter\n100 |                                             let mut j = k;\n\
    101 |                                             while j < arr.len() {\n    |\
    \                                                                 - this delimiter\
    \ might not be properly closed...\n102 |                                     \
    \            if arr[j] < 1 || arr\n103 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n112 | }\n    |   ^\n\nerror: expected `{`,\
    \ found `}`\n   --> /tmp/tmp5n1j6j1g.rs:103:1\n    |\n102 |                  \
    \                               if arr[j] < 1 || arr\n    |                  \
    \                               -- this `if` expression has a condition, but no\
    \ block\n103 | }\n    | ^ expected `{`\n\nerror[E0308]: mismatched types\n   -->\
    \ /tmp"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > 9 {\n    \
    \        result.push(by_length(arr.iter().skip(i).take(1).collect()));\n     \
    \       break;\n        }\n        result.push(by_name(&arr[i]));\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp1zcw25lg.rs:22:21\n\
    \   |\n22 |         result.push(by_name(&arr[i]));\n   |                     ^^^^^^^\
    \ not found in this scope\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `&isize`\n  --> /tmp/tmp1zcw25lg.rs:19:35\n\
    \   |\n19 |             result.push(by_length(arr.iter().skip(i).take(1).collect()));\n\
    \   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1zcw25lg.rs:25:5\n   |\n11 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n25 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let len = arr[i] - 1;\n\
    \        if len < 1 || len > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        result.push(by_length(arr.iter().skip(i).take(len).collect()));\n\
    \        i += len;\n    }\n    if arr.len() == 0 {\n        return vec![];\n \
    \   }\n    if arr.len() == 1 {\n        result.push(\"One\");\n        return\
    \ result;\n    }\n    if arr.len() == 2 {\n        result.push(\"Two\");\n   \
    \     result.push(\"One\");\n        return result;\n    }\n    if arr.len() ==\
    \ 3 {\n        result.push(\"Three\");\n        result.push(\"Two\");\n      \
    \  result.push(\"One\");\n        return result;\n    }\n    if arr.len() == 4\
    \ {\n        result.push(\"Four\");\n        result.push(\"Three\");\n       \
    \ result.push(\"Two\");\n        result.push(\"One\");\n        return result;\n\
    \    }\n    if arr.len() == 5 {\n        result.push(\"Five\");\n        result.push(\"\
    Four\");\n        result.push(\"Three\");\n        result.push(\"Two\");\n   \
    \     result.push(\"One\");\n        return result;\n    }\n    if arr.len() ==\
    \ 6 {\n        result.push(\"Six\");\n        result.push(\"Five\");\n       \
    \ result.push(\"Four\");\n        result.push(\"Three\");\n        result.push(\"\
    Two\");\n        result.push(\"One\");\n        return result;\n    }\n    if\
    \ arr.len() == 7 {\n        result.push(\"Seven\");\n        result.push(\"Six\"\
    );\n        result.push(\"Five\");\n        result.push(\"Four\");\n        result.push(\"\
    Three\");\n        result.push(\"Two\");\n        result.push(\"One\");\n    \
    \    return result;\n    }\n    if arr.len() == 8 {\n        result.push(\"Eight\"\
    );\n        result.push(\"Seven\");\n        result.push(\"Six\");\n        result.push(\"\
    Five\");\n        result.push(\"Four\");\n        result.push(\"Three\");\n  \
    \      result.push(\"Two\");\n        result.push(\"One\");\n        return result;\n\
    \    }\n    if arr.len() == 9 {\n        result.push(\"Nine\");\n        result.push(\"\
    Eight\");\n        result.push(\"Seven\");\n        result.push(\"Six\");\n  \
    \      result.push(\"Five\");\n        result.push(\"Four\");\n        result.push(\"\
    Three\");\n        result.push(\"Two\");\n        result.push(\"One\");\n    \
    \    return result;\n    }\n    if arr.len() == 10 {\n        result.push(\"Ten\"\
    );\n        result.push(\"Nine\");\n        result.push(\"Eight\");\n        result.push\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmppce_yrly.rs:115:3\n\
    \    |\n11  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n101 |     if arr.len()\
    \ == 10 {\n    |                        - this delimiter might not be properly\
    \ closed...\n...\n106 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n115 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmppce_yrly.rs:23:55\n   |\n23 |         result.push(by_length(arr.iter().skip(i).take(len).collect()));\n\
    \   |                                                       ^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n23 |         result.push(by_length(arr.iter().skip(i).take(len.try_into().unwrap()).collect()));\n\
    \   |                                                          ++++++++++++++++++++\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmppce_yrly.rs:23:31\n     |\n\
    23   |         result.push(by_length(arr.iter().skip(i).take(len).collect()));\n\
    \     |                     --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                     |\n     |                     required by a bound\
    \ introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppce_yrly.rs:24:14\n   |\n24 |         i += len;\n\
    \   |              ^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `usize`\n  --> /tmp/tmppce_yrly.rs:24:11\n   |\n24 | \
    \        i += len;\n   |           ^^ no implementation for `usize += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `usize`\n\
    \   = help: the following othe"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n \
    \       if arr[i] > 9 {\n            result.push(by_length(arr.iter().filter(|&x|\
    \ x > 9).collect()));\n            break;\n        }\n        if arr[i] > 0 &&\
    \ arr[i] < 10 {\n            result.push(by_length(arr.iter().filter(|&x| x >\
    \ 0 && x < 10).collect()));\n            break;\n        }\n        result.push(by_length(arr.iter().filter(|&x|\
    \ x > 0 && x < 10).collect()));\n        i += 1;\n    }\n    if result.is_empty()\
    \ {\n        return vec![];\n    }\n    let mut i = 0;\n    while i < result.len()\
    \ {\n        result[i] = by_name(&result[i]);\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpuictq6jr.rs:31:21\n\
    \   |\n31 |         result[i] = by_name(&result[i]);\n   |                   \
    \  ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuictq6jr.rs:16:62\n\
    \   |\n16 |             result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n\
    \   |                                                              ^\n   |   \
    \                                                           |\n   |          \
    \                                                    expected `&isize`, found\
    \ integer\n   |                                                              help:\
    \ consider borrowing here: `&9`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmpuictq6jr.rs:16:35\n\
    \     |\n16   |             result.push(by_length(arr.iter().filter(|&x| x > 9).collect()));\n\
    \     |                         --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                         |\n     |                         required by\
    \ a bound introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuictq6jr.rs:20:62\n   |\n20 |             result.push(by_length(arr.iter().filter(|&x|\
    \ x > 0 && x < 10).collect()));\n   |                                        \
    \                      ^\n   |                                               \
    \               |\n   |                                                      \
    \        expected `&isize`, found integer\n   |                              \
    \                                help: consider borrowing here: `&0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuictq6jr.rs:20:71\n   |\n20 |             result.push(by_length(arr.iter().filter(|&x|\
    \ x > 0 && x < 10).collect()));\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == arr[i] {\n \
    \               j += 1;\n                continue;\n            }\n          \
    \  if arr[j] > arr[i] {\n                break;\n            }\n            result.push(by_length(arr.iter().skip(j).take(i\
    \ + 1).collect()));\n            i += 1;\n            j += 1;\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n    --> /tmp/tmpw88ag8z8.rs:31:35\n     |\n\
    31   |             result.push(by_length(arr.iter().skip(j).take(i + 1).collect()));\n\
    \     |                         --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \     |                         |\n     |                         required by\
    \ a bound introduced by this call\n     |\n     = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw88ag8z8.rs:36:5\n   |\n11 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |                                  -----------\
    \ expected `Vec<String>` because of return type\n...\n36 |     result\n   |  \
    \   ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut result = vec![];\n    let mut digits = vec![];\n    let mut i = 0;\n\
    \    while i < arr.len() {\n        let digit = arr[i] - 1;\n        if digit\
    \ < 1 || digit > 9 {\n            i += 1;\n            continue;\n        }\n\
    \        digits.push(digit);\n        i += 1;\n    }\n    if digits.is_empty()\
    \ {\n        return result;\n    }\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        let digit = digits[i];\n        let digit = match digit {\n     \
    \       1 => \"One\",\n            2 => \"Two\",\n            3 => \"Three\",\n\
    \            4 => \"Four\",\n            5 => \"Five\",\n            6 => \"Six\"\
    ,\n            7 => \"Seven\",\n            8 => \"Eight\",\n            9 =>\
    \ \"Nine\",\n            _ => panic!(\"Invalid digit: {}\", digit),\n        };\n\
    \        result.push(digit);\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg5ge8kfe.rs:42:21\n   |\n\
    42 |         result.push(digit);\n   |                     ^^^^^- help: try using\
    \ a conversion method: `.to_string()`\n   |                     |\n   |      \
    \               expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        digits.push(arr[i]);\n        i += 1;\n    }\n    for i in\
    \ 0..digits.len() {\n        let mut j = i;\n        while j > 0 && digits[j -\
    \ 1] > 9 {\n            j -= 1;\n        }\n        let mut k = j;\n        while\
    \ k < digits.len() && digits[k] < 1 {\n            k += 1;\n        }\n      \
    \  let mut digit = digits[k];\n        while digit > 9 {\n            digit /=\
    \ 10;\n        }\n        result.push(by_digit(digit));\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmplr844xu5.rs:39:21\n\
    \   |\n39 |         result.push(by_digit(digit));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                result.push(by_name(arr[i]));\n\
    \                i += 1;\n                j += 1;\n                break;\n  \
    \          }\n            j += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpxm375k6o.rs:29:29\n\
    \   |\n29 |                 result.push(by_name(arr[i]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut tmp = 0;\n        while j < i {\n            tmp +=\
    \ arr[j];\n            j += 1\n        }\n        if tmp < 10 {\n            i\
    \ += 1;\n            continue;\n        }\n        let mut tmp = 0;\n        while\
    \ k < i {\n            tmp += arr[k];\n            k += 1\n        }\n       \
    \ if tmp > 9 {\n            i += 1;\n            continue;\n        }\n      \
    \  result.push(by_digit(arr[i]));\n        i += 1;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1,\
    \ 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpa55sm8ka.rs:42:21\n\
    \   |\n42 |         result.push(by_digit(arr[i]));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut digits_len\
    \ = digits.len();\n    let mut digits_len = digits_len.saturating_add((digits_len\
    \ % 10).unwrap());\n    let mut digits_len = digits_len.saturating_add(1);\n \
    \   let mut digits_len = digits_len.saturating_add(1);\n    let mut digits_len\
    \ = digits_len.saturating_add(1);\n    let mut digits_len = digits_len.saturating_add(1);\n\
    \    let mut digits_len = digits_len.saturating_add(1);\n    let mut digits_len\
    \ = digits_len.saturating_add(1);\n    let mut digits_len = digits_len.saturating_add(1);\n\
    \    let mut digits_len = digits_len.saturating_add(1);\n    let mut digits_len\
    \ = digits_len.saturating_add(1);\n    let mut digits_len = digits_len.saturating_add(1);\n\
    \    let mut digits_len = digits_len.saturating_add(1);\n    let mut digits_len\
    \ = digits_len.saturating_add(1);\n    let mut digits_len = digits_len.saturating_add(1);\n\
    \    let mut digits_len = digits_len.saturating_add(1);\n    let mut digits_len\
    \ = digits_len.saturating_add(1);\n    let mut digits_len = digits_len.saturating_add(1);\n\
    \    let mut digits_len = digits_len.saturating_add(1);\n    let mut digits_len\
    \ = digits_len.saturating_add(1);\n    let mut digits_len = digits_len.saturating_add(1);\n\
    \    let mut digits_len = digits_len.saturating_add(1);\n    let mut digits_len\
    \ = digits_len.saturating_add(1);\n    let mut digits_len = digits_len.saturating_add(1);\n\
    \    let mut digits_len = digits_len.saturating_add(1);\n    let mut digits_len\
    \ = digits_len.saturating_add(1);\n    let mut digits_len = digits_len.saturating_add(1);\n\
    \    let mut digits_len = digits_len.saturating_add(1);\n    let mut digits_len\
    \ = digits_len.saturating_add(1);\n    let mut digits_len = digits_len.saturating_add(1);\n\
    \    let mut digits_len = digits_len.saturating_add(1);\n    let mut digit\n}\n\
    \nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvdrjdrqm.rs:48:18\n   |\n\
    48 |     let mut digit\n   |                  ^ help: add `;` here\n49 | }\n \
    \  | - unexpected token\n\nerror[E0599]: no method named `unwrap` found for type\
    \ `usize` in the current scope\n  --> /tmp/tmpvdrjdrqm.rs:18:70\n   |\n18 |  \
    \   let mut digits_len = digits_len.saturating_add((digits_len % 10).unwrap());\n\
    \   |                                                                      ^^^^^^\
    \ method not found in `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvdrjdrqm.rs:11:34\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------\
    \                     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut digits_len\
    \ = digits.len();\n    let mut digit_index = 0;\n    let mut digit_names: Vec<_>\
    \ = vec![];\n    let mut digit_names_len = digit_names.len();\n    let mut digit_name_len\
    \ = 0;\n    let mut digit_name_len_index = 0;\n    let mut digit_names_index =\
    \ 0;\n    let mut digit_names_index_len = 0;\n    let mut digit_names_index_len_index\
    \ = 0;\n    let mut digit_names_index_len_index2 = 0;\n    let mut digit_names_index_len_index2_index\
    \ = 0;\n    let mut digit_names_index_len_index2_index2 = 0;\n    let mut digit_names_index_len_index2_index2_index\
    \ = 0;\n    let mut digit_names_index_len_index2_index2_index2 = 0;\n    let mut\
    \ digit_names_index_len_index2_index2_index2_index = 0;\n    let mut digit_names_index_len_index2_index2_index2_index2\
    \ = 0;\n    let mut digit_names_index_len_index2_index2_index2_index2_index =\
    \ 0;\n    let mut digit_names_index_len_index2_index2_index2_index2_index = 0;\n\
    \    let mut digit_names_index_len_index2_index2_index2_index2_index = 0;\n  \
    \  let mut digit_names_index_len_index2_index2_index2_index2_index2 = 0;\n   \
    \ let mut digit_names_index_len_index2_index2_index2_index2_index2 = 0;\n    let\
    \ mut digit_names_index_len_index2_index2_index2_index2_index2_index = 0;\n  \
    \  let mut digit_names_index_len_index2_index2_index2_index2_index2_index = 0;\n\
    \    let mut digit_names_index_len_index2_index2_index2_index2_index2_index =\
    \ 0;\n    let mut digit_names_index_len_index2_index2_index2_index2_index2_index\
    \ = 0;\n    let mut digit_names_index_len_index2_index2_index2_index2_index2_index\
    \ = 0;\n    let mut digit_names_index_len_index2_index2_index2_index2_index2_index2\
    \ = 0;\n    let mut digit_names_index_len_index2_index2_index2_index2_index2_index2\
    \ = 0;\n    let mut digit_names_index_len_index2_index2_index2_index2_index2_index2_index\
    \ = 0;\n    let mut digit_names_index_len_index2_index2_index2_index2\n}\n\nfn\
    \ main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1,\
    \ 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0hq11lti.rs:46:62\n   |\n\
    46 |     let mut digit_names_index_len_index2_index2_index2_index2\n   |     \
    \                                                         ^ help: add `;` here\n\
    47 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0hq11lti.rs:11:34\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------\
    \                     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                i += 1;\n                j +=\
    \ 1;\n                continue;\n            }\n            if arr[j] > arr[i]\
    \ {\n                let tmp = arr[i];\n                arr[i] = arr[j];\n   \
    \             arr[j] = tmp;\n            }\n            j += 1;\n        }\n \
    \       result.push(&name_by_index(&arr[i]));\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `name_by_index` in this scope\n  -->\
    \ /tmp/tmpjdskxhiz.rs:40:22\n   |\n40 |         result.push(&name_by_index(&arr[i]));\n\
    \   |                      ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        result.push(by_length(arr.iter().skip(i).take(j - i).cloned()));\n\
    \        i = j;\n    }\n    if i == 0 {\n        return vec![];\n    }\n    let\
    \ mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i] > 9 {\n\
    \            i += 1;\n            continue;\n        }\n        result.push(by_name(arr[i]));\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpbtc82ulm.rs:38:21\n\
    \   |\n38 |         result.push(by_name(arr[i]));\n   |                     ^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbtc82ulm.rs:26:31\n\
    \   |\n26 |         result.push(by_length(arr.iter().skip(i).take(j - i).cloned()));\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `Cloned`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Cloned<std::iter::Take<Skip<std::slice::Iter<'_,\
    \ isize>>>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbtc82ulm.rs:41:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n41 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr.to_owned();\n\
    \    let mut result = vec![];\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut j = i;\n        while j > 0 && arr[j - 1] > arr[j]\
    \ {\n            j -= 1;\n        }\n        result.push(by_length(arr.split_off(j).to_owned()));\n\
    \        i += 1;\n    }\n    if result.is_empty() {\n        return vec![];\n\
    \    }\n    let mut i = 0;\n    while i < result.len() {\n        result[i] =\
    \ match result[i] {\n            \"One\" => 1,\n            \"Two\" => 2,\n  \
    \          \"Three\" => 3,\n            \"Four\" => 4,\n            \"Five\" =>\
    \ 5,\n            \"Six\" => 6,\n            \"Seven\" => 7,\n            \"Eight\"\
    \ => 8,\n            \"Nine\" => 9,\n            _ => panic!(\"Invalid number:\
    \ {}\", result[i]),\n        };\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprw5iw1id.rs:35:27\n   |\n\
    35 |         result[i] = match result[i] {\n   |                           ^^^^^^^^^\
    \ expected `&str`, found struct `Vec`\n   |\n   = note: expected reference `&str`\n\
    \                 found struct `Vec<String>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprw5iw1id.rs:36:22\n   |\n36 |             \"One\" => 1,\n   | \
    \                     ^ expected struct `Vec`, found integer\n   |\n   = note:\
    \ expected struct `Vec<String>`\n                found type `{integer}`\n\nerror[E0277]:\
    \ `Vec<String>` doesn't implement `std::fmt::Display`\n  --> /tmp/tmprw5iw1id.rs:45:47\n\
    \   |\n45 |             _ => panic!(\"Invalid number: {}\", result[i]),\n   |\
    \                                               ^^^^^^^^^ `Vec<String>` cannot\
    \ be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display`\
    \ is not implemented for `Vec<String>`\n   = note: in format strings you may be\
    \ able to use `{:?}` (or {:#?} for pretty-print) instead\n   = note: this error\
    \ originates in the macro `$crate::const_format_args` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmprw5iw1id.rs:49:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n49 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<Vec<String>>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  let mut arr = arr.to_vec();\n    if arr.len() == 0 {\n        return vec![];\n\
    \    }\n    let mut i = 0;\n    let mut j = 0;\n    let mut len = arr.len();\n\
    \    while i < len {\n        if arr[i] < 1 || arr[i] > 9 {\n            i +=\
    \ 1;\n            continue;\n        }\n        let mut temp = arr[i];\n     \
    \   arr[i] = arr[j];\n        arr[j] = temp;\n        i += 1;\n        j += 1;\n\
    \    }\n    arr.sort_unstable();\n    for i in 0..arr.len() {\n        arr[i]\
    \ = match arr[i] {\n            1 => \"One\",\n            2 => \"Two\",\n   \
    \         3 => \"Three\",\n            4 => \"Four\",\n            5 => \"Five\"\
    ,\n            6 => \"Six\",\n            7 => \"Seven\",\n            8 => \"\
    Eight\",\n            9 => \"Nine\",\n            _ => panic!(\"Invalid number\
    \ in array\"),\n        };\n    }\n    arr\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpahyim235.rs:33:18\n   |\n\
    33 |             1 => \"One\",\n   |                  ^^^^^ expected `isize`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpahyim235.rs:45:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n45 |     arr\n   |     ^^^ expected struct `String`, found `isize`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] > arr[j + 1] {\n\
    \                let tmp = arr[j];\n                arr[j] = arr[j + 1];\n   \
    \             arr[j + 1] = tmp;\n            }\n            j += 1;\n        }\n\
    \        let mut tmp: isize = 0;\n        let mut tmp2: isize = 0;\n        let\
    \ mut tmp3: isize = 0;\n        while i < arr.len() {\n            if arr[i] <\
    \ 10 {\n                tmp += 1;\n                i += 1;\n                continue;\n\
    \            }\n            if tmp == 0 {\n                tmp += 1;\n       \
    \         tmp2 = i;\n                i += 1;\n                continue;\n    \
    \        }\n            if tmp2 == 0 {\n                tmp += 1;\n          \
    \      tmp2 = i;\n                i += 1;\n                continue;\n       \
    \     }\n            if tmp3 == 0 {\n                tmp += 1;\n             \
    \   tmp2 = i;\n                i += 1;\n                continue;\n          \
    \  }\n            if tmp3 == tmp2 {\n                tmp += 1;\n             \
    \   tmp2 = i;\n                i += 1;\n                continue;\n          \
    \  }\n            if tmp3 == tmp2 {\n                tmp += 1;\n             \
    \   tmp2 = i;\n                i += 1;\n                continue;\n          \
    \  }\n            if tmp3 == tmp2 {\n                tmp += 1;\n             \
    \   tmp2 = i;\n                i += 1;\n                continue;\n          \
    \  }\n            if tmp3 == tmp2 {\n                tmp += 1;\n             \
    \   tmp2 = i;\n                i += 1;\n                continue;\n          \
    \  }\n            if tmp3 == tmp2 {\n                tmp += 1;\n             \
    \   tmp2 = i;\n                i += 1;\n                continue;\n          \
    \  }\n            if tmp3 == tmp2 {\n                tmp += 1;\n             \
    \   tmp2 = i;\n                i += 1;\n                continue;\n          \
    \  }\n            if tmp3 == tmp2 {\n                tmp += 1;\n             \
    \   tmp2 = i;\n                i += 1;\n                continue;\n          \
    \  }\n            if tmp3 == tmp2 {\n                tmp += 1;\n             \
    \   tmp2 = i;\n                i += 1;\n                continue;\n          \
    \  }\n            if tmp3 == tmp2 {\n                tmp += 1;\n             \
    \   tmp2 = i;\n                i += 1;\n                continue;\n          \
    \  }\n            if tmp3 == tmp2 {\n                tmp += 1;\n             \
    \   tmp2 = i;\n                i += 1;\n                continue;\n          \
    \  }\n            if tmp3 == tmp2 {\n                tmp += 1;\n             \
    \   tmp2 = i;\n                i += 1;\n                continue;\n          \
    \  }\n            if tmp3 == tmp2 {\n                \n}\n\nfn main() {\n    let\
    \ candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]),\
    \ vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"\
    ), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"\
    One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjzslivbd.rs:135:3\n\
    \    |\n11  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n17  |     while\
    \ i < arr.len() {\n    |                         - unclosed delimiter\n...\n34\
    \  |         while i < arr.len() {\n    |                             - unclosed\
    \ delimiter\n...\n124 |             if tmp3 == tmp2 {\n    |                 \
    \            - this delimiter might not be properly closed...\n125 |         \
    \        \n126 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n135 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjzslivbd.rs:42:24\n\
    \   |\n32 |         let mut tmp2: isize = 0;\n   |                       -----\
    \ expected due to this type\n...\n42 |                 tmp2 = i;\n   |       \
    \                 ^ expected `isize`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjzslivbd.rs:48:24\n   |\n32 |         let mut tmp2: isize\
    \ = 0;\n   |                       ----- expected due to this type\n...\n48 |\
    \                 tmp2 = i;\n   |                        ^ expected `isize`, found\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjzslivbd.rs:54:24\n\
    \   |\n32 |         let mut tmp2: isize = 0;\n   |                       -----\
    \ expected due to this type\n...\n54 |                 tmp2 = i;\n   |       \
    \                 ^ expected `isize`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjzslivbd.rs:60:24\n   |\n32 |         let mut tmp2: isize\
    \ = 0;\n   |                       ----- expected due to this type\n...\n60 |\
    \                 tmp2 = i;\n   |                        ^ expected `isize`, found\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjzslivbd.rs:66:24\n\
    \   |\n32 |         let mut tmp2: isize = 0;\n   |                       -----\
    \ expected due to this type\n...\n66 |                 tmp2 = i;\n   |       \
    \                 ^ expected `isize`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjzslivbd.rs:72:24\n   |\n32 |         let mut tmp2: isiz"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                result.push(by_length_helper(arr,\
    \ i, j));\n                i += 1;\n                j += 1;\n                continue;\n\
    \            }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_length_helper` in this scope\n \
    \ --> /tmp/tmp96ods2pa.rs:29:29\n   |\n29 |                 result.push(by_length_helper(arr,\
    \ i, j));\n   |                             ^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        result.push(by_length(arr.iter().take(j).rev()));\n      \
    \  result.push(by_length(arr.iter().skip(j).rev()));\n        result.push(by_length(arr.iter().take(i).rev()));\n\
    \        result.push(by_length(arr.iter().skip(i).rev()));\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsjukwueq.rs:26:31\n   |\n\
    26 |         result.push(by_length(arr.iter().take(j).rev()));\n   |         \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct\
    \ `Rev`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct\
    \ `Rev<std::iter::Take<std::slice::Iter<'_, isize>>>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsjukwueq.rs:27:31\n   |\n27 |         result.push(by_length(arr.iter().skip(j).rev()));\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Rev`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Rev<Skip<std::slice::Iter<'_, isize>>>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsjukwueq.rs:28:31\n   |\n28 |         result.push(by_length(arr.iter().take(i).rev()));\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Rev`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Rev<std::iter::Take<std::slice::Iter<'_, isize>>>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsjukwueq.rs:29:31\n   |\n29 |         result.push(by_length(arr.iter().skip(i).rev()));\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found struct `Rev`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Rev<Skip<std::slice::Iter<'_, isize>>>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsjukwueq.rs:32:5\n   |\n11 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |                                  -----------\
    \ expected `Vec<String>` because of return type\n...\n32 |     result\n   |  \
    \   ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() && arr[j] < 10 {\n            j += 1\n        }\n    \
    \    let mut k = j;\n        while k < arr.len() && arr[k] > 9 {\n           \
    \ k += 1\n        }\n        let mut reversed = vec![];\n        reversed.extend_from_slice(&arr[i..k]);\n\
    \        reversed.extend_from_slice(&arr[k..j]);\n        reversed.extend_from_slice(&arr[i..j]);\n\
    \        result.extend_from_slice(&reversed);\n        i = j;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl7dhavkt.rs:33:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    33 |     result\n   |     ^^^^^^ expected struct `String`, found `isize`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] >= 1 && arr[j] <= 9 {\n     \
    \           result.push(by_digit(arr[j]));\n                j += 1;\n        \
    \    } else {\n                break;\n            }\n        }\n        i +=\
    \ 1;\n    }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpuml7yp_o.rs:21:29\n\
    \   |\n21 |                 result.push(by_digit(arr[j]));\n   |             \
    \                ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            j += 1\n        }\n        if j -\
    \ i > 1 {\n            result.push(by_length(arr.split_off(j - i)));\n       \
    \ }\n        result.push(by_name(arr[i]));\n        i = j;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp8j1n85_j.rs:28:21\n\
    \   |\n28 |         result.push(by_name(arr[i]));\n   |                     ^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8j1n85_j.rs:31:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n31 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > 9 {\n    \
    \        i += 1;\n            continue;\n        }\n        let mut j = i;\n \
    \       while j < arr.len() {\n            if arr[j] < 1 {\n                j\
    \ += 1;\n                continue;\n            }\n            if arr[j] > 9 {\n\
    \                j += 1;\n                continue;\n            }\n         \
    \   if arr[j] == 1 {\n                result.push(\"One\");\n                continue;\n\
    \            }\n            if arr[j] == 2 {\n                result.push(\"Two\"\
    );\n                continue;\n            }\n            if arr[j] == 3 {\n \
    \               result.push(\"Three\");\n                continue;\n         \
    \   }\n            if arr[j] == 4 {\n                result.push(\"Four\");\n\
    \                continue;\n            }\n            if arr[j] == 5 {\n    \
    \            result.push(\"Five\");\n                continue;\n            }\n\
    \            if arr[j] == 6 {\n                result.push(\"Six\");\n       \
    \         continue;\n            }\n            if arr[j] == 7 {\n           \
    \     result.push(\"Seven\");\n                continue;\n            }\n    \
    \        if arr[j] == 8 {\n                result.push(\"Eight\");\n         \
    \       continue;\n            }\n            if arr[j] == 9 {\n             \
    \   result.push(\"Nine\");\n                continue;\n            }\n       \
    \ }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu79jcgvl.rs:71:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    71 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] > arr[j + 1] {\n\
    \                let tmp = arr[j];\n                arr[j] = arr[j + 1];\n   \
    \             arr[j + 1] = tmp;\n            }\n            i += 1;\n        }\n\
    \        result.push(format!(\"{}\", arr[i]));\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmptyu1oyra.rs:22:13\n\
    \   |\n22 |         let mut j = i;\n   |             ----^\n   |             |\n\
    \   |             help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0596]: cannot borrow `arr` as mutable, as it is not\
    \ declared as mutable\n  --> /tmp/tmptyu1oyra.rs:26:17\n   |\n11 | fn by_length(arr:\
    \ Vec<isize>) -> Vec<String> {\n   |              --- help: consider changing\
    \ this to be mutable: `mut arr`\n...\n26 |                 arr[j] = arr[j + 1];\n\
    \   |                 ^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow\
    \ `arr` as mutable, as it is not declared as mutable\n  --> /tmp/tmptyu1oyra.rs:27:17\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \ --- help: consider changing this to be mutable: `mut arr`\n...\n27 |       \
    \          arr[j + 1] = tmp;\n   |                 ^^^ cannot borrow as mutable\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0596`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut digits_len\
    \ = digits.len();\n    let mut digits_index = 0;\n    let mut digits_len = digits.len();\n\
    \    let mut digits_index = 0;\n    let mut digits_len = digits.len();\n    let\
    \ mut digits_index = 0;\n    let mut digits_len = digits.len();\n    let mut digits_index\
    \ = 0;\n    let mut digits_len = digits.len();\n    let mut digits_index = 0;\n\
    \    let mut digits_len = digits.len();\n    let mut digits_index = 0;\n    let\
    \ mut digits_len = digits.len();\n    let mut digits_index = 0;\n    let mut digits_len\
    \ = digits.len();\n    let mut digits_index = 0;\n    let mut digits_len = digits.len();\n\
    \    let mut digits_index = 0;\n    let mut digits_len = digits.len();\n    let\
    \ mut digits_index = 0;\n    let mut digits_len = digits.len();\n    let mut digits_index\
    \ = 0;\n    let mut digits_len = digits.len();\n    let mut digits_index = 0;\n\
    \    let mut digits_len = digits.len();\n    let mut digits_index = 0;\n    let\
    \ mut digits_len = digits.len();\n    let mut digits_index = 0;\n    let mut digits_len\
    \ = digits.len();\n    let mut digits_index = 0;\n    let mut digits_len = digits.len();\n\
    \    let mut digits_index = 0;\n    let mut digits_len = digits.len();\n    let\
    \ mut digits_index = 0;\n    let mut digits_len = digits.len();\n    let mut digits_index\
    \ = 0;\n    let mut digits_len = digits.len();\n    let mut digits_index = 0;\n\
    \    let mut digits_len = digits.len();\n    let mut digits_index = 0;\n    let\
    \ mut digits_len = digits.len();\n    let mut digits_index = 0;\n    let mut digits_len\
    \ = digits.len();\n    let mut digits_index = 0;\n    let mut digits_len = digits.len();\n\
    \    let mut digits_index = 0;\n    let mut digits_len = digits.len();\n    let\
    \ mut digits_index = 0;\n    let mut digits_len = digits.len();\n    let mut digits_index\
    \ = 0;\n    let mut digits_len = digits.len();\n    let mut digits_index = 0;\n\
    \    let mut digit\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpjqp95_9d.rs:69:18\n   |\n\
    69 |     let mut digit\n   |                  ^ help: add `;` here\n70 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjqp95_9d.rs:11:34\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |    ---------\
    \                     ^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] > arr[i] {\n  \
    \              break;\n            }\n            i += 1;\n        }\n       \
    \ let mut k = i;\n        while k > 0 {\n            let mut curr = arr[k - 1];\n\
    \            arr[k - 1] = arr[k];\n            arr[k] = curr;\n            k -=\
    \ 1;\n        }\n        let mut curr = arr[i];\n        result.append(&format!(\"\
    {}\", curr));\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3q0pj5bu.rs:37:24\n   |\n\
    37 |         result.append(&format!(\"{}\", curr));\n   |                    \
    \    ^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found struct `String`\n   |\n\
    \   = note: expected struct `Vec<_>`\n              found struct `String`\n  \
    \ = note: this error originates in the macro `format` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            j = j + 1;\n        }\n        if\
    \ j - i > 1 {\n            result.push(by_length(arr.split_to(j - i)));\n    \
    \    }\n        result.push(by_name(arr.split_to(j)));\n        i = j;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp9qmwcczc.rs:28:21\n\
    \   |\n28 |         result.push(by_name(arr.split_to(j)));\n   |             \
    \        ^^^^^^^ not found in this scope\n\nerror[E0599]: no method named `split_to`\
    \ found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp9qmwcczc.rs:26:39\n\
    \   |\n26 |             result.push(by_length(arr.split_to(j - i)));\n   |   \
    \                                    ^^^^^^^^ help: there is an associated function\
    \ with a similar name: `split`\n\nerror[E0599]: no method named `split_to` found\
    \ for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp9qmwcczc.rs:28:33\n\
    \   |\n28 |         result.push(by_name(arr.split_to(j)));\n   |             \
    \                    ^^^^^^^^ help: there is an associated function with a similar\
    \ name: `split`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9qmwcczc.rs:31:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n31 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let len = arr[i] - 1;\n\
    \        if len < 1 || len > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        result.push(by_length_helper(arr, i, len));\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_length_helper` in this scope\n \
    \ --> /tmp/tmpewak4tfu.rs:23:21\n   |\n23 |         result.push(by_length_helper(arr,\
    \ i, len));\n   |                     ^^^^^^^^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.iter().cloned().collect::<Vec<_>>();\n    let mut digits_len\
    \ = digits.len();\n    let mut i = 0;\n    while i < digits_len {\n        let\
    \ mut j = i;\n        while j < digits_len && digits[j] < 10 {\n            j\
    \ += 1\n        }\n        if j == digits_len {\n            break;\n        }\n\
    \        let mut digit = digits[j];\n        if digit < 10 {\n            digit\
    \ = digit as usize;\n        }\n        let mut digits_str = String::new();\n\
    \        digits_str.push_str(&format!(\"{}\", digit));\n        result.push(by_digit(digits_str));\n\
    \        i += j - i;\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp1oaaz_ue.rs:33:21\n\
    \   |\n33 |         result.push(by_digit(digits_str));\n   |                 \
    \    ^^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp1oaaz_ue.rs:29:21\n   |\n27 |         let mut digit = digits[j];\n \
    \  |                         --------- expected due to this value\n28 |      \
    \   if digit < 10 {\n29 |             digit = digit as usize;\n   |          \
    \           ^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] >= 1 && arr[j] <= 9 {\n     \
    \           result.push(by_digit(arr[j]));\n                j += 1;\n        \
    \    } else {\n                break;\n            }\n        }\n        i +=\
    \ 1;\n    }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpuml7yp_o.rs:21:29\n\
    \   |\n21 |                 result.push(by_digit(arr[j]));\n   |             \
    \                ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976588
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut cur = arr[0];\n    let mut i = 0;\n    while cur > 0 {\n        if\
    \ cur % 10 == 1 {\n            result.push(\"One\");\n        }\n        if cur\
    \ % 10 == 2 {\n            result.push(\"Two\");\n        }\n        if cur %\
    \ 10 == 3 {\n            result.push(\"Three\");\n        }\n        if cur %\
    \ 10 == 4 {\n            result.push(\"Four\");\n        }\n        if cur % 10\
    \ == 5 {\n            result.push(\"Five\");\n        }\n        if cur % 10 ==\
    \ 6 {\n            result.push(\"Six\");\n        }\n        if cur % 10 == 7\
    \ {\n            result.push(\"Seven\");\n        }\n        if cur % 10 == 8\
    \ {\n            result.push(\"Eight\");\n        }\n        if cur % 10 == 9\
    \ {\n            result.push(\"Nine\");\n        }\n        cur /= 10;\n     \
    \   i += 1;\n    }\n    result.reverse();\n    for i in 0..result.len() {\n  \
    \      result[i] = result[i].to_string();\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5,\
    \ 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptc1jpurg.rs:51:21\n   |\n\
    51 |         result[i] = result[i].to_string();\n   |         ---------   ^^^^^^^^^^^^^^^^^^^^^\n\
    \   |         |           |\n   |         |           expected `&str`, found struct\
    \ `String`\n   |         |           help: consider borrowing here: `&result[i].to_string()`\n\
    \   |         expected due to the type of this binding\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptc1jpurg.rs:53:5\n   |\n11 | fn by_length(arr: Vec<isize>)\
    \ -> Vec<String> {\n   |                                  ----------- expected\
    \ `Vec<String>` because of return type\n...\n53 |     result\n   |     ^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < arr.len() {\n        if\
    \ arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n   \
    \     }\n        let mut k = i;\n        while k > j {\n            result.push(by_digit(arr[k]));\n\
    \            k -= 1;\n        }\n        result.push(by_digit(arr[k]));\n    \
    \    i += 1;\n        j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpu599gk9f.rs:25:25\n\
    \   |\n25 |             result.push(by_digit(arr[k]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function\
    \ `by_digit` in this scope\n  --> /tmp/tmpu599gk9f.rs:28:21\n   |\n28 |      \
    \   result.push(by_digit(arr[k]));\n   |                     ^^^^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                i += 1;\n                j +=\
    \ 1;\n                continue;\n            }\n            if arr[j] > arr[i]\
    \ {\n                break;\n            }\n            result.push(by_length(vec![arr[i],\
    \ arr[j]]));\n            i += 1;\n            j += 1;\n        }\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp31sry55i.rs:41:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    41 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] > arr[j + 1] {\n\
    \                let tmp = arr[j];\n                arr[j] = arr[j + 1];\n   \
    \             arr[j + 1] = tmp;\n            }\n            j += 1;\n        }\n\
    \        let mut tmp = String::new();\n        while i < j {\n            tmp\
    \ += &name[arr[i] - 1];\n            i += 1;\n        }\n        result.push(tmp);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `name` in this scope\n  --> /tmp/tmpbu2t5dxc.rs:33:21\n\
    \   |\n33 |             tmp += &name[arr[i] - 1];\n   |                     ^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976589
