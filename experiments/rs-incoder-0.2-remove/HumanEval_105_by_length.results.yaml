language: rs
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() && arr[j] < 10 {\n            j += 1\n        }\n    \
    \    let mut k = j;\n        while k < arr.len() && arr[k] > 9 {\n           \
    \ k += 1\n        }\n        if j > i {\n            result.push(by_length(arr[i..k].clone()));\n\
    \        } else {\n            result.push(by_length(arr[k..j].clone()));\n  \
    \      }\n        i = k;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `clone` found for slice `[isize]` in the\
    \ current scope\n  --> /tmp/tmp_yj31cdb.rs:27:45\n   |\n27 |             result.push(by_length(arr[i..k].clone()));\n\
    \   |                                             ^^^^^ method not found in `[isize]`\n\
    \nerror[E0599]: no method named `clone` found for slice `[isize]` in the current\
    \ scope\n  --> /tmp/tmp_yj31cdb.rs:29:45\n   |\n29 |             result.push(by_length(arr[k..j].clone()));\n\
    \   |                                             ^^^^^ method not found in `[isize]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_yj31cdb.rs:33:5\n   |\n11 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n33 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            i += 1;\n        }\n        if j\
    \ == i {\n            break;\n        }\n        let mut temp = arr[i];\n    \
    \    arr[i] = arr[j];\n        arr[j] = temp;\n        result.push(&name[arr[i]\
    \ - 1]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `name` in this scope\n  --> /tmp/tmpqu8wa7mx.rs:31:22\n\
    \   |\n31 |         result.push(&name[arr[i] - 1]);\n   |                    \
    \  ^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1;\n            continue;\n\
    \        }\n        let mut tmp: Vec<String> = vec![];\n        while j < arr.len()\
    \ {\n            if arr[j] == i {\n                tmp[k] = \"One\";\n       \
    \         j += 1;\n                i += 1;\n                break;\n         \
    \   }\n            if arr[j] > i {\n                break;\n            }\n  \
    \          tmp[k] = \"Two\";\n            j += 1;\n            k += 1;\n     \
    \   }\n        result = result.concat(tmp);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl0p9sc1m.rs:26:26\n   |\n\
    26 |             if arr[j] == i {\n   |                          ^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n26 |             if arr[j] == i.try_into().unwrap()\
    \ {\n   |                          ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl0p9sc1m.rs:27:26\n   |\n27 |                 tmp[k] =\
    \ \"One\";\n   |                          ^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                          |\n   |              \
    \            expected struct `String`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl0p9sc1m.rs:32:25\n   |\n32 |             if arr[j] > i\
    \ {\n   |                         ^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n32 |             if arr[j] > i.try_into().unwrap() {\n   |      \
    \                   ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl0p9sc1m.rs:35:22\n   |\n35 |             tmp[k] = \"Two\";\n \
    \  |                      ^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                      |\n   |                      expected struct `String`,\
    \ found `&str`\n\nerror[E0061]: this function takes 0 arguments but 1 argument\
    \ was supplied\n   --> /tmp/tmpl0p9sc1m.rs:39:25\n    |\n39  |         result\
    \ = result.concat(tmp);\n    |                         ^^^^^^ --- supplied 1 argument\n\
    \    |                         |\n    |                         expected 0 arguments\n\
    \    |\nnote: associated function defined here\n\nerror[E0271]: type mismatch\
    \ resolving `<[String] as Concat<str>>::Output == Vec<String>`\n  --> /tmp/tmpl0p9sc1m.rs:39:25\n\
    \   |\n39 |         result = result.concat(tmp);\n   |                       \
    \  ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected\
    \ struct `String`\n              found struct `Vec<String>`\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome err"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < arr.len() {\n        if\
    \ arr[i] > 9 {\n            i += 1;\n            continue;\n        }\n      \
    \  if arr[i] < 1 {\n            i += 1;\n            continue;\n        }\n  \
    \      let mut k = i;\n        while k > 0 && arr[k - 1] > 9 {\n            k\
    \ -= 1;\n        }\n        if k == i {\n            i += 1;\n            continue;\n\
    \        }\n        let mut k = i;\n        while k > 0 && arr[k - 1] < 1 {\n\
    \            k -= 1;\n        }\n        if k == i {\n            i += 1;\n  \
    \          continue;\n        }\n        let mut k = i;\n        while k > 0 &&\
    \ arr[k - 1] > 9 {\n            k -= 1;\n        }\n        if k == i {\n    \
    \        i += 1;\n            continue;\n        }\n        let mut k = i;\n \
    \       while k > 0 && arr[k - 1] < 1 {\n            k -= 1;\n        }\n    \
    \    if k == i {\n            i += 1;\n            continue;\n        }\n    \
    \    let mut k = i;\n        while k > 0 && arr[k - 1] > 9 {\n            k -=\
    \ 1;\n        }\n        if k == i {\n            i += 1;\n            continue;\n\
    \        }\n        let mut k = i;\n        while k > 0 && arr[k - 1] < 1 {\n\
    \            k -= 1;\n        }\n        if k == i {\n            i += 1;\n  \
    \          continue;\n        }\n        let mut k = i;\n        while k > 0 &&\
    \ arr[k - 1] > 9 {\n            k -= 1;\n        }\n        if k == i {\n    \
    \        i += 1;\n            continue;\n        }\n        let mut k = i;\n \
    \       while k > 0 && arr[k - 1] < 1 {\n            k -= 1;\n        }\n    \
    \    if k == i {\n            i += 1;\n            continue;\n        }\n    \
    \    let mut k = i;\n        while k > 0 && arr[k - 1] > 9 {\n            k -=\
    \ 1;\n        }\n        if k == i {\n            i += 1;\n            continue;\n\
    \        }\n        let mut k = i;\n        while k > 0 && arr[k - 1] < 1 {\n\
    \            k -= 1;\n        }\n        if k == i {\n            i += 1;\n  \
    \          continue;\n        }\n        let mut k = i;\n        while k > 0 &&\
    \ arr[k - 1] > 9 {\n            k -= 1;\n        }\n        if k == i {\n    \
    \        i += 1;\n            continue;\n        }\n        let mut k = i;\n \
    \       while k > 0 && arr[k - 1] < 1 {\n            k -= 1;\n        }\n    \
    \    if k == i {\n            i += \n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpfg13c2dy.rs:130:3\n\
    \    |\n11  | fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |          \
    \                                    - unclosed delimiter\n...\n18  |     while\
    \ i < arr.len() {\n    |                         - unclosed delimiter\n...\n119\
    \ |         if k == i {\n    |                   - this delimiter might not be\
    \ properly closed...\n120 |             i += \n121 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n130 | }\n    |   ^\n\nerror: expected\
    \ expression, found `}`\n   --> /tmp/tmpfg13c2dy.rs:121:1\n    |\n121 | }\n  \
    \  | ^ expected expression\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpfg13c2dy.rs:18:5\n\
    \    |\n11  |   fn by_length(arr: Vec<isize>) -> Vec<String> {\n    |        \
    \                            ----------- expected `Vec<String>` because of return\
    \ type\n...\n18  | /     while i < arr.len() {\n19  | |         if arr[i] > 9\
    \ {\n20  | |             i += 1;\n21  | |             continue;\n...   |\n129\
    \ | |     assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"), String::from(\"\
    Eight\"), String::from(\"Four\")]);\n130 | | }\n    | |__^ expected struct `Vec`,\
    \ found `()`\n    |\n    = note: expected struct `Vec<String>`\n            found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    let mut counter = 1;\n    let mut digit = arr[0];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < digit {\n\
    \            digit = arr[i];\n            digits.push(digit);\n            i +=\
    \ 1;\n        } else {\n            counter = counter * 10;\n            digit\
    \ = digit - digit;\n            digits.push(counter);\n            i += 1;\n \
    \       }\n    }\n    for i in 0..digits.len() {\n        let digit = digits[i];\n\
    \        let name = match digit {\n            1 => \"One\",\n            2 =>\
    \ \"Two\",\n            3 => \"Three\",\n            4 => \"Four\",\n        \
    \    5 => \"Five\",\n            6 => \"Six\",\n            7 => \"Seven\",\n\
    \            8 => \"Eight\",\n            9 => \"Nine\",\n            _ => \"\"\
    .to_string(),\n        };\n        result.push(name);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpziaojxvi.rs:44:18\n\
    \   |\n34 |           let name = match digit {\n   |  ____________________-\n\
    35 | |             1 => \"One\",\n36 | |             2 => \"Two\",\n37 | |   \
    \          3 => \"Three\",\n...  |\n43 | |             9 => \"Nine\",\n   | |\
    \                  ------ this and all prior arms are found to be of type `&str`\n\
    44 | |             _ => \"\".to_string(),\n   | |                  ^^^^^^^^^^^^^^\n\
    \   | |                  |\n   | |                  expected `&str`, found struct\
    \ `String`\n   | |                  help: consider borrowing here: `&\"\".to_string()`\n\
    45 | |         };\n   | |_________- `match` arms have incompatible types\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] == i {\n      \
    \          result.push(by_name(arr[j]));\n                i += 1;\n          \
    \      break;\n            }\n            j += 1;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp7oyrisdx.rs:25:29\n\
    \   |\n25 |                 result.push(by_name(arr[j]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7oyrisdx.rs:24:26\n   |\n24 |             if arr[j] == i {\n  \
    \ |                          ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n24 |             if arr[j] == i.try_into().unwrap() {\n   |     \
    \                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > 9 {\n    \
    \        result.push(by_length(arr.iter().skip(i).take(1).collect()));\n     \
    \       break;\n        }\n        result.push(by_name(&arr[i]));\n        i +=\
    \ 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n  \
    \  assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"\
    ), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"One\")]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![1,\
    \ -1, 55]), vec![String::from(\"One\")]);\n    assert_eq!(candidate(vec![1, -1,\
    \ 3, 2]), vec![String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"Nine\"\
    ), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmp1zcw25lg.rs:22:21\n\
    \   |\n22 |         result.push(by_name(&arr[i]));\n   |                     ^^^^^^^\
    \ not found in this scope\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `&isize`\n  --> /tmp/tmp1zcw25lg.rs:19:35\n\
    \   |\n19 |             result.push(by_length(arr.iter().skip(i).take(1).collect()));\n\
    \   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value\
    \ of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1zcw25lg.rs:25:5\n   |\n11 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n25 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        result.push(by_length(arr.subslice(i..j)));\n        i = j;\n\
    \    }\n    if i == arr.len() {\n        result.push(by_length(arr.subslice(i..)));\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `subslice` found for struct `Vec<isize>`\
    \ in the current scope\n  --> /tmp/tmp1hwwd5m9.rs:26:35\n   |\n26 |         result.push(by_length(arr.subslice(i..j)));\n\
    \   |                                   ^^^^^^^^ method not found in `Vec<isize>`\n\
    \nerror[E0599]: no method named `subslice` found for struct `Vec<isize>` in the\
    \ current scope\n  --> /tmp/tmp1hwwd5m9.rs:30:35\n   |\n30 |         result.push(by_length(arr.subslice(i..)));\n\
    \   |                                   ^^^^^^^^ method not found in `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1hwwd5m9.rs:32:5\n   |\n11 | fn\
    \ by_length(arr: Vec<isize>) -> Vec<String> {\n   |                          \
    \        ----------- expected `Vec<String>` because of return type\n...\n32 |\
    \     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         j += 1;\n                continue;\n            }\n            result.push(by_digit(arr[j]));\n\
    \            j += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4,\
    \ 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmp6aslfm_2.rs:24:25\n\
    \   |\n24 |             result.push(by_digit(arr[j]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            j = j + 1;\n        }\n        if\
    \ j == i {\n            break;\n        }\n        let mut temp = vec![];\n  \
    \      for _ in 0..(j - i) {\n            temp.push(\"One\");\n        }\n   \
    \     for _ in 0..(i - j) {\n            temp.push(\"Two\");\n        }\n    \
    \    for _ in 0..(j - i) {\n            temp.push(\"Three\");\n        }\n   \
    \     for _ in 0..(i - j) {\n            temp.push(\"Four\");\n        }\n   \
    \     for _ in 0..(j - i) {\n            temp.push(\"Five\");\n        }\n   \
    \     for _ in 0..(i - j) {\n            temp.push(\"Six\");\n        }\n    \
    \    for _ in 0..(j - i) {\n            temp.push(\"Seven\");\n        }\n   \
    \     for _ in 0..(i - j) {\n            temp.push(\"Eight\");\n        }\n  \
    \      for _ in 0..(j - i) {\n            temp.push(\"Nine\");\n        }\n  \
    \      for _ in 0..(i - j) {\n            temp.push(\"Ten\");\n        }\n   \
    \     for _ in 0..(j - i) {\n            temp.push(\"Eleven\");\n        }\n \
    \       for _ in 0..(i - j) {\n            temp.push(\"Twelve\");\n        }\n\
    \        for _ in 0..(j - i) {\n            temp.push(\"Thirteen\");\n       \
    \ }\n        for _ in 0..(i - j) {\n            temp.push(\"Fourteen\");\n   \
    \     }\n        for _ in 0..(j - i) {\n            temp.push(\"Fifteen\");\n\
    \        }\n        for _ in 0..(i - j) {\n            temp.push(\"Sixteen\");\n\
    \        }\n        for _ in 0..(j - i) {\n            temp.push(\"Seventeen\"\
    );\n        }\n        for _ in 0..(i - j) {\n            temp.push(\"Eighteen\"\
    );\n        }\n        for _ in 0..(j - i) {\n            temp.push(\"Nineteen\"\
    );\n        }\n        for _ in 0..(i - j) {\n            temp.push(\"Twenty\"\
    );\n        }\n        for _ in 0..(j - i) {\n            temp.push(\"TwentyOne\"\
    );\n        }\n        for _ in 0..(i - j) {\n            temp.push(\"TwentyTwo\"\
    );\n        }\n        for _ in 0..(j - i) {\n            temp.push(\"Twent\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmpo9zoqka9.rs:105:110\n\
    \    |\n105 |       assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n    |  ______________________________________________________________________________________________________________^\n\
    106 | | }\n    | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut arr = arr.to_owned();\n\
    \    let mut len = arr.len();\n    let mut result = vec![];\n    while len > 0\
    \ {\n        let mut i = 0;\n        while i < len {\n            if arr[i] <\
    \ 1 || arr[i] > 9 {\n                i += 1;\n                continue;\n    \
    \        }\n            result.push(by_digit(arr[i]));\n            i += 1;\n\
    \        }\n        len = arr.len();\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8,\
    \ 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpmc8tp_zi.rs:25:25\n\
    \   |\n25 |             result.push(by_digit(arr[i]));\n   |                 \
    \        ^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j > 0 && arr[j - 1] > arr[j] {\n            j -= 1;\n\
    \        }\n        result.push(by_length(arr.iter().skip(j).rev().take(i).collect()));\n\
    \        i = j;\n    }\n    if i == 0 {\n        result.push(\"One\");\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n  --> /tmp/tmpcqt1wmuc.rs:26:31\n   |\n26 |\
    \         result.push(by_length(arr.iter().skip(j).rev().take(i).collect()));\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcqt1wmuc.rs:30:21\n   |\n30 |\
    \         result.push(\"One\");\n   |                     ^^^^^ expected struct\
    \ `Vec`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n      \
    \     found reference `&'static str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcqt1wmuc.rs:32:5\n   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String>\
    \ {\n   |                                  ----------- expected `Vec<String>`\
    \ because of return type\n...\n32 |     result\n   |     ^^^^^^ expected struct\
    \ `String`, found struct `Vec`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<Vec<String>>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                result.push(by_name(arr[i]));\n\
    \                i += 1;\n                j += 1;\n                continue;\n\
    \            }\n            j += 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_name` in this scope\n  --> /tmp/tmpawr9uxmm.rs:29:29\n\
    \   |\n29 |                 result.push(by_name(arr[i]));\n   |              \
    \               ^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            i += 1;\n            j += 1\n   \
    \     }\n        result.push(&names[arr[i] - 1]);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2, 1,\
    \ 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
    Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"\
    ), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmpyambje7a.rs:26:22\n\
    \   |\n26 |         result.push(&names[arr[i] - 1]);\n   |                   \
    \   ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut digits = arr.clone();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        let mut j = i;\n        while j < digits.len() && digits[j] < 10\
    \ {\n            j += 1\n        }\n        if j == i {\n            break;\n\
    \        }\n        let mut digit = digits[i];\n        digits[i] = digits[j];\n\
    \        digits[j] = digit;\n        result.push(by_digit(digit));\n        i\
    \ += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n\
    \    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"\
    Eight\"), String::from(\"Five\"), String::from(\"Four\"), String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"Two\"), String::from(\"One\"), String::from(\"\
    One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"One\")]);\n  \
    \  assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"), String::from(\"\
    Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9, 4, 8]), vec![String::from(\"\
    Nine\"), String::from(\"Eight\"), String::from(\"Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `by_digit` in this scope\n  --> /tmp/tmpr_t1f1xt.rs:29:21\n\
    \   |\n29 |         result.push(by_digit(digit));\n   |                     ^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() {\n            if arr[j] < 1 || arr[j] > 9 {\n       \
    \         break;\n            }\n            i += 1;\n            j += 1\n   \
    \     }\n        let mut temp = arr[i];\n        arr[i] = arr[j];\n        arr[j]\
    \ = temp;\n        result.push(&names[arr[i] - 1]);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `names` in this scope\n  --> /tmp/tmp7jagdai_.rs:29:22\n\
    \   |\n29 |         result.push(&names[arr[i] - 1]);\n   |                   \
    \   ^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut reversed = arr\n        .iter()\n        .cloned()\n        .enumerate()\n\
    \        .map(|(i, x)| {\n            if x < 10 {\n                let name =\
    \ match x {\n                    1 => \"One\",\n                    2 => \"Two\"\
    ,\n                    3 => \"Three\",\n                    4 => \"Four\",\n \
    \                   5 => \"Five\",\n                    6 => \"Six\",\n      \
    \              7 => \"Seven\",\n                    8 => \"Eight\",\n        \
    \            9 => \"Nine\",\n                    _ => return \"\".to_string(),\n\
    \                };\n                result.push(name);\n            }\n     \
    \       \"\".to_string()\n        })\n        .collect::<Vec<String>>();\n   \
    \ reversed.reverse();\n    for &s in reversed {\n        result.push(s);\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2vtdr2th.rs:40:9\n   |\n\
    40 |     for &s in reversed {\n   |         ^^    -------- this expression has\
    \ type `String`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |\n   = note: expected struct `String`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2vtdr2th.rs:43:5\n   |\n\
    11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |                    \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    43 |     result\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] < 1 || arr[i]\
    \ > 9 {\n            i += 1;\n            continue;\n        }\n        let mut\
    \ j = i;\n        while j < arr.len() {\n            if arr[j] < 1 || arr[j] >\
    \ 9 {\n                j += 1;\n                continue;\n            }\n   \
    \         if arr[j] == arr[i] {\n                result.push(by_length(arr.iter().skip(i).take(j\
    \ - i)));\n                i += j - i;\n                break;\n            }\n\
    \            j += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = by_length;\n    assert_eq!(candidate(vec![2, 1, 1, 4, 5, 8, 2, 3]),\
    \ vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"Four\"\
    ), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"), String::from(\"\
    One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9x5g9kj0.rs:29:39\n   |\n\
    29 |                 result.push(by_length(arr.iter().skip(i).take(j - i)));\n\
    \   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found struct `std::iter::Take`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `std::iter::Take<Skip<std::slice::Iter<'_,\
    \ isize>>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9x5g9kj0.rs:36:5\n\
    \   |\n11 | fn by_length(arr: Vec<isize>) -> Vec<String> {\n   |             \
    \                     ----------- expected `Vec<String>` because of return type\n\
    ...\n36 |     result\n   |     ^^^^^^ expected struct `String`, found struct `Vec`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<Vec<String>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749589
- exit_code: 1
  program: "/// Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])   \n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty\
    \ array:\n/// If the array has any strange number ignore it:\n/// >>> by_length([1,\
    \ -1 , 55]) \n/// ['One']\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n  \
    \  if arr.is_empty() {\n        return vec![];\n    }\n    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < arr.len() {\n        let mut j = i;\n     \
    \   while j < arr.len() && arr[j] < 10 {\n            j += 1\n        }\n    \
    \    if j == i {\n            break;\n        }\n        let mut k = i;\n    \
    \    while k < j {\n            result.append(&name[arr[k]]);\n            k +=\
    \ 1;\n        }\n        i = j;\n    }\n    result.reverse();\n    result\n}\n\
    \nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
    \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"),\
    \ String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
    Two\"), String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
    One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
    ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
    \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
    Four\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `name` in this scope\n  --> /tmp/tmpn25m7icp.rs:27:28\n\
    \   |\n27 |             result.append(&name[arr[k]]);\n   |                  \
    \          ^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749589
