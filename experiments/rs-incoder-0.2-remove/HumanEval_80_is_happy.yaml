name: HumanEval_80_is_happy
language: rs
prompt: "/// You are given a string s.\n/// Your task is to check if the string is\
  \ happy or not.\n/// A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n/// For example:\nfn is_happy(s: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = is_happy;\n    assert_eq!(candidate(String::from(\"\
  a\")), false);\n    assert_eq!(candidate(String::from(\"aa\")), false);\n    assert_eq!(candidate(String::from(\"\
  abcd\")), true);\n    assert_eq!(candidate(String::from(\"aabb\")), false);\n  \
  \  assert_eq!(candidate(String::from(\"adb\")), true);\n    assert_eq!(candidate(String::from(\"\
  xyy\")), false);\n    assert_eq!(candidate(String::from(\"iopaxpoi\")), true);\n\
  \    assert_eq!(candidate(String::from(\"iopaxioi\")), false);\n}\n"
completions: ["    let mut counter = 0;\n    for ch in s.chars() {\n        if ch\
    \ != s.chars().nth(counter + 1) {\n            counter += 1;\n        }\n    }\n\
    \    counter == s.len()", "    let mut s = String::from(s);\n    s.clear();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if i % 3 == 0 {\n      \
    \      if s.chars().nth(i).unwrap() != s.chars().nth(i - 1).unwrap()\n       \
    \         || s.chars().nth(i).unwrap() != s.chars().nth(i - 2).unwrap()\n    \
    \        {\n                return false;\n            }\n        }\n        i\
    \ += 1;\n    }\n    return true;", "    let mut s = s;\n    s.chars().filter(|&c|\
    \ c != '\\0').cloned().collect::<Vec<_>>().sort();\n    s.len() >= 3 && s.iter().all(|&c|\
    \ c != '\\0');", "    let mut counter = 0;\n    for c in s.chars() {\n       \
    \ if counter == 3 {\n            if !is_distinct(&c, &c, &c, &c, &c, &c, &c, &c,\
    \ &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c,\
    \ &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c,\
    \ &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c,\
    \ &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c,\
    \ &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c,\
    \ &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c,\
    \ &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c,\
    \ &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c,\
    \ &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c,\
    \ &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c,\
    \ &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c,\
    \ &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c, &c,\
    \ &c, &c, &c, &c, &c, &c, &c, &c, &c, ", "    let mut counter = 0;\n    for c\
    \ in s.chars() {\n        if counter == 3 {\n            return false;\n     \
    \   }\n        if c.to_ascii_lowercase() != c.to_ascii_lowercase().rev() {\n \
    \           return false;\n        }\n        counter += 1;\n    }\n    true",
  "    let mut s = s;\n    s.clear();\n    s.push_str(\"a\");\n    s.push_str(\"b\"\
    );\n    s.push_str(\"c\");\n    s.push_str(\"d\");\n    s.push_str(\"e\");\n \
    \   s.push_str(\"f\");\n    s.push_str(\"g\");\n    s.push_str(\"h\");\n    s.push_str(\"\
    i\");\n    s.push_str(\"j\");\n    s.push_str(\"k\");\n    s.push_str(\"l\");\n\
    \    s.push_str(\"m\");\n    s.push_str(\"n\");\n    s.push_str(\"o\");\n    s.push_str(\"\
    p\");\n    s.push_str(\"q\");\n    s.push_str(\"r\");\n    s.push_str(\"s\");\n\
    \    s.push_str(\"t\");\n    s.push_str(\"u\");\n    s.push_str(\"v\");\n    s.push_str(\"\
    w\");\n    s.push_str(\"x\");\n    s.push_str(\"y\");\n    s.push_str(\"z\");\n\
    \    s.push_str(\"A\");\n    s.push_str(\"B\");\n    s.push_str(\"C\");\n    s.push_str(\"\
    D\");\n    s.push_str(\"E\");\n    s.push_str(\"F\");\n    s.push_str(\"G\");\n\
    \    s.push_str(\"H\");\n    s.push_str(\"I\");\n    s.push_str(\"J\");\n    s.push_str(\"\
    K\");\n    s.push_str(\"L\");\n    s.push_str(\"M\");\n    s.push_str(\"N\");\n\
    \    s.push_str(\"O\");\n    s.push_str(\"P\");\n    s.push_str(\"Q\");\n    s.push_str(\"\
    R\");\n    s.push_str(\"S\");\n    s.push_str(\"T\");\n    s.push_str(\"U\");\n\
    \    s.push_str(\"V\");\n    s.push_str(\"W\");\n    s.push_str(\"X\");\n    s.push_str(\"\
    Y\");\n    s.push_str(\"Z\");\n    s.push_str(\"0\");\n    s.push_str(\"1\");\n\
    \    s.push_str(\"2\");\n    s.push_str(\"3\");\n    s.push_str(\"4\");\n    s.push_str(\"\
    5\");\n    s.push_str(\"6\");\n    s.push_str(\"7\");\n    s.push_str(\"8\");\n\
    \    s.push_str(\"9\");\n    s.push_str(\"!\");\n    s.push_str(\"?\");\n    s.push_str(\"\
    @\");\n    s.push_str(\"#\");\n    s.push_str(\"$\");\n    s.push_str(\"%\");\n\
    \    s.push_str(\"^\");\n    s.push_str(\"&\");\n    s.push_str(\"*\");\n    s.push_str(\"\
    (\");\n    s.push_str(\")\");\n    s.push_str(\"=\");\n    s.push_str(\"+\");\n\
    \    s.push_str(\",\");\n    s.push_str(\"{\");\n    s.push_str(\"}\");\n    s.push_str(\"\
    :\");\n    s.push_str(\";\");\n    s.push_str(\"<\");\n    s.push_str(\">\");\n\
    \    s.push_str(\"?\");\n    s.push_str(\"!\");\n    s.push_", "    let mut counter\
    \ = 0;\n    for c in s.chars() {\n        if counter == 3 {\n            if !c.is_alphanumeric()\
    \ {\n                return false;\n            }\n        }\n        counter\
    \ += 1;\n    }\n    true", "    let mut counter = 0;\n    for c in s.chars() {\n\
    \        if counter == 3 {\n            if !c.is_alphabetic() {\n            \
    \    return false;\n            }\n        }\n        counter += 1;\n    }\n \
    \   true", "    let mut s = s;\n    s.chars().filter(|&c| c != '\\0').take(3).all(|&c|\
    \ s.chars().filter(|&c| c != '\\0').count(|&c| c == c) == 3)", "    let mut s\
    \ = s;\n    s.trim();\n    let mut count = 0;\n    let mut i = 0;\n    while i\
    \ < s.len() {\n        if s[i] != s[i + 1] {\n            count += 1;\n      \
    \  }\n        i += 1;\n    }\n    count >= 3 && count % 3 == 0", "    let mut\
    \ s = s;\n    s.chars().filter(|c| c != '\\0').cloned().collect::<Vec<_>>().sort();\n\
    \    s.len() >= 3 && s.iter().all(|&x| s.iter().any(|&y| x == y));", "    let\
    \ mut counter = 0;\n    for c in s.chars() {\n        if c == c.to_ascii_lowercase().unwrap()\
    \ {\n            counter++;\n        }\n    }\n    counter >= 3 && counter ==\
    \ s.chars().filter(|c| c == c.to_ascii_lowercase().unwrap()).count()", "    let\
    \ mut s = s;\n    let mut i = 0;\n    while i < s.len() {\n        if s.len()\
    \ < 3 {\n            return false;\n        }\n        if s.chars().filter(|&c|\
    \ c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c ==\
    \ 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm'\
    \ || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c\
    \ == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z').count()\
    \ > 3 {\n            return false;\n        }\n        i += 1;\n    }\n    return\
    \ true;", "    let mut counter = 0;\n    for c in s.chars() {\n        if counter\
    \ == 3 {\n            if s.chars().any(|c| c == c) {\n                return false;\n\
    \            }\n        }\n        counter += 1;\n    }\n    true", "    let mut\
    \ counter = 0;\n    for c in s.chars() {\n        if counter == 3 {\n        \
    \    return false;\n        }\n        if c.is_alphabetic() {\n            counter++;\n\
    \        }\n    }\n    true", "    let mut counter = 0;\n    for c in s.chars()\
    \ {\n        if counter == 3 {\n            if !c.is_alphabetic() {\n        \
    \        return false;\n            }\n        }\n        counter += 1;\n    }\n\
    \    true", "    let mut s = s;\n    s.clear();\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if i % 3 == 0 {\n            if s.chars().next().unwrap()\
    \ != s.chars().next().unwrap() {\n                return false;\n            }\n\
    \        }\n        i += 1;\n    }\n    true", "    let mut counter = 0;\n   \
    \ for c in s.chars() {\n        if c == c.to_ascii_lowercase() {\n           \
    \ counter += 1;\n        }\n    }\n    counter >= 3", "    let mut s = s;\n  \
    \  s.remove_prefix(3);\n    let mut counter = 0;\n    for c in s.chars() {\n \
    \       if *c != *c {\n            counter += 1;\n        }\n    }\n    counter\
    \ >= 3", "    let mut s = s;\n    s.chars().filter(|c| c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u').count();\n    s.len() >= 3"]
stop_tokens:
- "\n}"
