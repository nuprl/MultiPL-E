name: HumanEval_90_next_smallest
language: rs
prompt: "/// You are given a list of integers.\n/// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n/// Return None if there is\
  \ no such element.\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1,\
  \ 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n\
  \    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1,\
  \ 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1,\
  \ 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n"
completions: ["    if lst.len() == 0 {\n        return None;\n    }\n    let mut smallest\
    \ = lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    if smallest_index == lst.len() - 1 {\n      \
    \  smallest_index = 0;\n    }\n    Some(smallest[smallest_index + 1])", "    let\
    \ mut smallest = lst.iter().min();\n    let mut smallest_idx = lst.iter().position(|x|\
    \ *x == smallest);\n    if smallest_idx == lst.len() {\n        return None;\n\
    \    }\n    smallest = lst.iter().nth(smallest_idx + 1).unwrap();\n    Some(smallest)",
  "    let mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n    \
    \    return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest_value == smallest {\n        smallest_index += 1;\n    }\n  \
    \  smallest_index", "    lst.iter().cloned().enumerate().filter(|(i, _)| {\n \
    \       i == 0 || lst[i] < lst[i-1]\n    }).next()", "    if lst.len() == 0 {\n\
    \        return None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \    if smallest_index == lst.len() - 1 {\n        return Some(smallest);\n  \
    \  }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    let mut smallest_index2 = lst.iter().position(|x| *x == smallest_value).unwrap();\n\
    \    if smallest_index2 == lst.len() - 1 {\n        return Some(smallest);\n \
    \   }\n    let mut smallest_value2 = lst.iter().nth(smallest_index2).unwrap();\n\
    \    if smallest_value2 < smallest {\n        smallest = smallest_value2;\n  \
    \      smallest_index = smallest_index2;\n    }\n    if smallest_index == lst.len()\
    \ - 1 {\n        return Some(smallest);\n    }\n    let mut smallest_value3 =\
    \ lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_index3 = lst.iter().position(|x|\
    \ *x == smallest_value3).unwrap();\n    if smallest_index3 == lst.len() - 1 {\n\
    \        return Some(smallest);\n    }\n    let mut smallest_value4 = lst.iter().nth(smallest_index3).unwrap();\n\
    \    if smallest_value4 < smallest {\n        smallest = smallest_value4;\n  \
    \      smallest_index = smallest_index3;\n    }\n    if smallest_index == lst.len()\
    \ - 1 {\n        return Some(smallest);\n    }\n    let mut smallest_value5 =\
    \ lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_index5 = lst.iter().position(|x|\
    \ *x == smallest_value5).unwrap();\n    if smallest_index5 == lst.len() - 1 {\n\
    \        return Some(smallest);\n    }\n    let mut smallest_value6 = lst.iter().nth(smallest_index5).unwrap();\n\
    \    if smallest_value6 < smallest {\n        smallest = smallest_value6;\n  \
    \      smallest_index = smallest_index5;\n    }\n    if smallest_index == lst.len()\
    \ - 1 {\n        return Some(smallest);\n    }\n    let mut smallest_value7 =\
    \ lst.iter().nth(smallest_index).unwrap();\n    let mut smallest_index7 = lst.iter().position(|x|\
    \ *x == smallest_value7).unwrap();\n    if smalle", '    lst.iter().enumerate().filter(|(_,
    i)| i < lst.len() - 2).next()', "    let mut smallest = lst.iter().min();\n  \
    \  if smallest == lst.len() {\n        return None;\n    }\n    let mut smallest_index\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n    if smallest_index ==\
    \ 0 {\n        return None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    if smallest_value == smallest {\n        return None;\n    }\n    let mut\
    \ smallest_index = lst.iter().position(|&x| x == smallest_value).unwrap();\n \
    \   if smallest_index == 0 {\n        return None;\n    }\n    let mut smallest_value\
    \ = lst.iter().nth(smallest_index).unwrap();\n    if smallest_value == smallest\
    \ {\n        return None;\n    }\n    smallest_index", "    let mut smallest =\
    \ lst.iter().min();\n    if smallest == lst.len() {\n        return None;\n  \
    \  }\n    let mut smallest_index = lst.iter().position(|&x| x < smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    let mut\
    \ smallest_value = lst.iter()[smallest_index];\n    if smallest_index == 0 {\n\
    \        smallest_value = lst.iter().min();\n    }\n    smallest_index -= 1;\n\
    \    smallest_value", "    let mut smallest = lst.iter().min();\n    if smallest\
    \ == lst.len() {\n        return None;\n    }\n    let mut smallest_index = lst.iter().position(|&x|\
    \ x == smallest).unwrap();\n    if smallest_index == 0 {\n        return None;\n\
    \    }\n    let mut second_smallest = lst.iter().skip(smallest_index).min();\n\
    \    if second_smallest == lst.len() {\n        return None;\n    }\n    Some(second_smallest)",
  "    if lst.len() <= 1 {\n        return None;\n    }\n\n    let mut smallest =\
    \ lst.iter().min().unwrap();\n    let mut smallest_index = lst.iter().position(|x|\
    \ *x == smallest).unwrap();\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \n    for &x in lst {\n        if *x < smallest_value {\n            smallest_value\
    \ = x;\n            smallest_index = lst.iter().position(|x| *x == smallest_value).unwrap();\n\
    \        }\n    }\n\n    Some(smallest_value)", '    lst.iter().skip(1).min()',
  "    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_index =\
    \ lst.iter().position(|x| x == smallest).unwrap();\n    if smallest_index == lst.len()\
    \ {\n        return None;\n    }\n    let mut smallest_value = lst.iter().nth(smallest_index).unwrap();\n\
    \    for i in lst.iter().skip(smallest_index + 1) {\n        if *i < smallest_value\
    \ {\n            smallest_value = i;\n            smallest_index = i;\n      \
    \  }\n    }\n    Some(smallest_value)", "    if lst.len() == 0 {\n        return\
    \ None;\n    }\n    let mut smallest = lst.iter().min().unwrap();\n    let mut\
    \ smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_index\
    \ == lst.len() - 1 {\n        return Some(smallest);\n    }\n    let mut smallest_index\
    \ = smallest_index + 1;\n    while smallest_index < lst.len() {\n        if *lst[smallest_index]\
    \ < *smallest {\n            smallest = *lst[smallest_index];\n            smallest_index\
    \ = smallest_index;\n        } else {\n            smallest_index += 1;\n    \
    \    }\n    }\n    Some(smallest)", "    if lst.len() == 0 {\n        return None;\n\
    \    }\n    let mut smallest = lst.iter().min().unwrap();\n    let mut smallest_idx\
    \ = lst.iter().position(|&x| x == smallest).unwrap();\n    if smallest_idx ==\
    \ lst.len() - 1 {\n        smallest_idx = 0;\n    }\n    Some(smallest[smallest_idx\
    \ + 1])", "    let mut smallest = lst.iter().min();\n    let mut smallest_idx\
    \ = lst.iter().position(|x| *x == smallest).unwrap();\n    if smallest_idx ==\
    \ lst.len() {\n        return None;\n    }\n    let mut smallest_idx = smallest_idx\
    \ + 1;\n    let mut smallest_val = lst.iter().nth(smallest_idx).unwrap();\n  \
    \  while smallest_idx < lst.len() {\n        if lst.iter().nth(smallest_idx).unwrap()\
    \ < smallest_val {\n            smallest_val = lst.iter().nth(smallest_idx).unwrap();\n\
    \            smallest_idx = smallest_idx + 1;\n        }\n        smallest_idx\
    \ = smallest_idx + 1;\n    }\n    Some(smallest_val)", "    let mut smallest =\
    \ lst[0];\n    let mut smallest_index = -1;\n    for &i in lst {\n        if i\
    \ < smallest {\n            smallest = i;\n            smallest_index = i;\n \
    \       }\n    }\n    Some(smallest_index)", '    lst.iter().enumerate().filter(|(_,
    x)| x < lst.len() - 2).next()', "    let mut smallest = lst.iter().min();\n  \
    \  let mut smallest_index = lst.iter().position(|&x| x < smallest).unwrap();\n\
    \    if smallest_index == lst.len() {\n        return None;\n    }\n    if smallest_index\
    \ == 0 {\n        smallest = lst.iter().max();\n        smallest_index = lst.iter().position(|&x|\
    \ x > smallest).unwrap();\n    }\n    Some(lst[smallest_index + 1])", "    if\
    \ lst.len() == 0 {\n        return None;\n    }\n\n    let mut smallest = lst.iter().min().unwrap();\n\
    \    let mut smallest_index = lst.iter().position(|x| *x == smallest).unwrap();\n\
    \    if smallest_index == 0 {\n        return None;\n    }\n\n    let mut second_smallest\
    \ = lst.iter().skip(smallest_index).min().unwrap();\n    let mut second_smallest_index\
    \ = lst.iter().position(|x| *x == second_smallest).unwrap();\n    if second_smallest_index\
    \ == 0 {\n        return None;\n    }\n\n    Some(second_smallest)", "    let\
    \ mut smallest = lst.iter().min();\n    if smallest == lst.len() {\n        return\
    \ None;\n    }\n    let mut smallest_idx = 1;\n    for idx in lst.iter().skip(smallest_idx).rev()\
    \ {\n        if *idx < smallest {\n            smallest = *idx;\n            smallest_idx\
    \ = idx;\n        }\n    }\n    Some(smallest)"]
stop_tokens:
- "\n}"
