name: HumanEval_101_words_string
language: rs
prompt: "/// You will be given a string of words separated by commas or spaces. Your\
  \ task is\n/// to split the string into words and return an array of the words.\n\
  /// For example:\nfn words_string(s: String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = words_string;\n    assert_eq!(candidate(String::from(\"\
  Hi, my name is John\")), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"\
  name\"), String::from(\"is\"), String::from(\"John\")]);\n    assert_eq!(candidate(String::from(\"\
  One, two, three, four, five, six\")), vec![String::from(\"One\"), String::from(\"\
  two\"), String::from(\"three\"), String::from(\"four\"), String::from(\"five\"),\
  \ String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"Hi, my name\"\
  )), vec![String::from(\"Hi\"), String::from(\"my\"), String::from(\"name\")]);\n\
  \    assert_eq!(candidate(String::from(\"One,, two, three, four, five, six,\")),\
  \ vec![String::from(\"One\"), String::from(\"two\"), String::from(\"three\"), String::from(\"\
  four\"), String::from(\"five\"), String::from(\"six\")]);\n    assert_eq!(candidate(String::from(\"\
  \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"ahmed    \
  \ , gamal\")), vec![String::from(\"ahmed\"), String::from(\"gamal\")]);\n}\n"
completions: ["    let mut words = vec![];\n    let mut s = String::from(s);\n   \
    \ while !s.is_empty() {\n        let mut word = String::from(\"\");\n        while\
    \ !s.is_empty() && s.chars().next().unwrap() != ',' {\n            word.push(s.chars().next().unwrap());\n\
    \        }\n        words.push(word);\n        s = String::from(s.chars().next().unwrap());\n\
    \    }\n    words", "    let mut words = Vec::new();\n    let mut s = String::from(s);\n\
    \    let mut i = 0;\n    while i < s.len() {\n        let mut word = String::new();\n\
    \        while i < s.len() && s.chars().any(|c| c == ',' || c == ' ') {\n    \
    \        word.push(s.chars().next().unwrap());\n            i += 1;\n        }\n\
    \        words.push(word);\n    }\n    words", "    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    words.collect();\n    words",
  "    let mut words = Vec::new();\n    let mut words = s.split_whitespace();\n  \
    \  for word in words {\n        words.push_back(word);\n    }\n    return words;",
  "    let mut words = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty()\
    \ {\n        let mut word = String::new();\n        while !s.is_empty() {\n  \
    \          if s.is_whitespace() {\n                break;\n            }\n   \
    \         word.push(s.chars().next().unwrap());\n        }\n        words.push(word);\n\
    \        s = String::from(word.as_str());\n    }\n    words", "    let mut words\
    \ = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty() {\n\
    \        let mut word = String::new();\n        while !s.is_empty() {\n      \
    \      if s.is_whitespace() {\n                break;\n            }\n       \
    \     word.push(s.chars().next().unwrap());\n            s.next();\n        }\n\
    \        words.push(word);\n    }\n    words", "    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;", "    let mut words = vec![];\n    let mut words =\
    \ s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;", "    let mut words = Vec::new();\n    let mut s =\
    \ String::from(s);\n    while !s.is_empty() {\n        let mut word = String::new();\n\
    \        while !s.is_empty() {\n            if s.is_whitespace() {\n         \
    \       break;\n            }\n            word.push(s.chars().next().unwrap());\n\
    \            s.next();\n        }\n        words.push(word);\n    }\n    words",
  "    let mut words = Vec::new();\n    let mut words = s.split_whitespace();\n  \
    \  words.collect();\n    words", "    let mut words = Vec::new();\n    let mut\
    \ words = s.split_whitespace();\n    words.collect();\n    words", "    let mut\
    \ words = Vec::new();\n    let mut words = s.split(\",\");\n    words.clone_from_slice(words.as_slice());\n\
    \    words", "    let mut words = Vec::new();\n    let mut s = String::from(s);\n\
    \    let mut split = false;\n    while !s.is_empty() {\n        if s.is_whitespace()\
    \ {\n            split = true;\n        } else {\n            if split {\n   \
    \             words.push(s.trim_end());\n                split = false;\n    \
    \        }\n            s.trim_end();\n        }\n    }\n    words", "    let\
    \ mut words = vec![];\n    let mut s = String::from(s);\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut word = String::from(\"\");\n       \
    \ let mut j = i;\n        while j < s.len() && s.chars().any(|c| c == ',' || c\
    \ == ' ') {\n            word.push(s.chars().nth(j).unwrap());\n            j\
    \ = j + 1;\n        }\n        word.push(s.chars().nth(j).unwrap());\n       \
    \ words.push(word);\n        i = j;\n    }\n    words", "    let mut words = Vec::new();\n\
    \    let mut s = String::from(s);\n    let mut word = \"\";\n    while !s.is_empty()\
    \ {\n        let c = s.chars().next().unwrap();\n        if c == ',' || c == '\
    \ ' {\n            words.push(word);\n            word = \"\";\n        } else\
    \ {\n            word += c;\n        }\n    }\n    words.push(word);\n    words",
  "    let mut words = Vec::new();\n    let mut words = s.split_whitespace();\n  \
    \  words.collect();\n    words", "    let mut words = Vec::new();\n    let mut\
    \ s = String::from(s);\n    let mut i = 0;\n    while i < s.len() {\n        let\
    \ mut word = String::new();\n        word.push_str(&s[i .. i + 1]);\n        i\
    \ += 1;\n        words.push(word);\n    }\n    words", "    let mut words = Vec::new();\n\
    \    let mut words = s.split_whitespace();\n    for word in words {\n        words.push(word);\n\
    \    }\n    return words;", "    let mut words = Vec::new();\n    let mut words\
    \ = s.split_whitespace();\n    words.collect();\n    words", "    let mut words\
    \ = Vec::new();\n    let mut s = String::from(s);\n    while !s.is_empty() {\n\
    \        let mut word = String::new();\n        let mut c = false;\n        while\
    \ !s.is_empty() {\n            if c == false {\n                if s.is_empty()\
    \ {\n                    break;\n                }\n                word.push(*s);\n\
    \                c = true;\n            } else {\n                word.push(*s);\n\
    \                c = false;\n            }\n            s = s.chars().next();\n\
    \        }\n        words.push(word);\n    }\n    return words;"]
stop_tokens:
- "\n}"
