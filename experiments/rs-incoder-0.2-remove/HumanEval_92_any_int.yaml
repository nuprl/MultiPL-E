name: HumanEval_92_any_int
language: rs
prompt: "/// Create a function that takes 3 numbers.\n/// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  /// Returns false in any other cases.\n/// Examples\nfn any_int(x: f64, y: f64,\
  \ z: f64) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    x.is_integer() && y.is_integer() && z.is_integer()\n        &&\
    \ (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.unwrap() +\
    \ y.unwrap() + z.unwrap() == x.unwrap()", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    match x {\n        x if x == y && x == z => true,\n        _ => false,\n  \
    \  }", "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.to_f64() +\
    \ y.to_f64() + z.to_f64() == x.to_f64()", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    match x, y, z {\n        (x, y, z) => x.is_integer() && y.is_integer() && z.is_integer(),\n\
    \        _ => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.unwrap() + y.unwrap() + z.unwrap() == x.unwrap()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", " \
    \   match x {\n        x if x == y && x == z => true,\n        _ => false,\n \
    \   }", "    match x {\n        x if x == y && x == z => true,\n        _ => false,\n\
    \    }", "    match f64::try_from(x).unwrap() {\n        Some(x) => f64::try_from(y).unwrap().is_some()\
    \ && f64::try_from(z).unwrap().is_some(),\n        None => false,\n    }", " \
    \   x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.to_f64() +\
    \ y.to_f64() + z.to_f64() == x.to_f64()", '    x.is_integer() && y.is_integer()
    && z.is_integer()', "    match x, y, z {\n        (x, y, z) => x <= y && y <=\
    \ z && x >= z && x % 1 == 0 && y % 1 == 0 && z % 1 == 0,\n        _ => false,\n\
    \    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    match f64::try_from(x).unwrap() {\n        Some(x) => f64::try_from(y).unwrap().is_some()\
    \ &&\n            f64::try_from(z).unwrap().is_some(),\n        None => false,\n\
    \    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x\
    \ + y + z).is_integer()", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", " \
    \   match x {\n        x if x == y && x == z => true,\n        _ => false,\n \
    \   }", "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x\
    \ + y + z).is_integer()", "    match f64::try_from(x).unwrap() {\n        Some(x)\
    \ => f64::try_from(y).unwrap().is_some() && f64::try_from(z).unwrap().is_some(),\n\
    \        None => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    match x {\n        x if x == y && x == z => true,\n        _ => false,\n  \
    \  }", "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x\
    \ + y + z).is_integer()", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && (x + y + z).is_integer()", "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && x.unwrap() + y.unwrap() + z.unwrap()\
    \ == x.unwrap()", '    x.is_integer() && y.is_integer() && z.is_integer()', " \
    \   match x, y, z {\n        (0..).all(|&x| x == x) as bool,\n        (0..).all(|&x|\
    \ x == x as i32) as bool,\n        _ => false,\n    }", "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.to_f64() +\
    \ y.to_f64() + z.to_f64() == x.to_f64()", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.to_f64() +\
    \ y.to_f64() + z.to_f64() == x.to_f64()", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer()', '    any_int_impl(x, y,
    z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    match x, y, z {\n        (x, y, z) => x.is_integer() && y.is_integer() && z.is_integer(),\n\
    \        _ => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()", "    match x,\
    \ y, z {\n        (x, y, z) => x.is_integer() && y.is_integer() && z.is_integer(),\n\
    \        _ => false,\n    }", '    x.is_integer() && y.is_integer() && z.is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.unwrap() +\
    \ y.unwrap() + z.unwrap() == x.unwrap()", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.to_f64() +\
    \ y.to_f64() + z.to_f64() == x.to_f64()", "    match x, y, z {\n        (x, y,\
    \ z) => x == y + z && x.is_integer() && y.is_integer() && z.is_integer(),\n  \
    \      _ => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()", '    any_int_impl(x,
    y, z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x\
    \ + y + z).is_integer()", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()", " \
    \   match x, y, z {\n        (x, y, z) => x.is_integer() && y.is_integer() &&\
    \ z.is_integer(),\n        _ => false,\n    }", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    match x {\n        x if x == y && x == z => true,\n        _ => false,\n  \
    \  }", "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x\
    \ + y + z).is_integer()", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    match x, y, z {\n        (x, y, z) => x.is_integer() && y.is_integer() && z.is_integer(),\n\
    \        _ => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    match x, y, z {\n        (x, y, z) => x.is_integer() && y.is_integer() && z.is_integer(),\n\
    \        _ => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.unwrap() + y.unwrap() + z.unwrap() == x.unwrap()", "    match x\
    \ {\n        x if x == y && x == z => true,\n        _ => false,\n    }", "  \
    \  x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer()', "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", "  \
    \  x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.to_f64() +\
    \ y.to_f64() + z.to_f64() == x.to_f64()", "    match x, y, z {\n        (x, y,\
    \ z) if x == y || x == z || y == z => true,\n        _ => false,\n    }", "  \
    \  match x, y, z {\n        (x, y, z) => x == y + z && x.is_integer() && y.is_integer()\
    \ && z.is_integer(),\n        _ => false,\n    }", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()",
  '    x.is_integer() && y.is_integer() && z.is_integer()', "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    match x, y, z {\n        (x, y, z) => x <= y && y <= z && x >= z && x <= z\
    \ + y,\n        _ => false,\n    }", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()", " \
    \   x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer()', "    match x {\n     \
    \   x if x == y && x == z => true,\n        _ => false,\n    }", "    match f64::try_from(x).unwrap()\
    \ {\n        Some(x) => f64::try_from(y).unwrap().is_some() &&\n            f64::try_from(z).unwrap().is_some(),\n\
    \        None => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer()', '    x.is_integer() && y.is_integer() &&
    z.is_integer()', "    x.is_integer() && y.is_integer() && z.is_integer()\n   \
    \     && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    any_int_impl(x, y, z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer()', "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", '    any_int_impl(x,
    y, z)', "    match x, y, z {\n        (x, y, z) => x.is_integer() && y.is_integer()\
    \ && z.is_integer(),\n        _ => false,\n    }", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", "    match f64::try_from(x).unwrap()\
    \ {\n        Some(x) => f64::try_from(y).unwrap().is_some() && f64::try_from(z).unwrap().is_some(),\n\
    \        None => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    match x, y, z {\n        (0..).any(|&x|\
    \ x == x + y),\n        (0..).any(|&x| x == x + z),\n        (0..).any(|&x| x\
    \ == y + z),\n        _ => false,\n    }", "    match f64::try_from(x).unwrap()\
    \ {\n        Some(x) => f64::try_from(y).unwrap().is_some() && f64::try_from(z).unwrap().is_some(),\n\
    \        None => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    match x {\n        0 | 1 | 2 => true,\n        _ => false,\n    }\n    match\
    \ y {\n        0 | 1 | 2 => true,\n        _ => false,\n    }\n    match z {\n\
    \        0 | 1 | 2 => true,\n        _ => false,\n    }", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.to_f64() + y.to_f64() + z.to_f64()\
    \ == x.to_f64()", "    match x, y, z {\n        (x, y, z) => x.is_integer() &&\
    \ y.is_integer() && z.is_integer(),\n        _ => false,\n    }", "    match x,\
    \ y, z {\n        (x, y, z) => x <= y + z &&\n            y <= x + z &&\n    \
    \        x <= z &&\n            y <= x &&\n            z <= x &&\n           \
    \ x <= y + z &&\n            y <= x + z &&\n            z <= x + z,\n        _\
    \ => false,\n    }", "    match x {\n        x if x == y && x == z => true,\n\
    \        _ => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", " \
    \   match x {\n        x if x == y && x == z => true,\n        _ => false,\n \
    \   }", "    match x {\n        x if x == y && x == z => true,\n        _ => false,\n\
    \    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x\
    \ + y + z).is_integer()", '    x.is_integer() && y.is_integer() && z.is_integer()',
  "    match x, y, z {\n        (x, y, z) => {\n            if x == y && x == z {\n\
    \                true\n            } else {\n                false\n         \
    \   }\n        }\n        _ => false,\n    }", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer()', "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && (x + y + z).is_integer()", "    match x, y, z {\n\
    \        (x, y, z) => x.is_integer() && y.is_integer() && z.is_integer(),\n  \
    \      _ => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.unwrap() + y.unwrap() + z.unwrap() == x.unwrap() + y.unwrap() +\
    \ z.unwrap()", '    x.is_integer() && y.is_integer() && z.is_integer()', "   \
    \ match x {\n        x if x == y && x == z => true,\n        _ => false,\n   \
    \ }", "    match x {\n        x if x == y && x == z => true,\n        _ => false,\n\
    \    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    match x {\n        0 | y | z => true,\n        _ => false,\n    }", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.to_f64() +\
    \ y.to_f64() + z.to_f64() == x.to_f64()", "    match x, y, z {\n        (x, y,\
    \ z) => x.is_integer() && y.is_integer() && z.is_integer(),\n        _ => false,\n\
    \    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    match x, y, z {\n        (x, y, z) => x <= y && y <= z && x >= z && is_int(x\
    \ + y + z),\n        _ => false,\n    }", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.to_f64() +\
    \ y.to_f64() + z.to_f64() == x.to_f64()", "    match x, y, z {\n        (x, y,\
    \ z) => x <= y && y <= z && x >= z && x <= z + y,\n        _ => false,\n    }",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer()', '    any_int_impl(x, y,
    z)', '    x.is_integer() && y.is_integer() && z.is_integer()', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", " \
    \   match x {\n        x if x == y && x == z => true,\n        _ => false,\n \
    \   }", "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x\
    \ + y + z).is_integer()", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer()', "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && (x + y + z).is_integer()", "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    any_int_impl(x, y, z)', '    x.is_integer() && y.is_integer() && z.is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    match x {\n        x if x == y && x == z => true,\n        _ => false,\n  \
    \  }", "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    match x, y, z {\n        (0..).any(|&x| x == x + y),\n        (0..).any(|&x|\
    \ x == x + z),\n        _ => false,\n    }", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    match x, y, z {\n        (0...10..100),\n        (0...10..100),\n        (0...10..100),\n\
    \        _ => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    match f64::from(x)\
    \ + f64::from(y) + f64::from(z) {\n        Some(x) => x == f64::from(x) + f64::from(x)\
    \ + f64::from(x),\n        None => false,\n    }", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    match x, y, z {\n        (x, y, z) => x <= y && y <= z && x >= z && x % 1 ==\
    \ 0 && y % 1 == 0 && z % 1 == 0,\n        _ => false,\n    }", "    match x, y,\
    \ z {\n        (x, y, z) => x == y + z && x == y + z && x == y + z,\n        _\
    \ => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", " \
    \   x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    match x, y, z {\n        (x, y, z) => x.is_integer() && y.is_integer() && z.is_integer(),\n\
    \        _ => false,\n    }", '    x.is_integer() && y.is_integer() && z.is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    match x, y, z {\n        (x, y, z) => x.is_integer() && y.is_integer() && z.is_integer(),\n\
    \        _ => false,\n    }", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.unwrap() + y.unwrap() + z.unwrap() == x.unwrap()", "    match x\
    \ {\n        x if x == y && x == z => true,\n        _ => false,\n    }"]
stop_tokens:
- "\n}"
