name: HumanEval_131_digits
language: rs
prompt: "/// Given a positive integer n, return the product of the odd digits.\n///\
  \ Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n/// 1\n\
  /// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
  \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n \
  \   assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n  \
  \  assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
  }\n"
completions: ["    let mut product = 1;\n    for d in n.digits() {\n        if d %\
    \ 2 == 1 {\n            product *= d;\n        }\n    }\n    product", "    let\
    \ mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /=\
    \ 10;\n    }\n    product", "    let mut product = 1;\n    for d in n.digits()\
    \ {\n        if d % 2 == 1 {\n            product *= d;\n        }\n    }\n  \
    \  product", "    let mut product = 1;\n    while n > 0 {\n        product *=\
    \ n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n     \
    \   0\n    } else {\n        n % 10\n    }", "    if n % 2 == 0 {\n        n\n\
    \    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n * digits(n / 2)\n    }", "    let mut product = 1;\n\
    \    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n     \
    \   n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        n\n    } else\
    \ {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n  \
    \      n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ / 2\n    }", "    let mut product = 1;\n    while n > 0 {\n        product *=\
    \ n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n     \
    \   0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2\n    }", '    n / 10', "    let mut product = 1;\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10;\n\
    \        }\n        n /= 10;\n    }\n    product", "    let mut product = 1;\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10;\n\
    \        }\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n    \
    \    0\n    } else {\n        n / 2\n    }"]
stop_tokens:
- "\n}"
