name: HumanEval_131_digits
language: rs
prompt: "/// Given a positive integer n, return the product of the odd digits.\n///\
  \ Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1) \n/// 1\n\
  /// >>> digits(4) \n/// 0\nfn digits(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
  \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n \
  \   assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n  \
  \  assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
  }\n"
completions: ["    let mut product = 1;\n    for d in n.digits() {\n        if d %\
    \ 2 == 1 {\n            product *= d;\n        }\n    }\n    product", "    let\
    \ mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /=\
    \ 10;\n    }\n    product", "    let mut product = 1;\n    for d in n.digits()\
    \ {\n        if d % 2 == 1 {\n            product *= d;\n        }\n    }\n  \
    \  product", "    let mut product = 1;\n    while n > 0 {\n        product *=\
    \ n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n     \
    \   0\n    } else {\n        n % 10\n    }", "    if n % 2 == 0 {\n        n\n\
    \    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n * digits(n / 2)\n    }", "    let mut product = 1;\n\
    \    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n     \
    \   n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        n\n    } else\
    \ {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n  \
    \      n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ / 2\n    }", "    let mut product = 1;\n    while n > 0 {\n        product *=\
    \ n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n     \
    \   0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2\n    }", '    n / 10', "    let mut product = 1;\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10;\n\
    \        }\n        n /= 10;\n    }\n    product", "    let mut product = 1;\n\
    \    while n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10;\n\
    \        }\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n    \
    \    0\n    } else {\n        n / 2\n    }", "    match n % 2 {\n        0 =>\
    \ n,\n        1 => n - 1,\n        _ => 0,\n    }", "    let mut product = 1;\n\
    \    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n     \
    \   n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n % 10\n    }", "    let mut product = 1;\n    for digit in n.digits()\
    \ {\n        if digit % 2 == 1 {\n            product *= digit;\n        }\n \
    \   }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ / 2\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n\
    \    }", "    let mut product = 1;\n    while n > 0 {\n        product *= n %\
    \ 10;\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        n\n\
    \    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2\n    }", "    let mut product = 1;\n    for i in\
    \ 1..=n {\n        if i % 2 == 1 {\n            product *= i;\n        }\n   \
    \ }\n    product", "    let mut product = 1;\n    while n > 0 {\n        product\
    \ *= n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n  \
    \      0\n    } else {\n        n * digits(n / 2)\n    }", '    n / 10', '    n.checked_mul(2).unwrap().checked_mul(&odd).unwrap()',
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", '    n / 10',
  "    let mut product = 1;\n    for digit in n.digits() { product *= digit }\n  \
    \  product", "    let mut product = 1;\n    while n > 0 {\n        product *=\
    \ n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n     \
    \   n\n    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n   \
    \     0\n    } else {\n        n / 2\n    }", "    let mut product = 1;\n    for\
    \ digit in n.digits() {\n        if digit % 2 == 1 {\n            product *= digit;\n\
    \        }\n    }\n    product", "    let mut product = 1;\n    for d in n.digits()\
    \ {\n        if d % 2 == 1 {\n            product *= d;\n        }\n    }\n  \
    \  product", "    let mut product = 1;\n    while n > 0 {\n        product *=\
    \ n % 10;\n        n /= 10;\n    }\n    product", "    let mut product = 1;\n\
    \    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  '    n / 10', "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n   \
    \ }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n \
    \   }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  "    if n % 2 == 0 {\n        n * digits(n / 2)\n    } else {\n        0\n    }",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 ==\
    \ 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    let mut product\
    \ = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    product", "    let mut product = 1;\n    while n > 0 {\n        if n % 2\
    \ == 1 {\n            product *= n % 10;\n        }\n        n /= 10;\n    }\n\
    \    product", "    if n % 2 == 0 {\n        n * digits(n / 2)\n    } else {\n\
    \        0\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n /\
    \ 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n  \
    \  }", "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n\
    \        n /= 10;\n    }\n    product", "    match n % 10 {\n        0 => 1,\n\
    \        1 => n,\n        _ => 0,\n    }", "    if n % 2 == 0 {\n        n\n \
    \   } else {\n        digits(n / 2)\n    }", "    let mut product = 1;\n    for\
    \ digit in n.digits().filter(|&d| d % 2 == 1) {\n        product *= digit;\n \
    \   }\n    product", "    let mut product = 1;\n    for digit in n.digits(2) {\n\
    \        product *= digit;\n    }\n    product", "    if n % 2 == 0 {\n      \
    \  n * digits(n / 2)\n    } else {\n        0\n    }", "    if n % 2 == 0 {\n\
    \        0\n    } else {\n        n * digits(n / 2)\n    }", "    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n * digits(n / 2)\n    }", "    let mut\
    \ product = 1;\n    for i in 1..=n {\n        if i % 2 == 1 {\n            product\
    \ *= i;\n        }\n    }\n    product", "    if n % 2 == 0 {\n        n\n   \
    \ } else {\n        digits(n / 2)\n    }", '    n / 10', "    if n % 2 == 0 {\n\
    \        n\n    } else {\n        0\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n / 2\n    }", "    let mut product = 1;\n    for d in n.digits()\
    \ {\n        if d % 2 == 1 {\n            product *= d;\n        }\n    }\n  \
    \  product", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n /\
    \ 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n * digits(n\
    \ / 2)\n    }", "    let mut product = 1;\n    while n > 0 {\n        product\
    \ *= n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n  \
    \      0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        n\n\
    \    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        n\n\
    \    } else {\n        digits(n / 2)\n    }", "    let mut product = 1;\n    for\
    \ d in n.digits() {\n        if d % 2 == 1 {\n            product *= d;\n    \
    \    }\n    }\n    product", '    n.checked_mul(2).unwrap()', "    let mut product\
    \ = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n * digits(n /\
    \ 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n \
    \   }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  "    let mut product = 1;\n    for digit in n.to_digits() {\n        if digit %\
    \ 2 == 1 {\n            product *= digit;\n        }\n    }\n    product", " \
    \   let mut product = 1;\n    for digit in n.digits() {\n        if digit % 2\
    \ == 1 {\n            product *= digit;\n        }\n    }\n    product", "   \
    \ match n % 2 {\n        0 => 1,\n        1 => n,\n        _ => 0,\n    }", '    n
    / 10', "    let mut product = 1;\n    for d in n.digits() { product *= d }\n \
    \   product", '    n / 10', "    if n % 2 == 0 {\n        0\n    } else {\n  \
    \      n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n % 10\n\
    \    }", "    let mut product = 1;\n    while n > 0 {\n        product *= n %\
    \ 10;\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        n\n\
    \    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        n\n\
    \    } else {\n        digits(n / 2)\n    }", "    let mut product = 1;\n    for\
    \ digit in n.digits() {\n        if digit % 2 == 1 {\n            product *= digit;\n\
    \        }\n    }\n    product", "    let mut product = 1;\n    for d in n.digits()\
    \ {\n        if d % 2 == 1 {\n            product *= d;\n        }\n    }\n  \
    \  product", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n  \
    \  }", "    let mut product = 1;\n    for digit in n.digits(2) {\n        product\
    \ *= digit;\n    }\n    product", "    let mut product = 1;\n    while n > 0 {\n\
    \        product *= n % 10;\n        n /= 10;\n    }\n    product", "    if n\
    \ % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", '    n / 10', " \
    \   if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        0\n    } else {\n        n * digits(n / 2)\n    }", "  \
    \  let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n     \
    \   n /= 10;\n    }\n    product", "    let mut product = 1;\n    while n > 0\
    \ {\n        product *= n % 10;\n        n /= 10;\n    }\n    product", "    match\
    \ n % 10 {\n        0 => 1,\n        1 => n,\n        _ => 0,\n    }", "    let\
    \ mut product = 1;\n    for d in n.digits() {\n        if d % 2 == 1 {\n     \
    \       product *= d;\n        }\n    }\n    product", '    n / 10', "    let\
    \ mut product = 1;\n    for digit in n.digits() {\n        if digit % 2 == 1 {\n\
    \            product *= digit;\n        }\n    }\n    product", "    let mut product\
    \ = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            product *= n %\
    \ 10;\n        }\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n\
    \        n\n    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n\
    \        n * digits(n / 2)\n    } else {\n        0\n    }", "    if n % 2 ==\
    \ 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    if n % 2 ==\
    \ 0 {\n        n * digits(n / 2)\n    } else {\n        0\n    }", "    if n %\
    \ 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    let mut product\
    \ = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n\
    \    }", "    if n % 2 == 0 {\n        n * digits(n / 2)\n    } else {\n     \
    \   0\n    }", "    let mut product = 1;\n    while n > 0 {\n        product *=\
    \ n % 10;\n        n /= 10;\n    }\n    product", "    let mut product = 1;\n\
    \    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    let mut\
    \ product = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n\
    \    }\n    product", "    let mut product = 1;\n    while n > 0 {\n        product\
    \ *= n % 10;\n        n /= 10;\n    }\n    product", '    n / 10', "    let mut\
    \ product = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n\
    \    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ / 2\n    }", "    let mut product = 1;\n    while n > 0 {\n        product *=\
    \ n % 10;\n        n /= 10;\n    }\n    product", "    let mut product = 1;\n\
    \    for d in n.digits() {\n        if d % 2 == 1 {\n            product *= d;\n\
    \        }\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n\
    \        n / 2\n    }", "    let mut product = 1;\n    for d in n.digits() {\n\
    \        if d % 2 == 1 {\n            product *= d;\n        }\n    }\n    product",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", '    n.checked_mul(2).unwrap()',
  '    n / 10', '    n.checked_mul(2).unwrap()', "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2\n    }", "    let mut product = 1;\n    for i in\
    \ 0..n {\n        if i % 2 == 1 {\n            product *= i;\n        }\n    }\n\
    \    product", "    debug_assert!(n % 2 == 0);\n    let mut product = 1;\n   \
    \ for d in n.digits() {\n        product *= d;\n    }\n    product", "    let\
    \ mut product = 1;\n    for digit in n.digits() {\n        if digit % 2 == 1 {\n\
    \            product *= digit;\n        }\n    }\n    product", "    if n % 2\
    \ == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    if n %\
    \ 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    let mut product\
    \ = 1;\n    for digit in n.digits().cloned() {\n        if digit % 2 == 1 {\n\
    \            product *= digit;\n        }\n    }\n    product", "    if n % 2\
    \ == 0 {\n        0\n    } else {\n        n / 2\n    }", "    use std::cmp::Ordering;\n\
    \    let mut product = 1;\n    let mut digits = n.to_digits();\n    for d in &mut\
    \ digits {\n        if *d % 2 == 1 {\n            product *= *d;\n        }\n\
    \    }\n    if product == 0 {\n        product = 1;\n    }\n    product", "  \
    \  if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", " \
    \   if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 ==\
    \ 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    let mut product\
    \ = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n % 10\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n * digits(n / 2)\n    }",
  "    if n % 2 == 0 {\n        n\n    } else {\n        0\n    }", "    let mut product\
    \ = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    product", "    let mut product = 1;\n    for digit in n.digits() {\n    \
    \    if digit % 2 == 1 {\n            product *= digit;\n        }\n    }\n  \
    \  product", "    match n % 10 {\n        0 => 1,\n        1 => 1,\n        2\
    \ => 2,\n        3 => 3,\n        4 => 4,\n        5 => 5,\n        6 => 6,\n\
    \        7 => 7,\n        8 => 8,\n        9 => 9,\n        _ => 0,\n    }", " \
    \   let mut product = 1;\n    for digit in n.digits() { product *= digit }\n \
    \   product", '    n / 10', "    if n % 2 == 0 {\n        0\n    } else {\n  \
    \      n / 2\n    }", "    let mut product = 1;\n    for digit in n.digits().cloned()\
    \ {\n        if digit % 2 == 1 {\n            product *= digit;\n        }\n \
    \   }\n    product", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    fn odd(x: isize) -> bool {\n        x % 2 != 0\n    }\n \
    \   let mut product = 1;\n    for i in 0..n {\n        if odd(i) {\n         \
    \   product *= i;\n        }\n    }\n    product", "    if n % 2 == 0 {\n    \
    \    0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        n\n\
    \    } else {\n        0\n    }", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n * digits(n / 2)\n    }", "    let mut product = 1;\n    while n\
    \ > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product", " \
    \   let mut product = 1;\n    for d in n.digits() {\n        if d % 2 == 1 {\n\
    \            product *= d;\n        }\n    }\n    product", "    let mut product\
    \ = 1;\n    for digit in n.digits().cloned() {\n        if digit % 2 == 1 {\n\
    \            product *= digit;\n        }\n    }\n    product", "    if n % 2\
    \ == 0 {\n        n\n    } else {\n        0\n    }", "    if n % 2 == 0 {\n \
    \       0\n    } else {\n        n * digits(n / 2)\n    }", "    if n % 2 == 0\
    \ {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n  \
    \      0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n  \
    \      n * digits(n / 2)\n    }", "    let mut product = 1;\n    for d in n.digits()\
    \ {\n        if d % 2 == 1 {\n            product *= d;\n        }\n    }\n  \
    \  product", "    let mut product = 1;\n    for digit in n.digits().cloned() {\n\
    \        if digit % 2 == 1 {\n            product *= digit;\n        }\n    }\n\
    \    product", "    let mut product = 1;\n    while n > 0 {\n        product *=\
    \ n % 10;\n        n /= 10;\n    }\n    product", "    let mut product = 1;\n\
    \    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  "    if n % 2 == 0 {\n        n / 2\n    } else {\n        n * digits(n / 2)\n \
    \   }", "    if n % 2 == 0 {\n        n\n    } else {\n        0\n    }", "  \
    \  let mut product = 1;\n    for digit in n.to_digits().iter() {\n        if digit\
    \ % 2 == 1 {\n            product *= digit;\n        }\n    }\n    product", " \
    \   let mut product = 1;\n    for d in n.digits() { product *= d }\n    product",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        n * digits(n / 2)\n    } else {\n        0\n    }", "  \
    \  if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        n * digits(n / 2)\n    } else {\n        0\n    }", "  \
    \  if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        0\n    } else {\n        n % 10\n    }", "    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n * digits(n / 2)\n    }", "    if n %\
    \ 2 == 0 {\n        0\n    } else {\n        n * digits(n / 2)\n    }", "    let\
    \ mut product = 1;\n    for digit in n.digits().cloned() {\n        if digit %\
    \ 2 == 1 {\n            product *= digit;\n        }\n    }\n    product", " \
    \   if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    let\
    \ mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /=\
    \ 10;\n    }\n    product", "    let mut product = 1;\n    for digit in n.digits()\
    \ {\n        if digit % 2 == 1 {\n            product *= digit;\n        }\n \
    \   }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ % 10\n    }"]
stop_tokens:
- "\n}"
