language: rs
name: HumanEval_94_skjkasdkd
results:
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = std::i32::MAX;\n    let mut\
    \ sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n\
    \        }\n        if i % 3 == 0 {\n            sum += i;\n        }\n      \
    \  if i % 5 == 0 {\n            sum += i;\n        }\n        if i % 7 == 0 {\n\
    \            sum += i;\n        }\n        if i % 11 == 0 {\n            sum +=\
    \ i;\n        }\n        if i % 13 == 0 {\n            sum += i;\n        }\n\
    \        if i % 17 == 0 {\n            sum += i;\n        }\n        if i % 19\
    \ == 0 {\n            sum += i;\n        }\n        if i % 23 == 0 {\n       \
    \     sum += i;\n        }\n        if i % 29 == 0 {\n            sum += i;\n\
    \        }\n        if i % 31 == 0 {\n            sum += i;\n        }\n     \
    \   if i % 37 == 0 {\n            sum += i;\n        }\n        if i % 41 == 0\
    \ {\n            sum += i;\n        }\n        if i % 43 == 0 {\n            sum\
    \ += i;\n        }\n        if i % 47 == 0 {\n            sum += i;\n        }\n\
    \        if i % 53 == 0 {\n            sum += i;\n        }\n        if i % 59\
    \ == 0 {\n            sum += i;\n        }\n        if i % 61 == 0 {\n       \
    \     sum += i;\n        }\n        if i % 67 == 0 {\n            sum += i;\n\
    \        }\n        if i % 71 == 0 {\n            sum += i;\n        }\n     \
    \   if i % 73 == 0 {\n            sum += i;\n        }\n        if i % 79 == 0\
    \ {\n            sum += i;\n        }\n        if i % 83 == 0 {\n            sum\
    \ += i;\n        }\n        if i % 89 == 0 {\n            sum += i;\n        }\n\
    \        if i % 97 == 0 {\n            sum += i;\n        }\n        if i % 101\
    \ == 0 {\n            sum += i;\n        }\n        if i % 103 == 0 {\n      \
    \      sum += i;\n        }\n        if i % 107 == 0 {\n            sum += i;\n\
    \        }\n        if i % 111 == 0 {\n            sum += i;\n        }\n    \
    \    if i % 113 == 0 {\n            sum += i;\n        }\n        if i % 115 ==\
    \ 0 {\n            sum += i;\n        }\n        if i % 117 == 0 {\n         \
    \   sum += i;\n        }\n        if i % 119 == 0 {\n            sum += i;\n \
    \       }\n        if i % 121 == 0 {\n            sum += i;\n        }\n     \
    \   if i % 123 == 0 {\n            sum += i;\n        }\n        if i % 127 ==\
    \ 0 {\n            sum += i;\n        }\n        if i % 131 == 0 {\n         \
    \   sum += i;\n        }\n        if i % 133 == 0 {\n            sum += i;\n \
    \       }\n        if i % 137 == 0 {\n            sum += i;\n        }\n     \
    \   if i % 139 == 0 {\n            sum += i;\n        }\n        if i % 141 ==\
    \ 0 {\n            sum += i;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmph3ur_oxe.rs:143:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for &i in lst {\n\
    \    |                   - unclosed delimiter\n...\n128 |         if i % 141 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    129 |             sum += i;\n130 | }\n    | - ...as it matches this but it has\
    \ different indentation\n...\n143 | }\n    |   ^\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmph3ur_oxe.rs:7:9\n  |\n7 |     for &i in lst {\n  |         ^^  \
    \  --- this expression has type `isize`\n  |         |\n  |         expected `isize`,\
    \ found reference\n  |\n  = note:   expected type `isize`\n          found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmph3ur_oxe.rs:7:5\n   \
    \ |\n4   |   fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                 \
    \                   ----- expected `isize` because of return type\n...\n7   |\
    \ /     for &i in lst {\n8   | |         if i % 2 == 0 {\n9   | |            \
    \ sum += i;\n10  | |         }\n...   |\n142 | |     assert_eq!(candidate(vec![127,\
    \ 97, 8192]), 10);\n143 | | }\n    | |__^ expected `isize`, found `()`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ isprime(i) {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `isprime` in this scope\n --> /tmp/tmpbk4qqdaj.rs:7:12\n\
    \  |\n7 |         if isprime(i) {\n  |            ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    prime[0]\
    \ = false;\n    for i in 1..lst.len() {\n        if prime[i] {\n            for\
    \ j in 2..lst.len() {\n                if lst[j] % i == 0 {\n                \
    \    prime[j] = false;\n                    break;\n                }\n      \
    \      }\n        }\n    }\n    if lst.len() == 0 {\n        return 0;\n    }\n\
    \    let mut sum = 0;\n    for i in 1..lst.len() {\n        if prime[i] {\n  \
    \          sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfb21ctzn.rs:10:29\n   |\n\
    10 |                 if lst[j] % i == 0 {\n   |                             ^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmpfb21ctzn.rs:10:27\n   |\n10 |                 if lst[j] % i ==\
    \ 0 {\n   |                           ^ no implementation for `isize % usize`\n\
    \   |\n   = help: the trait `Rem<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for x in lst {\n        if x % 2 == 0 {\n            sum += x;\n \
    \       }\n        if x % 3 == 0 {\n            sum += x;\n        }\n       \
    \ if x % 5 == 0 {\n            sum += x;\n        }\n        if x % 7 == 0 {\n\
    \            sum += x;\n        }\n        if x % 11 == 0 {\n            sum +=\
    \ x;\n        }\n        if x % 13 == 0 {\n            sum += x;\n        }\n\
    \        if x % 17 == 0 {\n            sum += x;\n        }\n        if x % 19\
    \ == 0 {\n            sum += x;\n        }\n        if x % 23 == 0 {\n       \
    \     sum += x;\n        }\n        if x % 29 == 0 {\n            sum += x;\n\
    \        }\n        if x % 31 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 37 == 0 {\n            sum += x;\n        }\n        if x % 41 == 0\
    \ {\n            sum += x;\n        }\n        if x % 43 == 0 {\n            sum\
    \ += x;\n        }\n        if x % 47 == 0 {\n            sum += x;\n        }\n\
    \        if x % 53 == 0 {\n            sum += x;\n        }\n        if x % 59\
    \ == 0 {\n            sum += x;\n        }\n        if x % 61 == 0 {\n       \
    \     sum += x;\n        }\n        if x % 67 == 0 {\n            sum += x;\n\
    \        }\n        if x % 71 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 73 == 0 {\n            sum += x;\n        }\n        if x % 79 == 0\
    \ {\n            sum += x;\n        }\n        if x % 83 == 0 {\n            sum\
    \ += x;\n        }\n        if x % 89 == 0 {\n            sum += x;\n        }\n\
    \        if x % 97 == 0 {\n            sum += x;\n        }\n        if x % 101\
    \ == 0 {\n            sum += x;\n        }\n        if x % 103 == 0 {\n      \
    \      sum += x;\n        }\n        if x % 107 == 0 {\n            sum += x;\n\
    \        }\n        if x % 109 == 0 {\n            sum += x;\n        }\n    \
    \    if x % 113 == 0 {\n            sum += x;\n        }\n        if x % 117 ==\
    \ 0 {\n            sum += x;\n        }\n        if x % 121 == 0 {\n         \
    \   sum += x;\n        }\n        if x % 123 == 0 {\n            sum += x;\n \
    \       }\n        if x % 127 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 131 == 0 {\n            sum += x;\n        }\n        if x % 137 ==\
    \ 0 {\n            sum += x;\n        }\n        if x % 139 == 0 {\n         \
    \   sum += x;\n        }\n        if x % 143 == 0 {\n            sum += \n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmppq0ybeo3.rs:134:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for x in lst {\n\
    \    |                  - unclosed delimiter\n...\n119 |         if x % 143 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    120 |             sum += \n121 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n134 | }\n    |   ^\n\nerror: expected expression, found `}`\n\
    \   --> /tmp/tmppq0ybeo3.rs:121:1\n    |\n121 | }\n    | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n   --> /tmp/tmppq0ybeo3.rs:7:5\n    |\n4   |\
    \   fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                          \
    \          ----- expected `isize` because of return type\n...\n7   | /     for\
    \ x in lst {\n8   | |         if x % 2 == 0 {\n9   | |             sum += x;\n\
    10  | |         }\n...   |\n133 | |     assert_eq!(candidate(vec![127, 97, 8192]),\
    \ 10);\n134 | | }\n    | |__^ expected `isize`, found `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for &i in lst {\n        if prime[i] {\n            sum +=\
    \ i;\n        }\n        for &j in &prime[0..i] {\n            prime[j] = false;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphdlorj5_.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0277]: the\
    \ type `[bool]` cannot be indexed by `bool`\n  --> /tmp/tmphdlorj5_.rs:12:13\n\
    \   |\n12 |             prime[j] = false;\n   |             ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `bool`\n   = note: required because of the requirements\
    \ on the impl of `Index<bool>` for `Vec<bool>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphdlorj5_.rs:15:5\n   |\n4  | fn skjkasdkd(lst: Vec<isize>) -> isize\
    \ {\n   |                                  ----- expected `isize` because of return\
    \ type\n...\n15 |     sum\n   |     ^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n15 |     sum.try_into().unwrap()\n   |\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum:\
    \ isize = 0;\n    for num in lst {\n        if num > 0 {\n            if num %\
    \ 2 == 0 {\n                sum += num / 2;\n            } else {\n          \
    \      sum += num / 3;\n            }\n        }\n        if sum > max_prime {\n\
    \            max_prime = sum;\n        }\n        sum = 0;\n    }\n    max_prime\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `162`,\n right: `10`', /tmp/tmph4j0sku7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for x in lst {\n        if prime[x] {\n            sum +=\
    \ x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmp08vy8m9s.rs:8:12\n\
    \  |\n8 |         if prime[x] {\n  |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    let mut sum =\
    \ 0;\n    for x in lst {\n        if x > largest {\n            largest = x;\n\
    \        }\n        if x % 2 == 0 {\n            sum += x;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `438`,\n right: `10`', /tmp/tmp8ub1bycp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for num in lst {\n        if num > max_prime {\n           \
    \ max_prime = num;\n        }\n    }\n    for num in lst {\n        if num % max_prime\
    \ == 0 {\n            sum_of_digits += num % max_prime;\n        }\n    }\n  \
    \  sum_of_digits\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmplwjtj57x.rs:12:16\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for num in lst {\n    |                ---\n  \
    \  |                |\n    |                `lst` moved due to this implicit call\
    \ to `.into_iter()`\n    |                help: consider borrowing to avoid moving\
    \ into the for loop: `&lst`\n...\n12  |     for num in lst {\n    |          \
    \      ^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `lst`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    let mut sum =\
    \ 0;\n    for el in lst {\n        if el > largest {\n            largest = el;\n\
    \        }\n    }\n    for el in lst {\n        if el == largest {\n         \
    \   sum += el;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpp3ms21zo.rs:12:15\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for el in lst {\n    |               ---\n    |\
    \               |\n    |               `lst` moved due to this implicit call to\
    \ `.into_iter()`\n    |               help: consider borrowing to avoid moving\
    \ into the for loop: `&lst`\n...\n12  |     for el in lst {\n    |           \
    \    ^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `lst`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    for x in lst\
    \ {\n        if x > largest {\n            largest = x;\n        }\n    }\n  \
    \  largest\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9223372036854775807`,\n right: `10`', /tmp/tmpyd67cnfq.rs:16:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            continue;\n\
    \        }\n        let mut prime_digit: isize = 0;\n        let mut prime: isize\
    \ = 0;\n        for d in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n            if n % d == 0 {\n\
    \                prime = d;\n                prime_digit = n % d;\n          \
    \      break;\n            }\n        }\n        if prime > max_prime {\n    \
    \        max_prime = prime;\n            max_prime_digit = prime_digit;\n    \
    \    }\n    }\n    max_prime + max_prime_digit\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt_bi17ve.rs:15:25\n   |\n\
    15 |                 prime = d;\n   |                         ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |  \
    \               prime = *d;\n   |                         +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime\
    \ = n;\n        }\n    }\n    for n in lst {\n        if n % max_prime == 0 {\n\
    \            sum_of_digits += n % 10;\n        }\n    }\n    return sum_of_digits;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpuosc8u8w.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for n in lst {\n    |              ---\n    | \
    \             |\n    |              `lst` moved due to this implicit call to `.into_iter()`\n\
    \    |              help: consider borrowing to avoid moving into the for loop:\
    \ `&lst`\n...\n12  |     for n in lst {\n    |              ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_digits\
    \ = 0;\n    for num in lst {\n        if num > max_prime {\n            max_prime\
    \ = num;\n        }\n    }\n    for num in lst {\n        if num == max_prime\
    \ {\n            sum_digits += num;\n        }\n    }\n    return sum_digits;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpqngf7tqf.rs:12:16\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for num in lst {\n    |                ---\n  \
    \  |                |\n    |                `lst` moved due to this implicit call\
    \ to `.into_iter()`\n    |                help: consider borrowing to avoid moving\
    \ into the for loop: `&lst`\n...\n12  |     for num in lst {\n    |          \
    \      ^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `lst`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if x > largest {\n            largest = x;\n\
    \        }\n        if x % 2 == 0 {\n            sum += x;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpju9o9jti.rs:8:16\n  |\n8 |\
    \         if x > largest {\n  |                ^^^^^^^ expected `isize`, found\
    \ `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         if x > largest.try_into().unwrap() {\n \
    \ |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpju9o9jti.rs:9:23\n  |\n9 |             largest = x;\n  |       \
    \                ^ expected `i32`, found `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = lst[0];\n    for &i in lst {\n\
    \        if largest < i {\n            largest = i;\n        }\n    }\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if i % largest == 0 {\n          \
    \  sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp16vfcy37.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    let mut sum_digits: isize = 0;\n    for &i in lst {\n      \
    \  if max_prime < i {\n            max_prime = i;\n            max_prime_digit\
    \ = 0;\n        }\n        if max_prime == i {\n            max_prime_digit +=\
    \ i;\n        }\n    }\n    sum_digits += max_prime_digit;\n    return sum_digits;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfh2yxk_2.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    for num in lst {\n        let mut prime: isize = 1;\n      \
    \  let mut prime_digit: isize = 1;\n        while prime * prime <= num {\n   \
    \         if num % prime == 0 {\n                prime_digit += 1;\n         \
    \   }\n            prime += 1;\n        }\n        if prime > max_prime {\n  \
    \          max_prime = prime;\n            max_prime_digit = prime_digit;\n  \
    \      }\n    }\n    return max_prime + max_prime_digit;\n}\n\nfn main() {\n \
    \   let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `10`', /tmp/tmpto7r3hod.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    for num in lst {\n        if num > max_prime {\n           \
    \ max_prime = num;\n        }\n        if num % prime == 0 {\n            max_prime\
    \ = num;\n        }\n        prime += num;\n    }\n    return max_prime;\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmp95nnv1vh.rs:11:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmps4qandxs.rs:8:12\n\
    \  |\n8 |         if primes[i] {\n  |            ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for x in lst {\n        if x % 2 == 0 {\n            sum += x;\n \
    \       }\n        if x % 3 == 0 {\n            sum += x;\n        }\n       \
    \ if x % 5 == 0 {\n            sum += x;\n        }\n        if x % 7 == 0 {\n\
    \            sum += x;\n        }\n        if x % 11 == 0 {\n            sum +=\
    \ x;\n        }\n        if x % 13 == 0 {\n            sum += x;\n        }\n\
    \        if x % 17 == 0 {\n            sum += x;\n        }\n        if x % 19\
    \ == 0 {\n            sum += x;\n        }\n        if x % 23 == 0 {\n       \
    \     sum += x;\n        }\n        if x % 29 == 0 {\n            sum += x;\n\
    \        }\n        if x % 31 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 37 == 0 {\n            sum += x;\n        }\n        if x % 41 == 0\
    \ {\n            sum += x;\n        }\n        if x % 43 == 0 {\n            sum\
    \ += x;\n        }\n        if x % 47 == 0 {\n            sum += x;\n        }\n\
    \        if x % 53 == 0 {\n            sum += x;\n        }\n        if x % 59\
    \ == 0 {\n            sum += x;\n        }\n        if x % 61 == 0 {\n       \
    \     sum += x;\n        }\n        if x % 67 == 0 {\n            sum += x;\n\
    \        }\n        if x % 71 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 73 == 0 {\n            sum += x;\n        }\n        if x % 79 == 0\
    \ {\n            sum += x;\n        }\n        if x % 83 == 0 {\n            sum\
    \ += x;\n        }\n        if x % 89 == 0 {\n            sum += x;\n        }\n\
    \        if x % 97 == 0 {\n            sum += x;\n        }\n        if x % 101\
    \ == 0 {\n            sum += x;\n        }\n        if x % 103 == 0 {\n      \
    \      sum += x;\n        }\n        if x % 107 == 0 {\n            sum += x;\n\
    \        }\n        if x % 109 == 0 {\n            sum += x;\n        }\n    \
    \    if x % 113 == 0 {\n            sum += x;\n        }\n        if x % 117 ==\
    \ 0 {\n            sum += x;\n        }\n        if x % 121 == 0 {\n         \
    \   sum += x;\n        }\n        if x % 123 == 0 {\n            sum += x;\n \
    \       }\n        if x % 127 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 131 == 0 {\n            sum += x;\n        }\n        if x % 137 ==\
    \ 0 {\n            sum += x;\n        }\n        if x % 139 == 0 {\n         \
    \   sum += x;\n        }\n        if x % 143 == 0 {\n            sum += \n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmppq0ybeo3.rs:134:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for x in lst {\n\
    \    |                  - unclosed delimiter\n...\n119 |         if x % 143 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    120 |             sum += \n121 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n134 | }\n    |   ^\n\nerror: expected expression, found `}`\n\
    \   --> /tmp/tmppq0ybeo3.rs:121:1\n    |\n121 | }\n    | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n   --> /tmp/tmppq0ybeo3.rs:7:5\n    |\n4   |\
    \   fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                          \
    \          ----- expected `isize` because of return type\n...\n7   | /     for\
    \ x in lst {\n8   | |         if x % 2 == 0 {\n9   | |             sum += x;\n\
    10  | |         }\n...   |\n133 | |     assert_eq!(candidate(vec![127, 97, 8192]),\
    \ 10);\n134 | | }\n    | |__^ expected `isize`, found `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum:\
    \ isize = 0;\n    for i in lst {\n        if max_prime < i {\n            max_prime\
    \ = i;\n        }\n    }\n    for i in lst {\n        if max_prime % i == 0 {\n\
    \            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpd7w4vc_9.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for i in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for i in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for i in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let mut largest =\
    \ -1;\n    for n in lst {\n        if n % 2 == 0 {\n            continue;\n  \
    \      }\n        let mut i = 2;\n        while i * i <= n {\n            if n\
    \ % i == 0 {\n                break;\n            }\n            i += 1;\n   \
    \     }\n        if i == n {\n            primes.push(n as isize);\n        }\n\
    \        if n > largest {\n            largest = n as isize;\n        }\n    }\n\
    \    if primes.len() == 0 {\n        return 0;\n    }\n    let mut sum = 0;\n\
    \    for &n in primes {\n        sum += n % 10;\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc462wa4h.rs:29:9\n   |\n\
    29 |     for &n in primes {\n   |         ^^    ------ this expression has type\
    \ `Option<isize>`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |         help: you can probably remove the explicit borrow: `n`\n   |\n \
    \  = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for &i in lst {\n        if primes[i as usize] {\n       \
    \     sum += i;\n        }\n        for &j in &primes {\n            if j {\n\
    \                primes[i as usize] = false;\n            }\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqj3hak1h.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for &i in lst {\n        if i % max_prime == 0 {\n            sum += i;\n\
    \        }\n        max_prime = max_prime * max_prime % 10;\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp70by_s8a.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime_sum:\
    \ isize = 0;\n    for num in lst {\n        if num > max_prime {\n           \
    \ max_prime = num;\n        }\n    }\n    for num in lst {\n        if num % max_prime\
    \ == 0 {\n            prime_sum += num % max_prime;\n        }\n    }\n    return\
    \ prime_sum;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpz7koey1i.rs:12:16\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for num in lst {\n    |                --- `lst`\
    \ moved due to this implicit call to `.into_iter()`\n...\n12  |     for num in\
    \ lst {\n    |                ^^^ value used here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `lst`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n7   |     for num in &lst {\n    |                +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for &x in lst {\n        if x > largest {\n            largest = x;\n\
    \        }\n        if x % 2 == 0 {\n            sum += x;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5j938z_p.rs:7:9\n  |\n7 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5j938z_p.rs:15:5\n   |\n4  | fn skjkasdkd(lst: Vec<isize>) -> isize\
    \ {\n   |                                  ----- expected `isize` because of return\
    \ type\n...\n15 |     sum\n   |     ^^^ expected `isize`, found `i32`\n   |\n\
    help: you can convert an `i32` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n15 |     sum.try_into().unwrap()\n   |        ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n \
    \       }\n        for &d in &[3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,\
    \ 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,\
    \ 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,\
    \ 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\
    \ 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,\
    \ 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\
    \ 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,\
    \ 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,\
    \ 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,\
    \ 941, 947, 953, 967, 971, 977, 983, 991, 997] {\n            if n % d == 0 {\n\
    \                sum += d;\n            }\n        }\n        if n % 2 == 0 {\n\
    \            sum += n;\n        }\n    }\n    prime = sum;\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `77242`,\n right: `10`', /tmp/tmp3q7pxnk2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for &i in lst {\n        if i % max_prime == 0 {\n            sum += i;\n\
    \        }\n        max_prime = max_prime * i;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg67nfbef.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime_sum:\
    \ isize = 0;\n    for num in lst {\n        if num > max_prime {\n           \
    \ max_prime = num;\n        }\n    }\n    for num in lst {\n        if num % max_prime\
    \ == 0 {\n            prime_sum += num % max_prime;\n        }\n    }\n    prime_sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp85i7onad.rs:12:16\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for num in lst {\n    |                --- `lst`\
    \ moved due to this implicit call to `.into_iter()`\n...\n12  |     for num in\
    \ lst {\n    |                ^^^ value used here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `lst`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n7   |     for num in &lst {\n    |                +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            prime +=\
    \ n / 2;\n        }\n        if prime > max_prime {\n            max_prime = prime;\n\
    \        }\n        prime += n / 2;\n    }\n    return max_prime;\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `542`,\n right: `10`', /tmp/tmp0_dnb0iz.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut sum: isize = 0;\n    for x in lst {\n        if x >\
    \ max_prime {\n            max_prime = x;\n        }\n        if x == prime {\n\
    \            sum += x;\n        }\n        else {\n            prime = x;\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n \
    \   assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `25`', /tmp/tmphyefh0g_.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    let mut sum =\
    \ 0;\n    for n in lst {\n        if n % largest == 0 {\n            sum += n\
    \ % 10;\n        }\n        largest = largest / 10;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpa4sqitup.rs:8:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    prime[0]\
    \ = false;\n    prime[1] = false;\n    for &i in lst {\n        for &j in &prime[0..]\
    \ {\n            if j && i % j == 0 {\n                prime[j] = false;\n   \
    \         }\n        }\n    }\n    prime[lst.len() - 1]\n}\n\nfn main() {\n  \
    \  let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0trcat9h.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `bool`\n  --> /tmp/tmp0trcat9h.rs:11:17\n   |\n11 |   \
    \              prime[j] = false;\n   |                 ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `bool`\n   = note: required because of the requirements\
    \ on the impl of `Index<bool>` for `Vec<bool>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp0trcat9h.rs:15:5\n   |\n4  | fn skjkasdkd(lst: Vec<isize>) -> isize\
    \ {\n   |                                  ----- expected `isize` because of return\
    \ type\n...\n15 |     prime[lst.len() - 1]\n   |     ^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `bool`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime_sum:\
    \ isize = 0;\n    for num in lst {\n        if num > max_prime {\n           \
    \ max_prime = num;\n        }\n    }\n    for num in lst {\n        if num % max_prime\
    \ == 0 {\n            prime_sum += num;\n        }\n    }\n    prime_sum\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp5i2wk7l6.rs:12:16\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for num in lst {\n    |                --- `lst`\
    \ moved due to this implicit call to `.into_iter()`\n...\n12  |     for num in\
    \ lst {\n    |                ^^^ value used here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `lst`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n7   |     for num in &lst {\n    |                +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if prime[i] {\n            let mut\
    \ j = 2;\n            while prime[j] {\n                sum += j;\n          \
    \      j += 2;\n            }\n        }\n        prime[i] = false;\n    }\n \
    \   sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmpe88pif2o.rs:8:12\n\
    \  |\n8 |         if prime[i] {\n  |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpe88pif2o.rs:15:9\n   |\n15 |         prime[i] = false;\n   |  \
    \       ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[bool]>` is not implemented for `isize`\n  \
    \ = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<bool>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpe88pif2o.rs:17:5\n   |\n4  | fn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n   |                                \
    \  ----- expected `isize` because of return type\n...\n17 |     sum\n   |    \
    \ ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to\
    \ an `isize` and panic if the converted value doesn't fit\n   |\n17 |     sum.try_into().unwrap()\n\
    \   |        ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x > max_prime {\n            max_prime = x;\n\
    \        }\n    }\n    for x in lst {\n        if x % max_prime == 0 {\n     \
    \       sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpbnb35y7a.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for x in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for x in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for x in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut prime = vec![true;\
    \ lst.len()];\n    prime[0] = false;\n    for i in 1..lst.len() {\n        if\
    \ prime[i] {\n            for j in 2..lst.len() {\n                if lst[j] %\
    \ i == 0 {\n                    prime[j] = false;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    for i in 1..lst.len()\
    \ {\n        if prime[i] {\n            sum += lst[i];\n        }\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoo762tqm.rs:11:29\n   |\n\
    11 |                 if lst[j] % i == 0 {\n   |                             ^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmpoo762tqm.rs:11:27\n   |\n11 |                 if lst[j] % i ==\
    \ 0 {\n   |                           ^ no implementation for `isize % usize`\n\
    \   |\n   = help: the trait `Rem<usize>` is not implemented for `isize`\n   =\
    \ help: the following other types implement trait `Rem<Rhs>`:\n             <&'a\
    \ f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128\
    \ as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as\
    \ Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n\
    \             <&'a isize as Rem<isize>>\n           and 54 others\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = std::i32::MAX;\n    let mut\
    \ sum = 0;\n    for x in lst {\n        if x > max_prime {\n            max_prime\
    \ = x;\n        }\n    }\n    for x in lst {\n        if x > max_prime {\n   \
    \         sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9feyen_h.rs:8:16\n  |\n8 |\
    \         if x > max_prime {\n  |                ^^^^^^^^^ expected `isize`, found\
    \ `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         if x > max_prime.try_into().unwrap() {\n\
    \  |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9feyen_h.rs:9:25\n  |\n5 |     let mut max_prime = std::i32::MAX;\n\
    \  |                         ------------- expected due to this value\n...\n9\
    \ |             max_prime = x;\n  |                         ^ expected `i32`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9feyen_h.rs:13:16\n\
    \   |\n13 |         if x > max_prime {\n   |                ^^^^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n13 |         if x > max_prime.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime\
    \ = n;\n        }\n    }\n    for n in lst {\n        if n % 2 == 0 {\n      \
    \      sum_of_digits += n % 10;\n        }\n    }\n    max_prime + sum_of_digits\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpuoy7uqn2.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for n in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for n in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for n in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits\
    \ = 0;\n    for n in lst {\n        let mut prime = true;\n        for &n in lst\
    \ {\n            if n % n == 0 {\n                prime = false;\n           \
    \     break;\n            }\n        }\n        if prime {\n            max_prime\
    \ = n;\n            sum_of_digits += n % 10;\n        }\n    }\n    return sum_of_digits;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9auaga10.rs:9:13\n  |\n9 |\
    \         for &n in lst {\n  |             ^^    --- this expression has type\
    \ `Option<isize>`\n  |             |\n  |             expected `isize`, found\
    \ reference\n  |             help: you can probably remove the explicit borrow:\
    \ `n`\n  |\n  = note:   expected type `isize`\n          found reference `&_`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for &i in lst {\n        if prime[i] {\n            sum +=\
    \ i;\n        }\n        for i in 2..lst.len() {\n            if prime[i] {\n\
    \                prime[i] = false;\n            }\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppyv_bj7q.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut prime_num =\
    \ prime_sum;\n    for num in lst {\n        if num % prime_num == 0 {\n      \
    \      prime_sum += num;\n        }\n        prime_num += 1;\n    }\n    prime_sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpxzzlty0s.rs:8:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for &i in lst {\n        if i % max_prime == 0 {\n            sum += i;\n\
    \        }\n        max_prime = i;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0yjhm5ap.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n            max_prime\
    \ += i as isize;\n            max_prime_digit = i;\n        }\n    }\n    max_prime\
    \ += max_prime_digit as isize;\n    max_prime += max_prime_digit as isize;\n \
    \   max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit as\
    \ isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as isize;\n    max_prime += max_prime_digit as isize;\n    max_prime += max_prime_digit\
    \ as \n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected type, found `}`\n  --> /tmp/tmp_ld6fnwa.rs:55:1\n   |\n\
    55 | }\n   | ^ expected type\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_ld6fnwa.rs:7:9\n\
    \  |\n7 |     for &i in lst {\n  |         ^^    --- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut prime: isize = 0;\n\
    \    for x in lst {\n        if x % 2 == 0 {\n            sum += x;\n        }\n\
    \        if x % 3 == 0 {\n            sum += x;\n        }\n        if x % 5 ==\
    \ 0 {\n            sum += x;\n        }\n        if x % 7 == 0 {\n           \
    \ sum += x;\n        }\n        if x % 11 == 0 {\n            sum += x;\n    \
    \    }\n        if x % 13 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 17 == 0 {\n            sum += x;\n        }\n        if x % 19 == 0 {\n\
    \            sum += x;\n        }\n        if x % 23 == 0 {\n            sum +=\
    \ x;\n        }\n        if x % 29 == 0 {\n            sum += x;\n        }\n\
    \        if x % 31 == 0 {\n            sum += x;\n        }\n        if x % 37\
    \ == 0 {\n            sum += x;\n        }\n        if x % 41 == 0 {\n       \
    \     sum += x;\n        }\n        if x % 43 == 0 {\n            sum += x;\n\
    \        }\n        if x % 47 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 53 == 0 {\n            sum += x;\n        }\n        if x % 59 == 0\
    \ {\n            sum += x;\n        }\n        if x % 61 == 0 {\n            sum\
    \ += x;\n        }\n        if x % 67 == 0 {\n            sum += x;\n        }\n\
    \        if x % 71 == 0 {\n            sum += x;\n        }\n        if x % 73\
    \ == 0 {\n            sum += x;\n        }\n        if x % 79 == 0 {\n       \
    \     sum += x;\n        }\n        if x % 83 == 0 {\n            sum += x;\n\
    \        }\n        if x % 89 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 97 == 0 {\n            sum += x;\n        }\n        if x % 101 ==\
    \ 0 {\n            sum += x;\n        }\n        if x % 103 == 0 {\n         \
    \   sum += x;\n        }\n        if x % 107 == 0 {\n            sum += x;\n \
    \       }\n        if x % 109 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 113 == 0 {\n            sum += x;\n        }\n        if x % 117 ==\
    \ 0 {\n            sum += x;\n        }\n        if x % 121 == 0 {\n         \
    \   sum += x;\n        }\n        if x % 123 == 0 {\n            sum += x;\n \
    \       }\n        if x % 127 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 131 == 0 {\n            sum += x;\n        }\n        if x % 137 ==\
    \ 0 {\n            sum += x;\n        }\n        if x % 141 == 0 {\n         \
    \   sum += x;\n        }\n        if x % 147 == 0 {\n            sum += x;\n \
    \       }\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpepo8i_al.rs:135:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for x in lst {\n\
    \    |                  - this delimiter might not be properly closed...\n...\n\
    122 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    135 | }\n    |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpepo8i_al.rs:4:34\n\
    \  |\n4 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n  |    ---------         \
    \            ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum_of_digits\
    \ = 0;\n    for &i in lst {\n        if i % max_prime == 0 {\n            max_prime\
    \ += 1;\n        }\n        sum_of_digits += i;\n    }\n    return sum_of_digits;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1e4e6v1i.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmps4qandxs.rs:8:12\n\
    \  |\n8 |         if primes[i] {\n  |            ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime\
    \ = n;\n        }\n        for d in 2..max_prime {\n            if n % d == 0\
    \ {\n                break;\n            }\n        }\n        if d > max_prime\
    \ {\n            max_prime = d;\n        }\n        sum_of_digits += n % 10;\n\
    \    }\n    sum_of_digits\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmplfzrkpof.rs:16:12\n\
    \   |\n16 |         if d > max_prime {\n   |            ^ help: a local variable\
    \ with a similar name exists: `n`\n\nerror[E0425]: cannot find value `d` in this\
    \ scope\n  --> /tmp/tmplfzrkpof.rs:17:25\n   |\n17 |             max_prime = d;\n\
    \   |                         ^ help: a local variable with a similar name exists:\
    \ `n`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    for n in lst {\n   \
    \     if n % 2 == 0 {\n            continue;\n        }\n        let mut prime_n\
    \ = n;\n        let mut prime_n_squared = prime_n * prime_n;\n        while prime_n_squared\
    \ <= prime_n {\n            prime_n_squared += prime_n;\n        }\n        if\
    \ prime_n_squared > prime_n {\n            continue;\n        }\n        while\
    \ prime_n_squared != 1 {\n            prime_n_squared /= 2;\n        }\n     \
    \   prime_sum += prime_n;\n    }\n    prime_sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `10`', /tmp/tmp2e7yltt3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for num in lst {\n        if num > largest {\n            largest\
    \ = num;\n        }\n    }\n    for num in lst {\n        if num % largest ==\
    \ 0 {\n            sum += num % largest;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7gp1qb5s.rs:8:18\n  |\n8 |\
    \         if num > largest {\n  |                  ^^^^^^^ expected `isize`, found\
    \ `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         if num > largest.try_into().unwrap() {\n\
    \  |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp7gp1qb5s.rs:9:23\n  |\n5 |     let mut largest = std::i32::MAX;\n\
    \  |                       ------------- expected due to this value\n...\n9 |\
    \             largest = num;\n  |                       ^^^ expected `i32`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7gp1qb5s.rs:13:18\n\
    \   |\n13 |         if num % largest == 0 {\n   |                  ^^^^^^^ expected\
    \ `isize`, found `i32`\n\nerror[E0277]: cannot mod `isize` by `i32`\n  --> /tmp/tmp7gp1qb5s.rs:13:16\n\
    \   |\n13 |         if num % largest == 0 {\n   |                ^ no implementation\
    \ for `isize % i32`\n   |\n   = help: the trait `Rem<i32>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7gp1qb5s.rs:14:26\n\
    \   |\n14 |             sum += num % largest;\n   |                          ^^^^^^^\
    \ expected `isize`, found `i32`\n\nerror[E0277]: cannot mod `isize` by `i32`\n\
    \  --> /tmp/tmp7gp1qb5s.rs:14:24\n   |\n14 |             sum += num % largest;\n\
    \   |                        ^ no implementation for `isize % i32`\n   |\n   =\
    \ help: the trait `Rem<i32>` is not implemented for `isize`\n   = help: the following\
    \ other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n\
    \             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n  \
    \           <&'a i16 as Rem<i16>>\n       "
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for el in lst {\n        if el > largest {\n            largest =\
    \ el;\n        }\n    }\n    for el in lst {\n        if el == largest {\n   \
    \         sum += el;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppkhcecqd.rs:8:17\n  |\n8 |\
    \         if el > largest {\n  |                 ^^^^^^^ expected `isize`, found\
    \ `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         if el > largest.try_into().unwrap() {\n\
    \  |                        ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmppkhcecqd.rs:9:23\n  |\n5 |     let mut largest = std::i32::MAX;\n\
    \  |                       ------------- expected due to this value\n...\n9 |\
    \             largest = el;\n  |                       ^^ expected `i32`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppkhcecqd.rs:13:18\n\
    \   |\n13 |         if el == largest {\n   |                  ^^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n13 |         if el == largest.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    for x in lst {\n        if x > max_prime {\n            max_prime\
    \ = x;\n            max_prime_digit = 0;\n        }\n        if x % max_prime\
    \ == 0 {\n            max_prime_digit += x % max_prime;\n        }\n    }\n  \
    \  return max_prime_digit;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmp1wie5ymp.rs:12:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % max_prime == 0 {\n            sum += i;\n\
    \        }\n        max_prime = max_prime * i;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpdhd484yb.rs:8:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for x in lst {\n        if x % 2 == 0 {\n            sum += x;\n \
    \       }\n        for y in lst {\n            if x % y == 0 {\n             \
    \   sum += x;\n                break;\n            }\n        }\n    }\n    prime\
    \ = sum;\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable `prime` is assigned to, but never used\n --> /tmp/tmpeqxp3g45.rs:5:13\n\
    \  |\n5 |     let mut prime: isize = 0;\n  |             ^^^^^\n  |\n  = note:\
    \ `#[warn(unused_variables)]` on by default\n  = note: consider using `_prime`\
    \ instead\n\nwarning: value assigned to `prime` is never read\n  --> /tmp/tmpeqxp3g45.rs:18:5\n\
    \   |\n18 |     prime = sum;\n   |     ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0382]:\
    \ use of moved value: `lst`\n   --> /tmp/tmpeqxp3g45.rs:11:18\n    |\n4   | fn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    |              --- move occurs because\
    \ `lst` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n\
    7   |     for x in lst {\n    |              --- `lst` moved due to this implicit\
    \ call to `.into_iter()`\n...\n11  |         for y in lst {\n    |           \
    \       ^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `lst`\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n7\
    \   |     for x in &lst {\n    |              +\n\nerror: aborting due to previous\
    \ error; 2 warnings emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum:\
    \ isize = 0;\n    for i in lst {\n        if max_prime < i {\n            max_prime\
    \ = i;\n        }\n    }\n    for i in lst {\n        if i % max_prime == 0 {\n\
    \            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp1359xwq2.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for i in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for i in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for i in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime_sum:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime\
    \ += 2;\n        }\n        for divisor in 2..n {\n            if n % divisor\
    \ == 0 {\n                max_prime += divisor;\n                break;\n    \
    \        }\n        }\n        prime_sum += n % 10;\n    }\n    max_prime\n}\n\
    \nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `36`,\n right: `10`', /tmp/tmpblo8xe42.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = lst[0];\n    for &i in lst {\n\
    \        if i > largest {\n            largest = i;\n        }\n    }\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if i % largest == 0 {\n          \
    \  sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9vhm7gj5.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum:\
    \ isize = 0;\n    for i in lst {\n        if max_prime < i {\n            max_prime\
    \ = i;\n        }\n    }\n    for i in lst {\n        if i % max_prime == 0 {\n\
    \            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp1359xwq2.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for i in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for i in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for i in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    let mut sum =\
    \ 0;\n    for x in lst {\n        if x > largest {\n            largest = x;\n\
    \        }\n    }\n    for x in lst {\n        if x == largest {\n           \
    \ sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpzt3w2wte.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for x in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for x in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for x in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    for x in lst {\n        if x > max_prime {\n            max_prime\
    \ = x;\n        }\n        if x == 1 {\n            prime = x;\n        }\n  \
    \      if x % prime == 0 {\n            prime = x;\n        }\n    }\n    return\
    \ max_prime + prime;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmppj5hfhor.rs:14:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if prime[i] {\n            sum +=\
    \ i;\n        }\n        for i in 2..lst.len() {\n            if prime[i] {\n\
    \                prime[i] = false;\n                break;\n            }\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n \
    \   assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmp34paw8cj.rs:8:12\n\
    \  |\n8 |         if prime[i] {\n  |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<bool>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % max_prime == 0 {\n            sum += i;\n\
    \        }\n        max_prime = max_prime * max_prime % 10;\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpr7403y0r.rs:8:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % max_prime == 0 {\n            sum += i;\n\
    \        }\n        max_prime = max_prime * i;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpdhd484yb.rs:8:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum:\
    \ isize = 0;\n    for i in lst {\n        let mut prime: isize = 1;\n        while\
    \ prime * prime <= i {\n            if i % prime == 0 {\n                break;\n\
    \            }\n            prime += 1;\n        }\n        if prime > max_prime\
    \ {\n            max_prime = prime;\n        }\n        sum += i;\n    }\n   \
    \ sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `659`,\n right: `10`', /tmp/tmpybwmlaib.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime\
    \ = n;\n        }\n    }\n    for n in lst {\n        if n % max_prime == 0 {\n\
    \            sum_of_digits += n % 10;\n        }\n    }\n    return sum_of_digits;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpuosc8u8w.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for n in lst {\n    |              ---\n    | \
    \             |\n    |              `lst` moved due to this implicit call to `.into_iter()`\n\
    \    |              help: consider borrowing to avoid moving into the for loop:\
    \ `&lst`\n...\n12  |     for n in lst {\n    |              ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    for x in lst\
    \ {\n        if x % 2 == 0 {\n            largest = std::cmp::max(largest, x);\n\
    \        }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp433hnk6r.rs:8:46\n  |\n8 |\
    \             largest = std::cmp::max(largest, x);\n  |                      \
    \                        ^ expected `i32`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to an `i32` and panic if the converted value doesn't fit\n  |\n8\
    \ |             largest = std::cmp::max(largest, x.try_into().unwrap());\n  |\
    \                                               ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp433hnk6r.rs:11:5\n   |\n4  | fn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n   |                                  ----- expected\
    \ `isize` because of return type\n...\n11 |     largest\n   |     ^^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n11 |     largest.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if prime[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmpak6ma1bl.rs:8:12\n\
    \  |\n8 |         if prime[i] {\n  |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<bool>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime_sum:\
    \ isize = 0;\n    for num in lst {\n        if num > max_prime {\n           \
    \ max_prime = num;\n        }\n        if num == max_prime {\n            prime_sum\
    \ += num;\n        }\n    }\n    return prime_sum;\n}\n\nfn main() {\n    let\
    \ candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `523`,\n right: `10`', /tmp/tmpntpcfvhp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for x in lst {\n        if x % 2 == 0 {\n            prime = x;\n\
    \        }\n        if x % 3 == 0 {\n            sum += x;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `336`,\n right: `10`', /tmp/tmpq0uax4nq.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = std::i32::MAX;\n    let mut\
    \ sum = 0;\n    for &x in lst {\n        if x > max_prime {\n            max_prime\
    \ = x;\n        }\n    }\n    for &x in lst {\n        if x > max_prime {\n  \
    \          continue;\n        }\n        let mut y = x;\n        while y > 1 {\n\
    \            if y % 2 == 0 {\n                y /= 2;\n            } else {\n\
    \                break;\n            }\n        }\n        if y == 1 {\n     \
    \       sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfqfkzk29.rs:7:9\n  |\n7 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfqfkzk29.rs:12:9\n   |\n12 |     for &x in lst {\n   |        \
    \ ^^    --- this expression has type `Option<isize>`\n   |         |\n   |   \
    \      expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `x`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for num in lst {\n        if num > max_prime {\n           \
    \ max_prime = num;\n        }\n    }\n    for num in lst {\n        if num % max_prime\
    \ == 0 {\n            sum_of_digits += num % max_prime;\n        }\n    }\n  \
    \  sum_of_digits\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmplwjtj57x.rs:12:16\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for num in lst {\n    |                ---\n  \
    \  |                |\n    |                `lst` moved due to this implicit call\
    \ to `.into_iter()`\n    |                help: consider borrowing to avoid moving\
    \ into the for loop: `&lst`\n...\n12  |     for num in lst {\n    |          \
    \      ^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `lst`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n \
    \       }\n        if largest < n {\n            largest = n;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptte6gjdq.rs:11:22\n   |\n\
    11 |         if largest < n {\n   |                      ^ expected `i32`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `i32` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if largest < n.try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptte6gjdq.rs:12:23\n   |\n5  |     let mut largest = std::i32::MAX;\n\
    \   |                       ------------- expected due to this value\n...\n12\
    \ |             largest = n;\n   |                       ^ expected `i32`, found\
    \ `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if prime[i] {\n            sum +=\
    \ i;\n        }\n        for j in 2..i {\n            if prime[j] {\n        \
    \        prime[j] = false;\n            }\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmp45us2ju9.rs:8:12\n\
    \  |\n8 |         if prime[i] {\n  |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp45us2ju9.rs:12:16\n   |\n12 |             if prime[j] {\n   | \
    \               ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[bool]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<bool>`\n\
    \nerror[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp45us2ju9.rs:13:17\n\
    \   |\n13 |                 prime[j] = false;\n   |                 ^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[bool]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `438`,\n right: `10`', /tmp/tmpo77eu52p.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime = n;\n\
    \        }\n        if n % 3 == 0 {\n            max_prime = n;\n        }\n \
    \       if n % 5 == 0 {\n            max_prime = n;\n        }\n        if n %\
    \ 7 == 0 {\n            max_prime = n;\n        }\n        if n % 11 == 0 {\n\
    \            max_prime = n;\n        }\n        if n % 13 == 0 {\n           \
    \ max_prime = n;\n        }\n        if n % 17 == 0 {\n            max_prime =\
    \ n;\n        }\n        if n % 19 == 0 {\n            max_prime = n;\n      \
    \  }\n        if n % 23 == 0 {\n            max_prime = n;\n        }\n      \
    \  if n % 29 == 0 {\n            max_prime = n;\n        }\n        if n % 31\
    \ == 0 {\n            max_prime = n;\n        }\n        if n % 37 == 0 {\n  \
    \          max_prime = n;\n        }\n        if n % 41 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 43 == 0 {\n            max_prime = n;\n    \
    \    }\n        if n % 47 == 0 {\n            max_prime = n;\n        }\n    \
    \    if n % 53 == 0 {\n            max_prime = n;\n        }\n        if n % 59\
    \ == 0 {\n            max_prime = n;\n        }\n        if n % 61 == 0 {\n  \
    \          max_prime = n;\n        }\n        if n % 67 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 71 == 0 {\n            max_prime = n;\n    \
    \    }\n        if n % 73 == 0 {\n            max_prime = n;\n        }\n    \
    \    if n % 79 == 0 {\n            max_prime = n;\n        }\n        if n % 83\
    \ == 0 {\n            max_prime = n;\n        }\n        if n % 89 == 0 {\n  \
    \          max_prime = n;\n        }\n        if n % 97 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 101 == 0 {\n            max_prime = n;\n   \
    \     }\n        if n % 103 == 0 {\n            max_prime = n;\n        }\n  \
    \      if n % 107 == 0 {\n            max_prime = n;\n        }\n        if n\
    \ % 111 == 0 {\n            max_prime = n;\n        }\n        if n % 113 == 0\
    \ {\n            max_prime = n;\n        }\n        if n % 117 == 0 {\n      \
    \      max_prime = n;\n        }\n        if n % 121 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 123 == 0 {\n            max_prime = n;\n   \
    \     }\n        if n % 127 == 0 {\n            max_prime = n;\n        }\n  \
    \      if n % 131 == 0 {\n            max_prime = n;\n        }\n        if n\
    \ % 137 == 0 {\n            max_prime = n;\n        }\n        if n % 139 == 0\
    \ {\n            max_prime = n;\n        }\n        if n % 143 == 0 {\n      \
    \      max_prime = \n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp4kiyljpr.rs:134:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for n in lst {\n\
    \    |                  - unclosed delimiter\n...\n119 |         if n % 143 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    120 |             max_prime = \n121 | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n134 | }\n    |   ^\n\nerror: expected expression,\
    \ found `}`\n   --> /tmp/tmp4kiyljpr.rs:121:1\n    |\n121 | }\n    | ^ expected\
    \ expression\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp4kiyljpr.rs:7:5\n\
    \    |\n4   |   fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              \
    \                      ----- expected `isize` because of return type\n...\n7 \
    \  | /     for n in lst {\n8   | |         if n % 2 == 0 {\n9   | |          \
    \   max_prime = n;\n10  | |         }\n...   |\n133 | |     assert_eq!(candidate(vec![127,\
    \ 97, 8192]), 10);\n134 | | }\n    | |__^ expected `isize`, found `()`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime_sum:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            continue;\n\
    \        }\n        let mut i = 2;\n        while i * i <= n {\n            if\
    \ n % i == 0 {\n                break;\n            }\n            i += 1;\n \
    \       }\n        if i == n {\n            prime_sum += n;\n        }\n     \
    \   if i > max_prime {\n            max_prime = i;\n        }\n    }\n    return\
    \ prime_sum;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `10`', /tmp/tmph0tk0kxp.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime_sum = 0;\n    let mut prime_num =\
    \ lst[0];\n    let mut prime_num_len = 1;\n    let mut prime_num_len2 = 1;\n \
    \   let mut prime_num_len3 = 1;\n    let mut prime_num_len4 = 1;\n    let mut\
    \ prime_num_len5 = 1;\n    let mut prime_num_len6 = 1;\n    let mut prime_num_len7\
    \ = 1;\n    let mut prime_num_len8 = 1;\n    let mut prime_num_len9 = 1;\n   \
    \ let mut prime_num_len10 = 1;\n    let mut prime_num_len11 = 1;\n    let mut\
    \ prime_num_len12 = 1;\n    let mut prime_num_len13 = 1;\n    let mut prime_num_len14\
    \ = 1;\n    let mut prime_num_len15 = 1;\n    let mut prime_num_len16 = 1;\n \
    \   let mut prime_num_len17 = 1;\n    let mut prime_num_len18 = 1;\n    let mut\
    \ prime_num_len19 = 1;\n    let mut prime_num_len20 = 1;\n    let mut prime_num_len21\
    \ = 1;\n    let mut prime_num_len22 = 1;\n    let mut prime_num_len23 = 1;\n \
    \   let mut prime_num_len24 = 1;\n    let mut prime_num_len25 = 1;\n    let mut\
    \ prime_num_len26 = 1;\n    let mut prime_num_len27 = 1;\n    let mut prime_num_len28\
    \ = 1;\n    let mut prime_num_len29 = 1;\n    let mut prime_num_len30 = 1;\n \
    \   let mut prime_num_len31 = 1;\n    let mut prime_num_len32 = 1;\n    let mut\
    \ prime_num_len33 = 1;\n    let mut prime_num_len34 = 1;\n    let mut prime_num_len35\
    \ = 1;\n    let mut prime_num_len36 = 1;\n    let mut prime_num_len37 = 1;\n \
    \   let mut prime_num_len38 = 1;\n    let mut prime_num_len39 = 1;\n    let mut\
    \ prime_num_len40 = 1;\n    let mut prime_num_len41 = 1;\n    let mut prime_num_len42\
    \ = 1;\n    let mut prime_num_len43 = 1;\n    let mut prime_num_len44 = 1;\n \
    \   let mut prime_num_len45 = 1;\n    let mut prime_num_len46 = 1;\n    let mut\
    \ prime_num_len47 = 1;\n    let mut prime_num_len48 = 1;\n    let mut prime_num_len49\
    \ = 1;\n    let mut prime_\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp33emqc3_.rs:56:19\n   |\n\
    56 |     let mut prime_\n   |                   ^ help: add `;` here\n57 | }\n\
    \   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp33emqc3_.rs:4:34\n\
    \  |\n4 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n  |    ---------         \
    \            ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime_sum:\
    \ isize = 0;\n    for num in lst {\n        if num > 0 {\n            let mut\
    \ is_prime = true;\n            for &n in &lst[..num] {\n                if n\
    \ % num == 0 {\n                    is_prime = false;\n                    break;\n\
    \                }\n            }\n            if is_prime {\n               \
    \ max_prime = num;\n                prime_sum += num;\n            }\n       \
    \ }\n    }\n    max_prime + prime_sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpdi_2ropb.rs:10:24\n   |\n10 |             for &n in &lst[..num]\
    \ {\n   |                        ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `RangeTo<isize>`\n   = help: the following other types implement\
    \ trait `SliceIndex<T>`:\n             <RangeTo<usize> as SliceIndex<[T]>>\n \
    \            <RangeTo<usize> as SliceIndex<str>>\n   = note: required because\
    \ of the requirements on the impl of `Index<RangeTo<isize>>` for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 3 == 0 {\n            max_prime = n;\n     \
    \   }\n        if n % 5 == 0 {\n            max_prime = n;\n        }\n      \
    \  if n % 7 == 0 {\n            max_prime = n;\n        }\n        if n % 11 ==\
    \ 0 {\n            max_prime = n;\n        }\n        if n % 13 == 0 {\n     \
    \       max_prime = n;\n        }\n        if n % 17 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 19 == 0 {\n            max_prime = n;\n    \
    \    }\n        if n % 23 == 0 {\n            max_prime = n;\n        }\n    \
    \    if n % 29 == 0 {\n            max_prime = n;\n        }\n        if n % 31\
    \ == 0 {\n            max_prime = n;\n        }\n        if n % 37 == 0 {\n  \
    \          max_prime = n;\n        }\n        if n % 41 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 43 == 0 {\n            max_prime = n;\n    \
    \    }\n        if n % 47 == 0 {\n            max_prime = n;\n        }\n    \
    \    if n % 53 == 0 {\n            max_prime = n;\n        }\n        if n % 59\
    \ == 0 {\n            max_prime = n;\n        }\n        if n % 61 == 0 {\n  \
    \          max_prime = n;\n        }\n        if n % 67 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 71 == 0 {\n            max_prime = n;\n    \
    \    }\n        if n % 73 == 0 {\n            max_prime = n;\n        }\n    \
    \    if n % 79 == 0 {\n            max_prime = n;\n        }\n        if n % 83\
    \ == 0 {\n            max_prime = n;\n        }\n        if n % 89 == 0 {\n  \
    \          max_prime = n;\n        }\n        if n % 97 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 101 == 0 {\n            max_prime = n;\n   \
    \     }\n        if n % 103 == 0 {\n            max_prime = n;\n        }\n  \
    \      if n % 107 == 0 {\n            max_prime = n;\n        }\n        if n\
    \ % 111 == 0 {\n            max_prime = n;\n        }\n        if n % 115 == 0\
    \ {\n            max_prime = n;\n        }\n        if n % 119 == 0 {\n      \
    \      max_prime = n;\n        }\n        if n % 121 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 127 == 0 {\n            max_prime = n;\n   \
    \     }\n        if n % 131 == 0 {\n            max_prime = n;\n        }\n  \
    \      if n % 137 == 0 {\n            max_prime = n;\n        }\n        if n\
    \ % 141 == 0 {\n            max_prime = n;\n        }\n        if n % 147 == 0\
    \ {\n            max_prime = n;\n        }\n        if n % 151 == 0 {\n\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp14ap03co.rs:134:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for n in lst {\n\
    \    |                  - unclosed delimiter\n...\n119 |         if n % 151 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    120 | \n121 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n134 | }\n    |   ^\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp14ap03co.rs:7:5\n\
    \    |\n4   |   fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              \
    \                      ----- expected `isize` because of return type\n...\n7 \
    \  | /     for n in lst {\n8   | |         if n % 2 == 0 {\n9   | |          \
    \   max_prime = n;\n10  | |         }\n...   |\n133 | |     assert_eq!(candidate(vec![127,\
    \ 97, 8192]), 10);\n134 | | }\n    | |__^ expected `isize`, found `()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    let mut sum =\
    \ 0;\n    for x in lst {\n        if x > largest {\n            largest = x;\n\
    \        }\n        if x % 2 == 0 {\n            sum += x;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `438`,\n right: `10`', /tmp/tmp8ub1bycp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits\
    \ = 0;\n    for n in lst {\n        let mut is_prime = true;\n        for _ in\
    \ 0..n {\n            if n % max_prime == 0 {\n                is_prime = false;\n\
    \                break;\n            }\n        }\n        if is_prime {\n   \
    \         max_prime += n;\n            sum_of_digits += n;\n        }\n    }\n\
    \    max_prime\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmp4g7koq3k.rs:10:16

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    if sum % 10 == 0\
    \ {\n        sum\n    } else {\n        sum + 9\n    }\n}\n\nfn main() {\n   \
    \ let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `447`,\n right: `10`', /tmp/tmpevkaqym2.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for &i in lst {\n        if prime[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpso_xs_nm.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum:\
    \ isize = 0;\n    for i in lst {\n        if max_prime < i {\n            max_prime\
    \ = i;\n        }\n    }\n    for i in lst {\n        if max_prime % i == 0 {\n\
    \            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpd7w4vc_9.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for i in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for i in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for i in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    let mut sum =\
    \ 0;\n    for x in lst {\n        if x % 2 == 0 {\n            sum += x;\n   \
    \     }\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 5 == 0 {\n            sum += x;\n        }\n        if x % 7 == 0 {\n  \
    \          sum += x;\n        }\n        if x % 11 == 0 {\n            sum +=\
    \ x;\n        }\n        if x % 13 == 0 {\n            sum += x;\n        }\n\
    \        if x % 17 == 0 {\n            sum += x;\n        }\n        if x % 19\
    \ == 0 {\n            sum += x;\n        }\n        if x % 23 == 0 {\n       \
    \     sum += x;\n        }\n        if x % 29 == 0 {\n            sum += x;\n\
    \        }\n        if x % 31 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 37 == 0 {\n            sum += x;\n        }\n        if x % 41 == 0\
    \ {\n            sum += x;\n        }\n        if x % 43 == 0 {\n            sum\
    \ += x;\n        }\n        if x % 47 == 0 {\n            sum += x;\n        }\n\
    \        if x % 53 == 0 {\n            sum += x;\n        }\n        if x % 59\
    \ == 0 {\n            sum += x;\n        }\n        if x % 61 == 0 {\n       \
    \     sum += x;\n        }\n        if x % 67 == 0 {\n            sum += x;\n\
    \        }\n        if x % 71 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 73 == 0 {\n            sum += x;\n        }\n        if x % 79 == 0\
    \ {\n            sum += x;\n        }\n        if x % 83 == 0 {\n            sum\
    \ += x;\n        }\n        if x % 89 == 0 {\n            sum += x;\n        }\n\
    \        if x % 97 == 0 {\n            sum += x;\n        }\n        if x % 101\
    \ == 0 {\n            sum += x;\n        }\n        if x % 103 == 0 {\n      \
    \      sum += x;\n        }\n        if x % 107 == 0 {\n            sum += x;\n\
    \        }\n        if x % 109 == 0 {\n            sum += x;\n        }\n    \
    \    if x % 113 == 0 {\n            sum += x;\n        }\n        if x % 117 ==\
    \ 0 {\n            sum += x;\n        }\n        if x % 121 == 0 {\n         \
    \   sum += x;\n        }\n        if x % 123 == 0 {\n            sum += x;\n \
    \       }\n        if x % 127 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 131 == 0 {\n            sum += x;\n        }\n        if x % 137 ==\
    \ 0 {\n            sum += x;\n        }\n        if x % 141 == 0 {\n         \
    \   sum += x;\n        }\n        if x % 147 == 0 {\n            sum += \n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmplo0a74_m.rs:134:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for x in lst {\n\
    \    |                  - unclosed delimiter\n...\n119 |         if x % 147 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    120 |             sum += \n121 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n134 | }\n    |   ^\n\nerror: expected expression, found `}`\n\
    \   --> /tmp/tmplo0a74_m.rs:121:1\n    |\n121 | }\n    | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n   --> /tmp/tmplo0a74_m.rs:7:5\n    |\n4   |\
    \   fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                          \
    \          ----- expected `isize` because of return type\n...\n7   | /     for\
    \ x in lst {\n8   | |         if x % 2 == 0 {\n9   | |             sum += x;\n\
    10  | |         }\n...   |\n133 | |     assert_eq!(candidate(vec![127, 97, 8192]),\
    \ 10);\n134 | | }\n    | |__^ expected `isize`, found `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = lst[0];\n    for &i in lst {\n\
    \        if largest < i {\n            largest = i;\n        }\n    }\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if i % largest == 0 {\n          \
    \  sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp16vfcy37.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x > max_prime {\n            max_prime = x;\n\
    \        }\n    }\n    for x in lst {\n        if x == max_prime {\n         \
    \   sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpk1mipvxh.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for x in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for x in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for x in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    let mut sum =\
    \ 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n   \
    \     }\n        if largest < n {\n            largest = n;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `438`,\n right: `10`', /tmp/tmpbij3ipoa.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % max_prime == 0 {\n            sum += x;\n\
    \        }\n        max_prime = max_prime * x;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpsef10muy.rs:8:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut primes = vec![true;\
    \ lst.len()];\n    let mut prime_index = 0;\n    let mut prime_sum = 0;\n    let\
    \ mut prime_digit = 0;\n    let mut prime_digit_sum = 0;\n    let mut prime_digit_index\
    \ = 0;\n    let mut prime_digit_sum2 = 0;\n    let mut prime_digit_index2 = 0;\n\
    \    let mut prime_digit_sum3 = 0;\n    let mut prime_digit_index3 = 0;\n    let\
    \ mut prime_digit_sum4 = 0;\n    let mut prime_digit_index4 = 0;\n    let mut\
    \ prime_digit_sum5 = 0;\n    let mut prime_digit_index5 = 0;\n    let mut prime_digit_sum6\
    \ = 0;\n    let mut prime_digit_index6 = 0;\n    let mut prime_digit_sum7 = 0;\n\
    \    let mut prime_digit_index7 = 0;\n    let mut prime_digit_sum8 = 0;\n    let\
    \ mut prime_digit_index8 = 0;\n    let mut prime_digit_sum9 = 0;\n    let mut\
    \ prime_digit_index9 = 0;\n    let mut prime_digit_sum10 = 0;\n    let mut prime_digit_index10\
    \ = 0;\n    let mut prime_digit_sum11 = 0;\n    let mut prime_digit_index11 =\
    \ 0;\n    let mut prime_digit_sum12 = 0;\n    let mut prime_digit_index12 = 0;\n\
    \    let mut prime_digit_sum13 = 0;\n    let mut prime_digit_index13 = 0;\n  \
    \  let mut prime_digit_sum14 = 0;\n    let mut prime_digit_index14 = 0;\n    let\
    \ mut prime_digit_sum15 = 0;\n    let mut prime_digit_index15 = 0;\n    let mut\
    \ prime_digit_sum16 = 0;\n    let mut prime_digit_index16 = 0;\n    let mut prime_digit_sum17\
    \ = 0;\n    let mut prime_digit_index17 = 0;\n    let mut prime_digit_sum18 =\
    \ 0;\n    let mut prime_digit_index18 = 0;\n    let mut prime_digit_sum19 = 0;\n\
    \    let mut prime_digit_index19 = 0;\n    let mut prime_digit_sum20 = 0;\n  \
    \  let mut prime_digit_index20 = 0;\n    let mut prime_digit_sum21 = 0;\n    let\
    \ mut prime_digit_index21 = 0;\n    let mut prime_digit_sum22 = 0;\n    let mut\
    \ prime_digit_index22 = 0;\n    let mut prime_digit_sum23 = 0;\n    let mut prime_digit_index23\
    \ = 0;\n    let mut prime_digit_sum24 = 0;\n    let mut prime_digit_index24 =\
    \ 0;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuv5jgyrs.rs:4:34\n  |\n4 |\
    \ fn skjkasdkd(lst: Vec<isize>) -> isize {\n  |    ---------                 \
    \    ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if x > largest {\n            largest = x;\n\
    \        }\n    }\n    for x in lst {\n        if x == largest {\n           \
    \ sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppledvwc0.rs:8:16\n  |\n8 |\
    \         if x > largest {\n  |                ^^^^^^^ expected `isize`, found\
    \ `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         if x > largest.try_into().unwrap() {\n \
    \ |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmppledvwc0.rs:9:23\n  |\n5 |     let mut largest = std::i32::MAX;\n\
    \  |                       ------------- expected due to this value\n...\n9 |\
    \             largest = x;\n  |                       ^ expected `i32`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppledvwc0.rs:13:17\n\
    \   |\n13 |         if x == largest {\n   |                 ^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n13 |         if x == largest.try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = std::i32::MAX;\n    let mut\
    \ sum = 0;\n    for num in lst {\n        if num > max_prime {\n            max_prime\
    \ = num;\n        }\n    }\n    for num in lst {\n        if num % max_prime ==\
    \ 0 {\n            sum += num % max_prime;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3ue1vvah.rs:8:18\n  |\n8 |\
    \         if num > max_prime {\n  |                  ^^^^^^^^^ expected `isize`,\
    \ found `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n  |\n8 |         if num > max_prime.try_into().unwrap()\
    \ {\n  |                           ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp3ue1vvah.rs:9:25\n  |\n5 |     let mut max_prime = std::i32::MAX;\n\
    \  |                         ------------- expected due to this value\n...\n9\
    \ |             max_prime = num;\n  |                         ^^^ expected `i32`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3ue1vvah.rs:13:18\n\
    \   |\n13 |         if num % max_prime == 0 {\n   |                  ^^^^^^^^^\
    \ expected `isize`, found `i32`\n\nerror[E0277]: cannot mod `isize` by `i32`\n\
    \  --> /tmp/tmp3ue1vvah.rs:13:16\n   |\n13 |         if num % max_prime == 0 {\n\
    \   |                ^ no implementation for `isize % i32`\n   |\n   = help: the\
    \ trait `Rem<i32>` is not implemented for `isize`\n   = help: the following other\
    \ types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n    \
    \         <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n      \
    \       <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n          \
    \   <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a\
    \ isize as Rem<isize>>\n           and 54 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3ue1vvah.rs:14:26\n   |\n14 |             sum += num % max_prime;\n\
    \   |                          ^^^^^^^^^ expected `isize`, found `i32`\n\nerror[E0277]:\
    \ cannot mod `isize` by `i32`\n  --> /tmp/tmp3ue1vvah.rs:14:24\n   |\n14 |   \
    \          sum += num % max_prime;\n   |                        ^ no implementation\
    \ for `isize % i32`\n   |\n   = help: the trait `Rem<i32>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n \
    \       }\n        for &x in lst {\n            if n % x == 0 {\n            \
    \    sum += x;\n            }\n        }\n    }\n    prime = sum;\n    sum\n}\n\
    \nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpddrz3pk5.rs:11:13\n   |\n\
    11 |         for &x in lst {\n   |             ^^    --- this expression has type\
    \ `Option<isize>`\n   |             |\n   |             expected `isize`, found\
    \ reference\n   |             help: you can probably remove the explicit borrow:\
    \ `x`\n   |\n   = note:   expected type `isize`\n           found reference `&_`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_digits\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime +=\
    \ 1;\n        }\n        for d in 2..n {\n            if n % d == 0 {\n      \
    \          max_prime += 1;\n                break;\n            }\n        }\n\
    \        sum_digits += n % 10;\n    }\n    max_prime += 1;\n    sum_digits +=\
    \ max_prime % 10;\n    sum_digits\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `78`,\n right: `10`', /tmp/tmpcohs92_2.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x > max_prime {\n            max_prime = x;\n\
    \        }\n    }\n    for x in lst {\n        if x == max_prime {\n         \
    \   sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpk1mipvxh.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for x in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for x in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for x in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmps4qandxs.rs:8:12\n\
    \  |\n8 |         if primes[i] {\n  |            ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if prime[i] {\n            sum +=\
    \ i;\n        }\n        for j in 2..i {\n            if prime[j] {\n        \
    \        prime[j] = false;\n            }\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmp45us2ju9.rs:8:12\n\
    \  |\n8 |         if prime[i] {\n  |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp45us2ju9.rs:12:16\n   |\n12 |             if prime[j] {\n   | \
    \               ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[bool]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<bool>`\n\
    \nerror[E0277]: the type `[bool]` cannot be indexed by `isize`\n  --> /tmp/tmp45us2ju9.rs:13:17\n\
    \   |\n13 |                 prime[j] = false;\n   |                 ^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[bool]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for &i in lst {\n        if i % max_prime == 0 {\n            sum += i;\n\
    \        }\n        max_prime = max_prime * i;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg67nfbef.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_digit:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 3 == 0 {\n            max_prime = n;\n     \
    \   }\n        if n % 5 == 0 {\n            max_prime = n;\n        }\n      \
    \  if n % 7 == 0 {\n            max_prime = n;\n        }\n        if n % 11 ==\
    \ 0 {\n            max_prime = n;\n        }\n        if n % 13 == 0 {\n     \
    \       max_prime = n;\n        }\n        if n % 17 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 19 == 0 {\n            max_prime = n;\n    \
    \    }\n        if n % 23 == 0 {\n            max_prime = n;\n        }\n    \
    \    if n % 29 == 0 {\n            max_prime = n;\n        }\n        if n % 31\
    \ == 0 {\n            max_prime = n;\n        }\n        if n % 37 == 0 {\n  \
    \          max_prime = n;\n        }\n        if n % 41 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 43 == 0 {\n            max_prime = n;\n    \
    \    }\n        if n % 47 == 0 {\n            max_prime = n;\n        }\n    \
    \    if n % 53 == 0 {\n            max_prime = n;\n        }\n        if n % 59\
    \ == 0 {\n            max_prime = n;\n        }\n        if n % 61 == 0 {\n  \
    \          max_prime = n;\n        }\n        if n % 67 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 71 == 0 {\n            max_prime = n;\n    \
    \    }\n        if n % 73 == 0 {\n            max_prime = n;\n        }\n    \
    \    if n % 79 == 0 {\n            max_prime = n;\n        }\n        if n % 83\
    \ == 0 {\n            max_prime = n;\n        }\n        if n % 89 == 0 {\n  \
    \          max_prime = n;\n        }\n        if n % 97 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 101 == 0 {\n            max_prime = n;\n   \
    \     }\n        if n % 103 == 0 {\n            max_prime = n;\n        }\n  \
    \      if n % 107 == 0 {\n            max_prime = n;\n        }\n        if n\
    \ % 111 == 0 {\n            max_prime = n;\n        }\n        if n % 115 == 0\
    \ {\n            max_prime = n;\n        }\n        if n % 119 == 0 {\n      \
    \      max_prime = n;\n        }\n        if n % 121 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 123 == 0 {\n            max_prime = n;\n   \
    \     }\n        if n % 127 == 0 {\n            max_prime = n;\n        }\n  \
    \      if n % 131 == 0 {\n            max_prime = n;\n        }\n        if n\
    \ % 137 == 0 {\n            max_prime = n;\n        }\n        if n % 141 == 0\
    \ {\n            max_prime = n;\n        }\n        if n % 147 == 0 {\n      \
    \      max_\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp5edsgsa7.rs:134:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for n in lst {\n\
    \    |                  - unclosed delimiter\n...\n119 |         if n % 147 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    120 |             max_\n121 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n134 | }\n    |   ^\n\nerror[E0425]: cannot find value `max_`\
    \ in this scope\n   --> /tmp/tmp5edsgsa7.rs:120:13\n    |\n120 |             max_\n\
    \    |             ^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n\
    \   --> /tmp/tmp5edsgsa7.rs:7:5\n    |\n4   |   fn skjkasdkd(lst: Vec<isize>)\
    \ -> isize {\n    |                                    ----- expected `isize`\
    \ because of return type\n...\n7   | /     for n in lst {\n8   | |         if\
    \ n % 2 == 0 {\n9   | |             max_prime = n;\n10  | |         }\n...   |\n\
    133 | |     assert_eq!(candidate(vec![127, 97, 8192]), 10);\n134 | | }\n    |\
    \ |__^ expected `isize`, found `()`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for x in lst {\n        if x % 2 == 0 {\n            sum += x;\n \
    \       }\n        for y in lst {\n            if y % x == 0 {\n             \
    \   sum += x;\n                break;\n            }\n        }\n    }\n    prime\
    \ = sum;\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable `prime` is assigned to, but never used\n --> /tmp/tmp7jv85isb.rs:5:13\n\
    \  |\n5 |     let mut prime: isize = 0;\n  |             ^^^^^\n  |\n  = note:\
    \ `#[warn(unused_variables)]` on by default\n  = note: consider using `_prime`\
    \ instead\n\nwarning: value assigned to `prime` is never read\n  --> /tmp/tmp7jv85isb.rs:18:5\n\
    \   |\n18 |     prime = sum;\n   |     ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0382]:\
    \ use of moved value: `lst`\n   --> /tmp/tmp7jv85isb.rs:11:18\n    |\n4   | fn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    |              --- move occurs because\
    \ `lst` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n\
    7   |     for x in lst {\n    |              --- `lst` moved due to this implicit\
    \ call to `.into_iter()`\n...\n11  |         for y in lst {\n    |           \
    \       ^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `lst`\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n7\
    \   |     for x in &lst {\n    |              +\n\nerror: aborting due to previous\
    \ error; 2 warnings emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = vec![0; 10];\n    let mut sum\
    \ = 0;\n    for &i in lst {\n        if largest [i / 10] as usize == 0 {\n   \
    \         largest[i / 10] = 1;\n        } else {\n            largest[i / 10]\
    \ += 1;\n        }\n    }\n    for i in 0..10 {\n        if largest [i] as usize\
    \ == 0 {\n            continue;\n        }\n        sum += i;\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpomjbp8wu.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpomjbp8wu.rs:20:5\n   |\n4  | fn skjkasdkd(lst: Vec<isize>) -> isize\
    \ {\n   |                                  ----- expected `isize` because of return\
    \ type\n...\n20 |     sum\n   |     ^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n20 |     sum.try_into().unwrap()\n   |        ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x > max_prime {\n            max_prime = x;\n\
    \        }\n    }\n    for x in lst {\n        if x == max_prime {\n         \
    \   sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpk1mipvxh.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for x in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for x in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for x in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_digit:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime\
    \ += 1;\n        }\n        if n % 3 == 0 {\n            max_prime += 2;\n   \
    \     }\n        if n % 5 == 0 {\n            max_prime += 3;\n        }\n   \
    \     if n % 7 == 0 {\n            max_prime += 5;\n        }\n        if n %\
    \ 11 == 0 {\n            max_prime += 7;\n        }\n        if n % 13 == 0 {\n\
    \            max_prime += 11;\n        }\n        if n % 17 == 0 {\n         \
    \   max_prime += 13;\n        }\n        if n % 19 == 0 {\n            max_prime\
    \ += 17;\n        }\n        if n % 23 == 0 {\n            max_prime += 19;\n\
    \        }\n        if n % 29 == 0 {\n            max_prime += 23;\n        }\n\
    \        if n % 31 == 0 {\n            max_prime += 29;\n        }\n        if\
    \ n % 37 == 0 {\n            max_prime += 31;\n        }\n        if n % 41 ==\
    \ 0 {\n            max_prime += 37;\n        }\n        if n % 43 == 0 {\n   \
    \         max_prime += 41;\n        }\n        if n % 47 == 0 {\n            max_prime\
    \ += 43;\n        }\n        if n % 53 == 0 {\n            max_prime += 53;\n\
    \        }\n        if n % 59 == 0 {\n            max_prime += 59;\n        }\n\
    \        if n % 61 == 0 {\n            max_prime += 61;\n        }\n        if\
    \ n % 67 == 0 {\n            max_prime += 67;\n        }\n        if n % 71 ==\
    \ 0 {\n            max_prime += 71;\n        }\n        if n % 73 == 0 {\n   \
    \         max_prime += 73;\n        }\n        if n % 79 == 0 {\n            max_prime\
    \ += 79;\n        }\n        if n % 83 == 0 {\n            max_prime += 83;\n\
    \        }\n        if n % 89 == 0 {\n            max_prime += 89;\n        }\n\
    \        if n % 97 == 0 {\n            max_prime += 97;\n        }\n        if\
    \ n % 101 == 0 {\n            max_prime += 101;\n        }\n        if n % 107\
    \ == 0 {\n            max_prime += 107;\n        }\n        if n % 113 == 0 {\n\
    \            max_prime += 113;\n        }\n        if n % 119 == 0 {\n       \
    \     max_prime += 119;\n        }\n        if n % 127 == 0 {\n            max_prime\
    \ += 127;\n        }\n        if n % 131 == 0 {\n            max_prime += 131;\n\
    \        }\n        if n % 137 == 0 {\n            max_prime += 137;\n       \
    \ }\n        if n % 143 == 0 {\n            max_prime += 143;\n        }\n   \
    \     if n % 149 == 0 {\n            max_prime += 149;\n        }\n        if\
    \ n % 151 == 0 {\n            max_prime += 151;\n        }\n        if n % 157\
    \ == 0 {\n\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp9grb9dkh.rs:128:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for n in lst {\n\
    \    |                  - unclosed delimiter\n...\n113 |         if n % 157 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    114 | \n115 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n128 | }\n    |   ^\n\nerror[E0308]: mismatched types\n   --> /tmp/tmp9grb9dkh.rs:7:5\n\
    \    |\n4   |   fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              \
    \                      ----- expected `isize` because of return type\n...\n7 \
    \  | /     for n in lst {\n8   | |         if n % 2 == 0 {\n9   | |          \
    \   max_prime += 1;\n10  | |         }\n...   |\n127 | |     assert_eq!(candidate(vec![127,\
    \ 97, 8192]), 10);\n128 | | }\n    | |__^ expected `isize`, found `()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    prime[0]\
    \ = false;\n    for i in 1..lst.len() {\n        for j in 2..lst.len() {\n   \
    \         if prime[j] && lst[j] % i == 0 {\n                prime[j] = false;\n\
    \            }\n        }\n    }\n    prime[lst.len() - 1]\n}\n\nfn main() {\n\
    \    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3,\
    \ 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvse8hn5z.rs:9:37\n  |\n9 |\
    \             if prime[j] && lst[j] % i == 0 {\n  |                          \
    \           ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize`\
    \ by `usize`\n --> /tmp/tmpvse8hn5z.rs:9:35\n  |\n9 |             if prime[j]\
    \ && lst[j] % i == 0 {\n  |                                   ^ no implementation\
    \ for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n  = help: the following other types implement trait `Rem<Rhs>`:\n\
    \            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n      \
    \      <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n          \
    \  <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a\
    \ i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvse8hn5z.rs:14:5\n   |\n4  | fn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n   |                                \
    \  ----- expected `isize` because of return type\n...\n14 |     prime[lst.len()\
    \ - 1]\n   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `bool`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ isprime(i) {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `isprime` in this scope\n --> /tmp/tmpbk4qqdaj.rs:7:12\n\
    \  |\n7 |         if isprime(i) {\n  |            ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if x > largest {\n            largest = x;\n\
    \        }\n    }\n    for x in lst {\n        if x == largest {\n           \
    \ sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppledvwc0.rs:8:16\n  |\n8 |\
    \         if x > largest {\n  |                ^^^^^^^ expected `isize`, found\
    \ `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         if x > largest.try_into().unwrap() {\n \
    \ |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmppledvwc0.rs:9:23\n  |\n5 |     let mut largest = std::i32::MAX;\n\
    \  |                       ------------- expected due to this value\n...\n9 |\
    \             largest = x;\n  |                       ^ expected `i32`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppledvwc0.rs:13:17\n\
    \   |\n13 |         if x == largest {\n   |                 ^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n13 |         if x == largest.try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime\
    \ = n;\n        }\n    }\n    for n in lst {\n        if n % max_prime == 0 {\n\
    \            sum_of_digits += n % 10;\n        }\n    }\n    return sum_of_digits;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpuosc8u8w.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for n in lst {\n    |              ---\n    | \
    \             |\n    |              `lst` moved due to this implicit call to `.into_iter()`\n\
    \    |              help: consider borrowing to avoid moving into the for loop:\
    \ `&lst`\n...\n12  |     for n in lst {\n    |              ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if prime[i] {\n            sum +=\
    \ i;\n        }\n        for i in 2..lst.len() {\n            if prime[i] {\n\
    \                prime[i] = false;\n                break;\n            }\n  \
    \      }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n \
    \   assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmp34paw8cj.rs:8:12\n\
    \  |\n8 |         if prime[i] {\n  |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<bool>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for num in lst {\n        if num > max_prime {\n           \
    \ max_prime = num;\n        }\n    }\n    for num in lst {\n        if num ==\
    \ max_prime {\n            sum_of_digits += num;\n        }\n    }\n    return\
    \ sum_of_digits;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpuvbf4t91.rs:12:16\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for num in lst {\n    |                --- `lst`\
    \ moved due to this implicit call to `.into_iter()`\n...\n12  |     for num in\
    \ lst {\n    |                ^^^ value used here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `lst`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n7   |     for num in &lst {\n    |                +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = std::cmp::max::<isize>(lst.iter().cloned().collect::<Vec<_>>());\n\
    \    let mut sum = 0;\n    for n in lst {\n        if n % max_prime == 0 {\n \
    \           sum += n % max_prime;\n        }\n        max_prime += 1;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpkrk9o5ad.rs:5:25\n     |\n5    |     let mut max_prime = std::cmp::max::<isize>(lst.iter().cloned().collect::<Vec<_>>());\n\
    \     |                         ^^^^^^^^^^^^^^^^^^^^^^ ---------------------------------------\
    \ supplied 1 argument\n     |                         |\n     |              \
    \           expected 2 arguments\n     |\nnote: function defined here\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for n in lst {\n        if n % prime == 0 {\n            sum += n\
    \ % 10;\n        }\n        prime += 1;\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmp17ib4u38.rs:8:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmps4qandxs.rs:8:12\n\
    \  |\n8 |         if primes[i] {\n  |            ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_digit_sum:\
    \ isize = 0;\n    for num in lst {\n        let mut prime: isize = 1;\n      \
    \  let mut digit_sum: isize = 0;\n        for _ in 0..num {\n            prime\
    \ *= 2;\n            if prime > max_prime {\n                max_prime = prime;\n\
    \            }\n        }\n        for _ in 0..num {\n            digit_sum +=\
    \ prime % 10;\n            prime /= 10;\n        }\n        if digit_sum > max_digit_sum\
    \ {\n            max_digit_sum = digit_sum;\n        }\n    }\n    max_digit_sum\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to multiply with overflow'', /tmp/tmp4n3ysxa9.rs:11:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if prime[i] {\n            let mut\
    \ j = i;\n            while j > 1 {\n                if prime[j / 2] {\n     \
    \               prime[j] = false;\n                    break;\n              \
    \  }\n                j -= 2;\n            }\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmph91n78tq.rs:8:12\n\
    \  |\n8 |         if prime[i] {\n  |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmph91n78tq.rs:11:20\n   |\n11 |                 if prime[j / 2] {\n\
    \   |                    ^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmph91n78tq.rs:12:21\n   |\n12 |                     prime[j] = false;\n\
    \   |                     ^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<bool>`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime\
    \ = n;\n        }\n    }\n    for n in lst {\n        if n % max_prime == 0 {\n\
    \            sum_of_digits += n % 10;\n        }\n    }\n    return sum_of_digits;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpuosc8u8w.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for n in lst {\n    |              ---\n    | \
    \             |\n    |              `lst` moved due to this implicit call to `.into_iter()`\n\
    \    |              help: consider borrowing to avoid moving into the for loop:\
    \ `&lst`\n...\n12  |     for n in lst {\n    |              ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for el in lst {\n        if el > largest {\n            largest =\
    \ el;\n        }\n    }\n    for el in lst {\n        if el == largest {\n   \
    \         sum += el;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppkhcecqd.rs:8:17\n  |\n8 |\
    \         if el > largest {\n  |                 ^^^^^^^ expected `isize`, found\
    \ `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         if el > largest.try_into().unwrap() {\n\
    \  |                        ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmppkhcecqd.rs:9:23\n  |\n5 |     let mut largest = std::i32::MAX;\n\
    \  |                       ------------- expected due to this value\n...\n9 |\
    \             largest = el;\n  |                       ^^ expected `i32`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppkhcecqd.rs:13:18\n\
    \   |\n13 |         if el == largest {\n   |                  ^^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n13 |         if el == largest.try_into().unwrap()\
    \ {\n   |                         ++++++++++++++++++++\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum +=\
    \ n;\n        }\n        if max_prime < n {\n            max_prime = n;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n   \
    \ assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `438`,\n right: `10`', /tmp/tmpjqrfgtzo.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for x in lst {\n        if x % 2 == 0 {\n            sum += x;\n \
    \       }\n        for y in lst {\n            if y % x == 0 {\n             \
    \   sum += x;\n                break;\n            }\n        }\n    }\n    prime\
    \ = sum;\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable `prime` is assigned to, but never used\n --> /tmp/tmp7jv85isb.rs:5:13\n\
    \  |\n5 |     let mut prime: isize = 0;\n  |             ^^^^^\n  |\n  = note:\
    \ `#[warn(unused_variables)]` on by default\n  = note: consider using `_prime`\
    \ instead\n\nwarning: value assigned to `prime` is never read\n  --> /tmp/tmp7jv85isb.rs:18:5\n\
    \   |\n18 |     prime = sum;\n   |     ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0382]:\
    \ use of moved value: `lst`\n   --> /tmp/tmp7jv85isb.rs:11:18\n    |\n4   | fn\
    \ skjkasdkd(lst: Vec<isize>) -> isize {\n    |              --- move occurs because\
    \ `lst` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n\
    7   |     for x in lst {\n    |              --- `lst` moved due to this implicit\
    \ call to `.into_iter()`\n...\n11  |         for y in lst {\n    |           \
    \       ^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `lst`\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n7\
    \   |     for x in &lst {\n    |              +\n\nerror: aborting due to previous\
    \ error; 2 warnings emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmps4qandxs.rs:8:12\n\
    \  |\n8 |         if primes[i] {\n  |            ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum =\
    \ 0;\n    for n in lst {\n        let mut prime: isize = 1;\n        while prime\
    \ < n {\n            if n % prime == 0 {\n                break;\n           \
    \ }\n            prime += 1;\n        }\n        if prime > max_prime {\n    \
    \        max_prime = prime;\n        }\n        sum += n % max_prime;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `10`', /tmp/tmpo2ecyk0t.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `438`,\n right: `10`', /tmp/tmpo77eu52p.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = std::i32::MAX;\n    let mut\
    \ sum = 0;\n    for &i in lst {\n        let mut prime = true;\n        for &j\
    \ in lst {\n            if i == j {\n                continue;\n            }\n\
    \            if i % j == 0 {\n                prime = false;\n               \
    \ break;\n            }\n        }\n        if prime {\n            sum += i;\n\
    \            if sum > max_prime {\n                max_prime = sum;\n        \
    \    }\n        }\n    }\n    max_prime\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbhmkvxdx.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpbhmkvxdx.rs:9:13\n  |\n9 |         for &j in lst {\n  |        \
    \     ^^    --- this expression has type `Option<isize>`\n  |             |\n\
    \  |             expected `isize`, found reference\n  |             help: you\
    \ can probably remove the explicit borrow: `j`\n  |\n  = note:   expected type\
    \ `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbhmkvxdx.rs:25:5\n   |\n4  | fn skjkasdkd(lst: Vec<isize>) -> isize\
    \ {\n   |                                  ----- expected `isize` because of return\
    \ type\n...\n25 |     max_prime\n   |     ^^^^^^^^^ expected `isize`, found `i32`\n\
    \   |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n25 |     max_prime.try_into().unwrap()\n   |      \
    \        ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime = n;\n\
    \        }\n        for d in 2..max_prime {\n            if n % d == 0 {\n   \
    \             break;\n            }\n        }\n        if d > max_prime {\n \
    \           max_prime = d;\n        }\n        sum_of_digits += n % 10;\n    }\n\
    \    return sum_of_digits;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `d` in this scope\n  --> /tmp/tmphsda6utv.rs:16:12\n\
    \   |\n16 |         if d > max_prime {\n   |            ^ help: a local variable\
    \ with a similar name exists: `n`\n\nerror[E0425]: cannot find value `d` in this\
    \ scope\n  --> /tmp/tmphsda6utv.rs:17:25\n   |\n17 |             max_prime = d;\n\
    \   |                         ^ help: a local variable with a similar name exists:\
    \ `n`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            continue;\n\
    \        }\n        let mut prime: isize = 2;\n        while prime < n {\n   \
    \         if n % prime == 0 {\n                break;\n            }\n       \
    \     prime += 2;\n        }\n        if prime > max_prime {\n            max_prime\
    \ = prime;\n            max_prime_digit = n;\n        }\n    }\n    max_prime\
    \ + max_prime_digit\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `363`,\n right: `10`', /tmp/tmpzd9dml7i.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if prime[i] {\n            let mut\
    \ j = 2;\n            while prime[j] {\n                sum += i as isize;\n \
    \               j += 1;\n            }\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmpubh9fi9t.rs:8:12\n\
    \  |\n8 |         if prime[i] {\n  |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<bool>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    prime[0]\
    \ = false;\n    prime[1] = false;\n    for &x in lst {\n        if prime[x] {\n\
    \            for &y in &prime[x - 1] {\n                prime[y] = false;\n  \
    \          }\n        }\n    }\n    let mut sum = 0;\n    for &x in &prime[1..]\
    \ {\n        if x {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0ment1wt.rs:8:9\n  |\n8 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0277]: cannot add-assign\
    \ `bool` to `{integer}`\n  --> /tmp/tmp0ment1wt.rs:18:17\n   |\n18 |         \
    \    sum += x;\n   |                 ^^ no implementation for `{integer} += bool`\n\
    \   |\n   = help: the trait `AddAssign<bool>` is not implemented for `{integer}`\n\
    \   = help: the following other types implement trait `AddAssign<Rhs>`:\n    \
    \         <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n        \
    \     <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n            \
    \ <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16\
    \ as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    for n in lst {\n        let mut prime: isize = 0;\n        let\
    \ mut prime_digit: isize = 0;\n        for d in n.to_digits() {\n            if\
    \ d % 2 == 0 {\n                prime += 1;\n                prime_digit += 1;\n\
    \            }\n        }\n        if prime > max_prime {\n            max_prime\
    \ = prime;\n            max_prime_digit = prime_digit;\n        }\n    }\n   \
    \ max_prime + max_prime_digit\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpft4eqi_1.rs:10:20\n   |\n10 |         for d in\
    \ n.to_digits() {\n   |                    ^^^^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum_of_digits\
    \ = 0;\n    for &i in lst {\n        if i % max_prime == 0 {\n            sum_of_digits\
    \ += i;\n        }\n        max_prime = max_prime * i;\n    }\n    sum_of_digits\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_rwhg9eg.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n \
    \       }\n        for &d in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n            if n % d == 0\
    \ {\n                sum += d;\n            }\n        }\n    }\n    prime = sum;\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1560`,\n right: `10`', /tmp/tmpipinkkug.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    let mut prime_numbers = vec![];\n\
    \    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n        }\n\
    \        if n % 3 == 0 {\n            sum += n;\n        }\n        if n % 5 ==\
    \ 0 {\n            sum += n;\n        }\n        if n % 7 == 0 {\n           \
    \ sum += n;\n        }\n        if n % 11 == 0 {\n            sum += n;\n    \
    \    }\n        if n % 13 == 0 {\n            sum += n;\n        }\n        if\
    \ n % 17 == 0 {\n            sum += n;\n        }\n        if n % 19 == 0 {\n\
    \            sum += n;\n        }\n        if n % 23 == 0 {\n            sum +=\
    \ n;\n        }\n        if n % 29 == 0 {\n            sum += n;\n        }\n\
    \        if n % 31 == 0 {\n            sum += n;\n        }\n        if n % 37\
    \ == 0 {\n            sum += n;\n        }\n        if n % 41 == 0 {\n       \
    \     sum += n;\n        }\n        if n % 43 == 0 {\n            sum += n;\n\
    \        }\n        if n % 47 == 0 {\n            sum += n;\n        }\n     \
    \   if n % 53 == 0 {\n            sum += n;\n        }\n        if n % 59 == 0\
    \ {\n            sum += n;\n        }\n        if n % 61 == 0 {\n            sum\
    \ += n;\n        }\n        if n % 67 == 0 {\n            sum += n;\n        }\n\
    \        if n % 71 == 0 {\n            sum += n;\n        }\n        if n % 73\
    \ == 0 {\n            sum += n;\n        }\n        if n % 79 == 0 {\n       \
    \     sum += n;\n        }\n        if n % 83 == 0 {\n            sum += n;\n\
    \        }\n        if n % 89 == 0 {\n            sum += n;\n        }\n     \
    \   if n % 97 == 0 {\n            sum += n;\n        }\n        if n % 101 ==\
    \ 0 {\n            sum += n;\n        }\n        if n % 103 == 0 {\n         \
    \   sum += n;\n        }\n        if n % 107 == 0 {\n            sum += n;\n \
    \       }\n        if n % 109 == 0 {\n            sum += n;\n        }\n     \
    \   if n % 111 == 0 {\n            sum += n;\n        }\n        if n % 113 ==\
    \ 0 {\n            sum += n;\n        }\n        if n % 117 == 0 {\n         \
    \   sum += n;\n        }\n        if n % 121 == 0 {\n            sum += n;\n \
    \       }\n        if n % 123 == 0 {\n            sum += n;\n        }\n     \
    \   if n % 127 == 0 {\n            sum += n;\n        }\n        if n % 131 ==\
    \ 0 {\n            sum += n;\n        }\n        if n % 137 == 0 {\n         \
    \   sum += n;\n        }\n        if n % 139 == 0 {\n            sum += n;\n \
    \       }\n        if n % 143 == 0 {\n            sum += n;\n        }\n     \
    \   if n % 147 == 0 {\n            sum += n;\n        }\n        if n % 151 ==\
    \ 0 {\n            sum += n;\n        }\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp9h3uz_ic.rs:144:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for n in lst {\n\
    \    |                  - this delimiter might not be properly closed...\n...\n\
    131 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    144 | }\n    |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9h3uz_ic.rs:4:34\n\
    \  |\n4 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n  |    ---------         \
    \            ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = lst[0];\n    for &x in lst {\n\
    \        if largest < x {\n            largest = x;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsbkm9pdz.rs:6:9\n  |\n6 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n \
    \       }\n        if largest < n {\n            largest = n;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptte6gjdq.rs:11:22\n   |\n\
    11 |         if largest < n {\n   |                      ^ expected `i32`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `i32` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if largest < n.try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptte6gjdq.rs:12:23\n   |\n5  |     let mut largest = std::i32::MAX;\n\
    \   |                       ------------- expected due to this value\n...\n12\
    \ |             largest = n;\n   |                       ^ expected `i32`, found\
    \ `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    let mut sum =\
    \ 0;\n    for n in lst {\n        if n % largest == 0 {\n            sum += n\
    \ % 10;\n        }\n        largest = largest / 10;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpa4sqitup.rs:8:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime_sum:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            continue;\n\
    \        }\n        let mut prime_num = n;\n        let mut is_prime = true;\n\
    \        for _ in 0..(prime_num / 2) {\n            if prime_num % 2 == 0 {\n\
    \                is_prime = false;\n                break;\n            }\n  \
    \          prime_num /= 2;\n        }\n        if is_prime {\n            max_prime\
    \ = prime_num;\n            prime_sum += prime_num;\n        }\n    }\n    return\
    \ prime_sum;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `10`', /tmp/tmpncmnwwvr.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    for &i in lst {\n        if max_prime < i {\n            max_prime\
    \ = i;\n            max_prime_digit = 0;\n        }\n        if max_prime == i\
    \ {\n            max_prime_digit += i;\n        }\n    }\n    return max_prime_digit;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6x3y6x7f.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for i in lst {\n        if i % max_prime == 0 {\n            sum += i;\n\
    \        }\n        max_prime = i;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpitnpn8ho.rs:8:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    let mut sum =\
    \ 0;\n    for n in lst {\n        if n % largest == 0 {\n            sum += n;\n\
    \        }\n        largest = largest / 10;\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3,\
    \ 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpsmffm9vc.rs:8:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            continue;\n\
    \        }\n        let mut prime_digit: isize = 0;\n        let mut prime: isize\
    \ = 2;\n        while prime < n {\n            if n % prime == 0 {\n         \
    \       prime_digit += prime as isize;\n                n /= prime;\n        \
    \    } else {\n                prime = prime + 2;\n            }\n        }\n\
    \        if prime_digit > max_prime_digit {\n            max_prime = prime;\n\
    \            max_prime_digit = prime_digit;\n        }\n    }\n    return max_prime\
    \ + max_prime_digit;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign twice to immutable variable `n`\n  --> /tmp/tmpriywvm0g.rs:16:17\n\
    \   |\n7  |     for n in lst {\n   |         -\n   |         |\n   |         first\
    \ assignment to `n`\n   |         help: consider making this binding mutable:\
    \ `mut n`\n...\n16 |                 n /= prime;\n   |                 ^^^^^^^^^^\
    \ cannot assign twice to immutable variable\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for num in lst {\n        if num > 0 {\n            if num %\
    \ 2 == 0 {\n                if num > max_prime {\n                    max_prime\
    \ = num;\n                }\n            } else {\n                if num > max_prime\
    \ {\n                    max_prime = num;\n                }\n            }\n\
    \        }\n    }\n    for num in lst {\n        if num > 0 {\n            if\
    \ num % 2 == 0 {\n                if num > max_prime {\n                    max_prime\
    \ = num;\n                }\n            } else {\n                if num > max_prime\
    \ {\n                    max_prime = num;\n                }\n            }\n\
    \        }\n    }\n    for num in lst {\n        if num > 0 {\n            if\
    \ num % 2 == 0 {\n                if num > max_prime {\n                    max_prime\
    \ = num;\n                }\n            } else {\n                if num > max_prime\
    \ {\n                    max_prime = num;\n                }\n            }\n\
    \        }\n    }\n    for num in lst {\n        if num > 0 {\n            if\
    \ num % 2 == 0 {\n                if num > max_prime {\n                    max_prime\
    \ = num;\n                }\n            } else {\n                if num > max_prime\
    \ {\n                    max_prime = num;\n                }\n            }\n\
    \        }\n    }\n    for num in lst {\n        if num > 0 {\n            if\
    \ num % 2 == 0 {\n                if num > max_prime {\n                    max_prime\
    \ = num;\n                }\n            } else {\n                if num > max_prime\
    \ {\n                    max_prime = num;\n                }\n            }\n\
    \        }\n    }\n    for num in lst {\n        if num > 0 {\n            if\
    \ num % 2 == 0 {\n                if num > max_prime {\n                    max_prime\
    \ = num;\n                }\n            } else {\n                if num > max_prime\
    \ {\n                    max_prime = num;\n                }\n            }\n\
    \        }\n    }\n    for num in lst {\n        if num > 0 {\n            if\
    \ num % 2 == 0 {\n                if num > max_prime {\n                    max_prime\
    \ = num;\n                }\n            } else {\n                if num > max_prime\
    \ {\n                    max_prime = num;\n                }\n            }\n\
    \        }\n    }\n    for num in lst {\n        if num > 0 {\n            if\
    \ num % 2 == 0 {\n                if num > max_prime {\n                    max_prime\
    \ = num;\n                }\n            } else {\n                if num > max_prime\
    \ {\n                    max_prime = num;\n                }\n            }\n\
    \        }\n    }\n    for num in lst {\n        if num > 0 {\n            if\
    \ num % 2 == 0 {\n                if num > max_prime {\n                    max_\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpftnogv7i.rs:129:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n111 |     for num in lst {\n\
    \    |                    - unclosed delimiter\n112 |         if num > 0 {\n \
    \   |                    - unclosed delimiter\n113 |             if num % 2 ==\
    \ 0 {\n    |                             - unclosed delimiter\n114 |         \
    \        if num > max_prime {\n    |                                    - this\
    \ delimiter might not be properly closed...\n115 |                     max_\n\
    116 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    129 | }\n    |   ^\n\nerror[E0425]: cannot find value `max_` in this scope\n \
    \  --> /tmp/tmpftnogv7i.rs:115:21\n    |\n115 |                     max_\n   \
    \ |                     ^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n   --> /tmp/tmpftnogv7i.rs:111:5\n    |\n4   |   fn skjkasdkd(lst: Vec<isize>)\
    \ -> isize {\n    |                                    ----- expected `isize`\
    \ because of return type\n...\n111 | /     for num in lst {\n112 | |         if\
    \ num > 0 {\n113 | |             if num % 2 == 0 {\n114 | |                 if\
    \ num > max_prime {\n...   |\n128 | |     assert_eq!(candidate(vec![127, 97, 8192]),\
    \ 10);\n129 | | }\n    | |__^ expected `isize`, found `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_digit:\
    \ isize = 0;\n    for x in lst {\n        if x > max_digit {\n            max_digit\
    \ = x;\n        }\n        if x > max_prime {\n            max_prime = x;\n  \
    \      }\n    }\n    max_prime + max_digit\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `648`,\n right: `10`', /tmp/tmp_4d2ud38.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_digits\
    \ = 0;\n    for x in lst {\n        if x > max_prime {\n            max_prime\
    \ = x;\n        }\n        if x % 2 == 0 {\n            sum_digits += x;\n   \
    \     }\n    }\n    if sum_digits > max_prime {\n        max_prime = sum_digits;\n\
    \    }\n    return max_prime;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `438`,\n right: `10`', /tmp/tmpntzlb10j.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmps4qandxs.rs:8:12\n\
    \  |\n8 |         if primes[i] {\n  |            ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    let mut sum: isize = 0;\n    for &i in lst {\n        if i %\
    \ 2 == 0 {\n            if max_prime < i {\n                max_prime = i;\n \
    \               max_prime_digit = 0;\n            }\n        } else {\n      \
    \      if max_prime == i {\n                max_prime_digit += 1;\n          \
    \  }\n        }\n    }\n    sum += max_prime_digit;\n    sum\n}\n\nfn main() {\n\
    \    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3,\
    \ 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxk6_d9_5.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    for num in lst {\n\
    \        if num > 0 {\n            if num % 2 == 0 {\n                prime =\
    \ num;\n            } else {\n                let mut i = 2;\n               \
    \ while i * i <= num {\n                    if num % i == 0 {\n              \
    \          prime = num;\n                        break;\n                    }\n\
    \                    i += 1;\n                }\n            }\n        }\n  \
    \  }\n    prime\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `10`', /tmp/tmph9f1nzhz.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for x in lst {\n        if x > max_prime {\n            max_prime\
    \ = x;\n        }\n    }\n    for x in lst {\n        if x % max_prime == 0 {\n\
    \            sum_of_digits += x;\n        }\n    }\n    return sum_of_digits;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpjuu54gpy.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for x in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for x in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for x in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime_sum:\
    \ isize = 0;\n    for num in lst {\n        if num > max_prime {\n           \
    \ max_prime = num;\n        }\n    }\n    for num in lst {\n        if num % max_prime\
    \ == 0 {\n            prime_sum += num;\n        }\n    }\n    prime_sum\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp5i2wk7l6.rs:12:16\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for num in lst {\n    |                --- `lst`\
    \ moved due to this implicit call to `.into_iter()`\n...\n12  |     for num in\
    \ lst {\n    |                ^^^ value used here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `lst`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n7   |     for num in &lst {\n    |                +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for i in lst {\n        if max_prime < i {\n            max_prime\
    \ = i;\n        }\n        for i in lst {\n            if max_prime % i == 0 {\n\
    \                max_prime = max_prime / i;\n                break;\n        \
    \    }\n        }\n        for i in lst {\n            if max_prime % i == 0 {\n\
    \                sum_of_digits += i;\n                break;\n            }\n\
    \        }\n    }\n    sum_of_digits\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp30pxbl8u.rs:11:18\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for i in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n11  |         for i in lst\
    \ {\n    |                  ^^^ value used here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `lst`\nhelp: consider\
    \ iterating over a slice of the `Vec<isize>`'s content to avoid moving into the\
    \ `for` loop\n    |\n7   |     for i in &lst {\n    |              +\n\nerror[E0382]:\
    \ use of moved value: `lst`\n  --> /tmp/tmp30pxbl8u.rs:17:18\n   |\n4  | fn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n   |              --- move occurs because `lst` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n...\n11 |    \
    \     for i in lst {\n   |                  --- `lst` moved due to this implicit\
    \ call to `.into_iter()`\n...\n17 |         for i in lst {\n   |             \
    \     ^^^ value used here after move\n   |\nhelp: consider iterating over a slice\
    \ of the `Vec<isize>`'s content to avoid moving into the `for` loop\n   |\n11\
    \ |         for i in &lst {\n   |                  +\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum_of_digits\
    \ = 0;\n    for &x in lst {\n        if x > max_prime {\n            max_prime\
    \ = x;\n        }\n        if x % max_prime == 0 {\n            sum_of_digits\
    \ += x;\n        }\n    }\n    max_prime * sum_of_digits\n}\n\nfn main() {\n \
    \   let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph9w5bc6w.rs:7:9\n  |\n7 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ i % 2 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `438`,\n right: `10`', /tmp/tmpro7s3tnw.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    let mut sum: isize = 0;\n    for num in lst {\n        if num\
    \ > 0 {\n            if num % prime == 0 {\n                sum += num;\n    \
    \        } else {\n                if prime > max_prime {\n                  \
    \  max_prime = prime;\n                }\n                prime = num;\n     \
    \       }\n        }\n    }\n    if prime > max_prime {\n        max_prime = prime;\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmp1m_m1zbn.rs:10:16

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = vec![0; 10];\n    let mut max_prime_digit\
    \ = 0;\n    for n in lst {\n        let mut i = 1;\n        while i <= n {\n \
    \           if n % i == 0 {\n                break;\n            }\n         \
    \   i += 1;\n        }\n        if i == n {\n            for i in 0..10 {\n  \
    \              if n % i == 0 {\n                    max_prime[i] = max_prime[i]\
    \ + n % i;\n                    break;\n                }\n            }\n   \
    \     }\n    }\n    for i in 0..10 {\n        if max_prime[i] > max_prime_digit\
    \ {\n            max_prime_digit = max_prime[i];\n        }\n    }\n    max_prime_digit\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmptaed0dxb.rs:18:21\n   |\n18 |                     max_prime[i] = max_prime[i]\
    \ + n % i;\n   |                     ^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmptaed0dxb.rs:18:36\n   |\n18 |  \
    \                   max_prime[i] = max_prime[i] + n % i;\n   |               \
    \                     ^^^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if prime[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmpak6ma1bl.rs:8:12\n\
    \  |\n8 |         if prime[i] {\n  |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<bool>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum:\
    \ isize = 0;\n    for x in lst {\n        if x > max_prime {\n            max_prime\
    \ = x;\n        }\n    }\n    for x in lst {\n        if x == max_prime {\n  \
    \          sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpf08znd4t.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for x in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for x in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for x in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum_of_digits\
    \ = lst[0];\n    for i in 1..lst.len() {\n        if lst[i] % max_prime == 0 {\n\
    \            max_prime = lst[i];\n            sum_of_digits += lst[i];\n     \
    \   }\n    }\n    return sum_of_digits;\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmp20rjb295.rs:8:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    for n in lst\
    \ {\n        if n % largest == 0 {\n            largest = n;\n        }\n    }\n\
    \    largest\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpffohnyx3.rs:7:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976643
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = lst[0];\n    for &i in lst {\n\
    \        if largest < i {\n            largest = i;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8j3ymhd2.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = lst[0];\n    for x in lst {\n\
    \        if largest < x {\n            largest = x;\n        }\n    }\n    let\
    \ mut sum = 0;\n    for x in lst {\n        if largest == x {\n            sum\
    \ += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpwr329i3b.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n5   |     let mut largest = lst[0];\n6   |     for x in lst {\n\
    \    |              --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n12  |     for x in lst {\n    |              ^^^ value used here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to\
    \ avoid moving into the `for` loop\n    |\n6   |     for x in &lst {\n    |  \
    \            +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = vec![0; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst.iter() {\n        let mut prime = true;\n   \
    \     for j in 0..max_prime.len() {\n            if i % max_prime[j] == 0 {\n\
    \                prime = false;\n                break;\n            }\n     \
    \   }\n        if prime {\n            max_prime[i as usize] += 1;\n         \
    \   sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0606]: casting `&isize` as `usize` is invalid\n  --> /tmp/tmpvxggmr9v.rs:16:23\n\
    \   |\n16 |             max_prime[i as usize] += 1;\n   |                    \
    \   -^^^^^^^^^\n   |                       |\n   |                       cannot\
    \ cast `&isize` as `usize`\n   |                       help: dereference the expression:\
    \ `*i`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0606`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = vec![0; 10];\n    let mut sum\
    \ = 0;\n    for &i in lst {\n        let mut j = 0;\n        while j < i {\n \
    \           largest[j] += 1;\n            j += 1;\n        }\n    }\n    for i\
    \ in 0..10 {\n        if largest[i] > 0 {\n            sum += i;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4uyn4jqs.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4uyn4jqs.rs:19:5\n   |\n4  | fn skjkasdkd(lst: Vec<isize>) -> isize\
    \ {\n   |                                  ----- expected `isize` because of return\
    \ type\n...\n19 |     sum\n   |     ^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n19 |     sum.try_into().unwrap()\n   |        ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = vec![0; 10];\n    let mut sum\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n \
    \       }\n        if largest [0] < n {\n            largest[0] = n;\n       \
    \ }\n        for &n in largest {\n            if n % n == 0 {\n              \
    \  largest.clear();\n                break;\n            }\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcoa7s14j.rs:14:13\n   |\n\
    14 |         for &n in largest {\n   |             ^^    ------- this expression\
    \ has type `Option<isize>`\n   |             |\n   |             expected `isize`,\
    \ found reference\n   |             help: you can probably remove the explicit\
    \ borrow: `n`\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for &i in lst {\n        if prime[i] {\n            sum +=\
    \ i;\n        }\n        for &j in &prime[..] {\n            if j {\n        \
    \        prime[j] = false;\n            }\n        }\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn2s9i6_2.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `bool`\n  --> /tmp/tmpn2s9i6_2.rs:13:17\n   |\n13 |   \
    \              prime[j] = false;\n   |                 ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `bool`\n   = note: required because of the requirements\
    \ on the impl of `Index<bool>` for `Vec<bool>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    prime[0]\
    \ = false;\n    for i in 1..lst.len() {\n        if prime[i] {\n            for\
    \ j in 2..lst.len() {\n                if j % i == 0 {\n                    prime[j]\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n    }\n    let mut sum = 0;\n    for i in lst.iter() {\n        if prime[i]\
    \ {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `&isize`\n  --> /tmp/tmptnkwrr59.rs:19:12\n\
    \   |\n19 |         if prime[i] {\n   |            ^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<&isize>` for `Vec<bool>`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmps4qandxs.rs:8:12\n\
    \  |\n8 |         if primes[i] {\n  |            ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    let mut sum: isize = 0;\n    for num in lst {\n        if num\
    \ > max_prime {\n            max_prime = num;\n            max_prime_digit = 0;\n\
    \        }\n        if num > max_prime {\n            max_prime_digit += num %\
    \ 10;\n        }\n    }\n    sum += max_prime_digit;\n    return sum;\n}\n\nfn\
    \ main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `10`', /tmp/tmpbvae8b9z.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976643
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if x > largest {\n            largest = x;\n\
    \        }\n    }\n    for x in lst {\n        if x % largest == 0 {\n       \
    \     sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2b6b7m8n.rs:8:16\n  |\n8 |\
    \         if x > largest {\n  |                ^^^^^^^ expected `isize`, found\
    \ `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         if x > largest.try_into().unwrap() {\n \
    \ |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp2b6b7m8n.rs:9:23\n  |\n5 |     let mut largest = std::i32::MAX;\n\
    \  |                       ------------- expected due to this value\n...\n9 |\
    \             largest = x;\n  |                       ^ expected `i32`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2b6b7m8n.rs:13:16\n\
    \   |\n13 |         if x % largest == 0 {\n   |                ^^^^^^^ expected\
    \ `isize`, found `i32`\n\nerror[E0277]: cannot mod `isize` by `i32`\n  --> /tmp/tmp2b6b7m8n.rs:13:14\n\
    \   |\n13 |         if x % largest == 0 {\n   |              ^ no implementation\
    \ for `isize % i32`\n   |\n   = help: the trait `Rem<i32>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `Rem<Rhs>`:\n\
    \             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n    \
    \         <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n      \
    \       <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n          \
    \   <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and\
    \ 54 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    let mut sum_digits: isize = 0;\n    for x in lst {\n       \
    \ if x > max_prime {\n            max_prime = x;\n            max_prime_digit\
    \ = 0;\n        }\n        if x > max_prime {\n            max_prime_digit = x;\n\
    \        }\n        sum_digits += x;\n    }\n    if max_prime == 0 {\n       \
    \ return sum_digits;\n    }\n    let mut prime_digit: isize = 0;\n    for x in\
    \ lst {\n        if x > max_prime {\n            break;\n        }\n        if\
    \ x > max_prime {\n            prime_digit = x;\n        }\n        if prime_digit\
    \ == 0 {\n            break;\n        }\n        if prime_digit % x == 0 {\n \
    \           break;\n        }\n        prime_digit /= x;\n    }\n    if prime_digit\
    \ == 0 {\n        return sum_digits;\n    }\n    let mut sum_digits_prime: isize\
    \ = 0;\n    for x in lst {\n        if x > max_prime {\n            break;\n \
    \       }\n        if x > max_prime {\n            sum_digits_prime += x;\n  \
    \      }\n        if sum_digits_prime == 0 {\n            break;\n        }\n\
    \        if sum_digits_prime % x == 0 {\n            break;\n        }\n     \
    \   sum_digits_prime /= x;\n    }\n    if sum_digits_prime == 0 {\n        return\
    \ sum_digits;\n    }\n    return sum_digits_prime + sum_digits;\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: variable `max_prime_digit` is assigned to, but never used\n -->\
    \ /tmp/tmpc21gevxs.rs:6:13\n  |\n6 |     let mut max_prime_digit: isize = 0;\n\
    \  |             ^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_variables)]` on\
    \ by default\n  = note: consider using `_max_prime_digit` instead\n\nwarning:\
    \ value assigned to `max_prime_digit` is never read\n  --> /tmp/tmpc21gevxs.rs:11:13\n\
    \   |\n11 |             max_prime_digit = 0;\n   |             ^^^^^^^^^^^^^^^\n\
    \   |\n   = note: `#[warn(unused_assignments)]` on by default\n   = help: maybe\
    \ it is overwritten before being read?\n\nwarning: value assigned to `max_prime_digit`\
    \ is never read\n  --> /tmp/tmpc21gevxs.rs:14:13\n   |\n14 |             max_prime_digit\
    \ = x;\n   |             ^^^^^^^^^^^^^^^\n   |\n   = help: maybe it is overwritten\
    \ before being read?\n\nerror[E0382]: use of moved value: `lst`\n   --> /tmp/tmpc21gevxs.rs:22:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n8   |     for x in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n22  |     for x in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for x in &lst {\n    |              +\n\nerror[E0382]: use of\
    \ moved value: `lst`\n  --> /tmp/tmpc21gevxs.rs:41:14\n   |\n4  | fn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n   |              --- move occurs because `lst` has\
    \ type `Vec<isize>`, which does not implement the `Copy` trait\n...\n22 |    \
    \ for x in lst {\n   |              --- `lst` moved due to this implicit call\
    \ to `.into_iter()`\n...\n41 |     for x in lst {\n   |              ^^^ value\
    \ used here after move\n   |\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n   |\n22 |     for x in &lst {\n\
    \   |              +\n\nerror"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = vec![0; lst.len()];\n    let\
    \ mut sum = 0;\n    for x in lst {\n        let mut i = x;\n        while i >\
    \ 0 {\n            if max_prime[i] < x {\n                max_prime[i] = x;\n\
    \                sum += x;\n                break;\n            }\n          \
    \  i -= 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  -->\
    \ /tmp/tmpwxrsg1pp.rs:10:16\n   |\n10 |             if max_prime[i] < x {\n  \
    \ |                ^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpwxrsg1pp.rs:11:17\n   |\n11 |                 max_prime[i]\
    \ = x;\n   |                 ^^^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if prime[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmpak6ma1bl.rs:8:12\n\
    \  |\n8 |         if prime[i] {\n  |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<bool>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for &i in lst {\n        if i % max_prime == 0 {\n            sum += i;\n\
    \        }\n        max_prime = i;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0yjhm5ap.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 3 == 0 {\n            max_prime = n;\n     \
    \   }\n        if n % 5 == 0 {\n            max_prime = n;\n        }\n      \
    \  if n % 7 == 0 {\n            max_prime = n;\n        }\n        if n % 11 ==\
    \ 0 {\n            max_prime = n;\n        }\n        if n % 13 == 0 {\n     \
    \       max_prime = n;\n        }\n        if n % 17 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 19 == 0 {\n            max_prime = n;\n    \
    \    }\n        if n % 23 == 0 {\n            max_prime = n;\n        }\n    \
    \    if n % 29 == 0 {\n            max_prime = n;\n        }\n        if n % 31\
    \ == 0 {\n            max_prime = n;\n        }\n        if n % 37 == 0 {\n  \
    \          max_prime = n;\n        }\n        if n % 41 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 43 == 0 {\n            max_prime = n;\n    \
    \    }\n        if n % 47 == 0 {\n            max_prime = n;\n        }\n    \
    \    if n % 53 == 0 {\n            max_prime = n;\n        }\n        if n % 59\
    \ == 0 {\n            max_prime = n;\n        }\n        if n % 61 == 0 {\n  \
    \          max_prime = n;\n        }\n        if n % 67 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 71 == 0 {\n            max_prime = n;\n    \
    \    }\n        if n % 73 == 0 {\n            max_prime = n;\n        }\n    \
    \    if n % 79 == 0 {\n            max_prime = n;\n        }\n        if n % 83\
    \ == 0 {\n            max_prime = n;\n        }\n        if n % 89 == 0 {\n  \
    \          max_prime = n;\n        }\n        if n % 97 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 101 == 0 {\n            max_prime = n;\n   \
    \     }\n        if n % 103 == 0 {\n            max_prime = n;\n        }\n  \
    \      if n % 107 == 0 {\n            max_prime = n;\n        }\n        if n\
    \ % 109 == 0 {\n            max_prime = n;\n        }\n        if n % 113 == 0\
    \ {\n            max_prime = n;\n        }\n        if n % 117 == 0 {\n      \
    \      max_prime = n;\n        }\n        if n % 121 == 0 {\n            max_prime\
    \ = n;\n        }\n        if n % 123 == 0 {\n            max_prime = n;\n   \
    \     }\n        if n % 127 == 0 {\n            max_prime = n;\n        }\n  \
    \      if n % 131 == 0 {\n            max_prime = n;\n        }\n        if n\
    \ % 137 == 0 {\n            max_prime = n;\n        }\n        if n % 139 == 0\
    \ {\n            max_prime = n;\n        }\n        if n % 143 == 0 {\n\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpfz1svk22.rs:134:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for n in lst {\n\
    \    |                  - unclosed delimiter\n...\n119 |         if n % 143 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    120 | \n121 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n134 | }\n    |   ^\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpfz1svk22.rs:7:5\n\
    \    |\n4   |   fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              \
    \                      ----- expected `isize` because of return type\n...\n7 \
    \  | /     for n in lst {\n8   | |         if n % 2 == 0 {\n9   | |          \
    \   max_prime = n;\n10  | |         }\n...   |\n133 | |     assert_eq!(candidate(vec![127,\
    \ 97, 8192]), 10);\n134 | | }\n    | |__^ expected `isize`, found `()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime\
    \ = n;\n        }\n    }\n    for n in lst {\n        if n % 2 == 0 {\n      \
    \      sum_of_digits += n % 10;\n        }\n    }\n    max_prime + sum_of_digits\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpuoy7uqn2.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for n in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for n in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for n in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n \
    \       }\n        if largest < n {\n            largest = n;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptte6gjdq.rs:11:22\n   |\n\
    11 |         if largest < n {\n   |                      ^ expected `i32`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `i32` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if largest < n.try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptte6gjdq.rs:12:23\n   |\n5  |     let mut largest = std::i32::MAX;\n\
    \   |                       ------------- expected due to this value\n...\n12\
    \ |             largest = n;\n   |                       ^ expected `i32`, found\
    \ `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime_sum:\
    \ isize = 0;\n    for num in lst {\n        let mut prime = true;\n        for\
    \ &n in &num {\n            if n % 2 == 0 {\n                prime = false;\n\
    \                break;\n            }\n        }\n        if prime {\n      \
    \      prime_sum += num;\n            if prime_sum > max_prime {\n           \
    \     max_prime = prime_sum;\n            }\n        }\n    }\n    max_prime\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `&isize` is not an iterator\n --> /tmp/tmpvj6b7k3w.rs:9:19\n\
    \  |\n9 |         for &n in &num {\n  |                   ^^^^ `&isize` is not\
    \ an iterator\n  |\n  = help: the trait `Iterator` is not implemented for `&isize`\n\
    \  = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    for &x in lst {\n\
    \        if x % 2 == 0 {\n            prime += x;\n        }\n    }\n    prime\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnt9yhysj.rs:6:9\n  |\n6 |\
    \     for &x in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    let mut sum_digit: isize = 0;\n    for num in lst {\n      \
    \  if num > max_prime {\n            max_prime = num;\n            max_prime_digit\
    \ = 0;\n        }\n        if num % 2 == 0 {\n            max_prime += 1;\n  \
    \          max_prime_digit += 1;\n        }\n        if num % 3 == 0 {\n     \
    \       max_prime += 1;\n            max_prime_digit += 2;\n        }\n      \
    \  if num % 5 == 0 {\n            max_prime += 1;\n            max_prime_digit\
    \ += 3;\n        }\n        if num % 7 == 0 {\n            max_prime += 1;\n \
    \           max_prime_digit += 4;\n        }\n        if num % 11 == 0 {\n   \
    \         max_prime += 1;\n            max_prime_digit += 5;\n        }\n    \
    \    if num % 13 == 0 {\n            max_prime += 1;\n            max_prime_digit\
    \ += 6;\n        }\n        if num % 17 == 0 {\n            max_prime += 1;\n\
    \            max_prime_digit += 7;\n        }\n        if num % 19 == 0 {\n  \
    \          max_prime += 1;\n            max_prime_digit += 8;\n        }\n   \
    \     if num % 23 == 0 {\n            max_prime += 1;\n            max_prime_digit\
    \ += 9;\n        }\n        if num % 29 == 0 {\n            max_prime += 1;\n\
    \            max_prime_digit += 10;\n        }\n        if num % 31 == 0 {\n \
    \           max_prime += 1;\n            max_prime_digit += 11;\n        }\n \
    \       if num % 37 == 0 {\n            max_prime += 1;\n            max_prime_digit\
    \ += 12;\n        }\n        if num % 41 == 0 {\n            max_prime += 1;\n\
    \            max_prime_digit += 13;\n        }\n        if num % 43 == 0 {\n \
    \           max_prime += 1;\n            max_prime_digit += 14;\n        }\n \
    \       if num % 47 == 0 {\n            max_prime += 1;\n            max_prime_digit\
    \ += 15;\n        }\n        if num % 53 == 0 {\n            max_prime += 1;\n\
    \            max_prime_digit += 16;\n        }\n        if num % 59 == 0 {\n \
    \           max_prime += 1;\n            max_prime_digit += 17;\n        }\n \
    \       if num % 61 == 0 {\n            max_prime += 1;\n            max_prime_digit\
    \ += 18;\n        }\n        if num % 67 == 0 {\n            max_prime += 1;\n\
    \            max_prime_digit += 19;\n        }\n        if num % 71 == 0 {\n \
    \           max_prime += 1;\n            max_prime_digit += 20;\n        }\n \
    \       if num % 73 == 0 {\n            max_prime += 1;\n            max_prime_digit\
    \ += 21;\n        }\n        if num % 79 == 0 {\n            max_prime \n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp5qon5em_.rs:112:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n8   |     for num in lst {\n\
    \    |                    - unclosed delimiter\n...\n97  |         if num % 79\
    \ == 0 {\n    |                          - this delimiter might not be properly\
    \ closed...\n98  |             max_prime \n99  | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n112 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5qon5em_.rs:98:13\n   |\n97 | /         if num % 79 ==\
    \ 0 {\n98 | |             max_prime \n   | |             ^^^^^^^^^ expected `()`,\
    \ found `isize`\n99 | | }\n   | |_- expected this to be `()`\n   |\nhelp: you\
    \ might have meant to return this value\n   |\n98 |             return max_prime;\
    \ \n   |             ++++++          +\n\nerror[E0308]: mismatched types\n   -->\
    \ /tmp/tmp5qon5em_.rs:8:5\n    |\n4   |   fn skjkasdkd(lst: Vec<isize>) -> isize\
    \ {\n    |                                    ----- expected `isize` because of\
    \ return type\n...\n8   | /     for num in lst {\n9   | |         if num > max_prime\
    \ {\n10  | |             max_prime = num;\n11  | |             max_prime_digit\
    \ = 0;\n...   |\n111 | |     assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    112 | | }\n    | |__^ expected `isize`, found `()`\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    let mut sum =\
    \ 0;\n    for n in lst {\n        if n % largest == 0 {\n            sum += n\
    \ % 10;\n        }\n        largest = largest / 10;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpa4sqitup.rs:8:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    let mut sum =\
    \ 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n   \
    \     }\n        if largest < n {\n            largest = n;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `438`,\n right: `10`', /tmp/tmpbij3ipoa.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if x > largest {\n            largest = x;\n\
    \        }\n    }\n    for x in lst {\n        if x == largest {\n           \
    \ sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppledvwc0.rs:8:16\n  |\n8 |\
    \         if x > largest {\n  |                ^^^^^^^ expected `isize`, found\
    \ `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         if x > largest.try_into().unwrap() {\n \
    \ |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmppledvwc0.rs:9:23\n  |\n5 |     let mut largest = std::i32::MAX;\n\
    \  |                       ------------- expected due to this value\n...\n9 |\
    \             largest = x;\n  |                       ^ expected `i32`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppledvwc0.rs:13:17\n\
    \   |\n13 |         if x == largest {\n   |                 ^^^^^^^ expected `isize`,\
    \ found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and panic if\
    \ the converted value doesn't fit\n   |\n13 |         if x == largest.try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = std::i32::MAX;\n    let mut\
    \ sum = 0;\n    for x in lst {\n        if x > max_prime {\n            max_prime\
    \ = x;\n        }\n        if x % 2 == 0 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk_9wmada.rs:8:16\n  |\n8 |\
    \         if x > max_prime {\n  |                ^^^^^^^^^ expected `isize`, found\
    \ `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         if x > max_prime.try_into().unwrap() {\n\
    \  |                         ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpk_9wmada.rs:9:25\n  |\n5 |     let mut max_prime = std::i32::MAX;\n\
    \  |                         ------------- expected due to this value\n...\n9\
    \ |             max_prime = x;\n  |                         ^ expected `i32`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for &i in lst {\n        if primes[i as usize] {\n       \
    \     sum += i;\n        }\n        for &j in &primes {\n            if j {\n\
    \                primes[i as usize] = false;\n            }\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqj3hak1h.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = lst[0];\n    let mut sum = 0;\n\
    \    for &i in lst {\n        if i > largest {\n            largest = i;\n   \
    \     }\n    }\n    for &i in lst {\n        if i == largest {\n            sum\
    \ += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpexnfs45b.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpexnfs45b.rs:12:9\n   |\n12 |     for &i in lst {\n   |        \
    \ ^^    --- this expression has type `Option<isize>`\n   |         |\n   |   \
    \      expected `isize`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    for n in lst\
    \ {\n        if n % 2 == 0 {\n            largest = std::cmp::max(largest, n);\n\
    \        }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv1ljqbds.rs:8:46\n  |\n8 |\
    \             largest = std::cmp::max(largest, n);\n  |                      \
    \                        ^ expected `i32`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to an `i32` and panic if the converted value doesn't fit\n  |\n8\
    \ |             largest = std::cmp::max(largest, n.try_into().unwrap());\n  |\
    \                                               ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpv1ljqbds.rs:11:5\n   |\n4  | fn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n   |                                  ----- expected\
    \ `isize` because of return type\n...\n11 |     largest\n   |     ^^^^^^^ expected\
    \ `isize`, found `i32`\n   |\nhelp: you can convert an `i32` to an `isize` and\
    \ panic if the converted value doesn't fit\n   |\n11 |     largest.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum:\
    \ isize = 0;\n    for x in lst {\n        if x > max_prime {\n            max_prime\
    \ = x;\n        }\n    }\n    for x in lst {\n        if x == max_prime {\n  \
    \          sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpf08znd4t.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for x in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for x in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for x in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut primes = vec![];\n    let mut largest =\
    \ -1;\n    for n in lst {\n        if n % 2 == 0 {\n            continue;\n  \
    \      }\n        let mut i = 2;\n        while i * i <= n {\n            if n\
    \ % i == 0 {\n                break;\n            }\n            i += 1;\n   \
    \     }\n        if i == n {\n            primes.push(n);\n            if n >\
    \ largest {\n                largest = n;\n            }\n        }\n    }\n \
    \   if primes.len() == 0 {\n        return 0;\n    }\n    let mut sum = 0;\n \
    \   for n in primes {\n        sum += n % 10;\n    }\n    return sum;\n}\n\nfn\
    \ main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `10`', /tmp/tmpsktluh5m.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976643
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for x in lst {\n        if prime[x] {\n            sum +=\
    \ x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmp08vy8m9s.rs:8:12\n\
    \  |\n8 |         if prime[x] {\n  |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = isize::MAX;\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if x > max_prime {\n            max_prime\
    \ = x;\n        }\n    }\n    for x in lst {\n        if x > max_prime {\n   \
    \         sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpia047pue.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for x in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for x in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for x in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmps4qandxs.rs:8:12\n\
    \  |\n8 |         if primes[i] {\n  |            ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for i in lst {\n        if i % 2 == 0 {\n            sum += i;\n \
    \       }\n        if i % 3 == 0 {\n            sum += i;\n        }\n       \
    \ if i % 5 == 0 {\n            sum += i;\n        }\n        if i % 7 == 0 {\n\
    \            sum += i;\n        }\n        if i % 11 == 0 {\n            sum +=\
    \ i;\n        }\n        if i % 13 == 0 {\n            sum += i;\n        }\n\
    \        if i % 17 == 0 {\n            sum += i;\n        }\n        if i % 19\
    \ == 0 {\n            sum += i;\n        }\n        if i % 23 == 0 {\n       \
    \     sum += i;\n        }\n        if i % 29 == 0 {\n            sum += i;\n\
    \        }\n        if i % 31 == 0 {\n            sum += i;\n        }\n     \
    \   if i % 37 == 0 {\n            sum += i;\n        }\n        if i % 41 == 0\
    \ {\n            sum += i;\n        }\n        if i % 43 == 0 {\n            sum\
    \ += i;\n        }\n        if i % 47 == 0 {\n            sum += i;\n        }\n\
    \        if i % 53 == 0 {\n            sum += i;\n        }\n        if i % 59\
    \ == 0 {\n            sum += i;\n        }\n        if i % 61 == 0 {\n       \
    \     sum += i;\n        }\n        if i % 67 == 0 {\n            sum += i;\n\
    \        }\n        if i % 71 == 0 {\n            sum += i;\n        }\n     \
    \   if i % 73 == 0 {\n            sum += i;\n        }\n        if i % 79 == 0\
    \ {\n            sum += i;\n        }\n        if i % 83 == 0 {\n            sum\
    \ += i;\n        }\n        if i % 89 == 0 {\n            sum += i;\n        }\n\
    \        if i % 97 == 0 {\n            sum += i;\n        }\n        if i % 101\
    \ == 0 {\n            sum += i;\n        }\n        if i % 103 == 0 {\n      \
    \      sum += i;\n        }\n        if i % 107 == 0 {\n            sum += i;\n\
    \        }\n        if i % 111 == 0 {\n            sum += i;\n        }\n    \
    \    if i % 113 == 0 {\n            sum += i;\n        }\n        if i % 121 ==\
    \ 0 {\n            sum += i;\n        }\n        if i % 127 == 0 {\n         \
    \   sum += i;\n        }\n        if i % 131 == 0 {\n            sum += i;\n \
    \       }\n        if i % 137 == 0 {\n            sum += i;\n        }\n     \
    \   if i % 143 == 0 {\n            sum += i;\n        }\n        if i % 149 ==\
    \ 0 {\n            sum += i;\n        }\n        if i % 151 == 0 {\n         \
    \   sum += i;\n        }\n        if i % 157 == 0 {\n            sum += i;\n \
    \       }\n        if i % 163 == 0 {\n            sum += i;\n        }\n     \
    \   if i % 169 == 0 {\n            sum += i;\n        }\n        if i % 173 ==\
    \ 0 {\n            sum += i;\n        }\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpe841cnt1.rs:144:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for i in lst {\n\
    \    |                  - this delimiter might not be properly closed...\n...\n\
    131 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    144 | }\n    |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpe841cnt1.rs:4:34\n\
    \  |\n4 | fn skjkasdkd(lst: Vec<isize>) -> isize {\n  |    ---------         \
    \            ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    for n in lst\
    \ {\n        if n % largest == 0 {\n            largest = n;\n        }\n    }\n\
    \    largest\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpffohnyx3.rs:7:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659976643
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum:\
    \ isize = 0;\n    for x in lst {\n        if x > max_prime {\n            max_prime\
    \ = x;\n        }\n    }\n    for x in lst {\n        if x == max_prime {\n  \
    \          sum += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpf08znd4t.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for x in lst {\n    |              --- `lst` moved\
    \ due to this implicit call to `.into_iter()`\n...\n12  |     for x in lst {\n\
    \    |              ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `lst`\nhelp: consider iterating\
    \ over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n7   |     for x in &lst {\n    |              +\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = lst[0];\n    let mut sum = 0;\n\
    \    for &i in lst {\n        if i % max_prime == 0 {\n            sum += i;\n\
    \        }\n        max_prime = i;\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0yjhm5ap.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            continue;\n\
    \        }\n        let mut i = 2;\n        while i * i <= n {\n            if\
    \ n % i == 0 {\n                break;\n            }\n            i += 1;\n \
    \       }\n        if i == n {\n            max_prime = n;\n            sum_of_digits\
    \ += n % 10;\n        }\n    }\n    max_prime * sum_of_digits\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `10`', /tmp/tmpe4sftqzd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976643
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_digit:\
    \ isize = 0;\n    for x in lst {\n        if x > max_prime {\n            max_prime\
    \ = x;\n        }\n        if x > max_digit {\n            max_digit = x;\n  \
    \      }\n    }\n    max_digit += max_prime + 1;\n    return max_digit;\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `649`,\n right: `10`', /tmp/tmpljd7cc10.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976643
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n \
    \       }\n        if n % 3 == 0 {\n            sum += n;\n        }\n       \
    \ if n % 5 == 0 {\n            sum += n;\n        }\n        if n % 7 == 0 {\n\
    \            sum += n;\n        }\n        if n % 11 == 0 {\n            sum +=\
    \ n;\n        }\n        if n % 13 == 0 {\n            sum += n;\n        }\n\
    \        if n % 17 == 0 {\n            sum += n;\n        }\n        if n % 19\
    \ == 0 {\n            sum += n;\n        }\n        if n % 23 == 0 {\n       \
    \     sum += n;\n        }\n        if n % 29 == 0 {\n            sum += n;\n\
    \        }\n        if n % 31 == 0 {\n            sum += n;\n        }\n     \
    \   if n % 37 == 0 {\n            sum += n;\n        }\n        if n % 41 == 0\
    \ {\n            sum += n;\n        }\n        if n % 43 == 0 {\n            sum\
    \ += n;\n        }\n        if n % 47 == 0 {\n            sum += n;\n        }\n\
    \        if n % 53 == 0 {\n            sum += n;\n        }\n        if n % 59\
    \ == 0 {\n            sum += n;\n        }\n        if n % 61 == 0 {\n       \
    \     sum += n;\n        }\n        if n % 67 == 0 {\n            sum += n;\n\
    \        }\n        if n % 71 == 0 {\n            sum += n;\n        }\n     \
    \   if n % 73 == 0 {\n            sum += n;\n        }\n        if n % 79 == 0\
    \ {\n            sum += n;\n        }\n        if n % 83 == 0 {\n            sum\
    \ += n;\n        }\n        if n % 89 == 0 {\n            sum += n;\n        }\n\
    \        if n % 97 == 0 {\n            sum += n;\n        }\n        if n % 101\
    \ == 0 {\n            sum += n;\n        }\n        if n % 103 == 0 {\n      \
    \      sum += n;\n        }\n        if n % 107 == 0 {\n            sum += n;\n\
    \        }\n        if n % 111 == 0 {\n            sum += n;\n        }\n    \
    \    if n % 113 == 0 {\n            sum += n;\n        }\n        if n % 121 ==\
    \ 0 {\n            sum += n;\n        }\n        if n % 127 == 0 {\n         \
    \   sum += n;\n        }\n        if n % 131 == 0 {\n            sum += n;\n \
    \       }\n        if n % 137 == 0 {\n            sum += n;\n        }\n     \
    \   if n % 141 == 0 {\n            sum += n;\n        }\n        if n % 147 ==\
    \ 0 {\n            sum += n;\n        }\n        if n % 151 == 0 {\n         \
    \   sum += n;\n        }\n        if n % 157 == 0 {\n            sum += n;\n \
    \       }\n        if n % 163 == 0 {\n            sum += n;\n        }\n     \
    \   if n % 169 == 0 {\n            sum += n;\n        }\n        if n % 173 ==\
    \ 0 {\n            sum += n;\n\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpmj2yq9yd.rs:144:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for n in lst {\n\
    \    |                  - unclosed delimiter\n...\n128 |         if n % 173 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    ...\n131 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n144 | }\n    |   ^\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpmj2yq9yd.rs:7:5\n\
    \    |\n4   |   fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              \
    \                      ----- expected `isize` because of return type\n...\n7 \
    \  | /     for n in lst {\n8   | |         if n % 2 == 0 {\n9   | |          \
    \   sum += n;\n10  | |         }\n...   |\n143 | |     assert_eq!(candidate(vec![127,\
    \ 97, 8192]), 10);\n144 | | }\n    | |__^ expected `isize`, found `()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if x > largest {\n            largest = x;\n\
    \        }\n        if x % 2 == 0 {\n            sum += x;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpju9o9jti.rs:8:16\n  |\n8 |\
    \         if x > largest {\n  |                ^^^^^^^ expected `isize`, found\
    \ `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         if x > largest.try_into().unwrap() {\n \
    \ |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpju9o9jti.rs:9:23\n  |\n9 |             largest = x;\n  |       \
    \                ^ expected `i32`, found `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            continue;\n\
    \        }\n        let mut prime: isize = 2;\n        while prime < n {\n   \
    \         if n % prime == 0 {\n                break;\n            }\n       \
    \     prime += 2;\n        }\n        if prime > max_prime {\n            max_prime\
    \ = prime;\n        }\n        sum += n % prime as isize;\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `221`,\n right: `10`', /tmp/tmpa3rlelvo.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976643
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    let mut sum_digits: isize = 0;\n    for num in lst {\n     \
    \   if num > max_prime {\n            max_prime = num;\n        }\n        if\
    \ num > max_prime_digit {\n            max_prime_digit = num;\n        }\n   \
    \     sum_digits += num;\n    }\n    return sum_digits;\n}\n\nfn main() {\n  \
    \  let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `659`,\n right: `10`', /tmp/tmpf46yrs4c.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976643
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for num in lst {\n        if num % 2 == 0 {\n            sum += num;\n\
    \        }\n        for num in lst {\n            if num % num == 0 {\n      \
    \          sum += num;\n            }\n        }\n    }\n    prime = sum;\n  \
    \  return prime;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "warning: value assigned to `prime` is never read\n --> /tmp/tmpwzwhmcsx.rs:5:13\n\
    \  |\n5 |     let mut prime: isize = 0;\n  |             ^^^^^\n  |\n  = note:\
    \ `#[warn(unused_assignments)]` on by default\n  = help: maybe it is overwritten\
    \ before being read?\n\nerror[E0382]: use of moved value: `lst`\n   --> /tmp/tmpwzwhmcsx.rs:11:20\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for num in lst {\n    |                --- `lst`\
    \ moved due to this implicit call to `.into_iter()`\n...\n11  |         for num\
    \ in lst {\n    |                    ^^^ value used here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `lst`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n7   |     for num in &lst {\n    |             \
    \   +\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            sum += n;\n \
    \       }\n        if largest < n {\n            largest = n;\n        }\n   \
    \ }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptte6gjdq.rs:11:22\n   |\n\
    11 |         if largest < n {\n   |                      ^ expected `i32`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `i32` and panic if the\
    \ converted value doesn't fit\n   |\n11 |         if largest < n.try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptte6gjdq.rs:12:23\n   |\n5  |     let mut largest = std::i32::MAX;\n\
    \   |                       ------------- expected due to this value\n...\n12\
    \ |             largest = n;\n   |                       ^ expected `i32`, found\
    \ `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976642
