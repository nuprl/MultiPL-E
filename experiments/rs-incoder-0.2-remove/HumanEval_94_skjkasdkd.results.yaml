language: rs
name: HumanEval_94_skjkasdkd
results:
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime = std::i32::MAX;\n    let mut\
    \ sum = 0;\n    for &i in lst {\n        if i % 2 == 0 {\n            sum += i;\n\
    \        }\n        if i % 3 == 0 {\n            sum += i;\n        }\n      \
    \  if i % 5 == 0 {\n            sum += i;\n        }\n        if i % 7 == 0 {\n\
    \            sum += i;\n        }\n        if i % 11 == 0 {\n            sum +=\
    \ i;\n        }\n        if i % 13 == 0 {\n            sum += i;\n        }\n\
    \        if i % 17 == 0 {\n            sum += i;\n        }\n        if i % 19\
    \ == 0 {\n            sum += i;\n        }\n        if i % 23 == 0 {\n       \
    \     sum += i;\n        }\n        if i % 29 == 0 {\n            sum += i;\n\
    \        }\n        if i % 31 == 0 {\n            sum += i;\n        }\n     \
    \   if i % 37 == 0 {\n            sum += i;\n        }\n        if i % 41 == 0\
    \ {\n            sum += i;\n        }\n        if i % 43 == 0 {\n            sum\
    \ += i;\n        }\n        if i % 47 == 0 {\n            sum += i;\n        }\n\
    \        if i % 53 == 0 {\n            sum += i;\n        }\n        if i % 59\
    \ == 0 {\n            sum += i;\n        }\n        if i % 61 == 0 {\n       \
    \     sum += i;\n        }\n        if i % 67 == 0 {\n            sum += i;\n\
    \        }\n        if i % 71 == 0 {\n            sum += i;\n        }\n     \
    \   if i % 73 == 0 {\n            sum += i;\n        }\n        if i % 79 == 0\
    \ {\n            sum += i;\n        }\n        if i % 83 == 0 {\n            sum\
    \ += i;\n        }\n        if i % 89 == 0 {\n            sum += i;\n        }\n\
    \        if i % 97 == 0 {\n            sum += i;\n        }\n        if i % 101\
    \ == 0 {\n            sum += i;\n        }\n        if i % 103 == 0 {\n      \
    \      sum += i;\n        }\n        if i % 107 == 0 {\n            sum += i;\n\
    \        }\n        if i % 111 == 0 {\n            sum += i;\n        }\n    \
    \    if i % 113 == 0 {\n            sum += i;\n        }\n        if i % 115 ==\
    \ 0 {\n            sum += i;\n        }\n        if i % 117 == 0 {\n         \
    \   sum += i;\n        }\n        if i % 119 == 0 {\n            sum += i;\n \
    \       }\n        if i % 121 == 0 {\n            sum += i;\n        }\n     \
    \   if i % 123 == 0 {\n            sum += i;\n        }\n        if i % 127 ==\
    \ 0 {\n            sum += i;\n        }\n        if i % 131 == 0 {\n         \
    \   sum += i;\n        }\n        if i % 133 == 0 {\n            sum += i;\n \
    \       }\n        if i % 137 == 0 {\n            sum += i;\n        }\n     \
    \   if i % 139 == 0 {\n            sum += i;\n        }\n        if i % 141 ==\
    \ 0 {\n            sum += i;\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmph3ur_oxe.rs:143:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for &i in lst {\n\
    \    |                   - unclosed delimiter\n...\n128 |         if i % 141 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    129 |             sum += i;\n130 | }\n    | - ...as it matches this but it has\
    \ different indentation\n...\n143 | }\n    |   ^\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmph3ur_oxe.rs:7:9\n  |\n7 |     for &i in lst {\n  |         ^^  \
    \  --- this expression has type `isize`\n  |         |\n  |         expected `isize`,\
    \ found reference\n  |\n  = note:   expected type `isize`\n          found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmph3ur_oxe.rs:7:5\n   \
    \ |\n4   |   fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                 \
    \                   ----- expected `isize` because of return type\n...\n7   |\
    \ /     for &i in lst {\n8   | |         if i % 2 == 0 {\n9   | |            \
    \ sum += i;\n10  | |         }\n...   |\n142 | |     assert_eq!(candidate(vec![127,\
    \ 97, 8192]), 10);\n143 | | }\n    | |__^ expected `isize`, found `()`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in lst {\n        if\
    \ isprime(i) {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `isprime` in this scope\n --> /tmp/tmpbk4qqdaj.rs:7:12\n\
    \  |\n7 |         if isprime(i) {\n  |            ^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    prime[0]\
    \ = false;\n    for i in 1..lst.len() {\n        if prime[i] {\n            for\
    \ j in 2..lst.len() {\n                if lst[j] % i == 0 {\n                \
    \    prime[j] = false;\n                    break;\n                }\n      \
    \      }\n        }\n    }\n    if lst.len() == 0 {\n        return 0;\n    }\n\
    \    let mut sum = 0;\n    for i in 1..lst.len() {\n        if prime[i] {\n  \
    \          sum += lst[i];\n        }\n    }\n    sum\n}\n\nfn main() {\n    let\
    \ candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfb21ctzn.rs:10:29\n   |\n\
    10 |                 if lst[j] % i == 0 {\n   |                             ^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmpfb21ctzn.rs:10:27\n   |\n10 |                 if lst[j] % i ==\
    \ 0 {\n   |                           ^ no implementation for `isize % usize`\n\
    \   |\n   = help: the trait `Rem<usize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime: isize = 0;\n    let mut sum: isize\
    \ = 0;\n    for x in lst {\n        if x % 2 == 0 {\n            sum += x;\n \
    \       }\n        if x % 3 == 0 {\n            sum += x;\n        }\n       \
    \ if x % 5 == 0 {\n            sum += x;\n        }\n        if x % 7 == 0 {\n\
    \            sum += x;\n        }\n        if x % 11 == 0 {\n            sum +=\
    \ x;\n        }\n        if x % 13 == 0 {\n            sum += x;\n        }\n\
    \        if x % 17 == 0 {\n            sum += x;\n        }\n        if x % 19\
    \ == 0 {\n            sum += x;\n        }\n        if x % 23 == 0 {\n       \
    \     sum += x;\n        }\n        if x % 29 == 0 {\n            sum += x;\n\
    \        }\n        if x % 31 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 37 == 0 {\n            sum += x;\n        }\n        if x % 41 == 0\
    \ {\n            sum += x;\n        }\n        if x % 43 == 0 {\n            sum\
    \ += x;\n        }\n        if x % 47 == 0 {\n            sum += x;\n        }\n\
    \        if x % 53 == 0 {\n            sum += x;\n        }\n        if x % 59\
    \ == 0 {\n            sum += x;\n        }\n        if x % 61 == 0 {\n       \
    \     sum += x;\n        }\n        if x % 67 == 0 {\n            sum += x;\n\
    \        }\n        if x % 71 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 73 == 0 {\n            sum += x;\n        }\n        if x % 79 == 0\
    \ {\n            sum += x;\n        }\n        if x % 83 == 0 {\n            sum\
    \ += x;\n        }\n        if x % 89 == 0 {\n            sum += x;\n        }\n\
    \        if x % 97 == 0 {\n            sum += x;\n        }\n        if x % 101\
    \ == 0 {\n            sum += x;\n        }\n        if x % 103 == 0 {\n      \
    \      sum += x;\n        }\n        if x % 107 == 0 {\n            sum += x;\n\
    \        }\n        if x % 109 == 0 {\n            sum += x;\n        }\n    \
    \    if x % 113 == 0 {\n            sum += x;\n        }\n        if x % 117 ==\
    \ 0 {\n            sum += x;\n        }\n        if x % 121 == 0 {\n         \
    \   sum += x;\n        }\n        if x % 123 == 0 {\n            sum += x;\n \
    \       }\n        if x % 127 == 0 {\n            sum += x;\n        }\n     \
    \   if x % 131 == 0 {\n            sum += x;\n        }\n        if x % 137 ==\
    \ 0 {\n            sum += x;\n        }\n        if x % 139 == 0 {\n         \
    \   sum += x;\n        }\n        if x % 143 == 0 {\n            sum += \n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmppq0ybeo3.rs:134:3\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                \
    \                        - unclosed delimiter\n...\n7   |     for x in lst {\n\
    \    |                  - unclosed delimiter\n...\n119 |         if x % 143 ==\
    \ 0 {\n    |                         - this delimiter might not be properly closed...\n\
    120 |             sum += \n121 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n134 | }\n    |   ^\n\nerror: expected expression, found `}`\n\
    \   --> /tmp/tmppq0ybeo3.rs:121:1\n    |\n121 | }\n    | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n   --> /tmp/tmppq0ybeo3.rs:7:5\n    |\n4   |\
    \   fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |                          \
    \          ----- expected `isize` because of return type\n...\n7   | /     for\
    \ x in lst {\n8   | |         if x % 2 == 0 {\n9   | |             sum += x;\n\
    10  | |         }\n...   |\n133 | |     assert_eq!(candidate(vec![127, 97, 8192]),\
    \ 10);\n134 | | }\n    | |__^ expected `isize`, found `()`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for &i in lst {\n        if prime[i] {\n            sum +=\
    \ i;\n        }\n        for &j in &prime[0..i] {\n            prime[j] = false;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphdlorj5_.rs:7:9\n  |\n7 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0277]: the\
    \ type `[bool]` cannot be indexed by `bool`\n  --> /tmp/tmphdlorj5_.rs:12:13\n\
    \   |\n12 |             prime[j] = false;\n   |             ^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `bool`\n   = note: required because of the requirements\
    \ on the impl of `Index<bool>` for `Vec<bool>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphdlorj5_.rs:15:5\n   |\n4  | fn skjkasdkd(lst: Vec<isize>) -> isize\
    \ {\n   |                                  ----- expected `isize` because of return\
    \ type\n...\n15 |     sum\n   |     ^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n15 |     sum.try_into().unwrap()\n   |\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum:\
    \ isize = 0;\n    for num in lst {\n        if num > 0 {\n            if num %\
    \ 2 == 0 {\n                sum += num / 2;\n            } else {\n          \
    \      sum += num / 3;\n            }\n        }\n        if sum > max_prime {\n\
    \            max_prime = sum;\n        }\n        sum = 0;\n    }\n    max_prime\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `162`,\n right: `10`', /tmp/tmph4j0sku7.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut prime = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for x in lst {\n        if prime[x] {\n            sum +=\
    \ x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmp08vy8m9s.rs:8:12\n\
    \  |\n8 |         if prime[x] {\n  |            ^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    let mut sum =\
    \ 0;\n    for x in lst {\n        if x > largest {\n            largest = x;\n\
    \        }\n        if x % 2 == 0 {\n            sum += x;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `438`,\n right: `10`', /tmp/tmp8ub1bycp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for num in lst {\n        if num > max_prime {\n           \
    \ max_prime = num;\n        }\n    }\n    for num in lst {\n        if num % max_prime\
    \ == 0 {\n            sum_of_digits += num % max_prime;\n        }\n    }\n  \
    \  sum_of_digits\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmplwjtj57x.rs:12:16\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for num in lst {\n    |                ---\n  \
    \  |                |\n    |                `lst` moved due to this implicit call\
    \ to `.into_iter()`\n    |                help: consider borrowing to avoid moving\
    \ into the for loop: `&lst`\n...\n12  |     for num in lst {\n    |          \
    \      ^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `lst`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    let mut sum =\
    \ 0;\n    for el in lst {\n        if el > largest {\n            largest = el;\n\
    \        }\n    }\n    for el in lst {\n        if el == largest {\n         \
    \   sum += el;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpp3ms21zo.rs:12:15\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for el in lst {\n    |               ---\n    |\
    \               |\n    |               `lst` moved due to this implicit call to\
    \ `.into_iter()`\n    |               help: consider borrowing to avoid moving\
    \ into the for loop: `&lst`\n...\n12  |     for el in lst {\n    |           \
    \    ^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `lst`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = isize::MAX;\n    for x in lst\
    \ {\n        if x > largest {\n            largest = x;\n        }\n    }\n  \
    \  largest\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9223372036854775807`,\n right: `10`', /tmp/tmpyd67cnfq.rs:16:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            continue;\n\
    \        }\n        let mut prime_digit: isize = 0;\n        let mut prime: isize\
    \ = 0;\n        for d in &[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] {\n            if n % d == 0 {\n\
    \                prime = d;\n                prime_digit = n % d;\n          \
    \      break;\n            }\n        }\n        if prime > max_prime {\n    \
    \        max_prime = prime;\n            max_prime_digit = prime_digit;\n    \
    \    }\n    }\n    max_prime + max_prime_digit\n}\n\nfn main() {\n    let candidate\
    \ = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt_bi17ve.rs:15:25\n   |\n\
    15 |                 prime = d;\n   |                         ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |  \
    \               prime = *d;\n   |                         +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_of_digits:\
    \ isize = 0;\n    for n in lst {\n        if n % 2 == 0 {\n            max_prime\
    \ = n;\n        }\n    }\n    for n in lst {\n        if n % max_prime == 0 {\n\
    \            sum_of_digits += n % 10;\n        }\n    }\n    return sum_of_digits;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpuosc8u8w.rs:12:14\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for n in lst {\n    |              ---\n    | \
    \             |\n    |              `lst` moved due to this implicit call to `.into_iter()`\n\
    \    |              help: consider borrowing to avoid moving into the for loop:\
    \ `&lst`\n...\n12  |     for n in lst {\n    |              ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut sum_digits\
    \ = 0;\n    for num in lst {\n        if num > max_prime {\n            max_prime\
    \ = num;\n        }\n    }\n    for num in lst {\n        if num == max_prime\
    \ {\n            sum_digits += num;\n        }\n    }\n    return sum_digits;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpqngf7tqf.rs:12:16\n\
    \    |\n4   | fn skjkasdkd(lst: Vec<isize>) -> isize {\n    |              ---\
    \ move occurs because `lst` has type `Vec<isize>`, which does not implement the\
    \ `Copy` trait\n...\n7   |     for num in lst {\n    |                ---\n  \
    \  |                |\n    |                `lst` moved due to this implicit call\
    \ to `.into_iter()`\n    |                help: consider borrowing to avoid moving\
    \ into the for loop: `&lst`\n...\n12  |     for num in lst {\n    |          \
    \      ^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `lst`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = std::i32::MAX;\n    let mut sum\
    \ = 0;\n    for x in lst {\n        if x > largest {\n            largest = x;\n\
    \        }\n        if x % 2 == 0 {\n            sum += x;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpju9o9jti.rs:8:16\n  |\n8 |\
    \         if x > largest {\n  |                ^^^^^^^ expected `isize`, found\
    \ `i32`\n  |\nhelp: you can convert an `i32` to an `isize` and panic if the converted\
    \ value doesn't fit\n  |\n8 |         if x > largest.try_into().unwrap() {\n \
    \ |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpju9o9jti.rs:9:23\n  |\n9 |             largest = x;\n  |       \
    \                ^ expected `i32`, found `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut largest = lst[0];\n    for &i in lst {\n\
    \        if largest < i {\n            largest = i;\n        }\n    }\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if i % largest == 0 {\n          \
    \  sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate =\
    \ skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp16vfcy37.rs:6:9\n  |\n6 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    let mut sum_digits: isize = 0;\n    for &i in lst {\n      \
    \  if max_prime < i {\n            max_prime = i;\n            max_prime_digit\
    \ = 0;\n        }\n        if max_prime == i {\n            max_prime_digit +=\
    \ i;\n        }\n    }\n    sum_digits += max_prime_digit;\n    return sum_digits;\n\
    }\n\nfn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfh2yxk_2.rs:8:9\n  |\n8 |\
    \     for &i in lst {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut max_prime_digit:\
    \ isize = 0;\n    for num in lst {\n        let mut prime: isize = 1;\n      \
    \  let mut prime_digit: isize = 1;\n        while prime * prime <= num {\n   \
    \         if num % prime == 0 {\n                prime_digit += 1;\n         \
    \   }\n            prime += 1;\n        }\n        if prime > max_prime {\n  \
    \          max_prime = prime;\n            max_prime_digit = prime_digit;\n  \
    \      }\n    }\n    return max_prime + max_prime_digit;\n}\n\nfn main() {\n \
    \   let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `28`,\n right: `10`', /tmp/tmpto7r3hod.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749701
- exit_code: 101
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut max_prime: isize = 0;\n    let mut prime:\
    \ isize = 0;\n    for num in lst {\n        if num > max_prime {\n           \
    \ max_prime = num;\n        }\n        if num % prime == 0 {\n            max_prime\
    \ = num;\n        }\n        prime += num;\n    }\n    return max_prime;\n}\n\n\
    fn main() {\n    let candidate = skjkasdkd;\n    assert_eq!(candidate(vec![0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    \    assert_eq!(candidate(vec![1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4,\
    \ 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n    assert_eq!(candidate(vec![0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]), 11);\n    assert_eq!(candidate(vec![0,\
    \ 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0, 8, 1, 2, 1, 7]), 7);\n\
    \    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmp95nnv1vh.rs:11:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749701
- exit_code: 1
  program: "/// You are given a list of integers.\n/// You need to find the largest\
    \ prime value and return the sum of its digits.\n/// Examples:\nfn skjkasdkd(lst:\
    \ Vec<isize>) -> isize {\n    let mut primes = vec![true; lst.len()];\n    let\
    \ mut sum = 0;\n    for i in lst {\n        if primes[i] {\n            sum +=\
    \ i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = skjkasdkd;\n\
    \    assert_eq!(candidate(vec![0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]), 10);\n    assert_eq!(candidate(vec![1, 0, 1, 8, 2,\
    \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]), 25);\n    assert_eq!(candidate(vec![1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]), 13);\n   \
    \ assert_eq!(candidate(vec![0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),\
    \ 11);\n    assert_eq!(candidate(vec![0, 81, 12, 3, 1, 21]), 3);\n    assert_eq!(candidate(vec![0,\
    \ 8, 1, 2, 1, 7]), 7);\n    assert_eq!(candidate(vec![8191]), 19);\n    assert_eq!(candidate(vec![8191,\
    \ 123456, 127, 7]), 19);\n    assert_eq!(candidate(vec![127, 97, 8192]), 10);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[bool]` cannot be indexed by `isize`\n --> /tmp/tmps4qandxs.rs:8:12\n\
    \  |\n8 |         if primes[i] {\n  |            ^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[bool]>`\
    \ is not implemented for `isize`\n  = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749701
