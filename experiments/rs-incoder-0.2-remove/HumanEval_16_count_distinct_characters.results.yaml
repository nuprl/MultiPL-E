language: rs
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprq3zc__d.rs:3:5\n  |\n2 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    3 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    let mut distinct_characters = HashSet::new();\n    for c in string.chars()\
    \ {\n        distinct_characters.insert(c.to_lowercase());\n        distinct_characters.insert(c.to_uppercase());\n\
    \    }\n    distinct_characters.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp6lxgt0e0.rs:3:35\n  |\n3 |     let mut distinct_characters = HashSet::new();\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    let mut count = 0;\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            count += 1;\n        } else if c.is_uppercase() {\n         \
    \   count += 2;\n        } else {\n            count += 3;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `5`', /tmp/tmp0nwlfgbn.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprq3zc__d.rs:3:5\n  |\n2 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    3 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    let mut count = 0;\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            count += 1;\n        } else if c.is_uppercase() {\n         \
    \   count += 2;\n        } else {\n            count += 3;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `5`', /tmp/tmp0nwlfgbn.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    let mut counts = HashMap::new();\n    for c in string.chars() {\n\
    \        if let Some(count) = counts.entry(c).or_insert(0) {\n            *count\
    \ += 1;\n        }\n    }\n    counts.len()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpskqodyic.rs:3:22\n  |\n3 |     let mut counts = HashMap::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    string.chars().filter(|c| c.is_ascii_lowercase()).count()\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppwdl2i1u.rs:3:5\n  |\n2 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    3 |     string.chars().filter(|c| c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.chars().filter(|c|\
    \ c.is_ascii_lowercase()).count().try_into().unwrap()\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprq3zc__d.rs:3:5\n  |\n2 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    3 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprq3zc__d.rs:3:5\n  |\n2 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    3 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprq3zc__d.rs:3:5\n  |\n2 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    3 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    let mut char_count = HashMap::new();\n    for c in string.chars()\
    \ {\n        char_count.entry(c).or_insert(0) += 1;\n    }\n    char_count.len()\n\
    }\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpbpg0mm9a.rs:3:26\n  |\n3 |     let mut char_count = HashMap::new();\n\
    \  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider\
    \ importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0067]:\
    \ invalid left-hand side of assignment\n --> /tmp/tmpbpg0mm9a.rs:5:42\n  |\n5\
    \ |         char_count.entry(c).or_insert(0) += 1;\n  |         --------------------------------\
    \ ^^\n  |         |\n  |         cannot assign to this expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0067, E0433.\n\
    For more information about an error, try `rustc --explain E0067`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 101
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    let mut count = 0;\n    for c in string.chars() {\n        if c.is_lowercase()\
    \ {\n            count += 1;\n        } else if c.is_uppercase() {\n         \
    \   count += 2;\n        } else {\n            count += 3;\n        }\n    }\n\
    \    count\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `17`,\n right: `5`', /tmp/tmp0nwlfgbn.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    let mut counts = HashMap::new();\n    for c in string.chars() {\n\
    \        if let Some(count) = counts.entry(c).or_insert(0) {\n            *count\
    \ += 1;\n        }\n    }\n    counts.len()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n -->\
    \ /tmp/tmpskqodyic.rs:3:22\n  |\n3 |     let mut counts = HashMap::new();\n  |\
    \                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing\
    \ this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprq3zc__d.rs:3:5\n  |\n2 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    3 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    let mut distinct_characters = HashSet::new();\n    for c in string.chars()\
    \ {\n        distinct_characters.insert(c.to_lowercase());\n        distinct_characters.insert(c.to_uppercase());\n\
    \    }\n    distinct_characters.len()\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n -->\
    \ /tmp/tmp6lxgt0e0.rs:3:35\n  |\n3 |     let mut distinct_characters = HashSet::new();\n\
    \  |                                   ^^^^^^^ not found in this scope\n  |\n\
    help: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n\
    \  |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprq3zc__d.rs:3:5\n  |\n2 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    3 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    let mut counter = 0;\n    for c in string.chars() {\n        if\
    \ c.is_lowercase() {\n            counter += 1;\n        } else if c.is_uppercase()\
    \ {\n            counter += 2;\n        } else if c.is_digit() {\n           \
    \ counter += 4;\n        } else if c.is_punctuation() {\n            counter +=\
    \ 8;\n        } else if c.is_whitespace() {\n            counter += 16;\n    \
    \    } else {\n            counter += 32;\n        }\n    }\n    counter\n}\n\n\
    fn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp3ufq56ev.rs:9:21\n    |\n9   |         } else if c.is_digit()\
    \ {\n    |                     ^^^^^^^^- supplied 0 arguments\n    |         \
    \            |\n    |                     expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0599]: no method named `is_punctuation` found\
    \ for type `char` in the current scope\n  --> /tmp/tmp3ufq56ev.rs:11:21\n   |\n\
    11 |         } else if c.is_punctuation() {\n   |                     ^^^^^^^^^^^^^^\
    \ method not found in `char`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    let mut counter = 0;\n    for c in string.chars() {\n        if\
    \ c.is_lowercase() {\n            counter += 1;\n        } else if c.is_uppercase()\
    \ {\n            counter += 2;\n        } else if c.is_digit() {\n           \
    \ counter += 3;\n        } else if c.is_punctuation() {\n            counter +=\
    \ 4;\n        } else if c.is_whitespace() {\n            counter += 5;\n     \
    \   }\n    }\n    counter\n}\n\nfn main() {\n    let candidate = count_distinct_characters;\n\
    \    assert_eq!(candidate(String::from(\"\")), 0);\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 5);\n    assert_eq!(candidate(String::from(\"abcdecadeCADE\")), 5);\n\
    \    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")), 1);\n    assert_eq!(candidate(String::from(\"\
    Jerry jERRY JeRRRY\")), 5);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpgr_8l3ab.rs:9:21\n    |\n9   |         } else if c.is_digit()\
    \ {\n    |                     ^^^^^^^^- supplied 0 arguments\n    |         \
    \            |\n    |                     expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0599]: no method named `is_punctuation` found\
    \ for type `char` in the current scope\n  --> /tmp/tmpgr_8l3ab.rs:11:21\n   |\n\
    11 |         } else if c.is_punctuation() {\n   |                     ^^^^^^^^^^^^^^\
    \ method not found in `char`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0061, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    string.chars().distinct().count()\n}\n\nfn main() {\n    let candidate\
    \ = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\")),\
    \ 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `distinct` found for struct `Chars` in the\
    \ current scope\n --> /tmp/tmpogfgprez.rs:3:20\n  |\n3 |     string.chars().distinct().count()\n\
    \  |                    ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659805708
- exit_code: 1
  program: "/// Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\nfn count_distinct_characters(string: String) ->\
    \ isize {\n    string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n}\n\
    \nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
    \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
    abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\"\
    )), 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprq3zc__d.rs:3:5\n  |\n2 |\
    \ fn count_distinct_characters(string: String) -> isize {\n  |               \
    \                                  ----- expected `isize` because of return type\n\
    3 |     string.chars().filter(|c| !c.is_ascii_lowercase()).count()\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n  |\n3 |     string.chars().filter(|c|\
    \ !c.is_ascii_lowercase()).count().try_into().unwrap()\n  |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805708
