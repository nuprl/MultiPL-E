name: HumanEval_59_largest_prime_factor
language: rs
prompt: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  fn largest_prime_factor(n: isize) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
  \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n  \
  \  assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n}\n"
completions: ["    let mut i = 2;\n    let mut prime_factor = 1;\n    while i * i\
    \ <= n {\n        if n % i == 0 {\n            prime_factor = i;\n           \
    \ i += 1;\n        }\n        else {\n            i += 1;\n        }\n    }\n\
    \    prime_factor", "    let mut i = 2;\n    while i * i <= n {\n        if n\
    \ % i == 0 {\n            return i;\n        }\n        i += 1;\n    }\n    n",
  "    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n         \
    \   return i;\n        }\n        i += 1;\n    }\n    n", "    let mut i = 2;\n\
    \    let mut factor = 1;\n    while i <= n {\n        if n % i == 0 {\n      \
    \      factor *= i;\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factor", "    let mut i = 2;\n    while i * i <= n {\n        if n % i ==\
    \ 0 {\n            return i;\n        }\n        i += 1;\n    }\n    n", "   \
    \ let mut i = 2;\n    let mut prime_factor = 1;\n    while i * i <= n {\n    \
    \    if n % i == 0 {\n            prime_factor = i;\n            i += 1;\n   \
    \     } else {\n            i += 1;\n        }\n    }\n    prime_factor", "  \
    \  let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n         \
    \   return i;\n        }\n        i += 1;\n    }\n    n", "    let mut i = 2;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i += 1;\n    }\n    n", "    let mut i = 2;\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return i;\n        }\n        i +=\
    \ 1;\n    }\n    n", "    let mut i = 2;\n    while i * i <= n {\n        if n\
    \ % i == 0 {\n            return i;\n        }\n        i += 1;\n    }\n    n",
  "    let mut i = 2;\n    let mut prime_factor = 1;\n    while i * i <= n {\n   \
    \     if n % i == 0 {\n            prime_factor = i;\n            i += 1;\n  \
    \      }\n        else {\n            i += 1;\n        }\n    }\n    prime_factor",
  "    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n         \
    \   i += 1;\n        } else {\n            i -= 1;\n        }\n    }\n    i",
  "    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n         \
    \   i += 1;\n        } else {\n            i -= 1;\n        }\n    }\n    i",
  "    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n         \
    \   return i;\n        }\n        i += 1;\n    }\n    n", "    let mut prime_factors\
    \ = vec![1usize; n];\n    let mut i = 2;\n    while prime_factors[i] < n {\n \
    \       if n % prime_factors[i] == 0 {\n            i += 1;\n        } else {\n\
    \            prime_factors[i] = n;\n            break;\n        }\n    }\n   \
    \ prime_factors[i]", "    let mut i = 2;\n    while i * i <= n {\n        if n\
    \ % i == 0 {\n            return i;\n        }\n        i += 1;\n    }\n    n",
  "    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n         \
    \   return i;\n        }\n        i += 1;\n    }\n    n", "    let mut i = 2;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i += 1;\n    }\n    n", "    let mut i = 2;\n    let mut max_factor\
    \ = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            max_factor\
    \ = i;\n        }\n        i += 1;\n    }\n    max_factor", "    let mut i = 2;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return i;\n    \
    \    }\n        i += 1;\n    }\n    n"]
stop_tokens:
- "\n}"
