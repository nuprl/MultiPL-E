name: HumanEval_104_unique_digits
language: rs
prompt: "/// Given a list of positive integers x. return a sorted list of all \n///\
  \ elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
  \ in increasing order.\n/// For example:\nfn unique_digits(x: Vec<isize>) -> Vec<isize>\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
  \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
  \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
  \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
  }\n"
completions: ["    let mut result = vec![];\n    for &i in x {\n        if i % 2 ==\
    \ 0 {\n            result.push(i);\n        }\n    }\n    result.sort_unstable();\n\
    \    result", "    let mut result = Vec::new();\n    let mut digits = x.clone();\n\
    \    let mut evens = Vec::new();\n    \n    while !digits.is_empty() {\n     \
    \   let digit = digits.remove(0).unwrap();\n        if digit % 2 == 0 {\n    \
    \        evens.push(digit);\n        } else {\n            result.push(digit);\n\
    \        }\n    }\n    \n    evens.sort_unstable();\n    result.extend(evens);\n\
    \    result", "    let mut result = Vec::new();\n    for i in x.iter() {\n   \
    \     if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result", "    let mut result = vec![];\n    for i in x {\n        if i %\
    \ 2 == 0 {\n            result.push(i);\n        }\n    }\n    result.sort_unstable();\n\
    \    result", "    let mut result = Vec::new();\n    let mut digits = x.iter().map(|x|\
    \ x.to_string()).collect::<Vec<_>>();\n    let mut even = true;\n    for d in\
    \ digits {\n        if even == true {\n            result.push(d);\n        }\n\
    \        if d.chars().filter(|&x| x != '0').count() == 0 {\n            even =\
    \ false;\n        }\n    }\n    result", "    let mut result = vec![];\n    for\
    \ i in x {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result", "    let mut result = vec![];\n    for\
    \ &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result", "    let mut result = vec![];\n    for\
    \ &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n\
    \    }\n    result.sort_unstable();\n    result", "    let mut result = Vec::new();\n\
    \    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n   \
    \     }\n    }\n    result.sort();\n    result", "    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n            i += 1;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    result", "    let mut result = vec![];\n \
    \   for i in x.iter() {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result", "    let mut result\
    \ = vec![];\n    for i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort();\n    result", "    let mut result = vec![];\n\
    \    for i in x {\n        if i % 2 == 0 {\n            result.push(i);\n    \
    \    }\n    }\n    result.sort_unstable();\n    result", "    let mut result =\
    \ vec![];\n    for i in x {\n        if i % 2 == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result.sort_unstable();\n    result", "    let mut result\
    \ = vec![];\n    for n in x {\n        if n % 2 == 0 {\n            result.push(n);\n\
    \        }\n    }\n    result.sort();\n    result", "    let mut result = vec![];\n\
    \    for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n   \
    \     }\n    }\n    result.sort_unstable();\n    result", "    let mut result\
    \ = vec![];\n    for d in x.iter() {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort();\n    result", "    let mut result = vec![];\n\
    \    let mut digits = x.clone();\n    let mut even = false;\n    while !digits.is_empty()\
    \ {\n        let digit = digits.remove(0).unwrap();\n        if digit % 2 == 0\
    \ {\n            even = true;\n        }\n        if even {\n            result.push(digit);\n\
    \        }\n    }\n    result", "    let mut result = Vec::new();\n    for &i\
    \ in x {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n  \
    \  }\n    result.sort();\n    result", "    let mut result = vec![];\n    for\
    \ i in x {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n\
    \    }\n    result.sort();\n    result"]
stop_tokens:
- "\n}"
