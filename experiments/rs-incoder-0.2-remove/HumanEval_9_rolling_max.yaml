name: HumanEval_9_rolling_max
language: rs
prompt: "/// From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n/// in the sequence.\nfn rolling_max(numbers: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
  \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3,\
  \ 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
completions: ["    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n > max_value {\n            max_value = n;\n\
    \        }\n    }\n    for n in numbers {\n        if n == max_value {\n     \
    \       result.push(n);\n        }\n    }\n    result", "    let mut result =\
    \ Vec::new();\n    let mut max_number = numbers[0];\n    let mut max_index = -1;\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n            max_index = result.len();\n        }\n        result.push(number);\n\
    \    }\n    result.push(max_number);\n    result.push(max_index);\n    result",
  "    let mut max_number: isize = 0;\n    let mut max_numbers: Vec<isize> = Vec::new();\n\
    \    for n in numbers {\n        if n > max_number {\n            max_number =\
    \ n;\n            max_numbers.clear();\n        }\n        if n == max_number\
    \ {\n            max_numbers.push(n);\n        }\n    }\n    max_numbers", " \
    \   let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    max_numbers",
  "    let mut max_number: isize = 0;\n    let mut max_numbers: Vec<isize> = Vec::new();\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n            max_numbers.clear();\n        }\n        if max_numbers.is_empty()\
    \ {\n            max_numbers.push(*number);\n        } else {\n            max_numbers.push(*number);\n\
    \            if max_number > max_numbers.last() {\n                max_numbers.clear();\n\
    \            }\n        }\n    }\n    max_numbers", "    let mut max_numbers =\
    \ Vec::new();\n    let mut max_number = numbers[0];\n    for number in numbers\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \    }\n    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len()\
    \ {\n        let mut max_number = numbers[i];\n        for number in numbers[i..]\
    \ {\n            if number > max_number {\n                max_number = number;\n\
    \            }\n        }\n        max_numbers.push(max_number);\n    }\n    max_numbers",
  "    let mut result = Vec::new();\n    let mut max_number = numbers[0];\n    let\
    \ mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ >= max_number {\n            result.push(max_number);\n            max_number\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    result.push(max_number);\n\
    \    result", "    let mut max_numbers = Vec::new();\n    let mut current_max\
    \ = numbers[0];\n    for number in numbers.iter() {\n        if number > current_max\
    \ {\n            max_numbers.push(current_max);\n            current_max = number;\n\
    \        } else {\n            current_max = number;\n        }\n    }\n    max_numbers.push(current_max);\n\
    \    max_numbers", "    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers", " \
    \   let mut max_so_far = numbers[0];\n    let mut max_so_far_index = 0;\n    for\
    \ n in numbers {\n        if n > max_so_far {\n            max_so_far = n;\n \
    \           max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_max\
    \ = [max_so_far];\n    for i in 1..numbers.len() {\n        let mut max_so_far_rolling_max_i\
    \ = [max_so_far];\n        for n in max_so_far_rolling_max {\n            max_so_far_rolling_max_i.push(n);\n\
    \        }\n        max_so_far_rolling_max = max_so_far_rolling_max_i;\n    }\n\
    \    max_so_far_rolling_max", "    let mut max_number: isize = 0;\n    let mut\
    \ max_numbers: Vec<isize> = Vec::new();\n    for n in numbers {\n        if n\
    \ > max_number {\n            max_number = n;\n            max_numbers.clear();\n\
    \        }\n        if n == max_number {\n            max_numbers.push(n);\n \
    \       }\n    }\n    max_numbers", "    let mut result = Vec::new();\n    let\
    \ mut max_value = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers\
    \ {\n        if n > max_value {\n            max_value = n;\n            max_index\
    \ = result.len();\n        }\n        result.push(n);\n    }\n    result.push(max_value);\n\
    \    result.push(max_index);\n    result", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for number in numbers {\n        if\
    \ number > max_number {\n            max_numbers.push(max_number);\n         \
    \   max_number = number;\n        } else {\n            max_number = number;\n\
    \        }\n    }\n    max_numbers.push(max_number);\n    max_numbers", "    let\
    \ mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n    for\
    \ i in 1..numbers.len() {\n        if numbers[i] > max_number {\n            max_number\
    \ = numbers[i];\n        }\n    }\n    max_numbers.push(max_number);\n    for\
    \ i in 1..numbers.len() {\n        if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers", "    let mut max = numbers[0];\n    let mut\
    \ max_index = 0;\n    for &n in numbers {\n        if n > max {\n            max\
    \ = n;\n            max_index = n;\n        }\n    }\n    let mut max_rolling_numbers\
    \ = Vec::new();\n    for i in 0..numbers.len() {\n        if numbers[i] > max\
    \ {\n            max = numbers[i];\n            max_index = i;\n        }\n  \
    \  }\n    for i in 0..numbers.len() {\n        if numbers[i] > max {\n       \
    \     max = numbers[i];\n            max_index = i;\n        }\n    }\n    for\
    \ i in 0..numbers.len() {\n        if numbers[i] > max {\n            max = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 0..numbers.len() {\n\
    \        if numbers[i] > max {\n            max = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i] > max {\n \
    \           max = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n          \
    \  max_index = i;\n        }\n    }\n    for i in 0..numbers.len() {\n       \
    \ if numbers[i] > max {\n            max = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i] > max {\n \
    \           max = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n          \
    \  max_index = i;\n        }\n    }\n    for i in 0..numbers.len() {\n       \
    \ if numbers[i] > max {\n            max = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i] > max {\n \
    \           max = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    for i in 0..",
  "    let mut max_so_far = numbers[0];\n    let mut max_so_far_index = 0;\n    let\
    \ mut max_so_far_rolling_max = 0;\n    for &n in numbers {\n        if n > max_so_far\
    \ {\n            max_so_far = n;\n            max_so_far_index = numbers.iter().position(|&n|\
    \ n == max_so_far).unwrap();\n            max_so_far_rolling_max = max_so_far;\n\
    \        }\n        max_so_far_rolling_max = max_so_far_rolling_max.max(&n);\n\
    \    }\n    let mut max_so_far_rolling_max_index = numbers.iter().position(|&n|\
    \ n == max_so_far_rolling_max).unwrap();\n    let mut max_so_far_rolling_max_rolling_max\
    \ = 0;\n    for &n in numbers {\n        if n == max_so_far_rolling_max {\n  \
    \          max_so_far_rolling_max_rolling_max = max_so_far_rolling_max;\n    \
    \    }\n        max_so_far_rolling_max_rolling_max = max_so_far_rolling_max_rolling_max.max(&n);\n\
    \    }\n    let mut max_so_far_rolling_max_rolling_max_index = numbers.iter().position(|&n|\
    \ n == max_so_far_rolling_max_rolling_max).unwrap();\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for &n in numbers {\n        if n == max_so_far_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max = max_so_far_rolling_max_rolling_max;\n\
    \        }\n        max_so_far_rolling_max_rolling_max_rolling_max = max_so_far_rolling_max_rolling_max_rolling_max.max(&n);\n\
    \    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index = numbers.iter().position(|&n|\
    \ n == max_so_far_rolling_max_rolling_max_rolling_max).unwrap();\n    let mut\
    \ max_so_far_rolling_max_rolling_max_rolling_max_rolling_max = 0;\n    for &n\
    \ in numbers {\n        if n == max_so_far_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max =\
    \ max_so_far_rolling_max_rolling_max_rolling_max;\n        }\n        max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max_rolling_max_rolling_max.max(&n);\n    }",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_numbers.push(max_number);\n\
    \            max_number = number;\n        } else {\n            max_number =\
    \ number;\n        }\n    }\n    max_numbers.push(max_number);\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for i in\
    \ 1..numbers.len() {\n        let mut max_number = numbers[i];\n        for number\
    \ in numbers[i..] {\n            if number > max_number {\n                max_number\
    \ = number;\n            }\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers", "    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_element {\n\
    \            max_element = number;\n            max_index = number;\n        }\n\
    \    }\n    let mut max_elements: Vec<isize> = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] > max_element {\n            max_elements.push(numbers[i]);\n\
    \        }\n    }\n    max_elements", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for number in numbers {\n        if\
    \ number > max_number {\n            max_number = number;\n        }\n    }\n\
    \    max_numbers.push(max_number);\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_numbers.push(number);\n        }\n    }\n  \
    \  max_numbers"]
stop_tokens:
- "\n}"
