name: HumanEval_9_rolling_max
language: rs
prompt: "/// From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n/// in the sequence.\nfn rolling_max(numbers: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
  \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3,\
  \ 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
completions: ["    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n > max_value {\n            max_value = n;\n\
    \        }\n    }\n    for n in numbers {\n        if n == max_value {\n     \
    \       result.push(n);\n        }\n    }\n    result", "    let mut result =\
    \ Vec::new();\n    let mut max_number = numbers[0];\n    let mut max_index = -1;\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n            max_index = result.len();\n        }\n        result.push(number);\n\
    \    }\n    result.push(max_number);\n    result.push(max_index);\n    result",
  "    let mut max_number: isize = 0;\n    let mut max_numbers: Vec<isize> = Vec::new();\n\
    \    for n in numbers {\n        if n > max_number {\n            max_number =\
    \ n;\n            max_numbers.clear();\n        }\n        if n == max_number\
    \ {\n            max_numbers.push(n);\n        }\n    }\n    max_numbers", " \
    \   let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    max_numbers",
  "    let mut max_number: isize = 0;\n    let mut max_numbers: Vec<isize> = Vec::new();\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n            max_numbers.clear();\n        }\n        if max_numbers.is_empty()\
    \ {\n            max_numbers.push(*number);\n        } else {\n            max_numbers.push(*number);\n\
    \            if max_number > max_numbers.last() {\n                max_numbers.clear();\n\
    \            }\n        }\n    }\n    max_numbers", "    let mut max_numbers =\
    \ Vec::new();\n    let mut max_number = numbers[0];\n    for number in numbers\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \    }\n    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len()\
    \ {\n        let mut max_number = numbers[i];\n        for number in numbers[i..]\
    \ {\n            if number > max_number {\n                max_number = number;\n\
    \            }\n        }\n        max_numbers.push(max_number);\n    }\n    max_numbers",
  "    let mut result = Vec::new();\n    let mut max_number = numbers[0];\n    let\
    \ mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ >= max_number {\n            result.push(max_number);\n            max_number\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    result.push(max_number);\n\
    \    result", "    let mut max_numbers = Vec::new();\n    let mut current_max\
    \ = numbers[0];\n    for number in numbers.iter() {\n        if number > current_max\
    \ {\n            max_numbers.push(current_max);\n            current_max = number;\n\
    \        } else {\n            current_max = number;\n        }\n    }\n    max_numbers.push(current_max);\n\
    \    max_numbers", "    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers", " \
    \   let mut max_so_far = numbers[0];\n    let mut max_so_far_index = 0;\n    for\
    \ n in numbers {\n        if n > max_so_far {\n            max_so_far = n;\n \
    \           max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_max\
    \ = [max_so_far];\n    for i in 1..numbers.len() {\n        let mut max_so_far_rolling_max_i\
    \ = [max_so_far];\n        for n in max_so_far_rolling_max {\n            max_so_far_rolling_max_i.push(n);\n\
    \        }\n        max_so_far_rolling_max = max_so_far_rolling_max_i;\n    }\n\
    \    max_so_far_rolling_max", "    let mut max_number: isize = 0;\n    let mut\
    \ max_numbers: Vec<isize> = Vec::new();\n    for n in numbers {\n        if n\
    \ > max_number {\n            max_number = n;\n            max_numbers.clear();\n\
    \        }\n        if n == max_number {\n            max_numbers.push(n);\n \
    \       }\n    }\n    max_numbers", "    let mut result = Vec::new();\n    let\
    \ mut max_value = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers\
    \ {\n        if n > max_value {\n            max_value = n;\n            max_index\
    \ = result.len();\n        }\n        result.push(n);\n    }\n    result.push(max_value);\n\
    \    result.push(max_index);\n    result", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for number in numbers {\n        if\
    \ number > max_number {\n            max_numbers.push(max_number);\n         \
    \   max_number = number;\n        } else {\n            max_number = number;\n\
    \        }\n    }\n    max_numbers.push(max_number);\n    max_numbers", "    let\
    \ mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n    for\
    \ i in 1..numbers.len() {\n        if numbers[i] > max_number {\n            max_number\
    \ = numbers[i];\n        }\n    }\n    max_numbers.push(max_number);\n    for\
    \ i in 1..numbers.len() {\n        if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers", "    let mut max = numbers[0];\n    let mut\
    \ max_index = 0;\n    for &n in numbers {\n        if n > max {\n            max\
    \ = n;\n            max_index = n;\n        }\n    }\n    let mut max_rolling_numbers\
    \ = Vec::new();\n    for i in 0..numbers.len() {\n        if numbers[i] > max\
    \ {\n            max = numbers[i];\n            max_index = i;\n        }\n  \
    \  }\n    for i in 0..numbers.len() {\n        if numbers[i] > max {\n       \
    \     max = numbers[i];\n            max_index = i;\n        }\n    }\n    for\
    \ i in 0..numbers.len() {\n        if numbers[i] > max {\n            max = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 0..numbers.len() {\n\
    \        if numbers[i] > max {\n            max = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i] > max {\n \
    \           max = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n          \
    \  max_index = i;\n        }\n    }\n    for i in 0..numbers.len() {\n       \
    \ if numbers[i] > max {\n            max = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i] > max {\n \
    \           max = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] > max {\n            max = numbers[i];\n          \
    \  max_index = i;\n        }\n    }\n    for i in 0..numbers.len() {\n       \
    \ if numbers[i] > max {\n            max = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max {\n            max = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    for i in 0..numbers.len() {\n        if numbers[i] > max {\n \
    \           max = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] > max {\n            max\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    for i in 0..",
  "    let mut max_so_far = numbers[0];\n    let mut max_so_far_index = 0;\n    let\
    \ mut max_so_far_rolling_max = 0;\n    for &n in numbers {\n        if n > max_so_far\
    \ {\n            max_so_far = n;\n            max_so_far_index = numbers.iter().position(|&n|\
    \ n == max_so_far).unwrap();\n            max_so_far_rolling_max = max_so_far;\n\
    \        }\n        max_so_far_rolling_max = max_so_far_rolling_max.max(&n);\n\
    \    }\n    let mut max_so_far_rolling_max_index = numbers.iter().position(|&n|\
    \ n == max_so_far_rolling_max).unwrap();\n    let mut max_so_far_rolling_max_rolling_max\
    \ = 0;\n    for &n in numbers {\n        if n == max_so_far_rolling_max {\n  \
    \          max_so_far_rolling_max_rolling_max = max_so_far_rolling_max;\n    \
    \    }\n        max_so_far_rolling_max_rolling_max = max_so_far_rolling_max_rolling_max.max(&n);\n\
    \    }\n    let mut max_so_far_rolling_max_rolling_max_index = numbers.iter().position(|&n|\
    \ n == max_so_far_rolling_max_rolling_max).unwrap();\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for &n in numbers {\n        if n == max_so_far_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max = max_so_far_rolling_max_rolling_max;\n\
    \        }\n        max_so_far_rolling_max_rolling_max_rolling_max = max_so_far_rolling_max_rolling_max_rolling_max.max(&n);\n\
    \    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index = numbers.iter().position(|&n|\
    \ n == max_so_far_rolling_max_rolling_max_rolling_max).unwrap();\n    let mut\
    \ max_so_far_rolling_max_rolling_max_rolling_max_rolling_max = 0;\n    for &n\
    \ in numbers {\n        if n == max_so_far_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max =\
    \ max_so_far_rolling_max_rolling_max_rolling_max;\n        }\n        max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = max_so_far_rolling_max_rolling_max_rolling_max_rolling_max.max(&n);\n    }",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_numbers.push(max_number);\n\
    \            max_number = number;\n        } else {\n            max_number =\
    \ number;\n        }\n    }\n    max_numbers.push(max_number);\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for i in\
    \ 1..numbers.len() {\n        let mut max_number = numbers[i];\n        for number\
    \ in numbers[i..] {\n            if number > max_number {\n                max_number\
    \ = number;\n            }\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers", "    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_element {\n\
    \            max_element = number;\n            max_index = number;\n        }\n\
    \    }\n    let mut max_elements: Vec<isize> = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] > max_element {\n            max_elements.push(numbers[i]);\n\
    \        }\n    }\n    max_elements", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for number in numbers {\n        if\
    \ number > max_number {\n            max_number = number;\n        }\n    }\n\
    \    max_numbers.push(max_number);\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_numbers.push(number);\n        }\n    }\n  \
    \  max_numbers", "    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_numbers.push(max_number);\n\
    \            max_numbers.push(numbers[i]);\n        } else {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers.reverse();\n    max_numbers.insert(0, max_number);\n\
    \    max_numbers", "    let mut max_so_far = numbers[0];\n    let mut max_so_far_so_far\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_so_far {\n\
    \            max_so_far = number;\n        }\n        if number > max_so_far_so_far\
    \ {\n            max_so_far_so_far = number;\n        }\n    }\n    let mut max_so_far_so_far_so_far\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_so_far_so_far\
    \ {\n            max_so_far_so_far = number;\n        }\n        if number > max_so_far_so_far_so_far\
    \ {\n            max_so_far_so_far_so_far = number;\n        }\n        if number\
    \ > max_so_far_so_far_so_far_so_far {\n            max_so_far_so_far_so_far_so_far\
    \ = number;\n        }\n    }\n    let mut max_so_far_so_far_so_far_so_far = numbers[0];\n\
    \    for number in numbers {\n        if number > max_so_far_so_far_so_far {\n\
    \            max_so_far_so_far_so_far_so_far = number;\n        }\n        if\
    \ number > max_so_far_so_far_so_far_so_far {\n            max_so_far_so_far_so_far_so_far_so_far\
    \ = number;\n        }\n        if number > max_so_far_so_far_so_far_so_far_so_far\
    \ {\n            max_so_far_so_far_so_far_so_far_so_far_so_far = number;\n   \
    \     }\n    }\n    let mut max_so_far_so_far_so_far_so_far_so_far = numbers[0];\n\
    \    for number in numbers {\n        if number > max_so_far_so_far_so_far_so_far\
    \ {\n            max_so_far_so_far_so_far_so_far_so_far_so_far = number;\n   \
    \     }\n        if number > max_so_far_so_far_so_far_so_far_so_far {\n      \
    \      max_so_far_so_far_so_far_so_far_so_far_so_far_so_far = number;\n      \
    \  }\n        if number > max_so_far_so_far_so_far_so_far_so_far_so_far {\n  \
    \          max_so_far_so_far_so_far_so_far_so_far_so_far_so_far_so_far = number;\n\
    \        }\n    }\n    let mu", "    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut max_so_far = numbers[0];\n \
    \   let mut max_so_far_index = 0;\n    for number in numbers.iter().rev() {\n\
    \        if number > max_so_far {\n            max_so_far = number;\n        \
    \    max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = max_so_far_index;\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_value\
    \ {\n            max_so_far_rolling_max_value = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_index = max_so_far_index;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_value\
    \ {\n            max_so_far_rolling_max_value = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_index = max_so_far_index;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_value\
    \ {\n            max_so_far_rolling_max_value = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_index = max_so_far_index;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_value\
    \ {\n            max_so_far_rolling_max_value = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_index = max_so_far_index;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_value\
    \ {\n            max_so_far_rolling_max_value = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value\
    \ = max_so_far;\n    let mut max_so_far_rolling_max_index = max_so_far", "   \
    \ let mut result = Vec::new();\n    let mut max_value = numbers[0];\n    let mut\
    \ max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i] > max_value\
    \ {\n            max_value = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i] > max_value\
    \ {\n            result.push(max_index);\n        }\n    }\n    result", "   \
    \ let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n  \
    \  for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n       \
    \     max_number = numbers[i];\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers", " \
    \   let mut max_so_far = numbers[0];\n    let mut max_so_far_index = 0;\n    for\
    \ number in numbers.iter().rev() {\n        if number > max_so_far {\n       \
    \     max_so_far = number;\n            max_so_far_index = numbers.len() - 1;\n\
    \        }\n    }\n    vec![max_so_far, max_so_far_index]", "    let mut max_so_far\
    \ = numbers[0];\n    let mut max_so_far_index = 0;\n    for n in numbers {\n \
    \       if n > max_so_far {\n            max_so_far = n;\n            max_so_far_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_max = [max_so_far];\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_so_far {\n     \
    \       max_so_far_rolling_max.push(numbers[i]);\n        }\n    }\n    max_so_far_rolling_max",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n        max_numbers.push(max_number);\n    }\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers.iter().rev() {\n        if number > max_number {\n \
    \           max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers", " \
    \   let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n\
    \    let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for number in numbers {\n        if\
    \ number > max_number {\n            max_numbers.push(max_number);\n         \
    \   max_number = number;\n        } else {\n            max_number = number;\n\
    \        }\n    }\n    max_numbers.push(max_number);\n    max_numbers", "    let\
    \ mut result = Vec::new();\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for i in 1..numbers.len() {\n        if numbers[i] > max_value {\n\
    \            max_value = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    for i in 0..numbers.len() {\n        if numbers[i] > max_value {\n\
    \            result.push(max_index);\n            max_value = numbers[i];\n  \
    \          max_index = i;\n        }\n    }\n    result", "    let mut max_numbers\
    \ = Vec::new();\n    let mut max_number = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \        }\n        max_numbers.push(max_number);\n    }\n    max_numbers", " \
    \   let mut max_value = numbers[0];\n    let mut max_pos = 0;\n    for pos in\
    \ 1..numbers.len() {\n        if numbers[pos] > max_value {\n            max_value\
    \ = numbers[pos];\n            max_pos = pos;\n        }\n    }\n    vec![max_value,\
    \ max_pos]", "    let mut max_number: isize = 0;\n    let mut max_numbers: Vec<isize>\
    \ = Vec::new();\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_numbers.clear();\n        }\n\
    \        if number == max_number {\n            max_numbers.push(number);\n  \
    \      }\n    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n  \
    \  let mut max_number = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut result = Vec::new();\n    let\
    \ mut max_value = numbers[0];\n    for value in numbers {\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    for value\
    \ in numbers {\n        if value == max_value {\n            result.push(value);\n\
    \        }\n    }\n    result", "    let mut max_number: isize = 0;\n    let mut\
    \ max_index: usize = 0;\n    for n in numbers {\n        if n > max_number {\n\
    \            max_number = n;\n            max_index = n;\n        }\n    }\n \
    \   let mut max_numbers = Vec::new();\n    for i in 0..numbers.len() {\n     \
    \   if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers", "    let mut max_so_far = numbers[0];\n \
    \   let mut max_so_far_index = 0;\n    let mut max_so_far_rolling_max = 0;\n \
    \   for number in numbers.iter().rev() {\n        if number > max_so_far {\n \
    \           max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max\
    \ = number;\n        }\n    }\n    vec![max_so_far_rolling_max, max_so_far, max_so_far_index]",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers.reverse();\n    max_numbers", "    let mut\
    \ max_so_far = numbers[0];\n    let mut max_so_far_iter = numbers.iter().cloned().rev().take(numbers.len()).rev();\n\
    \    let mut max_so_far_iter = max_so_far_iter.map(|x| {\n        if x > max_so_far\
    \ {\n            max_so_far = x;\n        }\n        x\n    });\n    max_so_far_iter.for_each(|x|\
    \ {\n        if x > max_so_far {\n            max_so_far = x;\n        }\n   \
    \ });\n    max_so_far_iter", "    let mut max_numbers = Vec::new();\n    let mut\
    \ max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers", "    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    let mut max_value = numbers[0];\n\
    \    for &n in numbers {\n        if n > max_number {\n            max_number\
    \ = n;\n            max_index = -1;\n            max_value = n;\n        }\n \
    \       if n == max_number {\n            result.push(max_value);\n          \
    \  max_index = result.len() - 1;\n            max_value = n;\n        }\n    }\n\
    \    result", "    let mut max_element: isize = 0;\n    let mut max_index: usize\
    \ = 0;\n    for index in 0..numbers.len() {\n        if numbers[index] > max_element\
    \ {\n            max_element = numbers[index];\n            max_index = index;\n\
    \        }\n    }\n    vec![max_element]", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for number in numbers {\n        if\
    \ number > max_number {\n            max_number = number;\n        }\n    }\n\
    \    max_numbers.push(max_number);\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_numbers.push(number);\n        }\n    }\n  \
    \  max_numbers", "    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_element {\n         \
    \   max_element = n;\n            max_index = n;\n        }\n    }\n    let mut\
    \ max_elements = Vec::new();\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n        if i == max_index {\n            max_elements.push(max_element);\n\
    \        }\n    }\n    max_elements", "    let mut max_element: isize = 0;\n \
    \   let mut max_index: usize = 0;\n    for index in 0..numbers.len() {\n     \
    \   if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    vec![max_element]", " \
    \   let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers", " \
    \   let mut result = Vec::new();\n    let mut max_number = numbers[0];\n    let\
    \ mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if i == max_index\
    \ {\n            result.push(max_number);\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    result", "    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_number {\n            max_number = number;\n        }\n\
    \    }\n    max_numbers.push(max_number);\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    let mut max_index = -1;\n    for i\
    \ in 1..numbers.len() {\n        if numbers[i] > max_number {\n            max_number\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] >= max_number {\n    \
    \        max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers.reverse();\n\
    \    max_numbers", "    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut result = Vec::new();\n    let\
    \ mut max_value = numbers[0];\n    for number in numbers.iter().rev() {\n    \
    \    if number > max_value {\n            max_value = number;\n        }\n   \
    \ }\n    for number in numbers.iter().rev() {\n        if number > max_value {\n\
    \            result.push(number);\n        }\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for &i in numbers {\n        if i > max_value {\n            max_value\
    \ = i;\n            max_index = i;\n        }\n    }\n    for i in numbers {\n\
    \        if i == max_value {\n            result.push(max_index);\n        }\n\
    \    }\n    result", "    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers.reverse();\n\
    \    max_numbers", "    let mut max = numbers[0];\n    let mut max_index = -1;\n\
    \    for n in numbers {\n        if n > max {\n            max = n;\n        \
    \    max_index = n;\n        }\n    }\n    vec![max]", "    let mut result = Vec::new();\n\
    \    let mut max_value = numbers[0];\n    let mut max_index = -1;\n    for i in\
    \ 1..numbers.len() {\n        if numbers[i] > max_value {\n            max_value\
    \ = numbers[i];\n            max_index = i;\n        }\n    }\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] >= max_value {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    for i in max_index..numbers.len() {\n        result.push(numbers[i]);\n\
    \    }\n    result", "    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = number;\n        }\n\
    \    }\n    let mut max_numbers = Vec::new();\n    for i in 0..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n     \
    \   if numbers[i] > max_number {\n            max_number = numbers[i];\n     \
    \   }\n    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers", "    let mut max = numbers[0];\n    let mut\
    \ max_idx = 1;\n    for &n in numbers {\n        if n > max {\n            max\
    \ = n;\n            max_idx = 1;\n        }\n        if n == max {\n         \
    \   max_idx += 1;\n        }\n    }\n    let mut max_idx = max_idx - 1;\n    let\
    \ mut max_value = max;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_value\
    \ = max_value - 1;\n    let mut max_value = max_value - 1;\n    let mut max_",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for number\
    \ in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut max = numbers[0];\n    for n\
    \ in numbers {\n        if n > max {\n            max = n;\n        }\n    }\n\
    \    vec![max]", "    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers", " \
    \   let mut max = numbers[0];\n    let mut max_so_far = numbers[0];\n    for n\
    \ in numbers {\n        if n > max {\n            max = n;\n        }\n      \
    \  if n > max_so_far {\n            max_so_far = n;\n        }\n    }\n    vec![max,\
    \ max_so_far]", "    let mut max_element: isize = 0;\n    let mut max_index: usize\
    \ = 0;\n    for i in 0..numbers.len() {\n        if numbers[i] > max_element {\n\
    \            max_element = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    let mut result: Vec<isize> = vec![];\n    for i in 0..numbers.len()\
    \ {\n        if i == max_index {\n            result.push(max_element);\n    \
    \    } else {\n            result.push(numbers[i]);\n        }\n    }\n    result",
  "    let mut max_element: isize = 0;\n    let mut max_index: usize = 0;\n    for\
    \ index in 0..numbers.len() {\n        if numbers[index] > max_element {\n   \
    \         max_element = numbers[index];\n            max_index = index;\n    \
    \    }\n    }\n    let mut max_elements: Vec<isize> = Vec::new();\n    max_elements.push(max_element);\n\
    \    let mut max_index: usize = 0;\n    for index in 0..numbers.len() {\n    \
    \    if numbers[index] > max_element {\n            max_elements.push(numbers[index]);\n\
    \            max_index = index;\n        }\n    }\n    max_elements", "    let\
    \ mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n    for\
    \ number in numbers {\n        if number > max_number {\n            max_numbers.push(max_number);\n\
    \            max_number = number;\n        } else {\n            max_number =\
    \ number;\n        }\n    }\n    max_numbers.push(max_number);\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    max_numbers.insert(0, max_number);\n    max_numbers.insert(0,\
    \ max_index);\n    max_numbers", "    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n    let mut\
    \ max_number = numbers[0];\n    let mut max_index = -1;\n    for number in numbers\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = -1;\n        }\n        if number == max_number {\n     \
    \       max_index += 1;\n        }\n        max_numbers.push(max_number);\n  \
    \  }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n      \
    \      max_number = numbers[i];\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers", " \
    \   let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for number\
    \ in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut result = Vec::new();\n    let\
    \ mut max_value = numbers[0];\n    let mut max_index = -1;\n    for &i in numbers\
    \ {\n        if i > max_value {\n            max_value = i;\n            max_index\
    \ = i;\n        }\n    }\n    for i in numbers {\n        if i == max_value {\n\
    \            result.push(max_index);\n        }\n    }\n    result", "    let\
    \ mut max_so_far = numbers[0];\n    let mut max_so_far_index = 0;\n    let mut\
    \ max_so_far_rolling_max = 0;\n    for n in numbers {\n        if n > max_so_far\
    \ {\n            max_so_far = n;\n            max_so_far_index = n;\n        \
    \    max_so_far_rolling_max = n;\n        }\n        if n == max_so_far {\n  \
    \          max_so_far_rolling_max += max_so_far_index;\n        }\n    }\n   \
    \ let mut max_so_far_rolling_max_vec: Vec<isize> = vec![max_so_far_rolling_max];\n\
    \    for i in 1..max_so_far_rolling_max_vec.len() {\n        max_so_far_rolling_max_vec.push((max_so_far_rolling_max_vec[i\
    \ - 1] + max_so_far_rolling_max_vec[i]) / 2);\n    }\n    max_so_far_rolling_max_vec",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n        max_numbers.push(max_number);\n    }\n    max_numbers",
  "    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n    let\
    \ mut max_index = -1;\n    for &n in numbers {\n        if n > max_value {\n \
    \           max_value = n;\n            max_index = result.len();\n        }\n\
    \        result.push(n);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result", "    let mut max_element: isize = 0;\n    let mut max_index: usize\
    \ = 0;\n    for index in 0..numbers.len() {\n        if numbers[index] > max_element\
    \ {\n            max_element = numbers[index];\n            max_index = index;\n\
    \        }\n    }\n    vec![max_element]", "    let mut result = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    let mut max_index = -1;\n    for &number\
    \ in numbers {\n        if number > max_number {\n            max_number = number;\n\
    \            max_index = result.len();\n        }\n        result.push(number);\n\
    \    }\n    result.push(max_number);\n    result.push(max_index);\n    result",
  "    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n    for\
    \ value in numbers {\n        if value > max_value {\n            result.push(max_value);\n\
    \            max_value = value;\n        } else {\n            max_value = value;\n\
    \        }\n    }\n    result.push(max_value);\n    result", "    let mut max_element:\
    \ isize = 0;\n    let mut max_index: usize = 0;\n    for n in numbers {\n    \
    \    if n > max_element {\n            max_element = n;\n            max_index\
    \ = n;\n        }\n    }\n    let mut max_elements: Vec<isize> = vec![max_element];\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_element {\n    \
    \        max_element = numbers[i];\n            max_index = i;\n        }\n  \
    \      max_elements.push(max_element);\n    }\n    max_elements.push(max_element);\n\
    \    max_elements", "    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_element {\n         \
    \   max_element = n;\n            max_index = n;\n        }\n    }\n    let mut\
    \ max_elements = Vec::new();\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n        if i == max_index {\n            max_elements.push(max_element);\n\
    \        }\n    }\n    max_elements", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \    }\n    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len()\
    \ {\n        max_numbers.push(max_numbers[i - 1] + numbers[i - 1]);\n    }\n \
    \   max_numbers", "    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers", "    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.len() == 0 {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers[max_numbers.len() - 1]\
    \ {\n                max_numbers.push(number);\n            }\n        }\n   \
    \ }\n    max_numbers", "    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut result = Vec::new();\n    let\
    \ mut max_element = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers\
    \ {\n        if n > max_element {\n            max_element = n;\n            max_index\
    \ = result.len();\n        }\n        result.push(n);\n    }\n    result.push(max_element);\n\
    \    result.truncate(max_index + 1);\n    result", "    let mut max_numbers =\
    \ Vec::new();\n    let mut max_number = numbers[0];\n    for number in numbers\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \    }\n    }\n    max_numbers.push(max_number);\n    for number in numbers {\n\
    \        if number > max_number {\n            max_numbers.push(number);\n   \
    \     }\n    }\n    max_numbers", "    let mut max_element: isize = 0;\n    let\
    \ mut max_index: usize = 0;\n    for number in numbers {\n        if number >\
    \ max_element {\n            max_element = number;\n            max_index = number;\n\
    \        }\n    }\n    let mut max_elements = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] > max_element {\n            max_elements.push(numbers[i]);\n\
    \        }\n    }\n    max_elements", "    let mut max_element: isize = 0;\n \
    \   let mut max_index: usize = 0;\n    for index in 0..numbers.len() {\n     \
    \   if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    vec![max_element]", " \
    \   let mut max_element: isize = 0;\n    let mut max_index: usize = 0;\n    for\
    \ number in numbers {\n        if number > max_element {\n            max_element\
    \ = number;\n            max_index = number;\n        }\n    }\n    let mut max_elements:\
    \ Vec<isize> = Vec::new();\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_elements.push(numbers[i]);\n        }\n   \
    \ }\n    max_elements", "    let mut max_numbers = Vec::new();\n    let mut current_max\
    \ = numbers[0];\n    for number in numbers {\n        if number > current_max\
    \ {\n            max_numbers.push(current_max);\n            current_max = number;\n\
    \        } else {\n            current_max = number;\n        }\n    }\n    max_numbers.push(current_max);\n\
    \    max_numbers", "    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n     \
    \   if numbers[i] > max_number {\n            max_number = numbers[i];\n     \
    \   }\n    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for number in numbers {\n        if\
    \ number > max_number {\n            max_number = number;\n        }\n    }\n\
    \    max_numbers.push(max_number);\n    for number in numbers.iter().rev() {\n\
    \        if number > max_number {\n            max_number = number;\n        }\n\
    \        max_numbers.push(max_number);\n    }\n    max_numbers", "    let mut\
    \ max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n    for number\
    \ in numbers {\n        if number > max_number {\n            max_numbers.push(max_number);\n\
    \            max_number = number;\n        } else {\n            max_number =\
    \ number;\n        }\n    }\n    max_numbers.push(max_number);\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n      \
    \      max_number = numbers[i];\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] >= max_number {\n    \
    \        max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers", " \
    \   let mut max_so_far = numbers[0];\n    let mut max_so_far_rolling_max = 0;\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far_rolling_max\
    \ = n;\n            max_so_far = n;\n        } else {\n            max_so_far_rolling_max\
    \ = max_so_far_rolling_max;\n        }\n    }\n    max_so_far_rolling_max", " \
    \   let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        max_numbers.push(max_numbers[i - 1]);\n\
    \    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n    let mut\
    \ max_number = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers", " \
    \   let mut result = Vec::new();\n    let mut max_value = numbers[0];\n    for\
    \ number in numbers {\n        if number > max_value {\n            result.push(number);\n\
    \            max_value = number;\n        }\n    }\n    result", "    let mut\
    \ max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n    for number\
    \ in numbers {\n        if number > max_number {\n            max_number = number;\n\
    \        }\n    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len()\
    \ {\n        let mut max_number = numbers[i];\n        for number in numbers[i..]\
    \ {\n            if number > max_number {\n                max_number = number;\n\
    \            }\n        }\n        max_numbers.push(max_number);\n    }\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n      \
    \      max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n    let mut\
    \ max_number = numbers[0];\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut result = Vec::new();\n    let\
    \ mut max_element = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_element {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_element {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    result", "    let mut max_numbers = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n        }\n    }\n   \
    \ max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_numbers.push(numbers[i]);\n        }\n    }\n\
    \    max_numbers", "    let mut result = Vec::new();\n    let mut max_element\
    \ = numbers[0];\n    let mut max_index = -1;\n    for index in 1..numbers.len()\
    \ {\n        if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    result.push(max_element);\n\
    \    for index in 1..numbers.len() {\n        if numbers[index] > max_element\
    \ {\n            result.push(numbers[index]);\n        }\n    }\n    result",
  "    let mut max_element: isize = 0;\n    let mut max_index: usize = 0;\n    for\
    \ index in 0..numbers.len() {\n        if numbers[index] > max_element {\n   \
    \         max_element = numbers[index];\n            max_index = index;\n    \
    \    }\n    }\n    vec![max_element]", "    let mut result = Vec::new();\n   \
    \ let mut max_number = numbers[0];\n    let mut max_index = -1;\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_number {\n            max_number\
    \ = number;\n            max_index = result.len();\n        }\n        result.push(number);\n\
    \    }\n    result.push(max_number);\n    result.push(max_index);\n    result",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_numbers.push(max_number);\n\
    \            max_number = number;\n        } else {\n            max_number =\
    \ number;\n        }\n    }\n    max_numbers.push(max_number);\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   let mut max_index = -1;\n    for number in numbers.iter() {\n        if number\
    \ > max_number {\n            max_number = number;\n            max_index = -1;\n\
    \        }\n        if number == max_number {\n            max_index += 1;\n \
    \       }\n    }\n    max_numbers.push(max_number);\n    max_numbers.push(max_index);\n\
    \    max_numbers", "    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_max\
    \ = [max_so_far];\n    for i in 1..numbers.len() {\n        let mut max_so_far_rolling_max_index\
    \ = 0;\n        for n in numbers {\n            if n > max_so_far_rolling_max[max_so_far_rolling_max_index]\
    \ {\n                max_so_far_rolling_max[max_so_far_rolling_max_index] = n;\n\
    \                max_so_far_rolling_max_index = n;\n            }\n        }\n\
    \        max_so_far_rolling_max.push(max_so_far_rolling_max_index);\n    }\n \
    \   max_so_far_rolling_max", "    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            max_value = numbers[i];\n  \
    \          max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            result.push(numbers[i]);\n \
    \       }\n    }\n    result.push(max_value);\n    result", "    let mut max_number:\
    \ isize = 0;\n    let mut max_numbers: Vec<isize> = Vec::new();\n    for n in\
    \ numbers {\n        if n > max_number {\n            max_number = n;\n      \
    \      max_numbers.clear();\n        }\n        if n == max_number {\n       \
    \     max_numbers.push(n);\n        }\n    }\n    max_numbers", "    let mut max_numbers\
    \ = Vec::new();\n    let mut max_number = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_numbers.push(max_number);\n            max_number = numbers[i];\n\
    \        }\n    }\n    max_numbers.push(max_number);\n    max_numbers", "    let\
    \ mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n    for\
    \ number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for number\
    \ in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    let mut max_index = -1;\n    for number\
    \ in numbers {\n        if number > max_number {\n            max_number = number;\n\
    \            max_index = -1;\n        }\n        if number == max_number {\n \
    \           max_index += 1;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for number\
    \ in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut result = Vec::new();\n    let\
    \ mut max_value = numbers[0];\n    for value in numbers {\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    for value\
    \ in numbers {\n        if value == max_value {\n            result.push(value);\n\
    \        }\n    }\n    result", "    let mut result = Vec::new();\n    let mut\
    \ max_value = numbers[0];\n    for number in numbers {\n        if number > max_value\
    \ {\n            result.push(number);\n            max_value = number;\n     \
    \   }\n    }\n    result", "    let mut max_numbers = Vec::new();\n    let mut\
    \ max_number = numbers[0];\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_numbers.push(max_number);\n            max_number = number;\n\
    \        } else {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers", "    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n    let mut\
    \ current_max = numbers[0];\n    for number in numbers {\n        if number >\
    \ current_max {\n            max_numbers.push(current_max);\n            current_max\
    \ = number;\n        } else {\n            current_max = number;\n        }\n\
    \    }\n    max_numbers.push(current_max);\n    max_numbers", "    let mut max_numbers\
    \ = Vec::new();\n    let mut max_number = numbers[0];\n    let mut max_index =\
    \ -1;\n    for &n in numbers {\n        if n > max_number {\n            max_number\
    \ = n;\n            max_index = -1;\n        }\n        if n == max_number {\n\
    \            max_index += 1;\n        }\n        max_numbers.push(max_index);\n\
    \    }\n    max_numbers", "    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for &n in numbers {\n        if n > max_value {\n            max_value\
    \ = n;\n            max_index = -1;\n        }\n        if n == max_value {\n\
    \            max_index += 1;\n        }\n    }\n    let mut max_value = max_value;\n\
    \    let mut max_index = max_index;\n    let mut max_value = max_value;\n    let\
    \ mut max_index = max_index;\n    let mut max_value = max_value;\n    let mut\
    \ max_index = max_index;\n    let mut max_value = max_value;\n    let mut max_index\
    \ = max_index;\n    let mut max_value = max_value;\n    let mut max_index = max_index;\n\
    \    let mut max_value = max_value;\n    let mut max_index = max_index;\n    let\
    \ mut max_value = max_value;\n    let mut max_index = max_index;\n    let mut\
    \ max_value = max_value;\n    let mut max_index = max_index;\n    let mut max_value\
    \ = max_value;\n    let mut max_index = max_index;\n    let mut max_value = max_value;\n\
    \    let mut max_index = max_index;\n    let mut max_value = max_value;\n    let\
    \ mut max_index = max_index;\n    let mut max_value = max_value;\n    let mut\
    \ max_index = max_index;\n    let mut max_value = max_value;\n    let mut max_index\
    \ = max_index;\n    let mut max_value = max_value;\n    let mut max_index = max_index;\n\
    \    let mut max_value = max_value;\n    let mut max_index = max_index;\n    let\
    \ mut max_value = max_value;\n    let mut max_index = max_index;\n    let mut\
    \ max_value = max_value;\n    let mut max_index = max_index;\n    let mut max_value\
    \ = max_value;\n    let mut max_index = max_index;\n    let mut max_value = max_value;\n\
    \    let mut max_index = max_index;\n    let mut max_value = max_value;\n    let\
    \ mut max_index = max_index;\n    let mut max_value = max_value;\n    let mut\
    \ max_index = max_index;\n    let mut max_value = max_value;\n    let mut max_index\
    \ = max_index;\n    let mut max_value = max_value;\n    let mut max_index = max_index;\n\
    \    let mut max_value = max_value;\n    let mut max_index = max_index;\n    let\
    \ mut max_value = max_value;\n    let mut max_index = max_index;\n    let mut\
    \ max_value = max_value;\n    let mut max_index = max_index;\n    let mut max_value\
    \ = max_value;\n    let mut max_index = max_index;\n    let mut max_value = max_value;\n\
    \    let mut max_index = max_index;\n    let mut max_value = max_value;\n    let\
    \ mut max_", "    let mut max_element: isize = 0;\n    let mut max_index: usize\
    \ = 0;\n    for index in numbers.iter().rev() {\n        if max_element < numbers[index]\
    \ {\n            max_element = numbers[index];\n            max_index = index;\n\
    \        }\n    }\n    vec![max_index, max_element]", "    let mut max_so_far\
    \ = numbers[0];\n    let mut max_so_far_index = 0;\n    for &n in numbers {\n\
    \        if n > max_so_far {\n            max_so_far = n;\n            max_so_far_index\
    \ = i;\n        }\n    }\n    let mut max_so_far_rolling_max = Vec::new();\n \
    \   for i in 0..numbers.len() {\n        if i == max_so_far_index {\n        \
    \    max_so_far_rolling_max.push(max_so_far);\n        } else {\n            max_so_far_rolling_max.push(numbers[i]);\n\
    \        }\n    }\n    max_so_far_rolling_max", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n     \
    \   if numbers[i] > max_number {\n            max_number = numbers[i];\n     \
    \   }\n        max_numbers.push(max_number);\n    }\n    max_numbers", "    let\
    \ mut max_element: isize = 0;\n    let mut max_index: usize = 0;\n    for number\
    \ in numbers {\n        if number > max_element {\n            max_element = number;\n\
    \            max_index = number;\n        }\n    }\n    let mut max_elements:\
    \ Vec<isize> = Vec::new();\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_element {\n            max_elements.push(numbers[i]);\n        }\n   \
    \ }\n    max_elements", "    let mut max = numbers[0];\n    for n in numbers {\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    vec![max]",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers.reverse();\n    max_numbers", "    let mut\
    \ max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n    for i in\
    \ 1..numbers.len() {\n        if numbers[i] > max_number {\n            max_number\
    \ = numbers[i];\n        }\n        max_numbers.push(max_number);\n    }\n   \
    \ max_numbers", "    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n > max_value {\n            result.push(max_value);\n\
    \            max_value = n;\n        } else {\n            max_value = n;\n  \
    \      }\n    }\n    result.push(max_value);\n    result", "    let mut max_numbers\
    \ = Vec::new();\n    let mut max_number = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \        }\n    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers", "    let mut result = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    let mut max_index = -1;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_number {\n            max_number\
    \ = number;\n            max_index = result.len();\n        }\n        result.push(number);\n\
    \    }\n    result.push(max_number);\n    result.push(max_index);\n    result",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for number\
    \ in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n\
    \    let mut current_number = 0;\n    let mut max_number = numbers[0];\n    for\
    \ number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n        if number == current_number {\n            max_numbers.push(max_number);\n\
    \        } else {\n            max_numbers.push(current_number);\n        }\n\
    \        current_number = number;\n    }\n    max_numbers", "    let mut result\
    \ = Vec::new();\n    let mut max_value = numbers[0];\n    let mut max_index =\
    \ -1;\n    for &i in numbers {\n        if i > max_value {\n            max_value\
    \ = i;\n            max_index = i;\n        }\n    }\n    for i in numbers {\n\
    \        if i == max_value {\n            result.push(max_index);\n        }\n\
    \    }\n    result", "    let mut max = numbers[0];\n    let mut max_index = 0;\n\
    \    for n in numbers {\n        if n > max {\n            max = n;\n        \
    \    max_index = 0;\n        }\n        if n == max {\n            max_index +=\
    \ 1;\n        }\n    }\n    vec![max; max_index]", "    let mut result = Vec::new();\n\
    \    let mut max_value = numbers[0];\n    for number in numbers.iter().rev() {\n\
    \        if number > max_value {\n            result.push(number);\n         \
    \   max_value = number;\n        }\n    }\n    result", "    let mut max_numbers\
    \ = Vec::new();\n    let mut current_max = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > current_max {\n            max_numbers.push(current_max);\n\
    \            current_max = number;\n        } else {\n            current_max\
    \ = number;\n        }\n    }\n    max_numbers.push(current_max);\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n\
    \    max_numbers", "    let mut result = Vec::new();\n    let mut max_value =\
    \ numbers[0];\n    let mut max_index = -1;\n    for &i in numbers {\n        if\
    \ i > max_value {\n            result.push(max_value);\n            max_value\
    \ = i;\n            max_index = result.len() - 1;\n        } else {\n        \
    \    max_value = i;\n            max_index = result.len() - 1;\n        }\n  \
    \  }\n    result.push(max_value);\n    result", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for number in numbers {\n        if\
    \ number > max_number {\n            max_number = number;\n        }\n    }\n\
    \    max_numbers.push(max_number);\n    for number in numbers {\n        if number\
    \ > max_number {\n            max_numbers.push(number);\n        }\n    }\n  \
    \  max_numbers", "    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers", " \
    \   let mut max_element: isize = 0;\n    let mut max_index: usize = 0;\n    for\
    \ index in 0..numbers.len() {\n        if numbers[index] > max_element {\n   \
    \         max_element = numbers[index];\n            max_index = index;\n    \
    \    }\n    }\n    vec![max_element]", "    let mut result = Vec::new();\n   \
    \ let mut current_max = numbers[0];\n    let mut current_max_index = -1;\n   \
    \ for &n in numbers {\n        if n > current_max {\n            current_max =\
    \ n;\n            current_max_index = result.len();\n        }\n        result.push(current_max);\n\
    \    }\n    result.push(current_max);\n    result.push(current_max);\n    result[current_max_index..].iter().cloned().collect()",
  "    let mut max_so_far = numbers[0];\n    let mut max_so_far_so_far = numbers[0];\n\
    \    for n in numbers {\n        if n > max_so_far {\n            max_so_far =\
    \ n;\n        }\n        if n > max_so_far_so_far {\n            max_so_far_so_far\
    \ = n;\n        }\n    }\n    let mut max_so_far_so_far_so_far = numbers[0];\n\
    \    for n in numbers {\n        if n > max_so_far_so_far {\n            max_so_far_so_far\
    \ = n;\n        }\n        if n > max_so_far_so_far_so_far {\n            max_so_far_so_far_so_far\
    \ = n;\n        }\n        if n > max_so_far_so_far_so_far_so_far {\n        \
    \    max_so_far_so_far_so_far_so_far = n;\n        }\n    }\n    let mut max_so_far_so_far_so_far_so_far\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_so_far_so_far_so_far\
    \ {\n            max_so_far_so_far_so_far = n;\n        }\n        if n > max_so_far_so_far_so_far_so_far\
    \ {\n            max_so_far_so_far_so_far_so_far = n;\n        }\n        if n\
    \ > max_so_far_so_far_so_far_so_far_so_far {\n            max_so_far_so_far_so_far_so_far_so_far\
    \ = n;\n        }\n    }\n    let mut max_so_far_so_far_so_far_so_far_so_far =\
    \ numbers[0];\n    for n in numbers {\n        if n > max_so_far_so_far_so_far_so_far\
    \ {\n            max_so_far_so_far_so_far_so_far = n;\n        }\n        if n\
    \ > max_so_far_so_far_so_far_so_far_so_far {\n            max_so_far_so_far_so_far_so_far_so_far\
    \ = n;\n        }\n        if n > max_so_far_so_far_so_far_so_far_so_far_so_far\
    \ {\n            max_so_far_so_far_so_far_so_far_so_far_so_far = n;\n        }\n\
    \    }\n    max_so_far_so_far_so_far_so_far_so_far_so_far", "    let mut max_numbers\
    \ = Vec::new();\n    let mut max_number = numbers[0];\n    for number in numbers\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \    }\n    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len()\
    \ {\n        let mut max_number = numbers[i];\n        for number in numbers[i..]\
    \ {\n            if number > max_number {\n                max_number = number;\n\
    \            }\n        }\n        max_numbers.push(max_number);\n    }\n    max_numbers",
  "    let mut max_element: isize = 0;\n    let mut max_index: usize = 0;\n    for\
    \ index in 0..numbers.len() {\n        if numbers[index] > max_element {\n   \
    \         max_element = numbers[index];\n            max_index = index;\n    \
    \    }\n    }\n    vec![max_element]", "    let mut result = Vec::new();\n   \
    \ let mut max_value = numbers[0];\n    for number in numbers {\n        if number\
    \ > max_value {\n            max_value = number;\n        }\n    }\n    for number\
    \ in numbers {\n        if number == max_value {\n            result.push(number);\n\
    \        }\n    }\n    result", "    let mut max_element: isize = 0;\n    let\
    \ mut max_index: usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index]\
    \ > max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]", "    let mut max_numbers\
    \ = Vec::new();\n    let mut max_number = numbers[0];\n    let mut max_index =\
    \ -1;\n    for number in numbers {\n        if number > max_number {\n       \
    \     max_number = number;\n            max_index = -1;\n        }\n        if\
    \ number == max_number {\n            max_index += 1;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers.reverse();\n    max_numbers.insert(max_index, max_number);\n\
    \    max_numbers", "    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n      \
    \  if n > max_number {\n            max_number = n;\n            max_index = -1;\n\
    \        }\n        if n == max_number {\n            max_numbers.push(max_number);\n\
    \            max_index += 1;\n        }\n    }\n    max_numbers.push((max_index\
    \ + 1));\n    max_numbers", "    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for &i in numbers {\n      \
    \  if i > max_value {\n            max_value = i;\n            max_index = i;\n\
    \        }\n    }\n    for i in numbers {\n        if i == max_value {\n     \
    \       result.push(max_index);\n        }\n    }\n    result", "    let mut result\
    \ = Vec::new();\n    let mut current_max = numbers[0];\n    for n in numbers {\n\
    \        if n > current_max {\n            result.push(current_max);\n       \
    \     current_max = n;\n        } else {\n            current_max = n;\n     \
    \   }\n    }\n    result.push(current_max);\n    result", "    let mut result\
    \ = Vec::new();\n    let mut max_value = numbers[0];\n    for value in numbers\
    \ {\n        if value > max_value {\n            result.push(max_value);\n   \
    \         max_value = value;\n        } else {\n            max_value = value;\n\
    \        }\n    }\n    result.push(max_value);\n    result", "    let mut max_numbers\
    \ = Vec::new();\n    let mut max_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \    }\n    }\n    max_numbers.push(max_number);\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut result = Vec::new();\n    let\
    \ mut max_value = numbers[0];\n    for n in numbers {\n        if n > max_value\
    \ {\n            result.push(max_value);\n            max_value = n;\n       \
    \ } else {\n            max_value = n;\n        }\n    }\n    result.push(max_value);\n\
    \    result", "    let mut max_numbers = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n    let mut\
    \ max_number = numbers[0];\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut result = Vec::new();\n    let\
    \ mut max_number = numbers[0];\n    for n in numbers {\n        if n > max_number\
    \ {\n            result.push(max_number);\n            max_number = n;\n     \
    \   } else {\n            max_number = n;\n        }\n    }\n    result.push(max_number);\n\
    \    result", "    let mut max_numbers = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for number in numbers {\n        if\
    \ number > max_number {\n            max_numbers.push(max_number);\n         \
    \   max_number = number;\n        } else {\n            max_number = number;\n\
    \        }\n    }\n    max_numbers.push(max_number);\n    max_numbers", "    let\
    \ mut result = Vec::new();\n    let mut max_number = numbers[0];\n    let mut\
    \ max_index = -1;\n    let mut max_value = numbers[0];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_value {\n            max_value = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            result.push(max_index);\n  \
    \          max_value = numbers[i];\n            max_index = i;\n        }\n  \
    \  }\n    result", "    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for index in 1..numbers.len() {\n        if numbers[index] > max_value\
    \ {\n            max_value = numbers[index];\n            max_index = index;\n\
    \        }\n    }\n    vec![max_value, max_index]", "    let mut max_so_far =\
    \ numbers[0];\n    let mut max_so_far_index = 0;\n    let mut max_so_far_rolling_max\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far {\n      \
    \      max_so_far = number;\n            max_so_far_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n            max_so_far_rolling_max = number;\n     \
    \   }\n    }\n    let mut max_so_far_rolling_max_index = 0;\n    for number in\
    \ numbers {\n        if number == max_so_far {\n            max_so_far_rolling_max_index\
    \ = numbers.iter().position(|&x| x == number).unwrap();\n        }\n    }\n  \
    \  let mut max_so_far_rolling_max_rolling_max = 0;\n    for number in numbers\
    \ {\n        if number == max_so_far {\n            max_so_far_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_index\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_max_rolling_max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_max_rolling_max_rolling_max = number;\n        }\n\
    \    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index = 0;\n\
    \    for number in numbers {\n        if number == max_so_far {\n            max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ = numbers.iter().position(|&x| x == number).unwrap();\n        }\n    }\n  \
    \  let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max = 0;\n \
    \   for number in numbers {\n        if number == max_so_far {\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_roll",
  "    let mut max = numbers[0];\n    let mut max_index = -1;\n    for &i in numbers\
    \ {\n        if i > max {\n            max = i;\n            max_index = i;\n\
    \        }\n    }\n    let mut max_rolling_numbers = Vec::new();\n    for i in\
    \ 0..numbers.len() {\n        if numbers[i] > max {\n            max_rolling_numbers.push(max);\n\
    \            max = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    max_rolling_numbers.push(max);\n    max_rolling_numbers.extend_from_slice(&numbers[max_index..]);\n\
    \    max_rolling_numbers", "    let mut result = Vec::new();\n    let mut max_value\
    \ = numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            max_value = numbers[i];\n  \
    \          max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_value {\n            result.push(max_index);\n  \
    \      }\n    }\n    result", "    let mut max_number: isize = 0;\n    let mut\
    \ max_numbers: Vec<isize> = Vec::new();\n    for n in numbers {\n        if n\
    \ > max_number {\n            max_number = n;\n            max_numbers.clear();\n\
    \        }\n        if n == max_number {\n            max_numbers.push(n);\n \
    \       }\n    }\n    max_numbers", "    let mut result = Vec::new();\n    let\
    \ mut max_value = numbers[0];\n    let mut max_index = -1;\n    for &n in numbers\
    \ {\n        if n > max_value {\n            max_value = n;\n            max_index\
    \ = result.len();\n        }\n        result.push(n);\n    }\n    result.push(max_value);\n\
    \    result.push(max_index);\n    result", "    let mut result = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    let mut max_index = -1;\n    for &n\
    \ in numbers {\n        if n > max_number {\n            max_number = n;\n   \
    \         max_index = result.len();\n        }\n        result.push(n);\n    }\n\
    \    result.push(max_number);\n    result.push(max_index);\n    result", "   \
    \ let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n  \
    \  for number in numbers.iter().rev() {\n        if number > max_number {\n  \
    \          max_numbers.push(max_number);\n            max_number = number;\n \
    \       } else {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers", "    let mut result = Vec::new();\n    let mut max_value =\
    \ numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n        if\
    \ n > max_value {\n            max_value = n;\n            max_index = result.len();\n\
    \        }\n        result.push(n);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result", "    let mut max_numbers = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers", "    let mut max_numbers = Vec::new();\n\
    \    let mut max_number = numbers[0];\n    for number in numbers {\n        if\
    \ number > max_number {\n            max_number = number;\n        }\n    }\n\
    \    max_numbers.push(max_number);\n    for i in 1..numbers.len() {\n        let\
    \ mut max_number = numbers[i];\n        for number in numbers[i..] {\n       \
    \     if number > max_number {\n                max_number = number;\n       \
    \     }\n        }\n        max_numbers.push(max_number);\n    }\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_numbers.push(max_number);\n\
    \            max_number = number;\n        } else {\n            max_number =\
    \ number;\n        }\n    }\n    max_numbers.push(max_number);\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers.iter().rev() {\n        if number > max_number {\n \
    \           max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers", " \
    \   let mut result = Vec::new();\n    let mut max_value = numbers[0];\n    let\
    \ mut max_index = -1;\n    for &i in numbers {\n        if i > max_value {\n \
    \           result.push(max_value);\n            max_value = i;\n            max_index\
    \ = result.len() - 1;\n        } else {\n            max_value = i;\n        \
    \    max_index = result.len() - 1;\n        }\n    }\n    result.push(max_value);\n\
    \    result", "    let mut max_numbers = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_numbers[i-1] {\n\
    \            max_numbers.push(numbers[i]);\n        }\n    }\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n      \
    \      max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers", "    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in 0..numbers.len() {\n        if numbers[index] >\
    \ max_element {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]", "    let mut max_element:\
    \ isize = 0;\n    let mut max_index: usize = 0;\n    for index in 0..numbers.len()\
    \ {\n        if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    vec![max_element]", " \
    \   let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for i in 1..numbers.len() {\n        let mut max_number = numbers[i];\n \
    \       for number in numbers.iter().rev() {\n            if number > max_number\
    \ {\n                max_number = number;\n            }\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers", "    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers {\n\
    \        if number > max_so_far {\n            max_so_far = number;\n        \
    \    max_so_far_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \            max_so_far_rolling_max = number;\n        }\n    }\n    Vec::from(max_so_far_rolling_max)",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    max_numbers.push(max_number);\n    max_numbers",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   let mut max_index = -1;\n    for number in numbers {\n        if number >\
    \ max_number {\n            max_number = number;\n            max_index = -1;\n\
    \        }\n        if number == max_number {\n            max_index += 1;\n \
    \       }\n    }\n    max_numbers.extend_from_slice(&[max_number]);\n    max_numbers.extend_from_slice(&[max_index]);\n\
    \    max_numbers", "    let mut result = Vec::new();\n    let mut max_value =\
    \ numbers[0];\n    let mut max_index = -1;\n    for &n in numbers {\n        if\
    \ n > max_value {\n            max_value = n;\n            max_index = result.len();\n\
    \        }\n        result.push(n);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result", "    let mut max_number: isize = 0;\n    let mut max_numbers = Vec::new();\n\
    \    for n in numbers {\n        if n > max_number {\n            max_number =\
    \ n;\n            max_numbers.clear();\n        }\n        if n == max_number\
    \ {\n            max_numbers.push(n);\n        }\n    }\n    max_numbers", " \
    \   let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n\
    \    for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n     \
    \       max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers", "    let mut result = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = result.len();\n        }\n        result.push(number);\n    }\n\
    \    result.push(max_number);\n    result.push(max_index);\n    result", "   \
    \ let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n  \
    \  let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    max_numbers.push(max_number);\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] < max_number {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers.reverse();\n    max_numbers.insert(0, max_index);\n\
    \    max_numbers", "    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for &n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = i;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = max_so_far_index;\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_value\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_max_value = max_so_far;\n\
    \    for &n in numbers {\n        if n == max_so", "    let mut max_element: isize\
    \ = 0;\n    let mut max_index: usize = 0;\n    for index in numbers.iter().rev()\
    \ {\n        if max_element < numbers[index] {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    vec![max_index, max_element]",
  "    let mut max_numbers = Vec::new();\n    let mut max_number = numbers[0];\n \
    \   for i in 1..numbers.len() {\n        if numbers[i] > max_number {\n      \
    \      max_number = numbers[i];\n        }\n    }\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > max_number {\n            max_numbers.push(max_number);\n\
    \            max_number = numbers[i];\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers", "    let mut result = Vec::new();\n    let mut max_value =\
    \ numbers[0];\n    let mut max_index = -1;\n    for i in numbers.iter().rev()\
    \ {\n        if i > max_value {\n            max_value = i;\n            max_index\
    \ = i;\n        }\n    }\n    for i in numbers.iter().rev() {\n        if i ==\
    \ max_index {\n            result.push(max_value);\n        }\n    }\n    result",
  "    let mut max_element: isize = 0;\n    let mut max_index: usize = 0;\n    for\
    \ index in numbers.iter().rev() {\n        if max_element < numbers[index] {\n\
    \            max_element = numbers[index];\n            max_index = index;\n \
    \       }\n    }\n    vec![max_index, max_element]", "    let mut max_element:\
    \ isize = 0;\n    let mut max_index: usize = 0;\n    for index in 0..numbers.len()\
    \ {\n        if numbers[index] > max_element {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    vec![max_element]"]
stop_tokens:
- "\n}"
