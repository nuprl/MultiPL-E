name: HumanEval_16_count_distinct_characters
language: rs
prompt: "/// Given a string, find out how many distinct characters (regardless of\
  \ case) does it consist of\nfn count_distinct_characters(string: String) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = count_distinct_characters;\n    assert_eq!(candidate(String::from(\"\
  \")), 0);\n    assert_eq!(candidate(String::from(\"abcde\")), 5);\n    assert_eq!(candidate(String::from(\"\
  abcdecadeCADE\")), 5);\n    assert_eq!(candidate(String::from(\"aaaaAAAAaaaa\")),\
  \ 1);\n    assert_eq!(candidate(String::from(\"Jerry jERRY JeRRRY\")), 5);\n}\n"
completions: ['    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', " \
    \   let mut distinct_characters = HashSet::new();\n    for c in string.chars()\
    \ {\n        distinct_characters.insert(c.to_lowercase());\n        distinct_characters.insert(c.to_uppercase());\n\
    \    }\n    distinct_characters.len()", "    let mut count = 0;\n    for c in\
    \ string.chars() {\n        if c.is_lowercase() {\n            count += 1;\n \
    \       } else if c.is_uppercase() {\n            count += 2;\n        } else\
    \ {\n            count += 3;\n        }\n    }\n    count", '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', "    let mut count = 0;\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            count += 1;\n        } else if\
    \ c.is_uppercase() {\n            count += 2;\n        } else {\n            count\
    \ += 3;\n        }\n    }\n    count", "    let mut counts = HashMap::new();\n\
    \    for c in string.chars() {\n        if let Some(count) = counts.entry(c).or_insert(0)\
    \ {\n            *count += 1;\n        }\n    }\n    counts.len()", '    string.chars().filter(|c|
    c.is_ascii_lowercase()).count()', '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', "    let mut char_count = HashMap::new();\n\
    \    for c in string.chars() {\n        char_count.entry(c).or_insert(0) += 1;\n\
    \    }\n    char_count.len()", "    let mut count = 0;\n    for c in string.chars()\
    \ {\n        if c.is_lowercase() {\n            count += 1;\n        } else if\
    \ c.is_uppercase() {\n            count += 2;\n        } else {\n            count\
    \ += 3;\n        }\n    }\n    count", "    let mut counts = HashMap::new();\n\
    \    for c in string.chars() {\n        if let Some(count) = counts.entry(c).or_insert(0)\
    \ {\n            *count += 1;\n        }\n    }\n    counts.len()", '    string.chars().filter(|c|
    !c.is_ascii_lowercase()).count()', "    let mut distinct_characters = HashSet::new();\n\
    \    for c in string.chars() {\n        distinct_characters.insert(c.to_lowercase());\n\
    \        distinct_characters.insert(c.to_uppercase());\n    }\n    distinct_characters.len()",
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()', "    let mut counter\
    \ = 0;\n    for c in string.chars() {\n        if c.is_lowercase() {\n       \
    \     counter += 1;\n        } else if c.is_uppercase() {\n            counter\
    \ += 2;\n        } else if c.is_digit() {\n            counter += 4;\n       \
    \ } else if c.is_punctuation() {\n            counter += 8;\n        } else if\
    \ c.is_whitespace() {\n            counter += 16;\n        } else {\n        \
    \    counter += 32;\n        }\n    }\n    counter", "    let mut counter = 0;\n\
    \    for c in string.chars() {\n        if c.is_lowercase() {\n            counter\
    \ += 1;\n        } else if c.is_uppercase() {\n            counter += 2;\n   \
    \     } else if c.is_digit() {\n            counter += 3;\n        } else if c.is_punctuation()\
    \ {\n            counter += 4;\n        } else if c.is_whitespace() {\n      \
    \      counter += 5;\n        }\n    }\n    counter", '    string.chars().distinct().count()',
  '    string.chars().filter(|c| !c.is_ascii_lowercase()).count()']
stop_tokens:
- "\n}"
