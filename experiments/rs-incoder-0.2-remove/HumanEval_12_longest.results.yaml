language: rs
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).ok()\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8z_faqcn.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).ok()\n  |              \
    \                    ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found\
    \ `bool`\n\nerror[E0599]: no method named `ok` found for enum `Option` in the\
    \ current scope\n --> /tmp/tmp8z_faqcn.rs:4:53\n  |\n4 |     strings.iter().max_by(|a,\
    \ b| a.len() < b.len()).ok()\n  |                                            \
    \         ^^ help: there is an associated function with a similar name: `or`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s.to_string())\n            } else\
    \ {\n                if acc.len() > s.len() {\n                    Some(acc.unwrap())\n\
    \                } else {\n                    Some(s)\n                }\n  \
    \          }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp5bbhseyd.rs:10:24\n   |\n10 |                 if acc.len()\
    \ > s.len() {\n   |                        ^^^ method not found in `Option<String>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5bbhseyd.rs:13:26\n   |\n13 |\
    \                     Some(s)\n   |                          ^- help: try using\
    \ a conversion method: `.to_string()`\n   |                          |\n   | \
    \                         expected struct `String`, found `&String`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                acc = Some(s);\n            } else {\n\
    \                let len = s.len();\n                if len > acc.unwrap().len()\
    \ {\n                    acc = Some(s);\n                }\n            }\n  \
    \          acc\n        })\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqu1ans1d.rs:8:28\n  |\n8 |\
    \                 acc = Some(s);\n  |                            ^- help: try\
    \ using a conversion method: `.to_string()`\n  |                            |\n\
    \  |                            expected struct `String`, found `&String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpqu1ans1d.rs:12:32\n   |\n12 |  \
    \                   acc = Some(s);\n   |                                ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \        |\n   |                                expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n\n    for s in strings\
    \ {\n        let len = s.len();\n        if len > longest_len.len() {\n      \
    \      longest_len = len;\n            longest_str = s;\n        }\n    }\n\n\
    \    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnjz38wd2.rs:14:27\n   |\n\
    14 |             longest_len = len;\n   |                           ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \   |\n   |                           expected struct `String`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok_or(Error::BadRequest(ErrorKind::InvalidParam, \"\
    No string provided\"))\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n -->\
    \ /tmp/tmp8m59aot_.rs:9:34\n  |\n9 |         .ok_or(Error::BadRequest(ErrorKind::InvalidParam,\
    \ \"No string provided\"))\n  |                                  ^^^^^^^^^ use\
    \ of undeclared type `ErrorKind`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Error`\n --> /tmp/tmp8m59aot_.rs:9:16\n  |\n9 |         .ok_or(Error::BadRequest(ErrorKind::InvalidParam,\
    \ \"No string provided\"))\n  |                ^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing one of these items\n  |\n1 | use std::error::Error;\n\
    \  |\n1 | use std::fmt::Error;\n  |\n1 | use std::io::Error;\n  |\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmp8m59aot_.rs:8:10\n    |\n8   |           .cloned()\n\
    \    |            ^^^^^^ method cannot be called on `Option<usize>` due to unsatisfied\
    \ trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0433, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if longest.len()\
    \ < s.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpfsnpsz0v.rs:10:13\n    |\n10  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpwvxro1_e.rs:8:10\n    |\n\
    8   |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as i32).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpz_p8z1qz.rs:8:10\n    |\n\
    8   |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  let len = s.len();\n            if acc.is_none() || len > acc.unwrap().len()\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu_8u25xn.rs:9:22\n  |\n9 |\
    \                 Some(s)\n  |                      ^- help: try using a conversion\
    \ method: `.to_string()`\n  |                      |\n  |                    \
    \  expected struct `String`, found `&String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \    for s in strings {\n        let len = s.len();\n        if len > longest_len.len()\
    \ {\n            longest_len = len;\n            longest_str = s;\n        }\n\
    \    }\n    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfevjkt5s.rs:9:27\n  |\n9 |\
    \             longest_len = len;\n  |                           ^^^- help: try\
    \ using a conversion method: `.to_string()`\n  |                           |\n\
    \  |                           expected struct `String`, found `usize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s)\n            } else {\n       \
    \         if acc.len() > s.len() {\n                    Some(acc)\n          \
    \      } else {\n                    Some(s)\n                }\n            }\n\
    \        })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7vlntpf_.rs:8:22\n  |\n8 |\
    \                 Some(s)\n  |                      ^- help: try using a conversion\
    \ method: `.to_string()`\n  |                      |\n  |                    \
    \  expected struct `String`, found `&String`\n\nerror[E0599]: no method named\
    \ `len` found for enum `Option` in the current scope\n  --> /tmp/tmp7vlntpf_.rs:10:24\n\
    \   |\n10 |                 if acc.len() > s.len() {\n   |                   \
    \     ^^^ method not found in `Option<String>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7vlntpf_.rs:11:26\n   |\n11 |                     Some(acc)\n \
    \  |                          ^^^ expected struct `String`, found enum `Option`\n\
    \   |\n   = note: expected struct `String`\n                found enum `Option<String>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7vlntpf_.rs:13:26\n   |\n13 |\
    \                     Some(s)\n   |                          ^- help: try using\
    \ a conversion method: `.to_string()`\n   |                          |\n   | \
    \                         expected struct `String`, found `&String`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n\n    for s in strings\
    \ {\n        let len = s.len();\n        if len > longest_len.len() {\n      \
    \      longest_len = len;\n            longest_str = s;\n        }\n    }\n\n\
    \    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnjz38wd2.rs:14:27\n   |\n\
    14 |             longest_len = len;\n   |                           ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \   |\n   |                           expected struct `String`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \    for s in strings {\n        if longest_len.len() < s.len() {\n          \
    \  longest_len = s.len();\n            longest_str = s;\n        }\n    }\n  \
    \  longest_str.ok_or(format!(\"No string in list has length {}\", longest_len))\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbg75dkm7.rs:8:27\n  |\n8 |\
    \             longest_len = s.len();\n  |                           ^^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n  |                         \
    \  |\n  |                           expected struct `String`, found `usize`\n\n\
    error[E0599]: no method named `ok_or` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpbg75dkm7.rs:12:17\n   |\n12 |     longest_str.ok_or(format!(\"\
    No string in list has length {}\", longest_len))\n   |                 ^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
