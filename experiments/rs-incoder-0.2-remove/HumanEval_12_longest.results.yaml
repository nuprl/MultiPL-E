language: rs
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).ok()\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8z_faqcn.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).ok()\n  |              \
    \                    ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found\
    \ `bool`\n\nerror[E0599]: no method named `ok` found for enum `Option` in the\
    \ current scope\n --> /tmp/tmp8z_faqcn.rs:4:53\n  |\n4 |     strings.iter().max_by(|a,\
    \ b| a.len() < b.len()).ok()\n  |                                            \
    \         ^^ help: there is an associated function with a similar name: `or`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s.to_string())\n            } else\
    \ {\n                if acc.len() > s.len() {\n                    Some(acc.unwrap())\n\
    \                } else {\n                    Some(s)\n                }\n  \
    \          }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp5bbhseyd.rs:10:24\n   |\n10 |                 if acc.len()\
    \ > s.len() {\n   |                        ^^^ method not found in `Option<String>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5bbhseyd.rs:13:26\n   |\n13 |\
    \                     Some(s)\n   |                          ^- help: try using\
    \ a conversion method: `.to_string()`\n   |                          |\n   | \
    \                         expected struct `String`, found `&String`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                acc = Some(s);\n            } else {\n\
    \                let len = s.len();\n                if len > acc.unwrap().len()\
    \ {\n                    acc = Some(s);\n                }\n            }\n  \
    \          acc\n        })\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqu1ans1d.rs:8:28\n  |\n8 |\
    \                 acc = Some(s);\n  |                            ^- help: try\
    \ using a conversion method: `.to_string()`\n  |                            |\n\
    \  |                            expected struct `String`, found `&String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpqu1ans1d.rs:12:32\n   |\n12 |  \
    \                   acc = Some(s);\n   |                                ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \        |\n   |                                expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n\n    for s in strings\
    \ {\n        let len = s.len();\n        if len > longest_len.len() {\n      \
    \      longest_len = len;\n            longest_str = s;\n        }\n    }\n\n\
    \    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnjz38wd2.rs:14:27\n   |\n\
    14 |             longest_len = len;\n   |                           ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \   |\n   |                           expected struct `String`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok_or(Error::BadRequest(ErrorKind::InvalidParam, \"\
    No string provided\"))\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n -->\
    \ /tmp/tmp8m59aot_.rs:9:34\n  |\n9 |         .ok_or(Error::BadRequest(ErrorKind::InvalidParam,\
    \ \"No string provided\"))\n  |                                  ^^^^^^^^^ use\
    \ of undeclared type `ErrorKind`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Error`\n --> /tmp/tmp8m59aot_.rs:9:16\n  |\n9 |         .ok_or(Error::BadRequest(ErrorKind::InvalidParam,\
    \ \"No string provided\"))\n  |                ^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing one of these items\n  |\n1 | use std::error::Error;\n\
    \  |\n1 | use std::fmt::Error;\n  |\n1 | use std::io::Error;\n  |\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmp8m59aot_.rs:8:10\n    |\n8   |           .cloned()\n\
    \    |            ^^^^^^ method cannot be called on `Option<usize>` due to unsatisfied\
    \ trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0433, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if longest.len()\
    \ < s.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpfsnpsz0v.rs:10:13\n    |\n10  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpwvxro1_e.rs:8:10\n    |\n\
    8   |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as i32).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpz_p8z1qz.rs:8:10\n    |\n\
    8   |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  let len = s.len();\n            if acc.is_none() || len > acc.unwrap().len()\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu_8u25xn.rs:9:22\n  |\n9 |\
    \                 Some(s)\n  |                      ^- help: try using a conversion\
    \ method: `.to_string()`\n  |                      |\n  |                    \
    \  expected struct `String`, found `&String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \    for s in strings {\n        let len = s.len();\n        if len > longest_len.len()\
    \ {\n            longest_len = len;\n            longest_str = s;\n        }\n\
    \    }\n    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfevjkt5s.rs:9:27\n  |\n9 |\
    \             longest_len = len;\n  |                           ^^^- help: try\
    \ using a conversion method: `.to_string()`\n  |                           |\n\
    \  |                           expected struct `String`, found `usize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s)\n            } else {\n       \
    \         if acc.len() > s.len() {\n                    Some(acc)\n          \
    \      } else {\n                    Some(s)\n                }\n            }\n\
    \        })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7vlntpf_.rs:8:22\n  |\n8 |\
    \                 Some(s)\n  |                      ^- help: try using a conversion\
    \ method: `.to_string()`\n  |                      |\n  |                    \
    \  expected struct `String`, found `&String`\n\nerror[E0599]: no method named\
    \ `len` found for enum `Option` in the current scope\n  --> /tmp/tmp7vlntpf_.rs:10:24\n\
    \   |\n10 |                 if acc.len() > s.len() {\n   |                   \
    \     ^^^ method not found in `Option<String>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7vlntpf_.rs:11:26\n   |\n11 |                     Some(acc)\n \
    \  |                          ^^^ expected struct `String`, found enum `Option`\n\
    \   |\n   = note: expected struct `String`\n                found enum `Option<String>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7vlntpf_.rs:13:26\n   |\n13 |\
    \                     Some(s)\n   |                          ^- help: try using\
    \ a conversion method: `.to_string()`\n   |                          |\n   | \
    \                         expected struct `String`, found `&String`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n\n    for s in strings\
    \ {\n        let len = s.len();\n        if len > longest_len.len() {\n      \
    \      longest_len = len;\n            longest_str = s;\n        }\n    }\n\n\
    \    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnjz38wd2.rs:14:27\n   |\n\
    14 |             longest_len = len;\n   |                           ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \   |\n   |                           expected struct `String`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \    for s in strings {\n        if longest_len.len() < s.len() {\n          \
    \  longest_len = s.len();\n            longest_str = s;\n        }\n    }\n  \
    \  longest_str.ok_or(format!(\"No string in list has length {}\", longest_len))\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbg75dkm7.rs:8:27\n  |\n8 |\
    \             longest_len = s.len();\n  |                           ^^^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n  |                         \
    \  |\n  |                           expected struct `String`, found `usize`\n\n\
    error[E0599]: no method named `ok_or` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpbg75dkm7.rs:12:17\n   |\n12 |     longest_str.ok_or(format!(\"\
    No string in list has length {}\", longest_len))\n   |                 ^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).cloned())\n        .ok()\n        .and_then(|s| s.len())\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpyhpp9gbb.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                acc = Some(s);\n            } else {\n\
    \                let len = s.len();\n                if len > acc.unwrap().len()\
    \ {\n                    acc = Some(s);\n                }\n            }\n  \
    \          acc\n        })\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqu1ans1d.rs:8:28\n  |\n8 |\
    \                 acc = Some(s);\n  |                            ^- help: try\
    \ using a conversion method: `.to_string()`\n  |                            |\n\
    \  |                            expected struct `String`, found `&String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpqu1ans1d.rs:12:32\n   |\n12 |  \
    \                   acc = Some(s);\n   |                                ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \        |\n   |                                expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .and_then(|len| strings.iter().map(|s| s.len() as i32).max().filter(|&len|\
    \ len == len).last())\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<i32>` is not an iterator\n   --> /tmp/tmpupqd3l0a.rs:8:96\n\
    \    |\n8   |           .and_then(|len| strings.iter().map(|s| s.len() as i32).max().filter(|&len|\
    \ len == len).last())\n    |                                                 \
    \                                                 ^^^^ `Option<i32>` is not an\
    \ iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<i32>: Iterator`\n            which is required by `&mut Option<i32>:\
    \ Iterator`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    let mut longest_len = String::new();\n\
    \    for s in strings {\n        let len = s.len();\n        if len > longest_len.len()\
    \ {\n            longest = s;\n            longest_len = len;\n        }\n   \
    \ }\n    longest_len.len()\n        .cmp(&longest.len())\n        .map(|i| longest.chars().nth(i))\n\
    \        .unwrap_or(None)\n}\n\nfn main() {\n    let candidate = longest;\n  \
    \  assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw709_czi.rs:10:27\n   |\n\
    5  |     let mut longest_len = String::new();\n   |                          \
    \ ------------- expected due to this value\n...\n10 |             longest_len\
    \ = len;\n   |                           ^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                           |\n   |                     \
    \      expected struct `String`, found `usize`\n\nerror[E0599]: `std::cmp::Ordering`\
    \ is not an iterator\n   --> /tmp/tmpw709_czi.rs:15:10\n    |\n15  |         \
    \  .map(|i| longest.chars().nth(i))\n    |            ^^^ `std::cmp::Ordering`\
    \ is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `std::cmp::Ordering: Iterator`\n            which is required by\
    \ `&mut std::cmp::Ordering: Iterator`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, str| {\n        \
    \    let len = str.len();\n            if len > acc.len() {\n                Some(str)\n\
    \            } else {\n                None\n            }\n        })\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n --> /tmp/tmpkjqymxvn.rs:8:26\n  |\n8 |             if len > acc.len()\
    \ {\n  |                          ^^^ method not found in `Option<String>`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpkjqymxvn.rs:9:22\n  |\n9 |      \
    \           Some(str)\n  |                      ^^^- help: try using a conversion\
    \ method: `.to_string()`\n  |                      |\n  |                    \
    \  expected struct `String`, found `&String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by(|a,\
    \ b| a.len() < b.len() && a.len() == len))\n        .cloned()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpuas53iey.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuas53iey.rs:10:54\n\
    \   |\n10 |         .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len()\
    \ && a.len() == len))\n   |                                                  \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found\
    \ `bool`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    let mut longestlen = String::new();\n\
    \    for s in strings {\n        if longestlen.len() > s.len() {\n           \
    \ longest = s;\n            longestlen = s.len();\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfkvh1j7i.rs:9:26\n  |\n5 |\
    \     let mut longestlen = String::new();\n  |                          -------------\
    \ expected due to this value\n...\n9 |             longestlen = s.len();\n  |\
    \                          ^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |                          |\n  |                          expected struct\
    \ `String`, found `usize`\n\nerror[E0599]: `String` is not an iterator\n   -->\
    \ /tmp/tmpfkvh1j7i.rs:12:13\n    |\n12  |       longest.cloned()\n    |      \
    \         ^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `String: Iterator`\n            which is required by `&mut String: Iterator`\n\
    \            `str: Iterator`\n            which is required by `&mut str: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).cloned())\n        .ok()\n        .and_then(|s| s.clone())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmppyuee69x.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s.to_string())\n            } else\
    \ {\n                if acc.unwrap().len() < s.len() {\n                    Some(acc.unwrap().to_string())\n\
    \                } else {\n                    Some(s.to_string())\n         \
    \       }\n            }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmptzsfurmg.rs:6:22\n\
    \  |\n6 |         .fold(None, |mut acc, s| {\n  |                      ----^^^\n\
    \  |                      |\n  |                      help: remove this `mut`\n\
    \  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0382]: use of moved\
    \ value: `acc`\n   --> /tmp/tmptzsfurmg.rs:11:26\n    |\n6   |         .fold(None,\
    \ |mut acc, s| {\n    |                      ------- move occurs because `acc`\
    \ has type `Option<String>`, which does not implement the `Copy` trait\n...\n\
    10  |                 if acc.unwrap().len() < s.len() {\n    |               \
    \         -------- `acc` moved due to this method call\n11  |                \
    \     Some(acc.unwrap().to_string())\n    |                          ^^^ value\
    \ used here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `acc`\nhelp: consider calling `.as_ref()` to borrow the\
    \ type's contents\n    |\n10  |                 if acc.as_ref().unwrap().len()\
    \ < s.len() {\n    |                        +++++++++\n\nerror: aborting due to\
    \ previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s.to_owned())\n            } else\
    \ {\n                let mut len = s.len();\n                let mut max_len =\
    \ acc.unwrap().len();\n                let mut max_len = if max_len < len { max_len\
    \ } else { len };\n                if max_len == len {\n                    Some(s.to_owned())\n\
    \                } else {\n                    Some(acc.unwrap().to_owned())\n\
    \                }\n            }\n        })\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpclzfb5qz.rs:6:22\n\
    \  |\n6 |         .fold(None, |mut acc, s| {\n  |                      ----^^^\n\
    \  |                      |\n  |                      help: remove this `mut`\n\
    \  |\n  = note: `#[warn(unused_mut)]` on by default\n\nwarning: variable does\
    \ not need to be mutable\n  --> /tmp/tmpclzfb5qz.rs:10:21\n   |\n10 |        \
    \         let mut len = s.len();\n   |                     ----^^^\n   |     \
    \                |\n   |                     help: remove this `mut`\n\nwarning:\
    \ variable does not need to be mutable\n  --> /tmp/tmpclzfb5qz.rs:11:21\n   |\n\
    11 |                 let mut max_len = acc.unwrap().len();\n   |             \
    \        ----^^^^^^^\n   |                     |\n   |                     help:\
    \ remove this `mut`\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpclzfb5qz.rs:12:21\n\
    \   |\n12 |                 let mut max_len = if max_len < len { max_len } else\
    \ { len };\n   |                     ----^^^^^^^\n   |                     |\n\
    \   |                     help: remove this `mut`\n\nerror[E0382]: use of moved\
    \ value: `acc`\n   --> /tmp/tmpclzfb5qz.rs:16:26\n    |\n6   |         .fold(None,\
    \ |mut acc, s| {\n    |                      ------- move occurs because `acc`\
    \ has type `Option<String>`, which does not implement the `Copy` trait\n...\n\
    11  |                 let mut max_len = acc.unwrap().len();\n    |           \
    \                            -------- `acc` moved due to this method call\n...\n\
    16  |                     Some(acc.unwrap().to_owned())\n    |               \
    \           ^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `acc`\nhelp: consider calling `.as_ref()`\
    \ to borrow the type's contents\n    |\n11  |                 let mut max_len\
    \ = acc.as_ref().unwrap().len();\n    |                                      \
    \ +++++++++\n\nerror: aborting due to previous error; 4 warnings emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if longest.len()\
    \ < s.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpfsnpsz0v.rs:10:13\n    |\n10  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as usize).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpg12ashg6.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok_or(Error::BadRequest(ErrorKind::InvalidParam, \"\
    Longest string not found\"))\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n -->\
    \ /tmp/tmp8j_cowwo.rs:9:34\n  |\n9 |         .ok_or(Error::BadRequest(ErrorKind::InvalidParam,\
    \ \"Longest string not found\"))\n  |                                  ^^^^^^^^^\
    \ use of undeclared type `ErrorKind`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Error`\n --> /tmp/tmp8j_cowwo.rs:9:16\n  |\n9 |         .ok_or(Error::BadRequest(ErrorKind::InvalidParam,\
    \ \"Longest string not found\"))\n  |                ^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing one of these items\n  |\n1 | use std::error::Error;\n\
    \  |\n1 | use std::fmt::Error;\n  |\n1 | use std::io::Error;\n  |\n\nerror[E0599]:\
    \ `Option<usize>` is not an iterator\n   --> /tmp/tmp8j_cowwo.rs:8:10\n    |\n\
    8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<usize>: Iterator`\n            which is required by `&mut Option<usize>:\
    \ Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok_or(Error::BadRequest(ErrorKind::InvalidParam, \"\
    Longest string not found\"))\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n -->\
    \ /tmp/tmp8j_cowwo.rs:9:34\n  |\n9 |         .ok_or(Error::BadRequest(ErrorKind::InvalidParam,\
    \ \"Longest string not found\"))\n  |                                  ^^^^^^^^^\
    \ use of undeclared type `ErrorKind`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Error`\n --> /tmp/tmp8j_cowwo.rs:9:16\n  |\n9 |         .ok_or(Error::BadRequest(ErrorKind::InvalidParam,\
    \ \"Longest string not found\"))\n  |                ^^^^^ not found in this scope\n\
    \  |\nhelp: consider importing one of these items\n  |\n1 | use std::error::Error;\n\
    \  |\n1 | use std::fmt::Error;\n  |\n1 | use std::io::Error;\n  |\n\nerror[E0599]:\
    \ `Option<usize>` is not an iterator\n   --> /tmp/tmp8j_cowwo.rs:8:10\n    |\n\
    8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<usize>: Iterator`\n            which is required by `&mut Option<usize>:\
    \ Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u64).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpz__h6i1s.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().fold(None, |max, s| {\n        let len = s.len();\n      \
    \  if len > max {\n            Some(s)\n        } else {\n            None\n \
    \       }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphygnw1g4.rs:6:18\n  |\n6 |\
    \         if len > max {\n  |                  ^^^ expected `usize`, found enum\
    \ `Option`\n  |\n  = note: expected type `usize`\n             found enum `Option<String>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmphygnw1g4.rs:7:18\n  |\n7 |    \
    \         Some(s)\n  |                  ^- help: try using a conversion method:\
    \ `.to_string()`\n  |                  |\n  |                  expected struct\
    \ `String`, found `&String`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp_zcui5mm.rs:10:13\n\
    \    |\n10  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).cloned())\n        .ok()\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpyq7vg44y.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_len = strings[0].len();\n    for s in strings\
    \ {\n        if s.len() > max_len {\n            max_len = s.len();\n        }\n\
    \    }\n\n    for s in strings {\n        if s.len() == max_len {\n          \
    \  return Some(s);\n        }\n    }\n\n    None\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `max_len`\n --> /tmp/tmpvwgr8sxe.rs:8:13\n  |\n\
    8 |     let mut max_len = String::new();\n  |             ^^^^^^^ help: if this\
    \ is intentional, prefix it with an underscore: `_max_len`\n  |\n  = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n --> /tmp/tmpvwgr8sxe.rs:8:9\n\
    \  |\n8 |     let mut max_len = String::new();\n  |         ----^^^^^^^\n  | \
    \        |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: use of moved value: `strings`\n   --> /tmp/tmpvwgr8sxe.rs:16:14\n\
    \    |\n3   | fn longest(strings: Vec<String>) -> Option<String> {\n    |    \
    \        ------- move occurs because `strings` has type `Vec<String>`, which does\
    \ not implement the `Copy` trait\n...\n10  |     for s in strings {\n    |   \
    \           ------- `strings` moved due to this implicit call to `.into_iter()`\n\
    ...\n16  |     for s in strings {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `strings`\nhelp: consider iterating over a slice of the `Vec<String>`'s\
    \ content to avoid moving into the `for` loop\n    |\n10  |     for s in &strings\
    \ {\n    |              +\n\nerror: aborting due to previous error; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.chars().count())\n        .max()\n\
    \        .cloned()\n        .ok()\n        .and_then(|s| strings.iter().find(|s|\
    \ s == s).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpjzelri0i.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.chars().count())\n        .max()\n\
    \        .cloned()\n        .unwrap_or(0)\n        .to_string()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp8iiqkdtv.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as usize).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpg12ashg6.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len() && a.len()\
    \ == len))\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_lpjg0ls.rs:8:54\n  |\n8 |\
    \         .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len() && a.len()\
    \ == len))\n  |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `std::cmp::Ordering`, found `bool`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_lpjg0ls.rs:4:5\n  |\n3 |   fn longest(strings: Vec<String>)\
    \ -> Option<String> {\n  |                                       --------------\
    \ expected `Option<String>` because of return type\n4 | /     strings\n5 | | \
    \        .iter()\n6 | |         .map(|s| s.len())\n7 | |         .max()\n8 | |\
    \         .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len() && a.len()\
    \ == len))\n  | |__________________________________________________________________________________________^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n\n    Some(longest)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_e1em6xh.rs:11:23\n   |\n\
    8  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n11 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u64).cloned())\n        .ok()\n        .and_then(|s| s.len())\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp7ok40zgf.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp19jvj05k.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp19jvj05k.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  let len = s.len();\n            if acc.is_none() || len > acc.unwrap().len()\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu_8u25xn.rs:9:22\n  |\n9 |\
    \                 Some(s)\n  |                      ^- help: try using a conversion\
    \ method: `.to_string()`\n  |                      |\n  |                    \
    \  expected struct `String`, found `&String`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s.to_string())\n            } else\
    \ {\n                let mut len = s.len();\n                let mut max_len =\
    \ acc.unwrap().len();\n                while len < max_len {\n               \
    \     len += 1;\n                }\n                if len == max_len {\n    \
    \                Some(acc.unwrap().clone())\n                } else {\n      \
    \              None\n                }\n            }\n        })\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpngedmb55.rs:6:22\n\
    \  |\n6 |         .fold(None, |mut acc, s| {\n  |                      ----^^^\n\
    \  |                      |\n  |                      help: remove this `mut`\n\
    \  |\n  = note: `#[warn(unused_mut)]` on by default\n\nwarning: variable does\
    \ not need to be mutable\n  --> /tmp/tmpngedmb55.rs:11:21\n   |\n11 |        \
    \         let mut max_len = acc.unwrap().len();\n   |                     ----^^^^^^^\n\
    \   |                     |\n   |                     help: remove this `mut`\n\
    \nerror[E0382]: use of moved value: `acc`\n   --> /tmp/tmpngedmb55.rs:16:26\n\
    \    |\n6   |         .fold(None, |mut acc, s| {\n    |                      -------\
    \ move occurs because `acc` has type `Option<String>`, which does not implement\
    \ the `Copy` trait\n...\n11  |                 let mut max_len = acc.unwrap().len();\n\
    \    |                                       -------- `acc` moved due to this\
    \ method call\n...\n16  |                     Some(acc.unwrap().clone())\n   \
    \ |                          ^^^ value used here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `acc`\nhelp: consider\
    \ calling `.as_ref()` to borrow the type's contents\n    |\n11  |            \
    \     let mut max_len = acc.as_ref().unwrap().len();\n    |                  \
    \                     +++++++++\n\nerror: aborting due to previous error; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().fold(None, |max, s| {\n        if let Some(len) = s.length()\
    \ {\n            if len > max {\n                Some(s)\n            } else {\n\
    \                None\n            }\n        } else {\n            None\n   \
    \     }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for reference `&String` in\
    \ the current scope\n --> /tmp/tmpb6vb3trz.rs:5:30\n  |\n5 |         if let Some(len)\
    \ = s.length() {\n  |                              ^^^^^^ help: there is an associated\
    \ function with a similar name: `len`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpb6vb3trz.rs:7:22\n  |\n7 |                 Some(s)\n  |            \
    \          ^- help: try using a conversion method: `.to_string()`\n  |       \
    \               |\n  |                      expected struct `String`, found `&String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \    for s in strings {\n        let len = s.len();\n        if len > longest_len.len()\
    \ {\n            longest_len = len;\n            longest_str = s;\n        }\n\
    \    }\n    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfevjkt5s.rs:9:27\n  |\n9 |\
    \             longest_len = len;\n  |                           ^^^- help: try\
    \ using a conversion method: `.to_string()`\n  |                           |\n\
    \  |                           expected struct `String`, found `usize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if longest.len()\
    \ < s.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpfsnpsz0v.rs:10:13\n    |\n10  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp_zcui5mm.rs:10:13\n\
    \    |\n10  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok_or(Error::BadRequest(ErrorKind::InvalidParam, \"\
    Longest string length is invalid\"))\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n -->\
    \ /tmp/tmpie5k00yn.rs:9:34\n  |\n9 |         .ok_or(Error::BadRequest(ErrorKind::InvalidParam,\
    \ \"Longest string length is invalid\"))\n  |                                \
    \  ^^^^^^^^^ use of undeclared type `ErrorKind`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Error`\n --> /tmp/tmpie5k00yn.rs:9:16\n  |\n9 |    \
    \     .ok_or(Error::BadRequest(ErrorKind::InvalidParam, \"Longest string length\
    \ is invalid\"))\n  |                ^^^^^ not found in this scope\n  |\nhelp:\
    \ consider importing one of these items\n  |\n1 | use std::error::Error;\n  |\n\
    1 | use std::fmt::Error;\n  |\n1 | use std::io::Error;\n  |\n\nerror[E0599]: `Option<usize>`\
    \ is not an iterator\n   --> /tmp/tmpie5k00yn.rs:8:10\n    |\n8   |          \
    \ .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `Option<usize>:\
    \ Iterator`\n            which is required by `&mut Option<usize>: Iterator`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0433, E0599.\nFor more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfad9qnrz.rs:10:23\n   |\n\
    7  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n10 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len() && a.len()\
    \ == len))\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_lpjg0ls.rs:8:54\n  |\n8 |\
    \         .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len() && a.len()\
    \ == len))\n  |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `std::cmp::Ordering`, found `bool`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_lpjg0ls.rs:4:5\n  |\n3 |   fn longest(strings: Vec<String>)\
    \ -> Option<String> {\n  |                                       --------------\
    \ expected `Option<String>` because of return type\n4 | /     strings\n5 | | \
    \        .iter()\n6 | |         .map(|s| s.len())\n7 | |         .max()\n8 | |\
    \         .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len() && a.len()\
    \ == len))\n  | |__________________________________________________________________________________________^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfad9qnrz.rs:10:23\n   |\n\
    7  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n10 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len()).ok()\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `ok` found for enum `Option` in the current\
    \ scope\n --> /tmp/tmp4g0d6brd.rs:4:44\n  |\n4 |     strings.iter().max_by_key(|s|\
    \ s.len()).ok()\n  |                                            ^^ help: there\
    \ is an associated function with a similar name: `or`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u64).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpz__h6i1s.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp_zcui5mm.rs:10:13\n\
    \    |\n10  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp19jvj05k.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s.to_string())\n            } else\
    \ {\n                if acc.unwrap().len() < s.len() {\n                    Some(acc.unwrap().to_string())\n\
    \                } else {\n                    Some(s.to_string())\n         \
    \       }\n            }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmptzsfurmg.rs:6:22\n\
    \  |\n6 |         .fold(None, |mut acc, s| {\n  |                      ----^^^\n\
    \  |                      |\n  |                      help: remove this `mut`\n\
    \  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0382]: use of moved\
    \ value: `acc`\n   --> /tmp/tmptzsfurmg.rs:11:26\n    |\n6   |         .fold(None,\
    \ |mut acc, s| {\n    |                      ------- move occurs because `acc`\
    \ has type `Option<String>`, which does not implement the `Copy` trait\n...\n\
    10  |                 if acc.unwrap().len() < s.len() {\n    |               \
    \         -------- `acc` moved due to this method call\n11  |                \
    \     Some(acc.unwrap().to_string())\n    |                          ^^^ value\
    \ used here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `acc`\nhelp: consider calling `.as_ref()` to borrow the\
    \ type's contents\n    |\n10  |                 if acc.as_ref().unwrap().len()\
    \ < s.len() {\n    |                        +++++++++\n\nerror: aborting due to\
    \ previous error; 1 warning emitted\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok_or(format!(\"No string in list has length greater\
    \ than {}\", MAX_STRING_LENGTH))\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `MAX_STRING_LENGTH` in this scope\n -->\
    \ /tmp/tmpn6x0hnp8.rs:9:72\n  |\n9 |         .ok_or(format!(\"No string in list\
    \ has length greater than {}\", MAX_STRING_LENGTH))\n  |                     \
    \                                                   ^^^^^^^^^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpn6x0hnp8.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0425, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok_or(format!(\"No string in list has length greater\
    \ than one\"))\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpvs9u2s0u.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     let len = s.len();\n        if max_len.len() < len {\n            max_len\
    \ = s;\n            max_index = len;\n        }\n    }\n\n    if max_len.len()\
    \ == 0 {\n        return None;\n    }\n\n    Some(max_len.to_string())\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxqi48ch4.rs:10:9\n   |\n\
    10 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `Option<String>`\n   |         |\n   |         expected struct `String`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `s`\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpxqi48ch4.rs:9:25\n\
    \  |\n9 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().fold(None, |mut a, s| {\n        if a.is_none() {\n      \
    \      a = Some(s);\n        } else if a.len() < s.len() {\n            a = Some(a);\n\
    \        } else {\n            a = Some(s);\n        }\n        a\n    })\n}\n\
    \nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp68h_4ulm.rs:6:22\n  |\n6 |\
    \             a = Some(s);\n  |                      ^- help: try using a conversion\
    \ method: `.to_string()`\n  |                      |\n  |                    \
    \  expected struct `String`, found `&String`\n\nerror[E0599]: no method named\
    \ `len` found for enum `Option` in the current scope\n --> /tmp/tmp68h_4ulm.rs:7:21\n\
    \  |\n7 |         } else if a.len() < s.len() {\n  |                     ^^^ method\
    \ not found in `Option<String>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp68h_4ulm.rs:8:22\n\
    \  |\n8 |             a = Some(a);\n  |                      ^ expected struct\
    \ `String`, found enum `Option`\n  |\n  = note: expected struct `String`\n   \
    \            found enum `Option<String>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp68h_4ulm.rs:10:22\n   |\n10 |             a = Some(s);\n   |   \
    \                   ^- help: try using a conversion method: `.to_string()`\n \
    \  |                      |\n   |                      expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as usize).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpg12ashg6.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as i32).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpz_p8z1qz.rs:8:10\n    |\n\
    8   |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    let mut longestlen = String::new();\n\
    \    for s in strings {\n        if s.len() > longest.len() {\n            longest\
    \ = s;\n            longestlen = s.len();\n        }\n    }\n    if longest.len()\
    \ == 0 {\n        return None;\n    }\n    Some(longest)\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa0s804zj.rs:9:26\n  |\n5 |\
    \     let mut longestlen = String::new();\n  |                          -------------\
    \ expected due to this value\n...\n9 |             longestlen = s.len();\n  |\
    \                          ^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |                          |\n  |                          expected struct\
    \ `String`, found `usize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp19jvj05k.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  let len = s.len();\n            if len > acc.len() {\n                Some(s.clone())\n\
    \            } else if len == acc.len() {\n                Some(acc.clone())\n\
    \            } else {\n                None\n            }\n        })\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n --> /tmp/tmpkw5ik5i5.rs:8:26\n  |\n8 |             if len > acc.len()\
    \ {\n  |                          ^^^ method not found in `Option<String>`\n\n\
    error[E0599]: no method named `len` found for enum `Option` in the current scope\n\
    \  --> /tmp/tmpkw5ik5i5.rs:10:34\n   |\n10 |             } else if len == acc.len()\
    \ {\n   |                                  ^^^ method not found in `Option<String>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkw5ik5i5.rs:11:22\n   |\n11 |\
    \                 Some(acc.clone())\n   |                      ^^^^^^^^^^^ expected\
    \ struct `String`, found enum `Option`\n   |\n   = note: expected struct `String`\n\
    \                found enum `Option<String>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \    for s in strings {\n        if s.len() > longest_len.len() {\n          \
    \  longest_len = s.len();\n            longest_str = s;\n        }\n    }\n  \
    \  Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpby8susil.rs:8:27\n  |\n4 |\
    \     let mut longest_len = String::new();\n  |                           -------------\
    \ expected due to this value\n...\n8 |             longest_len = s.len();\n  |\
    \                           ^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |                           |\n  |                           expected struct\
    \ `String`, found `usize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u64).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpz__h6i1s.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_len = strings.iter().map(|s| s.len()).max().unwrap();\n\
    \    for s in strings {\n        if s.len() > max_len {\n            max_len =\
    \ s.len();\n        }\n    }\n\n    Some(max_len)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6yxkc2di.rs:16:10\n   |\n\
    16 |     Some(max_len)\n   |          ^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |          |\n   |          expected struct `String`, found\
    \ `usize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv761ng0g.rs:11:23\n   |\n\
    8  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n11 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    let mut longestlen = longest.len();\n    for s in strings\
    \ {\n        if s.len() > longestlen {\n            longest = s;\n           \
    \ longestlen = s.len();\n        }\n    }\n    Some(longest)\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n --> /tmp/tmpkx7ocqec.rs:8:23\n\
    \  |\n8 |     let mut longest = strings[0];\n  |                       ^^^^^^^^^^\n\
    \  |                       |\n  |                       move occurs because value\
    \ has type `String`, which does not implement the `Copy` trait\n  |          \
    \             help: consider borrowing here: `&strings[0]`\n\nerror[E0382]: borrow\
    \ of moved value: `s`\n  --> /tmp/tmpkx7ocqec.rs:13:26\n   |\n10 |     for s in\
    \ strings {\n   |         - move occurs because `s` has type `String`, which does\
    \ not implement the `Copy` trait\n11 |         if s.len() > longestlen {\n12 |\
    \             longest = s;\n   |                       - value moved here\n13\
    \ |             longestlen = s.len();\n   |                          ^^^^^^^ value\
    \ borrowed here after move\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0382, E0507.\nFor more information about\
    \ an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n\n    for s in strings\
    \ {\n        if s.len() > longest_len.len() {\n            longest_len = s.len();\n\
    \            longest_str = s;\n        }\n    }\n\n    Some(longest_str)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsn_uc18r.rs:13:27\n   |\n\
    8  |     let mut longest_len = String::new();\n   |                          \
    \ ------------- expected due to this value\n...\n13 |             longest_len\
    \ = s.len();\n   |                           ^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                           |\n   |             \
    \              expected struct `String`, found `usize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut longest, s| {\n      \
    \      if let Some(mut len) = longest.len() {\n                if len < s.len()\
    \ {\n                    longest = Some(s);\n                }\n            }\n\
    \            longest\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n --> /tmp/tmpemjfhkhe.rs:7:44\n  |\n7 |             if let Some(mut len)\
    \ = longest.len() {\n  |                                            ^^^ method\
    \ not found in `Option<String>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpemjfhkhe.rs:9:36\n\
    \  |\n9 |                     longest = Some(s);\n  |                        \
    \            ^- help: try using a conversion method: `.to_string()`\n  |     \
    \                               |\n  |                                    expected\
    \ struct `String`, found `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                acc = Some(s);\n            } else {\n\
    \                let len = s.len();\n                if len > acc.unwrap().len()\
    \ {\n                    acc = Some(s);\n                }\n            }\n  \
    \          acc\n        })\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqu1ans1d.rs:8:28\n  |\n8 |\
    \                 acc = Some(s);\n  |                            ^- help: try\
    \ using a conversion method: `.to_string()`\n  |                            |\n\
    \  |                            expected struct `String`, found `&String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpqu1ans1d.rs:12:32\n   |\n12 |  \
    \                   acc = Some(s);\n   |                                ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \        |\n   |                                expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    let mut longest_len = strings[0].len();\n\n    for s in strings.iter().rev()\
    \ {\n        if s.len() > longest_len {\n            longest = s;\n          \
    \  longest_len = s.len();\n        }\n    }\n\n    longest\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ba9z22h.rs:13:23\n   |\n\
    8  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n13 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6ba9z22h.rs:18:5\n\
    \   |\n3  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n...\n18 |     longest\n   |     ^^^^^^^ expected enum `Option`,\
    \ found struct `String`\n   |\n   = note: expected enum `Option<String>`\n   \
    \         found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n18 |     Some(longest)\n   |     +++++       +\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp_zcui5mm.rs:10:13\n\
    \    |\n10  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s.to_string())\n            } else\
    \ {\n                if acc.len() > s.len() {\n                    Some(acc.unwrap())\n\
    \                } else {\n                    Some(s.to_string())\n         \
    \       }\n            }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp1n78w8xj.rs:10:24\n   |\n10 |                 if acc.len()\
    \ > s.len() {\n   |                        ^^^ method not found in `Option<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len() && a.len()\
    \ == len))\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_lpjg0ls.rs:8:54\n  |\n8 |\
    \         .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len() && a.len()\
    \ == len))\n  |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `std::cmp::Ordering`, found `bool`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_lpjg0ls.rs:4:5\n  |\n3 |   fn longest(strings: Vec<String>)\
    \ -> Option<String> {\n  |                                       --------------\
    \ expected `Option<String>` because of return type\n4 | /     strings\n5 | | \
    \        .iter()\n6 | |         .map(|s| s.len())\n7 | |         .max()\n8 | |\
    \         .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len() && a.len()\
    \ == len))\n  | |__________________________________________________________________________________________^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    let mut longest_len = strings[0].len();\n\n    for s in strings.iter().rev()\
    \ {\n        if s.len() > longest_len {\n            longest = s;\n          \
    \  longest_len = s.len();\n        }\n    }\n\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcjbgdf9l.rs:13:23\n   |\n\
    8  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n13 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    let mut longestlen = String::new();\n\
    \    for s in strings {\n        if s.len() > longestlen.len() {\n           \
    \ longest = s;\n            longestlen = s.len();\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy6ovl4m0.rs:9:26\n  |\n5 |\
    \     let mut longestlen = String::new();\n  |                          -------------\
    \ expected due to this value\n...\n9 |             longestlen = s.len();\n  |\
    \                          ^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |                          |\n  |                          expected struct\
    \ `String`, found `usize`\n\nerror[E0599]: `String` is not an iterator\n   -->\
    \ /tmp/tmpy6ovl4m0.rs:12:13\n    |\n12  |       longest.cloned()\n    |      \
    \         ^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `String: Iterator`\n            which is required by `&mut String: Iterator`\n\
    \            `str: Iterator`\n            which is required by `&mut str: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \    for s in strings {\n        if s.len() > longest_len.len() {\n          \
    \  longest_len = s.len();\n            longest_str = s;\n        }\n    }\n  \
    \  Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpby8susil.rs:8:27\n  |\n4 |\
    \     let mut longest_len = String::new();\n  |                           -------------\
    \ expected due to this value\n...\n8 |             longest_len = s.len();\n  |\
    \                           ^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |                           |\n  |                           expected struct\
    \ `String`, found `usize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if longest.len()\
    \ < s.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpfsnpsz0v.rs:10:13\n    |\n10  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n\n    for s in strings\
    \ {\n        let len = s.len();\n        if len > longest_len.len() {\n      \
    \      longest_len = len;\n            longest_str = s;\n        }\n    }\n\n\
    \    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnjz38wd2.rs:14:27\n   |\n\
    14 |             longest_len = len;\n   |                           ^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \   |\n   |                           expected struct `String`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 0
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest_len = 0;\n    let mut longest_str = None;\n    for s in strings\
    \ {\n        let len = s.len();\n        if len > longest_len {\n            longest_len\
    \ = len;\n            longest_str = Some(s);\n        }\n    }\n    longest_str\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp19jvj05k.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if longest.len()\
    \ < s.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpfsnpsz0v.rs:10:13\n    |\n10  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len() && a.len()\
    \ == len))\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_lpjg0ls.rs:8:54\n  |\n8 |\
    \         .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len() && a.len()\
    \ == len))\n  |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `std::cmp::Ordering`, found `bool`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp_lpjg0ls.rs:4:5\n  |\n3 |   fn longest(strings: Vec<String>)\
    \ -> Option<String> {\n  |                                       --------------\
    \ expected `Option<String>` because of return type\n4 | /     strings\n5 | | \
    \        .iter()\n6 | |         .map(|s| s.len())\n7 | |         .max()\n8 | |\
    \         .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len() && a.len()\
    \ == len))\n  | |__________________________________________________________________________________________^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).cloned().ok())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp79zlqjii.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror[E0599]: no method named `ok` found for enum\
    \ `Option` in the current scope\n  --> /tmp/tmp79zlqjii.rs:10:80\n   |\n10 | \
    \        .and_then(|len| strings.iter().max_by_key(|s| s.len() as u32).cloned().ok())\n\
    \   |                                                                        \
    \        ^^ help: there is an associated function with a similar name: `or`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for string in strings.iter().rev() {\n        if string.length()\
    \ > longest.length() {\n            longest = string;\n        }\n    }\n\n  \
    \  Some(longest)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for reference `&String` in\
    \ the current scope\n  --> /tmp/tmphqeg3bpr.rs:10:19\n   |\n10 |         if string.length()\
    \ > longest.length() {\n   |                   ^^^^^^ help: there is an associated\
    \ function with a similar name: `len`\n\nerror[E0599]: no method named `length`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmphqeg3bpr.rs:10:38\n\
    \   |\n10 |         if string.length() > longest.length() {\n   |            \
    \                          ^^^^^^ help: there is an associated function with a\
    \ similar name: `len`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphqeg3bpr.rs:11:23\n\
    \   |\n8  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n11 |             longest = string;\n   |  \
    \                     ^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as usize).cloned())\n        .ok()\n        .and_then(|s| s.clone())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpc0e_54i1.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if let Some(mut len) = acc.len(); *len < s.len() {\n                acc = Some(s);\n\
    \            }\n            acc\n        })\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `;`\n --> /tmp/tmpndj1o6p3.rs:7:45\n  |\n7 |\
    \             if let Some(mut len) = acc.len(); *len < s.len() {\n  |        \
    \     --                              ^ expected `{`\n  |             |\n  | \
    \            this `if` expression has a condition, but no block\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by(|a,\
    \ b| a.len() < b.len() && a.len() == len))\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpvxuhbmna.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvxuhbmna.rs:10:54\n\
    \   |\n10 |         .and_then(|len| strings.iter().max_by(|a, b| a.len() < b.len()\
    \ && a.len() == len))\n   |                                                  \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`, found\
    \ `bool`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                acc = Some(s);\n            } else {\n\
    \                let len = s.len();\n                if len > acc.unwrap().len()\
    \ {\n                    acc = Some(s);\n                }\n            }\n  \
    \          acc\n        })\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqu1ans1d.rs:8:28\n  |\n8 |\
    \                 acc = Some(s);\n  |                            ^- help: try\
    \ using a conversion method: `.to_string()`\n  |                            |\n\
    \  |                            expected struct `String`, found `&String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpqu1ans1d.rs:12:32\n   |\n12 |  \
    \                   acc = Some(s);\n   |                                ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \        |\n   |                                expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp_zcui5mm.rs:10:13\n\
    \    |\n10  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok_or(Error::BadRequest(ErrorKind::InvalidParam, \"\
    No string with longest length\"))\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n -->\
    \ /tmp/tmp8h9k3ibi.rs:9:34\n  |\n9 |         .ok_or(Error::BadRequest(ErrorKind::InvalidParam,\
    \ \"No string with longest length\"))\n  |                                  ^^^^^^^^^\
    \ use of undeclared type `ErrorKind`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Error`\n --> /tmp/tmp8h9k3ibi.rs:9:16\n  |\n9 |         .ok_or(Error::BadRequest(ErrorKind::InvalidParam,\
    \ \"No string with longest length\"))\n  |                ^^^^^ not found in this\
    \ scope\n  |\nhelp: consider importing one of these items\n  |\n1 | use std::error::Error;\n\
    \  |\n1 | use std::fmt::Error;\n  |\n1 | use std::io::Error;\n  |\n\nerror[E0599]:\
    \ `Option<usize>` is not an iterator\n   --> /tmp/tmp8h9k3ibi.rs:8:10\n    |\n\
    8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<usize>: Iterator`\n            which is required by `&mut Option<usize>:\
    \ Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if longest.len()\
    \ < s.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpfsnpsz0v.rs:10:13\n    |\n10  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    let mut longestlen = String::new();\n\
    \    for s in strings {\n        if s.len() > longestlen.len() {\n           \
    \ longest = s;\n            longestlen = s.len();\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy6ovl4m0.rs:9:26\n  |\n5 |\
    \     let mut longestlen = String::new();\n  |                          -------------\
    \ expected due to this value\n...\n9 |             longestlen = s.len();\n  |\
    \                          ^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |                          |\n  |                          expected struct\
    \ `String`, found `usize`\n\nerror[E0599]: `String` is not an iterator\n   -->\
    \ /tmp/tmpy6ovl4m0.rs:12:13\n    |\n12  |       longest.cloned()\n    |      \
    \         ^^^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `String: Iterator`\n            which is required by `&mut String: Iterator`\n\
    \            `str: Iterator`\n            which is required by `&mut str: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oivj733.rs:4:54\n  |\n4 |\
    \     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n  |            \
    \                                          ^^^^ expected `&String`, found enum\
    \ `Option`\n  |\n  = note: expected reference `&String`\n                  found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1oivj733.rs:4:5\n\
    \  |\n3 | fn longest(strings: Vec<String>) -> Option<String> {\n  |          \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n4 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n\n    for s in strings\
    \ {\n        if s.len() > longest_len.len() {\n            longest_len = s.len();\n\
    \            longest_str = s;\n        }\n    }\n\n    Some(longest_str)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsn_uc18r.rs:13:27\n   |\n\
    8  |     let mut longest_len = String::new();\n   |                          \
    \ ------------- expected due to this value\n...\n13 |             longest_len\
    \ = s.len();\n   |                           ^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                           |\n   |             \
    \              expected struct `String`, found `usize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.chars().count())\n        .max()\n\
    \        .cloned()\n        .ok()\n        .and_then(|s| strings.iter().find(|s|\
    \ s == s).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpjzelri0i.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfad9qnrz.rs:10:23\n   |\n\
    7  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n10 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .and_then(|len| strings.iter().map(|s| s.len() as usize).max().filter(|&len|\
    \ len == len).first())\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `first` found for enum `Option` in the current\
    \ scope\n --> /tmp/tmpy7nmtl7v.rs:8:98\n  |\n8 |         .and_then(|len| strings.iter().map(|s|\
    \ s.len() as usize).max().filter(|&len| len == len).first())\n  |            \
    \                                                                            \
    \          ^^^^^ method not found in `Option<usize>`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).cloned())\n        .ok()\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmpyq7vg44y.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfad9qnrz.rs:10:23\n   |\n\
    7  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n10 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s.to_owned())\n            } else\
    \ {\n                if acc.len() > s.len() {\n                    Some(acc.to_owned())\n\
    \                } else {\n                    None\n                }\n     \
    \       }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpvee838fs.rs:10:24\n   |\n10 |                 if acc.len()\
    \ > s.len() {\n   |                        ^^^ method not found in `Option<String>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvee838fs.rs:11:26\n   |\n11 |\
    \                     Some(acc.to_owned())\n   |                          ^^^^^^^^^^^^^^\
    \ expected struct `String`, found enum `Option`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Option<String>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .and_then(|len| strings.iter().max_by_key(|s| s.len() as u32).take(len))\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmp_1so0wfa.rs:8:71\n     |\n8    |         .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).take(len))\n     |                                         \
    \                              ^^^^ --- supplied 1 argument\n     |          \
    \                                                             |\n     |      \
    \                                                                 expected 0 arguments\n\
    \     |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_1so0wfa.rs:4:5\n  |\n3 |   fn longest(strings: Vec<String>) ->\
    \ Option<String> {\n  |                                       -------------- expected\
    \ `Option<String>` because of return type\n4 | /     strings\n5 | |         .iter()\n\
    6 | |         .map(|s| s.len())\n7 | |         .max()\n8 | |         .and_then(|len|\
    \ strings.iter().max_by_key(|s| s.len() as u32).take(len))\n  | |________________________________________________________________________________^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .and_then(|len| strings.iter().max_by_key(|s| s.len() as i32).unwrap())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdnozeex6.rs:8:25\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<_>` because of return type\n\
    ...\n8 |         .and_then(|len| strings.iter().max_by_key(|s| s.len() as i32).unwrap())\n\
    \  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<_>`\n\
    \          found reference `&String`\nhelp: try wrapping the expression in `Some`\n\
    \  |\n8 |         .and_then(|len| Some(strings.iter().max_by_key(|s| s.len() as\
    \ i32).unwrap()))\n  |                         +++++                         \
    \                             +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp_zcui5mm.rs:10:13\n\
    \    |\n10  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s.clone())\n            } else {\n\
    \                if acc.len() > s.len() {\n                    Some(acc.clone())\n\
    \                } else {\n                    None\n                }\n     \
    \       }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpxu9g8n3f.rs:10:24\n   |\n10 |                 if acc.len()\
    \ > s.len() {\n   |                        ^^^ method not found in `Option<String>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxu9g8n3f.rs:11:26\n   |\n11 |\
    \                     Some(acc.clone())\n   |                          ^^^^^^^^^^^\
    \ expected struct `String`, found enum `Option`\n   |\n   = note: expected struct\
    \ `String`\n                found enum `Option<String>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \    for s in strings {\n        if s.len() > longest_len.len() {\n          \
    \  longest_len = s.len();\n            longest_str = s;\n        }\n    }\n  \
    \  Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpby8susil.rs:8:27\n  |\n4 |\
    \     let mut longest_len = String::new();\n  |                           -------------\
    \ expected due to this value\n...\n8 |             longest_len = s.len();\n  |\
    \                           ^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |                           |\n  |                           expected struct\
    \ `String`, found `usize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s.to_string())\n            } else\
    \ {\n                if acc.len() < s.len() {\n                    Some(acc.unwrap())\n\
    \                } else {\n                    Some(s.to_string())\n         \
    \       }\n            }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpazp4j95i.rs:10:24\n   |\n10 |                 if acc.len()\
    \ < s.len() {\n   |                        ^^^ method not found in `Option<String>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpwvxro1_e.rs:8:10\n    |\n\
    8   |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oivj733.rs:4:54\n  |\n4 |\
    \     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n  |            \
    \                                          ^^^^ expected `&String`, found enum\
    \ `Option`\n  |\n  = note: expected reference `&String`\n                  found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1oivj733.rs:4:5\n\
    \  |\n3 | fn longest(strings: Vec<String>) -> Option<String> {\n  |          \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n4 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp_zcui5mm.rs:10:13\n\
    \    |\n10  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                acc = Some(s);\n            } else {\n\
    \                let len = s.len();\n                if len > acc.unwrap().len()\
    \ {\n                    acc = Some(s);\n                }\n            }\n  \
    \          acc\n        })\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqu1ans1d.rs:8:28\n  |\n8 |\
    \                 acc = Some(s);\n  |                            ^- help: try\
    \ using a conversion method: `.to_string()`\n  |                            |\n\
    \  |                            expected struct `String`, found `&String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpqu1ans1d.rs:12:32\n   |\n12 |  \
    \                   acc = Some(s);\n   |                                ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \        |\n   |                                expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n\n    Some(longest)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_e1em6xh.rs:11:23\n   |\n\
    8  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n11 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv761ng0g.rs:11:23\n   |\n\
    8  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n11 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n    for s in strings\
    \ {\n        if s.len() > longest_len.len() {\n            longest_len = s.len();\n\
    \            longest_str = s;\n        }\n    }\n\n    Some(longest_str)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp14pw0tlm.rs:12:27\n   |\n\
    8  |     let mut longest_len = String::new();\n   |                          \
    \ ------------- expected due to this value\n...\n12 |             longest_len\
    \ = s.len();\n   |                           ^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                           |\n   |             \
    \              expected struct `String`, found `usize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    let mut longestlen = String::new();\n\
    \    for s in strings {\n        if s.len() > longestlen.len() {\n           \
    \ longest = s;\n            longestlen = s.len();\n        }\n    }\n    if longest.len()\
    \ == 0 {\n        return None;\n    }\n    Some(longest)\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgc4esmmi.rs:9:26\n  |\n5 |\
    \     let mut longestlen = String::new();\n  |                          -------------\
    \ expected due to this value\n...\n9 |             longestlen = s.len();\n  |\
    \                          ^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |                          |\n  |                          expected struct\
    \ `String`, found `usize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s.len())\n            } else {\n \
    \               if s.len() > acc.unwrap().len() {\n                    Some(s)\n\
    \                } else {\n                    acc\n                }\n      \
    \      }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm0dyimy2.rs:8:22\n  |\n8 |\
    \                 Some(s.len())\n  |                      ^^^^^^^- help: try using\
    \ a conversion method: `.to_string()`\n  |                      |\n  |       \
    \               expected struct `String`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm0dyimy2.rs:11:26\n   |\n11 |                     Some(s)\n\
    \   |                          ^- help: try using a conversion method: `.to_string()`\n\
    \   |                          |\n   |                          expected struct\
    \ `String`, found `&String`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n    for s in strings\
    \ {\n        if s.len() > longest_len.len() {\n            longest_len = s.len();\n\
    \            longest_str = s;\n        }\n    }\n    Some(longest_str)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyjgpmcqq.rs:12:27\n   |\n\
    8  |     let mut longest_len = String::new();\n   |                          \
    \ ------------- expected due to this value\n...\n12 |             longest_len\
    \ = s.len();\n   |                           ^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                           |\n   |             \
    \              expected struct `String`, found `usize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv761ng0g.rs:11:23\n   |\n\
    8  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n11 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    longest\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfa359iu0.rs:10:23\n   |\n\
    7  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n10 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfa359iu0.rs:13:5\n\
    \   |\n3  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n...\n13 |     longest\n   |     ^^^^^^^ expected enum `Option`,\
    \ found struct `String`\n   |\n   = note: expected enum `Option<String>`\n   \
    \         found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n13 |     Some(longest)\n   |     +++++       +\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oivj733.rs:4:54\n  |\n4 |\
    \     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n  |            \
    \                                          ^^^^ expected `&String`, found enum\
    \ `Option`\n  |\n  = note: expected reference `&String`\n                  found\
    \ enum `Option<_>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1oivj733.rs:4:5\n\
    \  |\n3 | fn longest(strings: Vec<String>) -> Option<String> {\n  |          \
    \                           -------------- expected `Option<String>` because of\
    \ return type\n4 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    longest\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfa359iu0.rs:10:23\n   |\n\
    7  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n10 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfa359iu0.rs:13:5\n\
    \   |\n3  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n...\n13 |     longest\n   |     ^^^^^^^ expected enum `Option`,\
    \ found struct `String`\n   |\n   = note: expected enum `Option<String>`\n   \
    \         found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n13 |     Some(longest)\n   |     +++++       +\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if longest.len()\
    \ < s.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpfsnpsz0v.rs:10:13\n    |\n10  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    let mut longest_len = String::new();\n\
    \    for s in strings {\n        if s.len() > longest_len.len() {\n          \
    \  longest = s;\n            longest_len = s.len();\n        }\n    }\n    longest_len.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjp0dvhkw.rs:9:27\n  |\n5 |\
    \     let mut longest_len = String::new();\n  |                           -------------\
    \ expected due to this value\n...\n9 |             longest_len = s.len();\n  |\
    \                           ^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |                           |\n  |                           expected struct\
    \ `String`, found `usize`\n\nerror[E0599]: `String` is not an iterator\n   -->\
    \ /tmp/tmpjp0dvhkw.rs:12:17\n    |\n12  |       longest_len.cloned()\n    |  \
    \                 ^^^^^^ `String` is not an iterator; try calling `.chars()` or\
    \ `.bytes()`\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `&mut String:\
    \ Iterator`\n            `str: Iterator`\n            which is required by `&mut\
    \ str: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if s.len()\
    \ > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `String` is not an iterator\n   --> /tmp/tmp_zcui5mm.rs:10:13\n\
    \    |\n10  |       longest.cloned()\n    |               ^^^^^^ `String` is not\
    \ an iterator; try calling `.chars()` or `.bytes()`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpwvxro1_e.rs:8:10\n    |\n\
    8   |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:34\n  |\n4 |\
    \     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n  |   \
    \                               ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpjjxufkql.rs:4:63\n\
    \  |\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n  |\n  = note: expected reference `&String`\n\
    \                  found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpjjxufkql.rs:4:5\n  |\n3 | fn longest(strings: Vec<String>) -> Option<String>\
    \ {\n  |                                     -------------- expected `Option<String>`\
    \ because of return type\n4 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found `&String`\n  |\n  = note:   expected enum `Option<String>`\n\
    \          found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok_or(Error::BadRequest(ErrorKind::NotFound, \"No string\
    \ found\"))\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `ErrorKind`\n -->\
    \ /tmp/tmp2dto06u4.rs:9:34\n  |\n9 |         .ok_or(Error::BadRequest(ErrorKind::NotFound,\
    \ \"No string found\"))\n  |                                  ^^^^^^^^^ use of\
    \ undeclared type `ErrorKind`\n\nerror[E0433]: failed to resolve: use of undeclared\
    \ type `Error`\n --> /tmp/tmp2dto06u4.rs:9:16\n  |\n9 |         .ok_or(Error::BadRequest(ErrorKind::NotFound,\
    \ \"No string found\"))\n  |                ^^^^^ not found in this scope\n  |\n\
    help: consider importing one of these items\n  |\n1 | use std::error::Error;\n\
    \  |\n1 | use std::fmt::Error;\n  |\n1 | use std::io::Error;\n  |\n\nerror[E0599]:\
    \ `Option<usize>` is not an iterator\n   --> /tmp/tmp2dto06u4.rs:8:10\n    |\n\
    8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<usize>: Iterator`\n            which is required by `&mut Option<usize>:\
    \ Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0433, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0433`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n   \
    \     .cloned()\n        .ok()\n        .and_then(|len| strings.iter().max_by_key(|s|\
    \ s.len() as u32).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: `Option<usize>` is not an iterator\n   --> /tmp/tmp19jvj05k.rs:8:10\n\
    \    |\n8   |           .cloned()\n    |            ^^^^^^ `Option<usize>` is\
    \ not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzc5nshwa.rs:4:5\n  |\n3 |\
    \ fn longest(strings: Vec<String>) -> Option<String> {\n  |                  \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n4 |     strings.iter().max_by_key(|s| s.len())\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n  |\n  = note: expected enum `Option<String>`\n\
    \             found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest_len = String::new();\n    let mut longest_str = String::new();\n\
    \    for s in strings {\n        let len = s.len();\n        if len > longest_len.len()\
    \ {\n            longest_len = len;\n            longest_str = s;\n        }\n\
    \    }\n    Some(longest_str)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfevjkt5s.rs:9:27\n  |\n9 |\
    \             longest_len = len;\n  |                           ^^^- help: try\
    \ using a conversion method: `.to_string()`\n  |                           |\n\
    \  |                           expected struct `String`, found `usize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n          \
    \  if acc.is_none() {\n                Some(s.len())\n            } else {\n \
    \               if acc.unwrap().len() < s.len() {\n                    Some(acc.unwrap())\n\
    \                } else {\n                    Some(s)\n                }\n  \
    \          }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzbdxxwgb.rs:8:22\n  |\n8 |\
    \                 Some(s.len())\n  |                      ^^^^^^^- help: try using\
    \ a conversion method: `.to_string()`\n  |                      |\n  |       \
    \               expected struct `String`, found `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzbdxxwgb.rs:13:26\n   |\n13 |                     Some(s)\n\
    \   |                          ^- help: try using a conversion method: `.to_string()`\n\
    \   |                          |\n   |                          expected struct\
    \ `String`, found `&String`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976574
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfad9qnrz.rs:10:23\n   |\n\
    7  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n10 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfad9qnrz.rs:10:23\n   |\n\
    7  |     let mut longest = strings[0];\n   |                       ----------\
    \ expected due to this value\n...\n10 |             longest = s;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976573
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    for s in strings {\n        if longest.len()\
    \ < s.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmpfsnpsz0v.rs:10:13\n    |\n10  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749540
- exit_code: 1
  program: "/// Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n/// strings of the same length. Return None in case the\
    \ input list is empty.\nfn longest(strings: Vec<String>) -> Option<String> {\n\
    \    let mut longest = String::new();\n    let mut longest_len = String::new();\n\
    \    for s in strings {\n        if s.len() > longest_len.len() {\n          \
    \  longest = s;\n            longest_len = s.len();\n        }\n    }\n    longest_len.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjp0dvhkw.rs:9:27\n  |\n5 |\
    \     let mut longest_len = String::new();\n  |                           -------------\
    \ expected due to this value\n...\n9 |             longest_len = s.len();\n  |\
    \                           ^^^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |                           |\n  |                           expected struct\
    \ `String`, found `usize`\n\nerror[E0599]: `String` is not an iterator\n   -->\
    \ /tmp/tmpjp0dvhkw.rs:12:17\n    |\n12  |       longest_len.cloned()\n    |  \
    \                 ^^^^^^ `String` is not an iterator; try calling `.chars()` or\
    \ `.bytes()`\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `&mut String:\
    \ Iterator`\n            `str: Iterator`\n            which is required by `&mut\
    \ str: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976574
