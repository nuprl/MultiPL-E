language: rs
name: HumanEval_139_special_factorial
results:
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp78nou_dx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * (n - 1)\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpat3_ud1j.rs:11:5\n\
    \   |\n11 |     factorial(n) * (n - 1)\n   |     ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    factorial(n).iter().fold(1, |acc, x|\
    \ acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpps9c1wg2.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 6\n\
    \    }\n    if n == 4 {\n        return 24\n    }\n    if n == 5 {\n        return\
    \ 120\n    }\n    if n == 6 {\n        return 720\n    }\n    if n == 7 {\n  \
    \      return 5040\n    }\n    if n == 8 {\n        return 40320\n    }\n    if\
    \ n == 9 {\n        return 362880\n    }\n    if n == 10 {\n        return 3628800\n\
    \    }\n    if n == 11 {\n        return 39916800\n    }\n    if n == 12 {\n \
    \       return 479001600\n    }\n    if n == 13 {\n        return 6227020800\n\
    \    }\n    if n == 14 {\n        return 87178291200\n    }\n    if n == 15 {\n\
    \        return 1307674368000\n    }\n    if n == 16 {\n        return 20922789888000\n\
    \    }\n    if n == 17 {\n        return 355687428096000\n    }\n    if n == 18\
    \ {\n        return 6402373705728000\n    }\n    if n == 19 {\n        return\
    \ 121645100408832000\n    }\n    if n == 20 {\n        return 2432902008176640000\n\
    \    }\n    if n == 21 {\n        return 51090942171709440000\n    }\n    if n\
    \ == 22 {\n        return 1124000727777607680000\n    }\n    if n == 23 {\n  \
    \      return 25852016738884976640000\n    }\n    if n == 24 {\n        return\
    \ 620448401733239439360000\n    }\n    if n == 25 {\n        return 15511210043330985984000000\n\
    \    }\n    if n == 26 {\n        return 403291461126605635584000000\n    }\n\
    \    if n == 27 {\n        return 10888869450418352160768000000\n    }\n    if\
    \ n == 28 {\n        return 304888344611713860501504000000\n    }\n    if n ==\
    \ 29 {\n        return 8841761993739701954543616000000\n    }\n    if n == 30\
    \ {\n        return 265252859812191058636308480000000\n    }\n    if n == 31 {\n\
    \        return 6212872577617268866577990464400000000\n    }\n    if n == 32 {\n\
    \        return 15258789062517241118175719258080000000\n    }\n    if n == 33\
    \ {\n        return 34131070718231335920514\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp8xvpq147.rs:117:3\n\
    \    |\n7   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n107 |     if n == 33 {\n\
    \    |                - this delimiter might not be properly closed...\n108 |\
    \         return 34131070718231335920514\n109 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n117 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp8xvpq147.rs:7:35\n  |\n7 | fn special_factorial(n: isize)\
    \ -> isize {\n  |    -----------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 6\n\
    \    }\n    if n == 4 {\n        return 24\n    }\n    if n == 5 {\n        return\
    \ 120\n    }\n    if n == 6 {\n        return 720\n    }\n    if n == 7 {\n  \
    \      return 5040\n    }\n    if n == 8 {\n        return 40320\n    }\n    if\
    \ n == 9 {\n        return 362880\n    }\n    if n == 10 {\n        return 3628800\n\
    \    }\n    if n == 11 {\n        return 39916800\n    }\n    if n == 12 {\n \
    \       return 479001600\n    }\n    if n == 13 {\n        return 6227020800\n\
    \    }\n    if n == 14 {\n        return 87178291200\n    }\n    if n == 15 {\n\
    \        return 1307674368000\n    }\n    if n == 16 {\n        return 20922789888000\n\
    \    }\n    if n == 17 {\n        return 355687428096000\n    }\n    if n == 18\
    \ {\n        return 6402373705728000\n    }\n    if n == 19 {\n        return\
    \ 121645100408832000\n    }\n    if n == 20 {\n        return 2432902008176640000\n\
    \    }\n    if n == 21 {\n        return 51090942171709440000\n    }\n    if n\
    \ == 22 {\n        return 1124000727777607680000\n    }\n    if n == 23 {\n  \
    \      return 25852016738884976640000\n    }\n    if n == 24 {\n        return\
    \ 620448401733239439360000\n    }\n    if n == 25 {\n        return 121645100408832384000000\n\
    \    }\n    if n == 26 {\n        return 24329020081766400000000\n    }\n    if\
    \ n == 27 {\n        return 510909421717094400000000\n    }\n    if n == 28 {\n\
    \        return 11240007277776076800000000\n    }\n    if n == 29 {\n        return\
    \ 258520167388849766400000000\n    }\n    if n == 30 {\n        return 6204484017332394393600000000\n\
    \    }\n    if n == 31 {\n        return 121645100408832384000000000\n    }\n\
    \    if n == 32 {\n        return 24329020081766400000000000\n    }\n    if n\
    \ == 33 {\n        return 510909421717094400000000000\n    }\n    if n == 34 {\n\
    \        return 11240007277776076800000000000\n    }\n    if n == 35 {\n     \
    \   return \n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp5sorls76.rs:123:3\n\
    \    |\n7   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n113 |     if n == 35 {\n\
    \    |                - this delimiter might not be properly closed...\n114 |\
    \         return \n115 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n123 | }\n    |   ^\n\nerror[E0069]: `return;` in a function\
    \ whose return type is not `()`\n   --> /tmp/tmp5sorls76.rs:114:9\n    |\n7  \
    \ | fn special_factorial(n: isize) -> isize {\n    |                         \
    \          ----- expected `isize` because of this return type\n...\n114 |    \
    \     return \n    |         ^^^^^^ return type is not `()`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp5sorls76.rs:7:35\n  |\n7 | fn special_factorial(n: isize)\
    \ -> isize {\n  |    -----------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0069, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0069`.\n"
  stdout: ''
  timestamp: 1660008928
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    else if n == 1 {\n        return n\n\
    \    }\n    else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\
    fn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkm0x5r3q.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp78nou_dx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp4eo9c04u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * (n - 1)\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpat3_ud1j.rs:11:5\n\
    \   |\n11 |     factorial(n) * (n - 1)\n   |     ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n\n    let mut result = 1;\n    for i in\
    \ 1..=n {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp4ve6tikv.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 6\n\
    \    }\n    if n == 4 {\n        return 24\n    }\n    if n == 5 {\n        return\
    \ 120\n    }\n    if n == 6 {\n        return 720\n    }\n    if n == 7 {\n  \
    \      return 5040\n    }\n    if n == 8 {\n        return 40320\n    }\n    if\
    \ n == 9 {\n        return 362880\n    }\n    if n == 10 {\n        return 3628800\n\
    \    }\n    if n == 11 {\n        return 39916800\n    }\n    if n == 12 {\n \
    \       return 479001600\n    }\n    if n == 13 {\n        return 6227020800\n\
    \    }\n    if n == 14 {\n        return 87178291200\n    }\n    if n == 15 {\n\
    \        return 1307674368000\n    }\n    if n == 16 {\n        return 20922789888000\n\
    \    }\n    if n == 17 {\n        return 355687428096000\n    }\n    if n == 18\
    \ {\n        return 640237370572800\n    }\n    if n == 19 {\n        return 12164510040883200\n\
    \    }\n    if n == 20 {\n        return 2432902008176640000\n    }\n    if n\
    \ == 21 {\n        return 51090942171709440000\n    }\n    if n == 22 {\n    \
    \    return 1124000727777607680000\n    }\n    if n == 23 {\n        return 25852016738884976640000\n\
    \    }\n    if n == 24 {\n        return 620448401733239439360000\n    }\n   \
    \ if n == 25 {\n        return 1216451004088321510080000\n    }\n    if n == 26\
    \ {\n        return 24329020081766400000000\n    }\n    if n == 27 {\n       \
    \ return 510909421717094400000000\n    }\n    if n == 28 {\n        return 11240007277776076800000000\n\
    \    }\n    if n == 29 {\n        return 258520167388849766400000000\n    }\n\
    \    if n == 30 {\n        return 6204484017332394393600000000\n    }\n    if\
    \ n == 31 {\n        return 12164510040883215100800000000\n    }\n    if n ==\
    \ 32 {\n        return 243290200817664000000000\n    }\n    if n == 33 {\n   \
    \     return 5109094217170944000000000\n    }\n    if n == 34 {\n        return\
    \ 112400072777760768000000000\n    }\n    if n == 35 {\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp5blalex5.rs:122:3\n\
    \    |\n7   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n113 |     if n == 35 {\n\
    \    |                - this delimiter might not be properly closed...\n114 |\
    \ }\n    | - ...as it matches this but it has different indentation\n...\n122\
    \ | }\n    |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5blalex5.rs:7:35\n\
    \  |\n7 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp4eo9c04u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpnufwfep0.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 6\n\
    \    }\n    if n == 4 {\n        return 24\n    }\n    if n == 5 {\n        return\
    \ 120\n    }\n    if n == 6 {\n        return 720\n    }\n    if n == 7 {\n  \
    \      return 5040\n    }\n    if n == 8 {\n        return 40320\n    }\n    if\
    \ n == 9 {\n        return 362880\n    }\n    if n == 10 {\n        return 3628800\n\
    \    }\n    if n == 11 {\n        return 39916800\n    }\n    if n == 12 {\n \
    \       return 479001600\n    }\n    if n == 13 {\n        return 6227020800\n\
    \    }\n    if n == 14 {\n        return 87178291200\n    }\n    if n == 15 {\n\
    \        return 1307674368000\n    }\n    if n == 16 {\n        return 20922789888000\n\
    \    }\n    if n == 17 {\n        return 355687428096000\n    }\n    if n == 18\
    \ {\n        return 640237370572800\n    }\n    if n == 19 {\n        return 12164510040883200\n\
    \    }\n    if n == 20 {\n        return 2432902008176640000\n    }\n    if n\
    \ == 21 {\n        return 51090942171709440000\n    }\n    if n == 22 {\n    \
    \    return 1124000727777607680000\n    }\n    if n == 23 {\n        return 25852016738884976640000\n\
    \    }\n    if n == 24 {\n        return 620448401733239439360000\n    }\n   \
    \ if n == 25 {\n        return 1216451004088321510080000\n    }\n    if n == 26\
    \ {\n        return 24329020081766400000000\n    }\n    if n == 27 {\n       \
    \ return 510909421717094400000000\n    }\n    if n == 28 {\n        return 11240007277776076800000000\n\
    \    }\n    if n == 29 {\n        return 258520167388849766400000000\n    }\n\
    \    if n == 30 {\n        return 6204484017332394393600000000\n    }\n    if\
    \ n == 31 {\n        return 12164510040883215100800000000\n    }\n    if n ==\
    \ 32 {\n        return 243290200817664000000000\n    }\n    if n == 33 {\n   \
    \     return 5109094217170944000000000\n    }\n    if n == 34 {\n        return\
    \ 112400072777760768000000000\n    }\n    if n == 35 {\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp5blalex5.rs:122:3\n\
    \    |\n7   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n113 |     if n == 35 {\n\
    \    |                - this delimiter might not be properly closed...\n114 |\
    \ }\n    | - ...as it matches this but it has different indentation\n...\n122\
    \ | }\n    |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5blalex5.rs:7:35\n\
    \  |\n7 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return n\n    }\n\
    \    return n * special_factorial(n - 1)\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpx21aep5j.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n\n    let mut result = 1;\n    for i in\
    \ 1..=n {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp4ve6tikv.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1, |acc, x|\
    \ acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpw4d67bry.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().rev().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpbtjzdt8s.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().rev().fold(1, |acc, x| acc * x)\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n\n    let mut result = 1;\n    for i in\
    \ 1..=n {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp4ve6tikv.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp78nou_dx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpzpq7xbwi.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().iter().cloned().sum()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmptxq7gh0g.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect::<Vec<_>>().iter().cloned().sum()\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpvbs2e_pp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpg9wiya9z.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().rev().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpbtjzdt8s.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().rev().fold(1, |acc, x| acc * x)\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().map(|x| x * x).sum::<isize>()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpb29y7wf3.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().map(|x| x * x).sum::<isize>()\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 6\n\
    \    }\n    if n == 4 {\n        return 24\n    }\n    if n == 5 {\n        return\
    \ 120\n    }\n    if n == 6 {\n        return 720\n    }\n    if n == 7 {\n  \
    \      return 5040\n    }\n    if n == 8 {\n        return 40320\n    }\n    if\
    \ n == 9 {\n        return 362880\n    }\n    if n == 10 {\n        return 3628800\n\
    \    }\n    if n == 11 {\n        return 39916800\n    }\n    if n == 12 {\n \
    \       return 479001600\n    }\n    if n == 13 {\n        return 6227020800\n\
    \    }\n    if n == 14 {\n        return 87178291200\n    }\n    if n == 15 {\n\
    \        return 1307674368000\n    }\n    if n == 16 {\n        return 20922789888000\n\
    \    }\n    if n == 17 {\n        return 355687428096000\n    }\n    if n == 18\
    \ {\n        return 6402373705728000\n    }\n    if n == 19 {\n        return\
    \ 121645100408832000\n    }\n    if n == 20 {\n        return 2432902008176640000\n\
    \    }\n    if n == 21 {\n        return 51090942171709440000\n    }\n    if n\
    \ == 22 {\n        return 1124000727777607680000\n    }\n    if n == 23 {\n  \
    \      return 25852016738884976640000\n    }\n    if n == 24 {\n        return\
    \ 620448401733239439360000\n    }\n    if n == 25 {\n        return 15511210043330985984000000\n\
    \    }\n    if n == 26 {\n        return 403291461126605635584000000\n    }\n\
    \    if n == 27 {\n        return 10888869450418352160768000000\n    }\n    if\
    \ n == 28 {\n        return 304888344611713860501504000000\n    }\n    if n ==\
    \ 29 {\n        return 8841761993739701954543616000000\n    }\n    if n == 30\
    \ {\n        return 265252859812191058636308480000000\n    }\n    if n == 31 {\n\
    \        return 8222838654177922817725562880000000\n    }\n    if n == 32 {\n\
    \        return 176477089568544357470498223372080000000\n    }\n    if n == 33\
    \ {\n        return 353982357011730247309121398\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpne7je7rw.rs:117:3\n\
    \    |\n7   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n107 |     if n == 33 {\n\
    \    |                - this delimiter might not be properly closed...\n108 |\
    \         return 353982357011730247309121398\n109 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n117 | }\n    |   ^\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpne7je7rw.rs:7:35\n  |\n7 | fn special_factorial(n:\
    \ isize) -> isize {\n  |    -----------------              ^^^^^ expected `isize`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp4eo9c04u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp78nou_dx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 6\n\
    \    }\n    if n == 4 {\n        return 24\n    }\n    if n == 5 {\n        return\
    \ 120\n    }\n    if n == 6 {\n        return 720\n    }\n    if n == 7 {\n  \
    \      return 5040\n    }\n    if n == 8 {\n        return 40320\n    }\n    if\
    \ n == 9 {\n        return 362880\n    }\n    if n == 10 {\n        return 3628800\n\
    \    }\n    if n == 11 {\n        return 39916800\n    }\n    if n == 12 {\n \
    \       return 479001600\n    }\n    if n == 13 {\n        return 6227020800\n\
    \    }\n    if n == 14 {\n        return 87178291200\n    }\n    if n == 15 {\n\
    \        return 1307674368000\n    }\n    if n == 16 {\n        return 20922789888000\n\
    \    }\n    if n == 17 {\n        return 355687428096000\n    }\n    if n == 18\
    \ {\n        return 6402373705728000\n    }\n    if n == 19 {\n        return\
    \ 121645100408832000\n    }\n    if n == 20 {\n        return 2432902008176640000\n\
    \    }\n    if n == 21 {\n        return 51090942171709440000\n    }\n    if n\
    \ == 22 {\n        return 1124000727777607680000\n    }\n    if n == 23 {\n  \
    \      return 25852016738884976640000\n    }\n    if n == 24 {\n        return\
    \ 620448401733239439360000\n    }\n    if n == 25 {\n        return 121645100408832384000000\n\
    \    }\n    if n == 26 {\n        return 24329020081766400000000\n    }\n    if\
    \ n == 27 {\n        return 510909421717094400000000\n    }\n    if n == 28 {\n\
    \        return 11240007277776076800000000\n    }\n    if n == 29 {\n        return\
    \ 258520167388849766400000000\n    }\n    if n == 30 {\n        return 6204484017332394393600000000\n\
    \    }\n    if n == 31 {\n        return 121645100408832384000000000\n    }\n\
    \    if n == 32 {\n        return 24329020081766400000000000\n    }\n    if n\
    \ == 33 {\n        return 510909421717094400000000000\n    }\n    if n == 34 {\n\
    \        return 11240007277776076800000000000\n    }\n    if n == 35 {\n     \
    \   return \n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp5sorls76.rs:123:3\n\
    \    |\n7   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n113 |     if n == 35 {\n\
    \    |                - this delimiter might not be properly closed...\n114 |\
    \         return \n115 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n123 | }\n    |   ^\n\nerror[E0069]: `return;` in a function\
    \ whose return type is not `()`\n   --> /tmp/tmp5sorls76.rs:114:9\n    |\n7  \
    \ | fn special_factorial(n: isize) -> isize {\n    |                         \
    \          ----- expected `isize` because of this return type\n...\n114 |    \
    \     return \n    |         ^^^^^^ return type is not `()`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp5sorls76.rs:7:35\n  |\n7 | fn special_factorial(n: isize)\
    \ -> isize {\n  |    -----------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0069, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0069`.\n"
  stdout: ''
  timestamp: 1660008928
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().rev().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpbtjzdt8s.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().rev().fold(1, |acc, x| acc * x)\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return n\n    }\n\
    \    if n == 2 {\n        return n * special_factorial(n - 1)\n    }\n    if n\
    \ == 3 {\n        return n * special_factorial(n - 2) * special_factorial(n -\
    \ 3)\n    }\n    if n == 4 {\n        return n * special_factorial(n - 4) * special_factorial(n\
    \ - 3)\n    }\n    if n == 5 {\n        return n * special_factorial(n - 4) *\
    \ special_factorial(n - 3)\n    }\n    if n == 6 {\n        return n * special_factorial(n\
    \ - 4) * special_factorial(n - 3)\n    }\n    if n == 7 {\n        return n *\
    \ special_factorial(n - 4) * special_factorial(n - 3)\n    }\n    if n == 8 {\n\
    \        return n * special_factorial(n - 4) * special_factorial(n - 3)\n    }\n\
    \    if n == 9 {\n        return n * special_factorial(n - 4) * special_factorial(n\
    \ - 3)\n    }\n    if n == 10 {\n        return n * special_factorial(n - 4) *\
    \ special_factorial(n - 3)\n    }\n    if n == 11 {\n        return n * special_factorial(n\
    \ - 4) * special_factorial(n - 3)\n    }\n    if n == 12 {\n        return n *\
    \ special_factorial(n - 4) * special_factorial(n - 3)\n    }\n    if n == 13 {\n\
    \        return n * special_factorial(n - 4) * special_factorial(n - 3)\n    }\n\
    \    if n == 14 {\n        return n * special_factorial(n - 4) * special_factorial(n\
    \ - 3)\n    }\n    if n == 15 {\n        return n * special_factorial(n - 4) *\
    \ special_factorial(n - 3)\n    }\n    if n == 16 {\n        return n * special_factorial(n\
    \ - 4) * special_factorial(n - 3)\n    }\n    if n == 17 {\n        return n *\
    \ special_factorial(n - 4) * special_factorial(n - 3)\n    }\n    if n == 18 {\n\
    \        return n * special_factorial(n - 4) * special_factorial(n - 3)\n    }\n\
    \    if n == 19 {\n        return n * special_factorial(n - 4) * special_factorial(n\
    \ - 3)\n    }\n    if n == 20 {\n        return n * special_factorial(n - 4) *\
    \ special_factorial(n - 3)\n    }\n    if n == 21 {\n        return n * special_factorial(n\
    \ - 4) * special_factorial(n - 3)\n    }\n    if n == 22 {\n        return n *\
    \ special_factorial(n - 4) * special_factorial(n - 3)\n    }\n    if n == 23 {\n\
    \        return n * special_factorial(n - 4) * special_factorial(n - 3)\n    }\n\
    \    if n == 24 {\n        return n * special_factorial(n - 4) * special_factorial(n\
    \ - 3)\n    }\n    if n == 25 {\n        return n * special_factorial(n - 4) *\
    \ special_factorial(n - 3)\n    }\n    if \n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp7quw36u1.rs:87:1\n\
    \   |\n87 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().iter().cloned().sum()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpwncobt0o.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect::<Vec<_>>().iter().cloned().sum()\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp78nou_dx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n\n    let mut result = 1;\n    for i in\
    \ 1..=n {\n        result = result * i;\n    }\n\n    result\n}\n\nfn main() {\n\
    \    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpo2qkryly.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1, |acc, x|\
    \ acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpw4d67bry.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result *= i;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmps75kpy5d.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp78nou_dx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 6\n\
    \    }\n    if n == 4 {\n        return 24\n    }\n    if n == 5 {\n        return\
    \ 120\n    }\n    if n == 6 {\n        return 720\n    }\n    if n == 7 {\n  \
    \      return 5040\n    }\n    if n == 8 {\n        return 40320\n    }\n    if\
    \ n == 9 {\n        return 362880\n    }\n    if n == 10 {\n        return 3628800\n\
    \    }\n    if n == 11 {\n        return 39916800\n    }\n    if n == 12 {\n \
    \       return 479001600\n    }\n    if n == 13 {\n        return 6227020800\n\
    \    }\n    if n == 14 {\n        return 87178291200\n    }\n    if n == 15 {\n\
    \        return 1307674368000\n    }\n    if n == 16 {\n        return 20922789888000\n\
    \    }\n    if n == 17 {\n        return 355687428096000\n    }\n    if n == 18\
    \ {\n        return 6402373705728000\n    }\n    if n == 19 {\n        return\
    \ 121645100408832000\n    }\n    if n == 20 {\n        return 2432902008176640000\n\
    \    }\n    if n == 21 {\n        return 51090942171709440000\n    }\n    if n\
    \ == 22 {\n        return 1124000727777607680000\n    }\n    if n == 23 {\n  \
    \      return 25852016738884976640000\n    }\n    if n == 24 {\n        return\
    \ 620448401733239439360000\n    }\n    if n == 25 {\n        return 15511210043330985984000000\n\
    \    }\n    if n == 26 {\n        return 403291461126605635584000000\n    }\n\
    \    if n == 27 {\n        return 6798916376386126717728000000\n    }\n    if\
    \ n == 28 {\n        return 13743895347260310066032000000\n    }\n    if n ==\
    \ 29 {\n        return 274877906944256439686432000000\n    }\n    if n == 30 {\n\
    \        return 549755813888118864128000000\n    }\n    if n == 31 {\n       \
    \ return 109041236807458882944000000\n    }\n    if n == 32 {\n        return\
    \ 17749418753697439516128000000\n    }\n    if n == 33 {\n        return 35398235702467470336864000000\n\
    \    }\n    if n == 34 {\n\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpl5js92_6.rs:120:3\n\
    \    |\n7   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n110 |     if n == 34 {\n\
    \    |                - this delimiter might not be properly closed...\n111 |\
    \ \n112 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n120 | }\n    |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpl5js92_6.rs:7:35\n\
    \  |\n7 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    factorial(n).iter().fold(1, |acc, x|\
    \ acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpps9c1wg2.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp78nou_dx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    else if n == 1 {\n        return n\n\
    \    }\n    else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\
    fn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkm0x5r3q.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1, |acc, x|\
    \ acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpw4d67bry.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmp8optlun8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpnufwfep0.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    if n == 1 {\n        return 1;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 6;\n    }\n    if n == 4 {\n        return 24;\n    }\n    if n == 5 {\n   \
    \     return 120;\n    }\n    if n == 6 {\n        return 720;\n    }\n    if\
    \ n == 7 {\n        return 5040;\n    }\n    if n == 8 {\n        return 40320;\n\
    \    }\n    if n == 9 {\n        return 362880;\n    }\n    if n == 10 {\n   \
    \     return 3628800; // 3628800\n    }\n    if n == 11 {\n        return 39916800;\
    \ // 39916800\n    }\n    if n == 12 {\n        return 479001600; // 479001600\n\
    \    }\n    if n == 13 {\n        return 6227020800; // 6227020800\n    }\n  \
    \  if n == 14 {\n        return 87178291200; // 87178291200\n    }\n    if n ==\
    \ 15 {\n        return 1307674368000;\n    }\n    if n == 16 {\n        return\
    \ 20922789888000;\n    }\n    if n == 17 {\n        return 355687428096000;\n\
    \    }\n    if n == 18 {\n        return 6402373705728000;\n    }\n    if n ==\
    \ 19 {\n        return 121645100408832000;\n    }\n    if n == 20 {\n        return\
    \ 2432902008176640000;\n    }\n    if n == 21 {\n        return 51090942171709440000;\n\
    \    }\n    if n == 22 {\n        return 1124000727777607680000;\n    }\n    if\
    \ n == 23 {\n        return 25852016738884976640000;\n    }\n    if n == 24 {\n\
    \        return 620448401733239439360000;\n    }\n    if n == 25 {\n        return\
    \ 12164510040883238400000;\n    }\n    if n == 26 {\n        return 2432902008176640000000;\n\
    \    }\n    if n == 27 {\n        return 51090942171709440000000;\n    }\n   \
    \ if n == 28 {\n        return 1124000727777607680000000;\n    }\n    if n ==\
    \ 29 {\n        return 25852016738884976640000000;\n    }\n    if n == 30 {\n\
    \        return 620448401733239439360000000;\n    }\n    if n == 31 {\n      \
    \  return 121645100408832384000000000;\n    }\n    if n == 32 {\n        return\
    \ 2432902008176640000000000;\n\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpin14qlfa.rs:115:3\n\
    \    |\n7   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n104 |     if n == 32 {\n\
    \    |                - this delimiter might not be properly closed...\n...\n\
    107 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    115 | }\n    |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpin14qlfa.rs:7:35\n\
    \  |\n7 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 6\n\
    \    }\n    if n == 4 {\n        return 24\n    }\n    if n == 5 {\n        return\
    \ 120\n    }\n    if n == 6 {\n        return 720\n    }\n    if n == 7 {\n  \
    \      return 5040\n    }\n    if n == 8 {\n        return 40320\n    }\n    if\
    \ n == 9 {\n        return 362880\n    }\n    if n == 10 {\n        return 3628800\n\
    \    }\n    if n == 11 {\n        return 39916800\n    }\n    if n == 12 {\n \
    \       return 479001600\n    }\n    if n == 13 {\n        return 6227020800\n\
    \    }\n    if n == 14 {\n        return 87178291200\n    }\n    if n == 15 {\n\
    \        return 1307674368000\n    }\n    if n == 16 {\n        return 20922789888000\n\
    \    }\n    if n == 17 {\n        return 355687428096000\n    }\n    if n == 18\
    \ {\n        return 6402373705728000\n    }\n    if n == 19 {\n        return\
    \ 121645100408832000\n    }\n    if n == 20 {\n        return 2432902008176640000\n\
    \    }\n    if n == 21 {\n        return 51090942171709440000\n    }\n    if n\
    \ == 22 {\n        return 1124000727777607680000\n    }\n    if n == 23 {\n  \
    \      return 25852016738884976640000\n    }\n    if n == 24 {\n        return\
    \ 620448401733239439360000\n    }\n    if n == 25 {\n        return 121645100408832384000000\n\
    \    }\n    if n == 26 {\n        return 24329020081766400000000\n    }\n    if\
    \ n == 27 {\n        return 510909421717094400000000\n    }\n    if n == 28 {\n\
    \        return 11240007277776076800000000\n    }\n    if n == 29 {\n        return\
    \ 258520167388849766400000000\n    }\n    if n == 30 {\n        return 6204484017332394393600000000\n\
    \    }\n    if n == 31 {\n        return 121645100408832384000000000\n    }\n\
    \    if n == 32 {\n        return 2432902008176640000000000\n    }\n    if n ==\
    \ 33 {\n        return 51090942171709440000000000\n    }\n    if n == 34 {\n \
    \       return 1124000727777607680000000000\n    }\n    if n == 35 {\n       \
    \ return \n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpj7bzcv9e.rs:123:3\n\
    \    |\n7   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n113 |     if n == 35 {\n\
    \    |                - this delimiter might not be properly closed...\n114 |\
    \         return \n115 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n123 | }\n    |   ^\n\nerror[E0069]: `return;` in a function\
    \ whose return type is not `()`\n   --> /tmp/tmpj7bzcv9e.rs:114:9\n    |\n7  \
    \ | fn special_factorial(n: isize) -> isize {\n    |                         \
    \          ----- expected `isize` because of this return type\n...\n114 |    \
    \     return \n    |         ^^^^^^ return type is not `()`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpj7bzcv9e.rs:7:35\n  |\n7 | fn special_factorial(n: isize)\
    \ -> isize {\n  |    -----------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0069, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0069`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpvbs2e_pp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpvbs2e_pp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp4eo9c04u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return n\n    }\n\
    \    if n == 2 {\n        return n * special_factorial(n - 1)\n    }\n    if n\
    \ == 3 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2)\n    }\n    if n == 4 {\n        return n * special_factorial(n - 1) * special_factorial(n\
    \ - 2) * special_factorial(n - 3)\n    }\n    if n == 5 {\n        return n *\
    \ special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n -\
    \ 3) * special_factorial(n - 4)\n    }\n    if n == 6 {\n        return n * special_factorial(n\
    \ - 1) * special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n\
    \ - 4) * special_factorial(n - 5)\n    }\n    if n == 7 {\n        return n *\
    \ special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n -\
    \ 3) * special_factorial(n - 4) * special_factorial(n - 5) * special_factorial(n\
    \ - 6)\n    }\n    if n == 8 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7)\n    }\n    if n == 9 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8)\n    }\n    if n == 10 {\n        return n *\
    \ special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n -\
    \ 3) * special_factorial(n - 4) * special_factorial(n - 5) * special_factorial(n\
    \ - 6) * special_factorial(n - 7) * special_factorial(n - 8) * special_factorial(n\
    \ - 9)\n    }\n    if n == 11 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9) * special_factorial(n\
    \ - 10)\n    }\n    if n == 12 {\n        return n * special_factorial(n - 1)\
    \ * special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n\
    \ - 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9) * special_factorial(n\
    \ - 10) * special_factorial(n - 11)\n    }\n    if n == 13 {\n        return n\
    \ * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwho42oyu.rs:57:3\n\
    \   |\n7  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n47 |     if n == 13 {\n   |\
    \                - this delimiter might not be properly closed...\n48 |      \
    \   return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n49 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n57 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpwho42oyu.rs:48:91\n\
    \   |\n7  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - closing delimiter possibly meant for this\n...\n48 |\
    \         return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n   |                                                                  \
    \                         ^ unclosed delimiter\n49 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwho42oyu.rs:7:35\n\
    \  |\n7 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmp8optlun8.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp4eo9c04u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n\n    let mut result = 1;\n    for i in\
    \ 1..=n {\n        result *= i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp0b0x13ll.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    if n == 1 {\n        return 1;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 6;\n    }\n    if n == 4 {\n        return 24;\n    }\n    if n == 5 {\n   \
    \     return 120;\n    }\n    if n == 6 {\n        return 720;\n    }\n    if\
    \ n == 7 {\n        return 5040;\n    }\n    if n == 8 {\n        return 40320;\n\
    \    }\n    if n == 9 {\n        return 362880;\n    }\n    if n == 10 {\n   \
    \     return 3628800; // 3628800 = 24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpznyllmua.rs:48:3\n\
    \   |\n7  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n38 |     if n == 10 {\n   |\
    \                - this delimiter might not be properly closed...\n39 |      \
    \   return 3628800; // 3628800 = 2...\n40 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n48 | }\n   |   ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpznyllmua.rs:7:35\n  |\n7 | fn special_factorial(n: isize)\
    \ -> isize {\n  |    -----------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp78nou_dx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpvbs2e_pp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpvbs2e_pp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 6\n\
    \    }\n    if n == 4 {\n        return 24\n    }\n    if n == 5 {\n        return\
    \ 120\n    }\n    if n == 6 {\n        return 720\n    }\n    if n == 7 {\n  \
    \      return 5040\n    }\n    if n == 8 {\n        return 40320\n    }\n    if\
    \ n == 9 {\n        return 362880\n    }\n    if n == 10 {\n        return 3628800\n\
    \    }\n    if n == 11 {\n        return 39916800\n    }\n    if n == 12 {\n \
    \       return 479001600\n    }\n    if n == 13 {\n        return 6227020800\n\
    \    }\n    if n == 14 {\n        return 87178291200\n    }\n    if n == 15 {\n\
    \        return 1307674368000\n    }\n    if n == 16 {\n        return 20922789888000\n\
    \    }\n    if n == 17 {\n        return 355687428096000\n    }\n    if n == 18\
    \ {\n        return 6402373705728000\n    }\n    if n == 19 {\n        return\
    \ 121645100408832000\n    }\n    if n == 20 {\n        return 2432902008176640000\n\
    \    }\n    if n == 21 {\n        return 51090942171709440000\n    }\n    if n\
    \ == 22 {\n        return 1124000727777607680000\n    }\n    if n == 23 {\n  \
    \      return 25852016738884976640000\n    }\n    if n == 24 {\n        return\
    \ 620448401733239439360000\n    }\n    if n == 25 {\n        return 121645100408832307291616\n\
    \    }\n    if n == 26 {\n        return 24329020081766400000000\n    }\n    if\
    \ n == 27 {\n        return 510909421717094400000000\n    }\n    if n == 28 {\n\
    \        return 11240007277776076800000000\n    }\n    if n == 29 {\n        return\
    \ 258520167388849766400000000\n    }\n    if n == 30 {\n        return 6204484017332394393600000000\n\
    \    }\n    if n == 31 {\n        return 12164510040883230729161600000000\n  \
    \  }\n    if n == 32 {\n        return 24329020081766400000000000\n    }\n   \
    \ if n == 33 {\n        return 510909421717094400000000000\n    }\n    if n ==\
    \ 34 {\n        return 11240007277776076800000000000\n    }\n    if n == \n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmpg8238keu.rs:114:1\n\
    \    |\n114 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>()[n\
    \ - 1]\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmprrv27vlu.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect::<Vec<_>>()[n - 1]\n   |\
    \     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1, |acc, x|\
    \ acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpw4d67bry.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp78nou_dx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1, |acc, x|\
    \ acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpw4d67bry.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpvbs2e_pp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..n {\n        result *= i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpwvp6i56j.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    if n == 1 {\n        return 1;\n   \
    \ }\n    if n == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return\
    \ 6;\n    }\n    if n == 4 {\n        return 24;\n    }\n    if n == 5 {\n   \
    \     return 120;\n    }\n    if n == 6 {\n        return 720;\n    }\n    if\
    \ n == 7 {\n        return 5040;\n    }\n    if n == 8 {\n        return 40320;\n\
    \    }\n    if n == 9 {\n        return 362880;\n    }\n    if n == 10 {\n   \
    \     return 3628800; // 3628800 = 24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24*7*24\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpznyllmua.rs:48:3\n\
    \   |\n7  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n38 |     if n == 10 {\n   |\
    \                - this delimiter might not be properly closed...\n39 |      \
    \   return 3628800; // 3628800 = 2...\n40 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n48 | }\n   |   ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpznyllmua.rs:7:35\n  |\n7 | fn special_factorial(n: isize)\
    \ -> isize {\n  |    -----------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().iter().cloned().sum()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpwncobt0o.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect::<Vec<_>>().iter().cloned().sum()\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result *= i;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmp1miy0tw6.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpvbs2e_pp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpzlkpcywd.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        1 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpid2j__6l.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n\n    let mut result = 1;\n    for i in\
    \ 1..=n {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp4ve6tikv.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpvbs2e_pp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1, |acc, x|\
    \ acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpw4d67bry.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp78nou_dx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    else if n == 1 {\n        return n\n\
    \    }\n    else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\
    fn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkm0x5r3q.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    else if n == 1 {\n        return n\n\
    \    }\n    else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\
    fn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkm0x5r3q.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        1 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpid2j__6l.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        1 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpid2j__6l.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 6\n\
    \    }\n    if n == 4 {\n        return 24\n    }\n    if n == 5 {\n        return\
    \ 120\n    }\n    if n == 6 {\n        return 720\n    }\n    if n == 7 {\n  \
    \      return 5040\n    }\n    if n == 8 {\n        return 40320\n    }\n    if\
    \ n == 9 {\n        return 362880\n    }\n    if n == 10 {\n        return 3628800\n\
    \    }\n    if n == 11 {\n        return 39916800\n    }\n    if n == 12 {\n \
    \       return 479001600\n    }\n    if n == 13 {\n        return 6227020800\n\
    \    }\n    if n == 14 {\n        return 87178291200\n    }\n    if n == 15 {\n\
    \        return 1307674368000\n    }\n    if n == 16 {\n        return 20922789888000\n\
    \    }\n    if n == 17 {\n        return 355687428096000\n    }\n    if n == 18\
    \ {\n        return 6402373705728000\n    }\n    if n == 19 {\n        return\
    \ 121645100408832000\n    }\n    if n == 20 {\n        return 2432902008176640000\n\
    \    }\n    if n == 21 {\n        return 51090942171709440000\n    }\n    if n\
    \ == 22 {\n        return 1124000727777607680000\n    }\n    if n == 23 {\n  \
    \      return 25852016738884976640000\n    }\n    if n == 24 {\n        return\
    \ 620448401733239439360000\n    }\n    if n == 25 {\n        return 12164510040883230729160000\n\
    \    }\n    if n == 26 {\n        return 24329020081766400000000\n    }\n    if\
    \ n == 27 {\n        return 510909421717094400000000\n    }\n    if n == 28 {\n\
    \        return 11240007277776076800000000\n    }\n    if n == 29 {\n        return\
    \ 258520167388849766400000000\n    }\n    if n == 30 {\n        return 6204484017332394393600000000\n\
    \    }\n    if n == 31 {\n        return 121645100408832307291600000000\n    }\n\
    \    if n == 32 {\n        return 243290200817664000000000\n    }\n    if n ==\
    \ 33 {\n        return 5109094217170944000000000\n    }\n    if n == 34 {\n  \
    \      return 112400072777760768000000000\n    }\n    if n == 35\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmp8a_am7dv.rs:114:1\n    |\n\
    113 |     if n == 35\n    |     -- this `if` expression has a condition, but no\
    \ block\n114 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * (n - 1)\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpat3_ud1j.rs:11:5\n\
    \   |\n11 |     factorial(n) * (n - 1)\n   |     ^^^^^^^^^ not found in this scope\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().rev().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpbtjzdt8s.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().rev().fold(1, |acc, x| acc * x)\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    else if n == 1 {\n        return n\n\
    \    }\n    else {\n        return n * special_factorial(n - 1)\n    }\n}\n\n\
    fn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkm0x5r3q.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp78nou_dx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result *= i;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpiz8wrt0n.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..=n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpkd8chqy_.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 6\n\
    \    }\n    if n == 4 {\n        return 24\n    }\n    if n == 5 {\n        return\
    \ 120\n    }\n    if n == 6 {\n        return 720\n    }\n    if n == 7 {\n  \
    \      return 5040\n    }\n    if n == 8 {\n        return 40320\n    }\n    if\
    \ n == 9 {\n        return 362880\n    }\n    if n == 10 {\n        return 3628800\n\
    \    }\n    if n == 11 {\n        return 39916800\n    }\n    if n == 12 {\n \
    \       return 479001600\n    }\n    if n == 13 {\n        return 6227020800\n\
    \    }\n    if n == 14 {\n        return 87178291200\n    }\n    if n == 15 {\n\
    \        return 1307674368000\n    }\n    if n == 16 {\n        return 20922789888000\n\
    \    }\n    if n == 17 {\n        return 355687428096000\n    }\n    if n == 18\
    \ {\n        return 6402373705728000\n    }\n    if n == 19 {\n        return\
    \ 121645100408832000\n    }\n    if n == 20 {\n        return 2432902008176640000\n\
    \    }\n    if n == 21 {\n        return 51090942171709440000\n    }\n    if n\
    \ == 22 {\n        return 1124000727777607680000\n    }\n    if n == 23 {\n  \
    \      return 25852016738884976640000\n    }\n    if n == 24 {\n        return\
    \ 620448401733239439360000\n    }\n    if n == 25 {\n        return 15511210043330985984000000\n\
    \    }\n    if n == 26 {\n        return 403291461126605635584000000\n    }\n\
    \    if n == 27 {\n        return 10888869450418352160768000000\n    }\n    if\
    \ n == 28 {\n        return 304888344611713860501504000000\n    }\n    if n ==\
    \ 29 {\n        return 8841761993739701954543616000000\n    }\n    if n == 30\
    \ {\n        return 265252859812191058636308480000000\n    }\n    if n == 31 {\n\
    \        return 7326746080059154745587097656000000\n    }\n    if n == 32 {\n\
    \        return 12757395258967641291685079687372800\n    }\n    if n == 33 {\n\
    \        return 2517220362438103498724806515024\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpaqmxg4fy.rs:117:3\n\
    \    |\n7   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n107 |     if n == 33 {\n\
    \    |                - this delimiter might not be properly closed...\n108 |\
    \         return 2517220362438103498724806515024\n109 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n117 | }\n    |   ^\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpaqmxg4fy.rs:7:35\n  |\n7 | fn special_factorial(n:\
    \ isize) -> isize {\n  |    -----------------              ^^^^^ expected `isize`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return n\n    }\n\
    \    if n == 2 {\n        return n * special_factorial(n - 1)\n    }\n    if n\
    \ == 3 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2)\n    }\n    if n == 4 {\n        return n * special_factorial(n - 1) * special_factorial(n\
    \ - 2) * special_factorial(n - 3)\n    }\n    if n == 5 {\n        return n *\
    \ special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n -\
    \ 3) * special_factorial(n - 4)\n    }\n    if n == 6 {\n        return n * special_factorial(n\
    \ - 1) * special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n\
    \ - 4) * special_factorial(n - 5)\n    }\n    if n == 7 {\n        return n *\
    \ special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n -\
    \ 3) * special_factorial(n - 4) * special_factorial(n - 5) * special_factorial(n\
    \ - 6)\n    }\n    if n == 8 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7)\n    }\n    if n == 9 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8)\n    }\n    if n == 10 {\n        return n *\
    \ special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n -\
    \ 3) * special_factorial(n - 4) * special_factorial(n - 5) * special_factorial(n\
    \ - 6) * special_factorial(n - 7) * special_factorial(n - 8) * special_factorial(n\
    \ - 9)\n    }\n    if n == 11 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9) * special_factorial(n\
    \ - 10)\n    }\n    if n == 12 {\n        return n * special_factorial(n - 1)\
    \ * special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n\
    \ - 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9) * special_factorial(n\
    \ - 10) * special_factorial(n - 11)\n    }\n    if n == 13 {\n        return n\
    \ * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwho42oyu.rs:57:3\n\
    \   |\n7  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n47 |     if n == 13 {\n   |\
    \                - this delimiter might not be properly closed...\n48 |      \
    \   return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n49 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n57 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpwho42oyu.rs:48:91\n\
    \   |\n7  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - closing delimiter possibly meant for this\n...\n48 |\
    \         return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n   |                                                                  \
    \                         ^ unclosed delimiter\n49 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwho42oyu.rs:7:35\n\
    \  |\n7 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return n\n    }\n\
    \    return n * special_factorial(n - 1)\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpx21aep5j.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpnufwfep0.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    match\
    \ n {\n        0 => 1,\n        _ => n * special_factorial(n - 1),\n    }\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpedgbtd6_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp4eo9c04u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpzpq7xbwi.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 6\n\
    \    }\n    if n == 4 {\n        return 24\n    }\n    if n == 5 {\n        return\
    \ 120\n    }\n    if n == 6 {\n        return 720\n    }\n    if n == 7 {\n  \
    \      return 5040\n    }\n    if n == 8 {\n        return 40320\n    }\n    if\
    \ n == 9 {\n        return 362880\n    }\n    if n == 10 {\n        return 3628800\n\
    \    }\n    if n == 11 {\n        return 39916800\n    }\n    if n == 12 {\n \
    \       return 479001600\n    }\n    if n == 13 {\n        return 6227020800\n\
    \    }\n    if n == 14 {\n        return 87178291200\n    }\n    if n == 15 {\n\
    \        return 1307674368000\n    }\n    if n == 16 {\n        return 20922789888000\n\
    \    }\n    if n == 17 {\n        return 355687428096000\n    }\n    if n == 18\
    \ {\n        return 640237370572800\n    }\n    if n == 19 {\n        return 12164510040883200\n\
    \    }\n    if n == 20 {\n        return 2432902008176640000\n    }\n    if n\
    \ == 21 {\n        return 51090942171709440000\n    }\n    if n == 22 {\n    \
    \    return 1124000727777607680000\n    }\n    if n == 23 {\n        return 25852016738884976640000\n\
    \    }\n    if n == 24 {\n        return 620448401733239439360000\n    }\n   \
    \ if n == 25 {\n        return 121645100408832384000000\n    }\n    if n == 26\
    \ {\n        return 24329020081766400000000\n    }\n    if n == 27 {\n       \
    \ return 510909421717094400000000\n    }\n    if n == 28 {\n        return 11240007277776076800000000\n\
    \    }\n    if n == 29 {\n        return 258520167388849766400000000\n    }\n\
    \    if n == 30 {\n        return 6204484017332394393600000000\n    }\n    if\
    \ n == 31 {\n        return 121645100408832384000000000\n    }\n    if n == 32\
    \ {\n        return 2432902008176640000000000\n    }\n    if n == 33 {\n     \
    \   return 51090942171709440000000000\n    }\n    if n == 34 {\n        return\
    \ 1124000727777607680000000000\n    }\n    if n == 35 {\n        return 25\n}\n\
    \nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjzlp_kl9.rs:123:3\n\
    \    |\n7   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n113 |     if n == 35 {\n\
    \    |                - this delimiter might not be properly closed...\n114 |\
    \         return 25\n115 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n123 | }\n    |   ^\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpjzlp_kl9.rs:7:35\n  |\n7 | fn special_factorial(n: isize) -> isize {\n\
    \  |    -----------------              ^^^^^ expected `isize`, found `()`\n  |\
    \    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    let\
    \ mut result = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpiyqcxy6a.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1, |acc, x|\
    \ acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpw4d67bry.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpvbs2e_pp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n) * special_factorial(n -\
    \ 1)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp1w5_fi_r.rs:11:5\n\
    \   |\n11 |     factorial(n) * special_factorial(n - 1)\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().rev().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpbtjzdt8s.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().rev().fold(1, |acc, x| acc * x)\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpz_zb_83u.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1, |acc, x|\
    \ acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpw4d67bry.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1;\n    }\n    let mut result = 1;\n    for i in 1..n\
    \ {\n        result = result * i;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpnufwfep0.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return n\n    }\n\
    \    if n == 2 {\n        return n * special_factorial(n - 1)\n    }\n    if n\
    \ == 3 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2)\n    }\n    if n == 4 {\n        return n * special_factorial(n - 1) * special_factorial(n\
    \ - 2) * special_factorial(n - 3)\n    }\n    if n == 5 {\n        return n *\
    \ special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n -\
    \ 3) * special_factorial(n - 4)\n    }\n    if n == 6 {\n        return n * special_factorial(n\
    \ - 1) * special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n\
    \ - 4) * special_factorial(n - 5)\n    }\n    if n == 7 {\n        return n *\
    \ special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n -\
    \ 3) * special_factorial(n - 4) * special_factorial(n - 5) * special_factorial(n\
    \ - 6)\n    }\n    if n == 8 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7)\n    }\n    if n == 9 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8)\n    }\n    if n == 10 {\n        return n *\
    \ special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n -\
    \ 3) * special_factorial(n - 4) * special_factorial(n - 5) * special_factorial(n\
    \ - 6) * special_factorial(n - 7) * special_factorial(n - 8) * special_factorial(n\
    \ - 9)\n    }\n    if n == 11 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9) * special_factorial(n\
    \ - 10)\n    }\n    if n == 12 {\n        return n * special_factorial(n - 1)\
    \ * special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n\
    \ - 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9) * special_factorial(n\
    \ - 10) * special_factorial(n - 11)\n    }\n    if n == 13 {\n        return n\
    \ * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpwho42oyu.rs:57:3\n\
    \   |\n7  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n47 |     if n == 13 {\n   |\
    \                - this delimiter might not be properly closed...\n48 |      \
    \   return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n49 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n57 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpwho42oyu.rs:48:91\n\
    \   |\n7  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - closing delimiter possibly meant for this\n...\n48 |\
    \         return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n   |                                                                  \
    \                         ^ unclosed delimiter\n49 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmpwho42oyu.rs:7:35\n\
    \  |\n7 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008929
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// The\
    \ function will receive an integer as input and should return the special\n///\
    \ factorial of this integer.\nfn special_factorial(n: isize) -> isize {\n    if\
    \ n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().rev().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpbtjzdt8s.rs:11:5\n\
    \   |\n11 |     factorial(n).iter().cloned().rev().fold(1, |acc, x| acc * x)\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008929
