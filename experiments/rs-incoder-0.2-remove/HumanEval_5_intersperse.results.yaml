language: rs
name: HumanEval_5_intersperse
results:
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpnsf83_zn.rs:5:5\n  |\n5 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ 0);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy.insert(0, delimeter);\n    numbers_copy\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpsjjvoega.rs:5:67

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in numbers {\n\
    \        result.push(n);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpntv3z15k.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmp_gf19gu3.rs:3:25\n  |\n3 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp_gf19gu3.rs:3:34\n  \
    \ |\n3  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmp_gf19gu3.rs:3:58\n  |\n3 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmp_gf19gu3.rs:3:67\n   |\n3  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in numbers {\n\
    \        result.push(n);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpntv3z15k.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).cloned());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpnt9cbsci.rs:5:5\n  |\n5 |     numbers_copy.extend(numbers_copy.iter().skip(1).cloned());\n\
    \  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^\n  |     |\
    \            |      |\n  |     |            |      immutable borrow occurs here\n\
    \  |     |            immutable borrow later used by call\n  |     mutable borrow\
    \ occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in numbers {\n\
    \        result.push(n);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpntv3z15k.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ 0);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy.insert(0, delimeter);\n    numbers_copy\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpsjjvoega.rs:5:67

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747425
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpnsf83_zn.rs:5:5\n  |\n5 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp4_xm382v.rs:5:53

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747425
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpi5v5jp7d.rs:3:25\n  |\n3 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpi5v5jp7d.rs:3:34\n  \
    \ |\n3  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpi5v5jp7d.rs:3:58\n  |\n3 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..numbers.len()\
    \ - 1 {\n        result.push(numbers[i]);\n        result.push(delimeter);\n \
    \       result.push(numbers[i + 1]);\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp_20kxeqm.rs:4:17

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in numbers {\n\
    \        result.push(n);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpntv3z15k.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in numbers {\n\
    \        result.push(n);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpntv3z15k.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpi5v5jp7d.rs:3:25\n  |\n3 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpi5v5jp7d.rs:3:34\n  \
    \ |\n3  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpi5v5jp7d.rs:3:58\n  |\n3 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in numbers {\n\
    \        result.push(n);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpntv3z15k.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for n in numbers {\n\
    \        result.push(n);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpntv3z15k.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    for number in numbers\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp9a8k20dn.rs:14:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ delimeter);\n    numbers_copy.extend(numbers.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpl3pa_tw3.rs:11:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747425
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\nfn intersperse(numbers: Vec<isize>, delimeter: isize)\
    \ -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n    numbers_copy.insert(0,\
    \ 0);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy.insert(0, delimeter);\n    numbers_copy\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpsjjvoega.rs:5:67

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747425
