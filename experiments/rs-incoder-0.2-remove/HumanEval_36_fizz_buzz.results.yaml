language: rs
name: HumanEval_36_fizz_buzz
results:
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        fizz_buzz(n /\
    \ 11) * 11 + n % 11\n    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `0`', /tmp/tmp1f1rxvzh.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    fn\
    \ is_divisible_by_11(n: isize) -> bool {\n        n % 11 == 0 && n % 13 == 0\n\
    \    }\n\n    fn is_divisible_by_13(n: isize) -> bool {\n        n % 11 != 0 &&\
    \ n % 13 == 0\n    }\n\n    if is_divisible_by_11(n) {\n        if is_divisible_by_13(n)\
    \ {\n            return n\n        } else {\n            return n - 11\n     \
    \   }\n    } else {\n        if is_divisible_by_13(n) {\n            return n\
    \ - 13\n        } else {\n            return n\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `50`,\n right: `0`', /tmp/tmp2u9x_l7m.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        fizz_buzz_iter(n).next()\n\
    \    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fizz_buzz_iter` in this scope\n -->\
    \ /tmp/tmpx04_8ja3.rs:6:9\n  |\n6 |         fizz_buzz_iter(n).next()\n  |    \
    \     ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut digits = n.to_string().chars().collect::<Vec<_>>();\n\
    \    for digit in digits {\n        if digit == '7' {\n            count += 1;\n\
    \        }\n        if digit == '9' {\n            count += 1;\n        }\n  \
    \      if digit == '11' {\n            count += 1;\n        }\n        if digit\
    \ == '13' {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpgjix2ero.rs:12:21\n\
    \   |\n12 |         if digit == '11' {\n   |                     ^^^^\n   |\n\
    help: if you meant to write a `str` literal, use double quotes\n   |\n12 |   \
    \      if digit == \"11\" {\n   |                     ~~~~\n\nerror: character\
    \ literal may only contain one codepoint\n  --> /tmp/tmpgjix2ero.rs:15:21\n  \
    \ |\n15 |         if digit == '13' {\n   |                     ^^^^\n   |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n   |\n15 |       \
    \  if digit == \"13\" {\n   |                     ~~~~\n\nerror: aborting due\
    \ to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    match\
    \ n % 11 {\n        0 => 0,\n        1 => 1,\n        _ => 0,\n    }\n    match\
    \ n % 13 {\n        0 => 0,\n        1 => 1,\n        _ => 0,\n    }\n    n\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfhillvq3.rs:3:5\n  |\n3 |\
    \ /     match n % 11 {\n4 | |         0 => 0,\n5 | |         1 => 1,\n6 | |  \
    \       _ => 0,\n7 | |     }\n  | |     ^- help: consider using a semicolon here\n\
    \  | |_____|\n  |       expected `()`, found integer\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfhillvq3.rs:8:5\n   |\n8  | /     match n % 13 {\n9  |\
    \ |         0 => 0,\n10 | |         1 => 1,\n11 | |         _ => 0,\n12 | |  \
    \   }\n   | |     ^- help: consider using a semicolon here\n   | |_____|\n   |\
    \       expected `()`, found integer\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    let mut remainder = n % 11;\n    if remainder == 0 {\n\
    \        counter += 1;\n        remainder = n % 13;\n    }\n    if remainder ==\
    \ 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == 0 {\n        counter += 1;\n        remainder = n % 11;\n    }\n    if remainder\
    \ == \n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmppdim_euu.rs:110:1\n\
    \    |\n110 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 1;\n    while i <= n {\n        if i % 11 ==\
    \ 0 || i % 13 == 0 {\n            count += 1;\n        }\n        i += 1;\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `7`,\n right: `0`', /tmp/tmpi6hzjrij.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0\
    \ {\n            counter += 1;\n        }\n    }\n    counter\n}\n\nfn main()\
    \ {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `8`,\n right: `0`', /tmp/tmp8kwjgg0q.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        fizz_buzz_iter(n).next()\n\
    \    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fizz_buzz_iter` in this scope\n -->\
    \ /tmp/tmpx04_8ja3.rs:6:9\n  |\n6 |         fizz_buzz_iter(n).next()\n  |    \
    \     ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    while n > 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n\
    \            counter += 1;\n        }\n        n /= 10;\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpkvn5_add.rs:8:9\n\
    \  |\n2 | fn fizz_buzz(n: isize) -> isize {\n  |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n  |       \
    \  ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    let mut remainder = n % 11;\n    let mut remainder_2 =\
    \ n % 13;\n    while remainder != 0 || remainder_2 != 0 {\n        if remainder\
    \ == 0 {\n            counter += 1;\n            remainder /= 11;\n        }\n\
    \        if remainder_2 == 0 {\n            counter += 1;\n            remainder_2\
    \ /= 13;\n        }\n        n /= 10;\n    }\n    counter\n}\n\nfn main() {\n\
    \    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpcduqer95.rs:15:9\n\
    \   |\n2  | fn fizz_buzz(n: isize) -> isize {\n   |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n15 |         n /= 10;\n   |     \
    \    ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    use\
    \ std::cmp::Ordering;\n    use std::cmp::PartialOrd;\n\n    fn is_divisible_by_11(n:\
    \ isize) -> bool {\n        n % 11 == 0 && n % 13 == 0\n    }\n\n    fn is_divisible_by_13(n:\
    \ isize) -> bool {\n        n % 13 == 0 && n % 11 == 0\n    }\n\n    fn is_divisible_by_7(n:\
    \ isize) -> bool {\n        n % 7 == 0 && n % 11 == 0\n    }\n\n    fn is_divisible_by_11_and_13(n:\
    \ isize) -> bool {\n        n % 11 == 0 && n % 13 == 0\n    }\n\n    fn is_divisible_by_7_and_13(n:\
    \ isize) -> bool {\n        n % 7 == 0 && n % 13 == 0\n    }\n\n    fn is_divisible_by_11_and_13_and_7(n:\
    \ isize) -> bool {\n        n % 11 == 0 && n % 13 == 0 && n % 7 == 0\n    }\n\n\
    \    fn is_divisible_by_7_and_13_and_11(n: isize) -> bool {\n        n % 7 ==\
    \ 0 && n % 13 == 0 && n % 11 == 0\n    }\n\n    fn is_divisible_by_11_and_13_and_7(n:\
    \ isize) -> bool {\n        n % 11 == 0 && n % 13 == 0 && n % 7 == 0\n    }\n\n\
    \    fn is_divisible_by_7_and_13_and_11(n: isize) -> bool {\n        n % 7 ==\
    \ 0 && n % 13 == 0 && n % 11 == 0\n    }\n\n    fn is_divisible_by_11_and_13_and_7(n:\
    \ isize) -> bool {\n        n % 11 == 0 && n % 13 == 0 && n % 7 == 0\n    }\n\n\
    \    fn is_divisible_by_7_and_13_and_11(n: isize) -> bool {\n        n % 7 ==\
    \ 0 && n % 13 == 0 && n % 11 == 0\n    }\n\n    fn is_divisible_by_11(n: isize)\
    \ -> bool {\n        n % 11 == 0 && n % 13 == 0\n    }\n\n    fn is_divisible_by_13(n:\
    \ isize) -> bool {\n        n % 13 == 0 && n % 11 == 0\n    }\n\n    fn is_divisible_by_7(n:\
    \ isize) -> bool {\n        n % 7 == 0 && n % 11 == 0\n    }\n\n    fn is_divisible_by_11_and_13(n:\
    \ isize) -> bool {\n        n % 11 == 0 && n % 13 == 0\n    }\n\n    fn is_divisible_by_7_and_13(n:\
    \ isize) -> bool {\n        n % 7 == 0 && n % 13 == 0\n    }\n\n    fn is_divisible_by_11_and_13_and_7(n:\
    \ isize) -> bool {\n        n % 11\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpln7_gsdc.rs:84:3\n\
    \   |\n2  | fn fizz_buzz(n: isize) -> isize {\n   |                          \
    \       - unclosed delimiter\n...\n70 |     fn is_divisible_by_11_and_13_and_7(n:\
    \ isize) -> bool {\n   |                                                     \
    \     - this delimiter might not be properly closed...\n71 |         n % 11\n\
    72 | }\n   | - ...as it matches this but it has different indentation\n...\n84\
    \ | }\n   |   ^\n\nerror[E0428]: the name `is_divisible_by_11_and_13_and_7` is\
    \ defined multiple times\n  --> /tmp/tmpln7_gsdc.rs:34:5\n   |\n26 |     fn is_divisible_by_11_and_13_and_7(n:\
    \ isize) -> bool {\n   |     ----------------------------------------------------\
    \ previous definition of the value `is_divisible_by_11_and_13_and_7` here\n...\n\
    34 |     fn is_divisible_by_11_and_13_and_7(n: isize) -> bool {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `is_divisible_by_11_and_13_and_7` redefined here\n   |\n   = note: `is_divisible_by_11_and_13_and_7`\
    \ must be defined only once in the value namespace of this block\n\nerror[E0428]:\
    \ the name `is_divisible_by_7_and_13_and_11` is defined multiple times\n  -->\
    \ /tmp/tmpln7_gsdc.rs:38:5\n   |\n30 |     fn is_divisible_by_7_and_13_and_11(n:\
    \ isize) -> bool {\n   |     ----------------------------------------------------\
    \ previous definition of the value `is_divisible_by_7_and_13_and_11` here\n...\n\
    38 |     fn is_divisible_by_7_and_13_and_11(n: isize) -> bool {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `is_divisible_by_7_and_13_and_11` redefined here\n   |\n   = note: `is_divisible_by_7_and_13_and_11`\
    \ must be defined only once in the value namespace of this block\n\nerror[E0428]:\
    \ the name `is_divisible_by_11_and_13_and_7` is defined multiple times\n  -->\
    \ /tmp/tmpln7_gsdc.rs:42:5\n   |\n26 |     fn is_divisible_by_11_and_13_and_7(n:\
    \ isize) -> bool {\n   |     ----------------------------------------------------\
    \ previous definition of the value `is_divisible_by_11_and_13_and_7` here\n...\n\
    42 |     fn is_divisible_by_11_and_13"
  stdout: ''
  timestamp: 1659749532
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    let mut i = 1;\n    while i <= n {\n        if n % i ==\
    \ 0 || i % 11 == 0 || i % 13 == 0 {\n            count += 1;\n        }\n    \
    \    i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n\
    \    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79),\
    \ 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n\
    \    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n\
    \    assert_eq!(candidate(100000), 8026);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `13`,\n right: `0`', /tmp/tmp4pxzqygm.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    while n > 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n\
    \            counter += 1;\n        }\n        n /= 10;\n    }\n    counter\n\
    }\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpkvn5_add.rs:8:9\n\
    \  |\n2 | fn fizz_buzz(n: isize) -> isize {\n  |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n  |       \
    \  ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: -1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    let mut remainder = n % 11;\n    let mut remainder_2 =\
    \ remainder % 13;\n    while remainder != 0 || remainder_2 != 0 {\n        if\
    \ remainder == 0 {\n            counter += 1;\n            remainder /= 11;\n\
    \        }\n        if remainder_2 == 0 {\n            counter += 1;\n       \
    \     remainder_2 /= 13;\n        }\n    }\n    counter\n}\n\nfn main() {\n  \
    \  let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749537
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    if\
    \ n % 11 == 0 || n % 13 == 0 {\n        n\n    } else {\n        fizz_buzz_iter(n).next()\n\
    \    }\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `fizz_buzz_iter` in this scope\n -->\
    \ /tmp/tmpx04_8ja3.rs:6:9\n  |\n6 |         fizz_buzz_iter(n).next()\n  |    \
    \     ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 1
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut counter = 0;\n    while n > 0 {\n        if n % 11 == 0 || n % 13 == 0 {\n\
    \            counter += 1;\n        }\n        n /= 11;\n        n /= 13;\n  \
    \  }\n    counter\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50),\
    \ 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n\
    \    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000),\
    \ 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000),\
    \ 8026);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp6f1po2fl.rs:8:9\n\
    \  |\n2 | fn fizz_buzz(n: isize) -> isize {\n  |              - help: consider\
    \ making this binding mutable: `mut n`\n...\n8 |         n /= 11;\n  |       \
    \  ^^^^^^^ cannot assign to immutable argument\n\nerror[E0384]: cannot assign\
    \ to immutable argument `n`\n --> /tmp/tmp6f1po2fl.rs:9:9\n  |\n2 | fn fizz_buzz(n:\
    \ isize) -> isize {\n  |              - help: consider making this binding mutable:\
    \ `mut n`\n...\n9 |         n /= 13;\n  |         ^^^^^^^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    let\
    \ mut count = 0;\n    for d in 0..10 {\n        if n % d == 0 || n % d == 11 ||\
    \ n % d == 13 {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n\
    \    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100),\
    \ 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n\
    \    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to calculate the remainder with a
    divisor of zero'', /tmp/tmpvqddy7ex.rs:5:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749532
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    match\
    \ n % 11 {\n        0 => n % 13,\n        _ => 0,\n    }\n}\n\nfn main() {\n \
    \   let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `2`', /tmp/tmpq864omzj.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749532
- exit_code: 101
  program: "/// Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nfn fizz_buzz(n: isize) -> isize {\n    match\
    \ n % 11 {\n        0 => 0,\n        1 => 1,\n        2 => 1,\n        3 => 2,\n\
    \        4 => 2,\n        5 => 3,\n        6 => 3,\n        7 => 4,\n        8\
    \ => 4,\n        9 => 5,\n        _ => n,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78),\
    \ 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n\
    \    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n \
    \   assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `0`', /tmp/tmpz998u8_m.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749532
