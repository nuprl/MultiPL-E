language: rs
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    for i in arr.iter().rev() {\n        if *i > max\
    \ {\n            max = *i;\n        }\n    }\n    max\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpm21664qz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for &x in arr\
    \ {\n        if x <= max_val {\n            max_val = x;\n            max_idx\
    \ = x;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcizy7zym.rs:9:9\n  |\n9 |\
    \     for &x in arr {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    let mut max_idx = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i > max {\n            max = i;\n            max_idx = i;\n  \
    \      }\n    }\n    if max_idx == -1 {\n        return -1;\n    }\n    for i\
    \ in arr.iter().rev() {\n        if i == max {\n            return i;\n      \
    \  }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4p32j_m6.rs:10:16\n   |\n\
    10 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4p32j_m6.rs:11:19\n\
    \   |\n11 |             max = i;\n   |                   ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |        \
    \     max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4p32j_m6.rs:12:23\n   |\n12 |             max_idx = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n12 |             max_idx = *i;\n   |       \
    \                +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmp4p32j_m6.rs:19:14\n   |\n19 |         if i == max {\n   |     \
    \         ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the\
    \ trait `PartialEq<{integer}>` is not implemented for `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4p32j_m6.rs:20:20\n   |\n20 |             return\
    \ i;\n   |                    ^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n20 |             return *i;\n   | \
    \                   +\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    for i in arr.iter().rev() {\n        if max <\
    \ i {\n            max = i;\n        }\n    }\n    max\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb2dni3k1.rs:10:19\n   |\n\
    10 |             max = i;\n   |                   ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max = *i;\n\
    \   |                   +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \ --> /tmp/tmpb2dni3k1.rs:9:16\n  |\n9 |         if max < i {\n  |           \
    \     ^ no implementation for `isize < &isize` and `isize > &isize`\n  |\n  =\
    \ help: the trait `PartialOrd<&isize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for i in arr.iter()\
    \ {\n        if i > smallest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:10:16\n   |\n\
    10 |         if i > smallest {\n   |                ^^^^^^^^\n   |           \
    \     |\n   |                expected `&isize`, found integer\n   |          \
    \      help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:11:23\n   |\n11 |             largest = i;\n\
    \   |                       ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             largest = *i;\n   |       \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:13:16\n\
    \   |\n13 |         if i < smallest {\n   |                ^^^^^^^^\n   |    \
    \            |\n   |                expected `&isize`, found integer\n   |   \
    \             help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:14:24\n   |\n14 |             smallest = i;\n\
    \   |                        ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             smallest = *i;\n   |      \
    \                  +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[largest] {\n            largest = index;\n  \
    \      }\n        index += 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpnzral0r3.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzral0r3.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    for &x in arr {\n\
    \        if x > largest {\n            largest = x;\n        }\n        if x ==\
    \ largest {\n            index = x;\n        }\n    }\n    index\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1s_dj7jv.rs:9:9\n  |\n9 |\
    \     for &x in arr {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[largest] {\n            largest = index;\n  \
    \      }\n        index += 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpnzral0r3.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzral0r3.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max_index = -1;\n    let mut max_value = arr[0];\n    for &x\
    \ in arr.iter() {\n        if x > max_value {\n            max_value = x;\n  \
    \          max_index = x;\n        }\n    }\n    max_index\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpwr_q3539.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut largestIdx = 0;\n    for idx in arr.iter().rev()\
    \ {\n        if idx > largest {\n            largest = idx;\n            largestIdx\
    \ = idx;\n        } else if idx == largest {\n            largestIdx = idx;\n\
    \        }\n    }\n    largestIdx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8mu27fmr.rs:10:18\n   |\n\
    10 |         if idx > largest {\n   |                  ^^^^^^^\n   |         \
    \         |\n   |                  expected `&isize`, found integer\n   |    \
    \              help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8mu27fmr.rs:11:23\n   |\n11 |             largest = idx;\n\
    \   |                       ^^^ expected integer, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             largest = *idx;\n\
    \   |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8mu27fmr.rs:12:26\n\
    \   |\n12 |             largestIdx = idx;\n   |                          ^^^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |             largestIdx = *idx;\n   |                          +\n\nerror[E0277]:\
    \ can't compare `&isize` with `{integer}`\n  --> /tmp/tmp8mu27fmr.rs:13:23\n \
    \  |\n13 |         } else if idx == largest {\n   |                       ^^ no\
    \ implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8mu27fmr.rs:14:26\n\
    \   |\n14 |             largestIdx = idx;\n   |                          ^^^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    14 |             largestIdx = *idx;\n   |                          +\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter() {\n        if i > largest\
    \ {\n            largest = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphgnsy4r5.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphgnsy4r5.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max_index = -1;\n    let mut max_value = arr[0];\n    for &x\
    \ in arr {\n        if x > max_value {\n            max_value = x;\n         \
    \   max_index = x;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1jde0qpn.rs:9:9\n  |\n9 |\
    \     for &x in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut largestIdx = 0;\n    for idx in 0..arr.len()\
    \ {\n        if idx > largest {\n            largest = idx;\n            largestIdx\
    \ = idx;\n        } else if arr[idx] > arr[largestIdx] {\n            largestIdx\
    \ = idx;\n        }\n    }\n    largestIdx\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpop4tclmw.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpop4tclmw.rs:17:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largestIdx\n   |     ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largestIdx.try_into().unwrap()\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut largestIdx = 0;\n    for idx in 0..arr.len()\
    \ {\n        if idx > largest {\n            largest = idx;\n            largestIdx\
    \ = idx;\n        } else if arr[idx] > arr[largestIdx] {\n            largestIdx\
    \ = idx;\n        }\n    }\n    largestIdx\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpop4tclmw.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpop4tclmw.rs:17:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largestIdx\n   |     ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largestIdx.try_into().unwrap()\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > largest {\n            largest = index;\n       \
    \ }\n        index += 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnow9fnoj.rs:11:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n11 |             largest = index;\n   |                   \
    \    ^^^^^ expected `isize`, found `usize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if *i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzvnkvces.rs:10:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n10 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             largest = *i;\n   |                       +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max_index = -1;\n    let mut max_value = arr[0];\n    for i in\
    \ 1..arr.len() {\n        if arr[i] > max_value {\n            max_value = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    max_index\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpbepwq1__.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n  |\n  = help: the following other types\
    \ implement trait `Neg`:\n            &f32\n            &f64\n            &i128\n\
    \            &i16\n            &i32\n            &i64\n            &i8\n     \
    \       &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpbepwq1__.rs:15:5\n   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n15 |     max_index\n   |     ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n15 |     max_index.try_into().unwrap()\n\
    \   |              ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[largest] {\n            largest = i;\n        }\n   \
    \     i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpjmb1apx4.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjmb1apx4.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for i in arr.iter()\
    \ {\n        if largest < i {\n            largest = i;\n        }\n        if\
    \ smallest > i {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzzanlxtp.rs:11:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n11 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n11 |             largest = *i;\n   |                       +\n\nerror[E0277]:\
    \ can't compare `isize` with `&isize`\n  --> /tmp/tmpzzanlxtp.rs:10:20\n   |\n\
    10 |         if largest < i {\n   |                    ^ no implementation for\
    \ `isize < &isize` and `isize > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpzzanlxtp.rs:14:24\n   |\n8  |     let mut smallest = -1;\n   |     \
    \                   -- expected due to this value\n...\n14 |             smallest\
    \ = i;\n   |                        ^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |             smallest = *i;\n\
    \   |                        +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmpzzanlxtp.rs:13:21\n   |\n13 |         if smallest > i {\n   | \
    \                    ^ no implementation for `isize < &isize` and `isize > &isize`\n\
    \   |\n   = help: the trait `PartialOrd<&isize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `PartialOrd<Rhs>`:\n   \
    \          f32\n             f64\n             i128\n             i16\n      \
    \       i32\n             i64\n             i8\n             isize\n         \
    \  and 6 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    for el in arr.iter()\
    \ {\n        if el > largest {\n            largest = el;\n        }\n       \
    \ if el == largest {\n            index = el;\n        }\n    }\n    index\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm2kk4qt_.rs:10:17\n   |\n\
    10 |         if el > largest {\n   |                 ^^^^^^^\n   |           \
    \      |\n   |                 expected `&isize`, found integer\n   |        \
    \         help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm2kk4qt_.rs:11:23\n   |\n7  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n11 |         \
    \    largest = el;\n   |                       ^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             largest\
    \ = *el;\n   |                       +\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmpm2kk4qt_.rs:13:15\n   |\n13 |         if el\
    \ == largest {\n   |               ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm2kk4qt_.rs:14:21\n\
    \   |\n8  |     let mut index = 0;\n   |                     - expected due to\
    \ this value\n...\n14 |             index = el;\n   |                     ^^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    14 |             index = *el;\n   |                     +\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[i + 1] {\n            largest = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpzfnpir97.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzfnpir97.rs:16:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in 0..arr.len() {\n        if arr[i]\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz5kjehrd.rs:10:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n10 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = arr.len();\n    while smallest\
    \ != largest {\n        largest = smallest;\n        smallest = arr.iter().enumerate().filter(|&(i,\
    \ _)| {\n            i != smallest && arr[i] > arr[i]\n        }).map(|&(i, _)|\
    \ i).max().unwrap();\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp03ismafp.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp03ismafp.rs:13:17\n\
    \   |\n13 |         }).map(|&(i, _)| i).max().unwrap();\n   |                \
    \ ^^^^^^-\n   |                 |     |\n   |                 |     expected due\
    \ to this\n   |                 expected tuple, found reference\n   |\n   = note:\
    \  expected tuple `(usize, &isize)`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp03ismafp.rs:15:5\n   |\n6  | fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n   |                                    ----- expected\
    \ `isize` because of return type\n...\n15 |     largest\n   |     ^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |     largest.try_into().unwrap()\n\
    \   |            ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for i in arr.iter()\
    \ {\n        if i > smallest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:10:16\n   |\n\
    10 |         if i > smallest {\n   |                ^^^^^^^^\n   |           \
    \     |\n   |                expected `&isize`, found integer\n   |          \
    \      help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:11:23\n   |\n11 |             largest = i;\n\
    \   |                       ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             largest = *i;\n   |       \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:13:16\n\
    \   |\n13 |         if i < smallest {\n   |                ^^^^^^^^\n   |    \
    \            |\n   |                expected `&isize`, found integer\n   |   \
    \             help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:14:24\n   |\n14 |             smallest = i;\n\
    \   |                        ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             smallest = *i;\n   |      \
    \                  +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if *i\
    \ > *largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpdj5cwldp.rs:9:17\n\
    \  |\n9 |         if *i > *largest {\n  |                 ^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdj5cwldp.rs:10:23\n   |\n7  |     let mut largest\
    \ = -1;\n   |                       -- expected due to this value\n...\n10 | \
    \            largest = i;\n   |                       ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     largest = *i;\n   |                       +\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[index + 1] {\n            largest = index;\n\
    \        }\n        index += 1\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpkzdotdo4.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkzdotdo4.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if *i\
    \ > *largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpdj5cwldp.rs:9:17\n\
    \  |\n9 |         if *i > *largest {\n  |                 ^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdj5cwldp.rs:10:23\n   |\n7  |     let mut largest\
    \ = -1;\n   |                       -- expected due to this value\n...\n10 | \
    \            largest = i;\n   |                       ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     largest = *i;\n   |                       +\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut largestIdx = 0;\n    for idx in 0..arr.len()\
    \ {\n        if arr[idx] > arr[largestIdx] {\n            largest = idx;\n   \
    \         largestIdx = idx;\n        }\n    }\n    largestIdx\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpfn3tztzt.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfn3tztzt.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largestIdx\n   |     ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largestIdx.try_into().unwrap()\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 1;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[largest] {\n            largest = i;\n        }\n   \
    \     i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp_jwr8pq2.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_jwr8pq2.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter() {\n        if i > largest\
    \ {\n            largest = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphgnsy4r5.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphgnsy4r5.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for i in arr.iter()\
    \ {\n        if i > smallest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:10:16\n   |\n\
    10 |         if i > smallest {\n   |                ^^^^^^^^\n   |           \
    \     |\n   |                expected `&isize`, found integer\n   |          \
    \      help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:11:23\n   |\n11 |             largest = i;\n\
    \   |                       ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             largest = *i;\n   |       \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:13:16\n\
    \   |\n13 |         if i < smallest {\n   |                ^^^^^^^^\n   |    \
    \            |\n   |                expected `&isize`, found integer\n   |   \
    \             help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:14:24\n   |\n14 |             smallest = i;\n\
    \   |                        ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             smallest = *i;\n   |      \
    \                  +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    for i in arr.iter().rev() {\n        if *i > max\
    \ {\n            max = i;\n        }\n    }\n    max\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpah86fgs_.rs:10:19\n   |\n\
    7  |     let mut max = -1;\n   |                   -- expected due to this value\n\
    ...\n10 |             max = i;\n   |                   ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     max = *i;\n   |                   +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > largest {\n            largest = index;\n       \
    \ }\n        index += 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnow9fnoj.rs:11:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n11 |             largest = index;\n   |                   \
    \    ^^^^^ expected `isize`, found `usize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut largest2 = 0isize;\n    for &i in\
    \ arr {\n        if i > largest {\n            largest = i;\n        }\n     \
    \   if i > largest2 {\n            largest2 = i;\n        }\n    }\n    largest2\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpweoyriea.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut largestIdx = 0;\n    for idx in arr.iter().rev()\
    \ {\n        if idx > largest {\n            largest = idx;\n            largestIdx\
    \ = idx;\n        } else if idx == largest {\n            largestIdx += 1;\n \
    \       }\n    }\n    largestIdx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkd8cv7jv.rs:10:18\n   |\n\
    10 |         if idx > largest {\n   |                  ^^^^^^^\n   |         \
    \         |\n   |                  expected `&isize`, found integer\n   |    \
    \              help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkd8cv7jv.rs:11:23\n   |\n7  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n11 |         \
    \    largest = idx;\n   |                       ^^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             largest\
    \ = *idx;\n   |                       +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpkd8cv7jv.rs:12:26\n   |\n8  |     let mut largestIdx = 0;\n   |    \
    \                      - expected due to this value\n...\n12 |             largestIdx\
    \ = idx;\n   |                          ^^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n12 |             largestIdx\
    \ = *idx;\n   |                          +\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmpkd8cv7jv.rs:13:23\n   |\n13 |         } else\
    \ if idx == largest {\n   |                       ^^ no implementation for `&isize\
    \ == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if *i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzvnkvces.rs:10:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n10 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             largest = *i;\n   |                       +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[i+1] {\n            largest = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmplol_90hr.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplol_90hr.rs:16:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for i in arr.iter()\
    \ {\n        if i > smallest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:10:16\n   |\n\
    10 |         if i > smallest {\n   |                ^^^^^^^^\n   |           \
    \     |\n   |                expected `&isize`, found integer\n   |          \
    \      help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:11:23\n   |\n11 |             largest = i;\n\
    \   |                       ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             largest = *i;\n   |       \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:13:16\n\
    \   |\n13 |         if i < smallest {\n   |                ^^^^^^^^\n   |    \
    \            |\n   |                expected `&isize`, found integer\n   |   \
    \             help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:14:24\n   |\n14 |             smallest = i;\n\
    \   |                        ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             smallest = *i;\n   |      \
    \                  +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter() {\n        if i > largest\
    \ {\n            largest = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphgnsy4r5.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphgnsy4r5.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[index + 1] {\n            largest = index;\n\
    \        }\n        index += 1;\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptj6tkzi2.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptj6tkzi2.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[index + 1] {\n            largest = index;\n\
    \        }\n        index += 1;\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptj6tkzi2.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptj6tkzi2.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] >= largest {\n            largest = arr[index];\n \
    \       }\n        index += 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpct2hy9no.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] >= largest {\n            largest = arr[index];\n \
    \       }\n        index += 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpct2hy9no.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = arr.len();\n    while smallest\
    \ > largest {\n        largest = arr.iter().position(|&x| x <= arr[smallest -\
    \ 1]).unwrap();\n        smallest = arr.iter().position(|&x| x >= arr[smallest\
    \ - 1]).unwrap();\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpvw5szzyp.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvw5szzyp.rs:13:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n13 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if *i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzvnkvces.rs:10:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n10 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             largest = *i;\n   |                       +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] <= arr[i+1] {\n            largest = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpsg0arju2.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsg0arju2.rs:16:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] <= arr[i-1] {\n            largest = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpqothndzo.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqothndzo.rs:16:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    for &x in arr {\n\
    \        if x >= largest {\n            largest = x;\n            index = x;\n\
    \        }\n    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyb__dy9f.rs:9:9\n  |\n9 |\
    \     for &x in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[index + 1] {\n            largest = index;\n\
    \        }\n        index += 1;\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptj6tkzi2.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptj6tkzi2.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    for i in arr.iter().rev() {\n        if max <\
    \ i {\n            max = i;\n        }\n    }\n    max\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb2dni3k1.rs:10:19\n   |\n\
    10 |             max = i;\n   |                   ^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max = *i;\n\
    \   |                   +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \ --> /tmp/tmpb2dni3k1.rs:9:16\n  |\n9 |         if max < i {\n  |           \
    \     ^ no implementation for `isize < &isize` and `isize > &isize`\n  |\n  =\
    \ help: the trait `PartialOrd<&isize>` is not implemented for `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = arr.len();\n    for i in\
    \ 0..arr.len() {\n        if arr[i] > largest {\n            largest = arr[i];\n\
    \        }\n        if arr[i] < smallest {\n            smallest = arr[i];\n \
    \       }\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpupgan57y.rs:13:21\n   |\n\
    13 |         if arr[i] < smallest {\n   |                     ^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |         if arr[i] <\
    \ smallest.try_into().unwrap() {\n   |                             ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpupgan57y.rs:14:24\n   |\n8  |\
    \     let mut smallest = arr.len();\n   |                        --------- expected\
    \ due to this value\n...\n14 |             smallest = arr[i];\n   |          \
    \              ^^^^^^ expected `usize`, found `isize`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for i in arr.iter()\
    \ {\n        if i > smallest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:10:16\n   |\n\
    10 |         if i > smallest {\n   |                ^^^^^^^^\n   |           \
    \     |\n   |                expected `&isize`, found integer\n   |          \
    \      help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:11:23\n   |\n11 |             largest = i;\n\
    \   |                       ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             largest = *i;\n   |       \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:13:16\n\
    \   |\n13 |         if i < smallest {\n   |                ^^^^^^^^\n   |    \
    \            |\n   |                expected `&isize`, found integer\n   |   \
    \             help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:14:24\n   |\n14 |             smallest = i;\n\
    \   |                        ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             smallest = *i;\n   |      \
    \                  +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for i in arr.iter()\
    \ {\n        if i > smallest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:10:16\n   |\n\
    10 |         if i > smallest {\n   |                ^^^^^^^^\n   |           \
    \     |\n   |                expected `&isize`, found integer\n   |          \
    \      help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:11:23\n   |\n11 |             largest = i;\n\
    \   |                       ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             largest = *i;\n   |       \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:13:16\n\
    \   |\n13 |         if i < smallest {\n   |                ^^^^^^^^\n   |    \
    \            |\n   |                expected `&isize`, found integer\n   |   \
    \             help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:14:24\n   |\n14 |             smallest = i;\n\
    \   |                        ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             smallest = *i;\n   |      \
    \                  +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = arr.len();\n    let mut\
    \ current = 1;\n    while current < arr.len() {\n        if arr[current] > arr[largest]\
    \ {\n            largest = current;\n        } else {\n            smallest =\
    \ current;\n        }\n        current += 1;\n    }\n    largest\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp9rvqq99v.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9rvqq99v.rs:18:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len() {\n  \
    \      if arr[i] > max {\n            max = arr[i];\n        }\n        i += 1;\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmphuov1g5e.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[index + 1] {\n            largest = index;\n\
    \        }\n        index += 1;\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptj6tkzi2.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptj6tkzi2.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[index + 1] {\n            largest = index;\n\
    \        }\n        index += 1;\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptj6tkzi2.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptj6tkzi2.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[i..].iter().max().unwrap() {\n            largest = i;\n\
    \        }\n        i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpno8rzvpt.rs:10:21\n   |\n\
    10 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n10 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmpno8rzvpt.rs:7:23\n  |\n7 |     let mut largest\
    \ = -1;\n  |                       ^^ the trait `Neg` is not implemented for `usize`\n\
    \  |\n  = help: the following other types implement trait `Neg`:\n           \
    \ &f32\n            &f64\n            &i128\n            &i16\n            &i32\n\
    \            &i64\n            &i8\n            &isize\n          and 8 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpno8rzvpt.rs:15:5\n   |\n6  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n15 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for i in arr.iter()\
    \ {\n        if i > smallest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:10:16\n   |\n\
    10 |         if i > smallest {\n   |                ^^^^^^^^\n   |           \
    \     |\n   |                expected `&isize`, found integer\n   |          \
    \      help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:11:23\n   |\n11 |             largest = i;\n\
    \   |                       ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             largest = *i;\n   |       \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:13:16\n\
    \   |\n13 |         if i < smallest {\n   |                ^^^^^^^^\n   |    \
    \            |\n   |                expected `&isize`, found integer\n   |   \
    \             help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:14:24\n   |\n14 |             smallest = i;\n\
    \   |                        ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             smallest = *i;\n   |      \
    \                  +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[i..].iter().max().unwrap() {\n            largest = i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    largest\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa54cqwlo.rs:10:21\n   |\n\
    10 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n10 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmpa54cqwlo.rs:7:23\n  |\n7 |     let mut largest\
    \ = -1;\n  |                       ^^ the trait `Neg` is not implemented for `usize`\n\
    \  |\n  = help: the following other types implement trait `Neg`:\n           \
    \ &f32\n            &f64\n            &i128\n            &i16\n            &i32\n\
    \            &i64\n            &i8\n            &isize\n          and 8 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa54cqwlo.rs:16:5\n   |\n6  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n16 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for i in arr.iter()\
    \ {\n        if largest < i {\n            largest = i;\n        }\n        if\
    \ smallest > i {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzzanlxtp.rs:11:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n11 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n11 |             largest = *i;\n   |                       +\n\nerror[E0277]:\
    \ can't compare `isize` with `&isize`\n  --> /tmp/tmpzzanlxtp.rs:10:20\n   |\n\
    10 |         if largest < i {\n   |                    ^ no implementation for\
    \ `isize < &isize` and `isize > &isize`\n   |\n   = help: the trait `PartialOrd<&isize>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpzzanlxtp.rs:14:24\n   |\n8  |     let mut smallest = -1;\n   |     \
    \                   -- expected due to this value\n...\n14 |             smallest\
    \ = i;\n   |                        ^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |             smallest = *i;\n\
    \   |                        +\n\nerror[E0277]: can't compare `isize` with `&isize`\n\
    \  --> /tmp/tmpzzanlxtp.rs:13:21\n   |\n13 |         if smallest > i {\n   | \
    \                    ^ no implementation for `isize < &isize` and `isize > &isize`\n\
    \   |\n   = help: the trait `PartialOrd<&isize>` is not implemented for `isize`\n\
    \   = help: the following other types implement trait `PartialOrd<Rhs>`:\n   \
    \          f32\n             f64\n             i128\n             i16\n      \
    \       i32\n             i64\n             i8\n             isize\n         \
    \  and 6 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[index + 1] {\n            largest = index;\n\
    \        }\n        index += 1;\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptj6tkzi2.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptj6tkzi2.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if *i\
    \ > *largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpdj5cwldp.rs:9:17\n\
    \  |\n9 |         if *i > *largest {\n  |                 ^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdj5cwldp.rs:10:23\n   |\n7  |     let mut largest\
    \ = -1;\n   |                       -- expected due to this value\n...\n10 | \
    \            largest = i;\n   |                       ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     largest = *i;\n   |                       +\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 1;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[i-1] {\n            largest = i;\n        }\n       \
    \ i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmporesxfxt.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmporesxfxt.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[index + 1] {\n            largest = index;\n\
    \        }\n        index += 1;\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptj6tkzi2.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptj6tkzi2.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in 0..arr.len() {\n        if arr[i]\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz5kjehrd.rs:10:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n10 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    for el in arr.iter()\
    \ {\n        if el > largest {\n            largest = el;\n        }\n       \
    \ if el == largest {\n            index = el;\n        }\n    }\n    index\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm2kk4qt_.rs:10:17\n   |\n\
    10 |         if el > largest {\n   |                 ^^^^^^^\n   |           \
    \      |\n   |                 expected `&isize`, found integer\n   |        \
    \         help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpm2kk4qt_.rs:11:23\n   |\n7  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n11 |         \
    \    largest = el;\n   |                       ^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             largest\
    \ = *el;\n   |                       +\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmpm2kk4qt_.rs:13:15\n   |\n13 |         if el\
    \ == largest {\n   |               ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm2kk4qt_.rs:14:21\n\
    \   |\n8  |     let mut index = 0;\n   |                     - expected due to\
    \ this value\n...\n14 |             index = el;\n   |                     ^^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    14 |             index = *el;\n   |                     +\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    for &x in arr {\n\
    \        if x > largest {\n            largest = x;\n        }\n        if x ==\
    \ largest {\n            index = x;\n        }\n    }\n    index\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1s_dj7jv.rs:9:9\n  |\n9 |\
    \     for &x in arr {\n  |         ^^    --- this expression has type `isize`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[index + 1] {\n            largest = index;\n\
    \        }\n        index += 1;\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptj6tkzi2.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptj6tkzi2.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for i in arr.iter()\
    \ {\n        if i > smallest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:10:16\n   |\n\
    10 |         if i > smallest {\n   |                ^^^^^^^^\n   |           \
    \     |\n   |                expected `&isize`, found integer\n   |          \
    \      help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:11:23\n   |\n11 |             largest = i;\n\
    \   |                       ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             largest = *i;\n   |       \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:13:16\n\
    \   |\n13 |         if i < smallest {\n   |                ^^^^^^^^\n   |    \
    \            |\n   |                expected `&isize`, found integer\n   |   \
    \             help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:14:24\n   |\n14 |             smallest = i;\n\
    \   |                        ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             smallest = *i;\n   |      \
    \                  +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = arr.len();\n    while smallest\
    \ > 0 {\n        if arr[smallest] > arr[largest - 1] {\n            largest =\
    \ smallest;\n        } else {\n            smallest--;\n        }\n    }\n   \
    \ largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpwqcu3bw1.rs:13:23\n\
    \   |\n13 |             smallest--;\n   |                       ^ expected expression\n\
    \nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpwqcu3bw1.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwqcu3bw1.rs:16:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = arr.len();\n    while smallest\
    \ > largest {\n        largest = arr.iter().enumerate().max_by_key(|(_, i)| {\n\
    \            i.1.unwrap() >= i.0.unwrap()\n        }).unwrap().1;\n        smallest\
    \ = arr.iter().enumerate().min_by_key(|(_, i)| {\n            i.1.unwrap() >=\
    \ i.0.unwrap()\n        }).unwrap().1;\n    }\n    largest\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmplc5nt7uj.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0609]: no field `1` on type `&&isize`\n\
    \  --> /tmp/tmplc5nt7uj.rs:11:15\n   |\n11 |             i.1.unwrap() >= i.0.unwrap()\n\
    \   |               ^\n\nerror[E0609]: no field `0` on type `&&isize`\n  --> /tmp/tmplc5nt7uj.rs:11:31\n\
    \   |\n11 |             i.1.unwrap() >= i.0.unwrap()\n   |                   \
    \            ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplc5nt7uj.rs:10:19\n\
    \   |\n7  |       let mut largest = -1;\n   |                         -- expected\
    \ due to this value\n...\n10 |           largest = arr.iter().enumerate().max_by_key(|(_,\
    \ i)| {\n   |  ___________________^\n11 | |             i.1.unwrap() >= i.0.unwrap()\n\
    12 | |         }).unwrap().1;\n   | |_____________________^ expected `usize`,\
    \ found `&isize`\n\nerror[E0609]: no field `1` on type `&&isize`\n  --> /tmp/tmplc5nt7uj.rs:14:15\n\
    \   |\n14 |             i.1.unwrap() >= i.0.unwrap()\n   |               ^\n\n\
    error[E0609]: no field `0` on type `&&isize`\n  --> /tmp/tmplc5nt7uj.rs:14:31\n\
    \   |\n14 |             i.1.unwrap() >= i.0.unwrap()\n   |                   \
    \            ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplc5nt7uj.rs:13:20\n\
    \   |\n8  |       let mut smallest = arr.len();\n   |                        \
    \  --------- expected due to this value\n...\n13 |           smallest = arr.iter().enumerate().min_by_key(|(_,\
    \ i)| {\n   |  ____________________^\n14 | |             i.1.unwrap() >= i.0.unwrap()\n\
    15 | |         }).unwrap().1;\n   | |_____________________^ expected `usize`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplc5nt7uj.rs:17:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    for elt in arr.iter()\
    \ {\n        if elt > largest {\n            largest = elt;\n        }\n     \
    \   if elt != largest {\n            index = elt;\n        }\n    }\n    index\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8o9nqs3u.rs:10:18\n   |\n\
    10 |         if elt > largest {\n   |                  ^^^^^^^\n   |         \
    \         |\n   |                  expected `&isize`, found integer\n   |    \
    \              help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8o9nqs3u.rs:11:23\n   |\n7  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n11 |         \
    \    largest = elt;\n   |                       ^^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             largest\
    \ = *elt;\n   |                       +\n\nerror[E0277]: can't compare `&isize`\
    \ with `{integer}`\n  --> /tmp/tmp8o9nqs3u.rs:13:16\n   |\n13 |         if elt\
    \ != largest {\n   |                ^^ no implementation for `&isize == {integer}`\n\
    \   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         f32\n             f64\n             i128\n             i16\n       \
    \      i32\n             i64\n             i8\n             isize\n          \
    \ and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8o9nqs3u.rs:14:21\n\
    \   |\n8  |     let mut index = 0;\n   |                     - expected due to\
    \ this value\n...\n14 |             index = elt;\n   |                     ^^^\
    \ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n14 |             index = *elt;\n   |                     +\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = arr.len();\n    while smallest\
    \ != largest {\n        largest = smallest;\n        smallest = arr.iter().skip(smallest\
    \ - 1).count();\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpos99horb.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpos99horb.rs:13:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n13 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[i + 1] {\n            largest = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpzfnpir97.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzfnpir97.rs:16:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] >= largest {\n            largest = arr[index];\n \
    \       }\n        index += 1;\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp0gx2scaw.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[i+1] {\n            largest = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmplol_90hr.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplol_90hr.rs:16:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] >= largest {\n            largest = arr[index];\n \
    \       }\n        index += 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpct2hy9no.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    for &i in arr {\n\
    \        if i > largest {\n            largest = i;\n        }\n        if i ==\
    \ largest {\n            index = i;\n        }\n    }\n    index\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptgtcph0n.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] >= arr[i-1] {\n            largest = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpcwh0ryn9.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcwh0ryn9.rs:16:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len() {\n  \
    \      if arr[i] <= max {\n            max = arr[i];\n        }\n        i +=\
    \ 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpec_7fiqx.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    for i in arr.iter().rev() {\n        if *i > max\
    \ {\n            max = i;\n        }\n    }\n    max\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpah86fgs_.rs:10:19\n   |\n\
    7  |     let mut max = -1;\n   |                   -- expected due to this value\n\
    ...\n10 |             max = i;\n   |                   ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     max = *i;\n   |                   +\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for &i in arr\
    \ {\n        if i > smallest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfsvq3nuq.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter() {\n        if i > largest\
    \ {\n            largest = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphgnsy4r5.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphgnsy4r5.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = arr.len();\n    let mut\
    \ cur = 0;\n    while cur < arr.len() {\n        if arr[cur] > arr[largest] {\n\
    \            largest = cur;\n        }\n        if arr[cur] < arr[smallest] {\n\
    \            smallest = cur;\n        }\n        cur += 1;\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpph_0abcp.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpph_0abcp.rs:19:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n19 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for idx in\
    \ 1..arr.len() {\n        if arr[idx] > max_val {\n            max_val = arr[idx];\n\
    \            max_idx = idx;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpmo5ai_cq.rs:7:23\n\
    \  |\n7 |     let mut max_idx = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmo5ai_cq.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    max_idx\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     max_idx.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut largestIdx = 0;\n    for idx in 0..arr.len()\
    \ {\n        if idx > largest {\n            largest = idx;\n            largestIdx\
    \ = idx;\n        }\n        if arr[idx] > arr[largestIdx] {\n            largestIdx\
    \ = idx;\n        }\n    }\n    largestIdx\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpwgb500hm.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwgb500hm.rs:18:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n18 | \
    \    largestIdx\n   |     ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n18 |     largestIdx.try_into().unwrap()\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    for &x in arr {\n\
    \        if x > largest {\n            largest = x;\n            index = x;\n\
    \        }\n    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo5mnr9f1.rs:9:9\n  |\n9 |\
    \     for &x in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[i+1] {\n            largest = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmplol_90hr.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplol_90hr.rs:16:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[index + 1] {\n            largest = index;\n\
    \        }\n        index += 1;\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptj6tkzi2.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptj6tkzi2.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut largestIdx = 0;\n    for i in arr.iter()\
    \ {\n        if largest == -1 || i > arr[largest] {\n            largest = i;\n\
    \            largestIdx = i;\n        }\n    }\n    largestIdx\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpbmhzl211.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n  --> /tmp/tmpbmhzl211.rs:10:23\n   |\n10 |         if largest\
    \ == -1 || i > arr[largest] {\n   |                       ^^ the trait `Neg` is\
    \ not implemented for `usize`\n   |\n   = help: the following other types implement\
    \ trait `Neg`:\n             &f32\n             &f64\n             &i128\n   \
    \          &i16\n             &i32\n             &i64\n             &i8\n    \
    \         &isize\n           and 8 others\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbmhzl211.rs:10:33\n   |\n10 |         if largest == -1 || i > arr[largest]\
    \ {\n   |                                 ^^^^^^^^^^^^\n   |                 \
    \                |\n   |                                 expected `&isize`, found\
    \ `isize`\n   |                                 help: consider borrowing here:\
    \ `&arr[largest]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbmhzl211.rs:11:23\n\
    \   |\n7  |     let mut largest = -1;\n   |                       -- expected\
    \ due to this value\n...\n11 |             largest = i;\n   |                \
    \       ^ expected `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbmhzl211.rs:12:26\n   |\n8  |     let mut largestIdx = 0;\n   |\
    \                          - expected due to this value\n...\n12 |           \
    \  largestIdx = i;\n   |                          ^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n12 |             largestIdx\
    \ = *i;\n   |                          +\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 1;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[i-1] {\n            largest = i;\n        }\n       \
    \ i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmporesxfxt.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmporesxfxt.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = arr.len();\n    loop {\n\
    \        if largest == -1 {\n            largest = smallest;\n        }\n    \
    \    if arr[largest] < arr[smallest] {\n            largest += 1;\n        } else\
    \ {\n            smallest -= 1;\n        }\n        if smallest == -1 {\n    \
    \        break;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpzc44ndrp.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n  --> /tmp/tmpzc44ndrp.rs:10:23\n   |\n10 |         if largest\
    \ == -1 {\n   |                       ^^ the trait `Neg` is not implemented for\
    \ `usize`\n   |\n   = help: the following other types implement trait `Neg`:\n\
    \             &f32\n             &f64\n             &i128\n             &i16\n\
    \             &i32\n             &i64\n             &i8\n             &isize\n\
    \           and 8 others\n\nerror[E0600]: cannot apply unary operator `-` to type\
    \ `usize`\n  --> /tmp/tmpzc44ndrp.rs:18:24\n   |\n18 |         if smallest ==\
    \ -1 {\n   |                        ^^\n   |                        |\n   |  \
    \                      cannot apply unary operator `-`\n   |                 \
    \       help: you may have meant the maximum value of `usize`: `usize::MAX`\n\
    \   |\n   = note: unsigned values cannot be negated\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzc44ndrp.rs:22:5\n   |\n6  | fn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n   |                                    ----- expected `isize` because\
    \ of return type\n...\n22 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n22 |     largest.try_into().unwrap()\n  \
    \ |            ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0600.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    for i in arr.iter().rev() {\n        if *i > max\
    \ {\n            max = *i;\n        }\n    }\n    max\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpm21664qz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[i+1] {\n            largest = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmplol_90hr.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplol_90hr.rs:16:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > largest {\n            largest = arr[index];\n  \
    \      }\n        index += 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpd98da4ht.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for i in arr.iter()\
    \ {\n        if i > smallest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:10:16\n   |\n\
    10 |         if i > smallest {\n   |                ^^^^^^^^\n   |           \
    \     |\n   |                expected `&isize`, found integer\n   |          \
    \      help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:11:23\n   |\n11 |             largest = i;\n\
    \   |                       ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             largest = *i;\n   |       \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:13:16\n\
    \   |\n13 |         if i < smallest {\n   |                ^^^^^^^^\n   |    \
    \            |\n   |                expected `&isize`, found integer\n   |   \
    \             help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:14:24\n   |\n14 |             smallest = i;\n\
    \   |                        ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             smallest = *i;\n   |      \
    \                  +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[index + 1] {\n            largest = index;\n\
    \        }\n        index += 1;\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptj6tkzi2.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptj6tkzi2.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if *i\
    \ > *largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpdj5cwldp.rs:9:17\n\
    \  |\n9 |         if *i > *largest {\n  |                 ^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdj5cwldp.rs:10:23\n   |\n7  |     let mut largest\
    \ = -1;\n   |                       -- expected due to this value\n...\n10 | \
    \            largest = i;\n   |                       ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     largest = *i;\n   |                       +\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for &i in arr\
    \ {\n        if i > largest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    if largest\
    \ == -1 {\n        return -1;\n    }\n    if smallest == -1 {\n        return\
    \ largest;\n    }\n    if largest == smallest {\n        return largest;\n   \
    \ }\n    return largest;\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6kzwg5zt.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for &i in arr\
    \ {\n        if i > smallest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfsvq3nuq.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    let mut max_idx = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i > max {\n            max = i;\n            max_idx = i;\n  \
    \      }\n    }\n    if max_idx == -1 {\n        return -1;\n    }\n    for i\
    \ in arr.iter().rev() {\n        if i == max {\n            return i;\n      \
    \  }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4p32j_m6.rs:10:16\n   |\n\
    10 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4p32j_m6.rs:11:19\n\
    \   |\n11 |             max = i;\n   |                   ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |        \
    \     max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4p32j_m6.rs:12:23\n   |\n12 |             max_idx = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n12 |             max_idx = *i;\n   |       \
    \                +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n\
    \  --> /tmp/tmp4p32j_m6.rs:19:14\n   |\n19 |         if i == max {\n   |     \
    \         ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the\
    \ trait `PartialEq<{integer}>` is not implemented for `&isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4p32j_m6.rs:20:20\n   |\n20 |             return\
    \ i;\n   |                    ^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n20 |             return *i;\n   | \
    \                   +\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[largest] {\n            largest = index;\n  \
    \      }\n        index += 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpnzral0r3.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzral0r3.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] >= largest {\n            largest = i;\n        }\n       \
    \ i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7v8skymf.rs:11:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n11 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut largestIdx = 0;\n    for idx in arr.iter().rev()\
    \ {\n        if idx > largest {\n            largest = idx;\n            largestIdx\
    \ = idx;\n        } else if idx == largest {\n            largestIdx = idx;\n\
    \        }\n    }\n    largestIdx\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8mu27fmr.rs:10:18\n   |\n\
    10 |         if idx > largest {\n   |                  ^^^^^^^\n   |         \
    \         |\n   |                  expected `&isize`, found integer\n   |    \
    \              help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8mu27fmr.rs:11:23\n   |\n11 |             largest = idx;\n\
    \   |                       ^^^ expected integer, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             largest = *idx;\n\
    \   |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8mu27fmr.rs:12:26\n\
    \   |\n12 |             largestIdx = idx;\n   |                          ^^^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |             largestIdx = *idx;\n   |                          +\n\nerror[E0277]:\
    \ can't compare `&isize` with `{integer}`\n  --> /tmp/tmp8mu27fmr.rs:13:23\n \
    \  |\n13 |         } else if idx == largest {\n   |                       ^^ no\
    \ implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8mu27fmr.rs:14:26\n\
    \   |\n14 |             largestIdx = idx;\n   |                          ^^^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    14 |             largestIdx = *idx;\n   |                          +\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > arr[index + 1] {\n            max = index;\n    \
    \    }\n        index += 1\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmprzwmohq2.rs:7:19\n\
    \  |\n7 |     let mut max = -1;\n  |                   ^^ the trait `Neg` is not\
    \ implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprzwmohq2.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    max\n   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     max.try_into().unwrap()\n   |        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter() {\n        if i > largest\
    \ {\n            largest = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphgnsy4r5.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphgnsy4r5.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for &i in arr\
    \ {\n        if i > smallest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfsvq3nuq.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    for el in arr.iter()\
    \ {\n        if el > largest {\n            largest = el;\n            index =\
    \ el;\n        }\n    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd89mqma7.rs:10:17\n   |\n\
    10 |         if el > largest {\n   |                 ^^^^^^^\n   |           \
    \      |\n   |                 expected `&isize`, found integer\n   |        \
    \         help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd89mqma7.rs:11:23\n   |\n7  |     let mut largest = -1;\n\
    \   |                       -- expected due to this value\n...\n11 |         \
    \    largest = el;\n   |                       ^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             largest\
    \ = *el;\n   |                       +\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpd89mqma7.rs:12:21\n   |\n8  |     let mut index = 0;\n   |         \
    \            - expected due to this value\n...\n12 |             index = el;\n\
    \   |                     ^^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n12 |             index = *el;\n   |        \
    \             +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut largest2 = 0isize;\n    for &x in\
    \ arr {\n        if x > largest {\n            largest = x;\n        }\n     \
    \   if x > largest2 {\n            largest2 = x;\n        }\n    }\n    largest2\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcjf2t3ff.rs:9:9\n  |\n9 |\
    \     for &x in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    for &i in arr {\n\
    \        if i > largest {\n            largest = i;\n        }\n        if i ==\
    \ largest {\n            index = i;\n        }\n    }\n    index\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptgtcph0n.rs:9:9\n  |\n9 |\
    \     for &i in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `i`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    for i in arr.iter().rev() {\n        if *i > max\
    \ {\n            max = *i;\n        }\n    }\n    max\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpm21664qz.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746946
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    for i in arr.iter() {\n        if i > max {\n\
    \            max = i;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpuo9y9qkv.rs:9:16\n  |\n9 |\
    \         if i > max {\n  |                ^^^\n  |                |\n  |    \
    \            expected `&isize`, found integer\n  |                help: consider\
    \ borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuo9y9qkv.rs:10:19\n\
    \   |\n7  |     let mut max = -1;\n   |                   -- expected due to this\
    \ value\n...\n10 |             max = i;\n   |                   ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |  \
    \           max = *i;\n   |                   +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter() {\n        if largest\
    \ < i {\n            largest = i;\n        }\n    }\n    largest\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7mrm6_dq.rs:10:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n10 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             largest = *i;\n   |                       +\n\nerror[E0277]:\
    \ can't compare `isize` with `&isize`\n --> /tmp/tmp7mrm6_dq.rs:9:20\n  |\n9 |\
    \         if largest < i {\n  |                    ^ no implementation for `isize\
    \ < &isize` and `isize > &isize`\n  |\n  = help: the trait `PartialOrd<&isize>`\
    \ is not implemented for `isize`\n  = help: the following other types implement\
    \ trait `PartialOrd<Rhs>`:\n            f32\n            f64\n            i128\n\
    \            i16\n            i32\n            i64\n            i8\n         \
    \   isize\n          and 6 others\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[i+1] {\n            largest = i;\n        }\n       \
    \ i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpg73ugnjb.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg73ugnjb.rs:15:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n15 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut largestIdx = 0;\n    for idx in 0..arr.len()\
    \ {\n        if idx > largest {\n            largest = idx;\n            largestIdx\
    \ = idx;\n        } else if arr[idx] > arr[largestIdx] {\n            largestIdx\
    \ = idx;\n        }\n    }\n    largestIdx\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpop4tclmw.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpop4tclmw.rs:17:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n17 | \
    \    largestIdx\n   |     ^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     largestIdx.try_into().unwrap()\n   |               ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] >= arr[i-1] {\n            largest = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpcwh0ryn9.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcwh0ryn9.rs:16:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = arr.len();\n    for i in\
    \ 0..arr.len() {\n        if arr[i] > largest {\n            largest = i;\n  \
    \      }\n        if arr[i] < smallest {\n            smallest = i;\n        }\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj1_g3hyx.rs:11:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n11 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj1_g3hyx.rs:13:21\n\
    \   |\n13 |         if arr[i] < smallest {\n   |                     ^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n13 |         if\
    \ arr[i] < smallest.try_into().unwrap() {\n   |                             ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[i..].iter().max().unwrap() {\n            largest = i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    largest\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa54cqwlo.rs:10:21\n   |\n\
    10 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n10 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n --> /tmp/tmpa54cqwlo.rs:7:23\n  |\n7 |     let mut largest\
    \ = -1;\n  |                       ^^ the trait `Neg` is not implemented for `usize`\n\
    \  |\n  = help: the following other types implement trait `Neg`:\n           \
    \ &f32\n            &f64\n            &i128\n            &i16\n            &i32\n\
    \            &i64\n            &i8\n            &isize\n          and 8 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpa54cqwlo.rs:16:5\n   |\n6  | fn\
    \ can_arrange(arr: Vec<isize>) -> isize {\n   |                              \
    \      ----- expected `isize` because of return type\n...\n16 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    for &i in &arr {\n        if i > max {\n     \
    \       max = i;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp9ueq6sum.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > arr[i + 1] {\n            largest = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpzfnpir97.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzfnpir97.rs:16:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] >= arr[i + 1] {\n            largest = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpign_h0fz.rs:7:23\n\
    \  |\n7 |     let mut largest = -1;\n  |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n  |\n  = help: the following other types implement\
    \ trait `Neg`:\n            &f32\n            &f64\n            &i128\n      \
    \      &i16\n            &i32\n            &i64\n            &i8\n           \
    \ &isize\n          and 8 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpign_h0fz.rs:16:5\n\
    \   |\n6  | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n16 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     largest.try_into().unwrap()\n   |            ++++++++++++++++++++\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut smallest = -1;\n    for i in arr.iter()\
    \ {\n        if i > smallest {\n            largest = i;\n        }\n        if\
    \ i < smallest {\n            smallest = i;\n        }\n    }\n    largest\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:10:16\n   |\n\
    10 |         if i > smallest {\n   |                ^^^^^^^^\n   |           \
    \     |\n   |                expected `&isize`, found integer\n   |          \
    \      help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:11:23\n   |\n11 |             largest = i;\n\
    \   |                       ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n11 |             largest = *i;\n   |       \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj__jpnm5.rs:13:16\n\
    \   |\n13 |         if i < smallest {\n   |                ^^^^^^^^\n   |    \
    \            |\n   |                expected `&isize`, found integer\n   |   \
    \             help: consider borrowing here: `&smallest`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpj__jpnm5.rs:14:24\n   |\n14 |             smallest = i;\n\
    \   |                        ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             smallest = *i;\n   |      \
    \                  +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter() {\n        if i > largest\
    \ {\n            largest = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphgnsy4r5.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphgnsy4r5.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut index = 0;\n    while index < arr.len()\
    \ {\n        if arr[index] > largest {\n            largest = index;\n       \
    \ }\n        index += 1\n    }\n    largest\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnow9fnoj.rs:11:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n11 |             largest = index;\n   |                   \
    \    ^^^^^ expected `isize`, found `usize`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max_index = -1;\n    let mut max_value = arr[0];\n    for &x\
    \ in arr {\n        if x <= max_value {\n            max_value = x;\n        \
    \    max_index = x;\n        }\n    }\n    max_index\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj_h3hnlz.rs:9:9\n  |\n9 |\
    \     for &x in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    let mut cur = 0;\n    for &x in arr {\n      \
    \  if x > max {\n            max = x;\n            cur = x;\n        }\n    }\n\
    \    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpcnhbg_3n.rs:9:9\n  |\n9 |\
    \     for &x in arr {\n  |         ^^    --- this expression has type `Option<isize>`\n\
    \  |         |\n  |         expected `isize`, found reference\n  |         help:\
    \ you can probably remove the explicit borrow: `x`\n  |\n  = note:   expected\
    \ type `isize`\n          found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if *i\
    \ > *largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n --> /tmp/tmpdj5cwldp.rs:9:17\n\
    \  |\n9 |         if *i > *largest {\n  |                 ^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdj5cwldp.rs:10:23\n   |\n7  |     let mut largest\
    \ = -1;\n   |                       -- expected due to this value\n...\n10 | \
    \            largest = i;\n   |                       ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n10 |        \
    \     largest = *i;\n   |                       +\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len() {\n\
    \        if arr[i] > largest {\n            largest = i;\n        }\n        i\
    \ += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp4hm4_8w.rs:11:23\n   |\n\
    11 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len() {\n  \
    \      if arr[i] > max {\n            max = arr[i];\n        }\n        i += 1;\n\
    \    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmphuov1g5e.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplrblewm6.rs:9:16\n  |\n9 |\
    \         if i > largest {\n  |                ^^^^^^^\n  |                |\n\
    \  |                expected `&isize`, found integer\n  |                help:\
    \ consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmplrblewm6.rs:10:23\n   |\n10 |             largest = i;\n   |       \
    \                ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             largest = *i;\n   |                     \
    \  +\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746945
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given array will not contain\n\
    /// duplicate values.\n/// Examples:\nfn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n        if *i\
    \ > largest {\n            largest = i;\n        }\n    }\n    largest\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzvnkvces.rs:10:23\n   |\n\
    7  |     let mut largest = -1;\n   |                       -- expected due to\
    \ this value\n...\n10 |             largest = i;\n   |                       ^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             largest = *i;\n   |                       +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008995
