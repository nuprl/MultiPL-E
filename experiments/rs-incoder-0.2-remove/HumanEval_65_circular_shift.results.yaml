language: rs
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= shift {\n        digits.push(format!(\"{}\", x % 10));\n        x /= 10;\n\
    \        carry += 1;\n    }\n    if carry > 0 {\n        digits.push(format!(\"\
    {}\", carry));\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5mrh9sne.rs:8:21\n  |\n8 |\
    \         digits.push(format!(\"{}\", x % 10));\n  |                     ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n  |\n  = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5mrh9sne.rs:13:21\n \
    \  |\n13 |         digits.push(format!(\"{}\", carry));\n   |                \
    \     ^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n   |\n   =\
    \ note: this error originates in the macro `format` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        digits.push(remainder % 10);\n        remainder = remainder\
    \ / 10;\n    }\n    if shift > digits.len() {\n        digits.reverse();\n   \
    \ }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx40rpssa.rs:8:21\n  |\n8 |\
    \         digits.push(remainder % 10);\n  |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx40rpssa.rs:11:16\n\
    \   |\n11 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpx40rpssa.rs:12:16\n   |\n12 |         digits.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += &format!(\"\
    {}\", x % 10);\n        x /= 10;\n    }\n    if shift > x.len() {\n        s[shift..].copy_from_slice(&s[0..shift]);\n\
    \    } else {\n        s[0..shift].copy_from_slice(&s[shift..]);\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp87dlk2y2.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmp87dlk2y2.rs:11:9\n\
    \   |\n11 |         s[shift..].copy_from_slice(&s[0..shift]);\n   |         ^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait\
    \ `Index<RangeFrom<isize>>` is not implemented for `String`\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmp87dlk2y2.rs:11:37\n\
    \   |\n11 |         s[shift..].copy_from_slice(&s[0..shift]);\n   |          \
    \                           ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp87dlk2y2.rs:13:9\n   |\n13 |         s[0..shift].copy_from_slice(&s[shift..]);\n\
    \   |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmp87dlk2y2.rs:13:38\n   |\n13 |         s[0..shift].copy_from_slice(&s[shift..]);\n\
    \   |                                      ^^^^^^^^^^ `String` cannot be indexed\
    \ by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_digits(10);\n\
    \        x = x >> 1;\n    }\n    s +=\n        x.to_digits(10).reverse().to_string().into_owned();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmps76293gc.rs:7:16\n  |\n7 |         s += x.to_digits(10);\n\
    \  |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmps76293gc.rs:11:11\n   |\n11 |         x.to_digits(10).reverse().to_string().into_owned();\n\
    \   |           ^^^^^^^^^ method not found in `isize`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    while x >= shift {\n        s += &format!(\"\
    {}\", x % 10);\n        x /= 10;\n    }\n    s += &format!(\"{}\", x);\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpq48sdrll.rs:8:9\n\
    \  |\n4 | fn circular_shift(x: isize, shift: isize) -> String {\n  |         \
    \          - help: consider making this binding mutable: `mut x`\n...\n8 |   \
    \      x /= 10;\n  |         ^^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += char::from_u32(x%10);\n\
    \        x /= 10;\n    }\n    s += char::from_u32(x);\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr0h4_hrm.rs:7:29\n  |\n7 |\
    \         s += char::from_u32(x%10);\n  |                             ^^^^ expected\
    \ `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic\
    \ if the converted value doesn't fit\n  |\n7 |         s += char::from_u32((x%10).try_into().unwrap());\n\
    \  |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpr0h4_hrm.rs:7:14\n  |\n7 |         s += char::from_u32(x%10);\n\
    \  |              ^^^^^^^^^^^^^^^^^^^^ expected `&str`, found enum `Option`\n\
    \  |\n  = note: expected reference `&str`\n                  found enum `Option<char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpr0h4_hrm.rs:10:25\n   |\n10 |\
    \     s += char::from_u32(x);\n   |                         ^ expected `u32`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if\
    \ the converted value doesn't fit\n   |\n10 |     s += char::from_u32(x.try_into().unwrap());\n\
    \   |                         ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr0h4_hrm.rs:10:10\n   |\n10 |     s += char::from_u32(x);\n\
    \   |          ^^^^^^^^^^^^^^^^^ expected `&str`, found enum `Option`\n   |\n\
    \   = note: expected reference `&str`\n                   found enum `Option<char>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string()[i];\n\
    \    }\n    for i in 0..shift {\n        s += x.to_string()[x.len() - 1 - i];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n --> /tmp/tmp6el0xp15.rs:7:14\n\
    \  |\n7 |         s += x.to_string()[i];\n  |              ^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `isize`\n  |\n  = help: the trait `Index<isize>` is not\
    \ implemented for `String`\n\nerror[E0599]: no method named `len` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp6el0xp15.rs:10:30\n   |\n10 |  \
    \       s += x.to_string()[x.len() - 1 - i];\n   |                           \
    \   ^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    while x >= shift {\n        s += &format!(\"\
    {}\", x % 10);\n        x /= 10;\n    }\n    s += &format!(\"{}\", x);\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpq48sdrll.rs:8:9\n\
    \  |\n4 | fn circular_shift(x: isize, shift: isize) -> String {\n  |         \
    \          - help: consider making this binding mutable: `mut x`\n...\n8 |   \
    \      x /= 10;\n  |         ^^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= shift {\n        digits.push(x.to_digit(10).unwrap());\n        x -= shift;\n\
    \        carry += 1;\n    }\n    while carry > 0 {\n        digits.push(x.to_digit(10).unwrap());\n\
    \        carry -= 1;\n    }\n    digits.reverse()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpjotktiws.rs:8:23\n  |\n8 |         digits.push(x.to_digit(10).unwrap());\n\
    \  |                       ^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digit` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpjotktiws.rs:13:23\n   |\n13 |         digits.push(x.to_digit(10).unwrap());\n\
    \   |                       ^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpjotktiws.rs:16:12\n   |\n16 |     digits.reverse()\n   |       \
    \     ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for &d in x.to_digits()\
    \ {\n        let digit = d.to_digit(10);\n        let digit = digit + carry +\
    \ 1;\n        carry = digit / 10;\n        s += digit.to_char().to_string();\n\
    \    }\n    if carry > 0 {\n        s += \"1\".to_string();\n    }\n    if shift\
    \ > s.len() {\n        s[s.len() - shift..].to_string()\n    } else {\n      \
    \  s[0..shift].to_string()\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmp_9qk2_v5.rs:7:17\n  |\n7 |     for &d in x.to_digits()\
    \ {\n  |                 ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_9qk2_v5.rs:14:14\n   |\n14 |         s += \"\
    1\".to_string();\n   |              ^^^^^^^^^^^^^^^\n   |              |\n   |\
    \              expected `&str`, found struct `String`\n   |              help:\
    \ consider borrowing here: `&\"1\".to_string()`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_9qk2_v5.rs:16:16\n   |\n16 |     if shift > s.len() {\n   |  \
    \              ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |     if shift > s.len().try_into().unwrap() {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_9qk2_v5.rs:17:21\n   |\n17 |\
    \         s[s.len() - shift..].to_string()\n   |                     ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmp_9qk2_v5.rs:17:19\n   |\n17 |         s[s.len() - shift..].to_string()\n\
    \   |                   ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmp_9qk2_v5.rs:19:9\n\
    \   |\n19 |         s[0..shift].to_string()\n   |         ^^^^^^^^^^^ `String`\
    \ cannot be indexed by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    for digit\
    \ in x.to_string().chars().skip(shift) {\n        digits.push(digit + carry);\n\
    \        carry = digit as usize;\n    }\n    digits.push(carry);\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwzr8js66.rs:7:45\n  |\n7 |\
    \     for digit in x.to_string().chars().skip(shift) {\n  |                  \
    \                           ^^^^^ expected `usize`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     for digit in x.to_string().chars().skip(shift.try_into().unwrap())\
    \ {\n  |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0369]: cannot add `{integer}` to `char`\n --> /tmp/tmpwzr8js66.rs:8:27\n\
    \  |\n8 |         digits.push(digit + carry);\n  |                     ----- ^\
    \ ----- {integer}\n  |                     |\n  |                     char\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpwzr8js66.rs:11:17\n   |\n11 |  \
    \   digits.push(carry);\n   |                 ^^^^^ expected `char`, found `usize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for i in 0..shift\
    \ {\n        if carry == 0 {\n            s.push(x%10);\n            x /= 10;\n\
    \        } else {\n            s.push(carry % 10);\n            carry /= 10;\n\
    \        }\n    }\n    if carry != 0 {\n        s.push(carry % 10);\n    }\n \
    \   s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpza5hec21.rs:9:20\n  |\n9 |\
    \             s.push(x%10);\n  |                    ^^^^ expected `char`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpza5hec21.rs:12:20\n\
    \   |\n12 |             s.push(carry % 10);\n   |                    ^^^^^^^^^^\
    \ expected `char`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpza5hec21.rs:17:16\n\
    \   |\n17 |         s.push(carry % 10);\n   |                ^^^^^^^^^^ expected\
    \ `char`, found integer\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string();\n\
    \        x = x >> 1;\n    }\n    s += x.to_string();\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsi9302g4.rs:7:14\n  |\n7 |\
    \         s += x.to_string();\n  |              ^^^^^^^^^^^^^\n  |           \
    \   |\n  |              expected `&str`, found struct `String`\n  |          \
    \    help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsi9302g4.rs:10:10\n   |\n10 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x%10);\n\
    \        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptn3_dzh2.rs:7:16\n  |\n7 |\
    \         s.push(x%10);\n  |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn3_dzh2.rs:10:12\n   |\n10 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[..]);\n        digits\
    \ = &digits[digits.len() - i..digits.len() - i + 1];\n    }\n    result.push_str(&digits);\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0zffpjgp.rs:9:41\n  |\n9 |\
    \         digits = &digits[digits.len() - i..digits.len() - i + 1];\n  |     \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n --> /tmp/tmp0zffpjgp.rs:9:39\n  |\n9\
    \ |         digits = &digits[digits.len() - i..digits.len() - i + 1];\n  |   \
    \                                    ^ no implementation for `usize - isize`\n\
    \  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp0zffpjgp.rs:9:59\n  |\n9 |         digits = &digits[digits.len()\
    \ - i..digits.len() - i + 1];\n  |                                           \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n --> /tmp/tmp0zffpjgp.rs:9:57\n  |\n9 |         digits\
    \ = &digits[digits.len() - i..digits.len() - i + 1];\n  |                    \
    \                                     ^ no implementation for `usize - isize`\n\
    \  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp0zffpjgp.rs:9:18\n  |\n9 |         digits = &digits[digits.len()\
    \ - i..digits.len() - i + 1];\n  |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n\
    \  |\n9 |         digits = (&digits[digits.len() - i..digits.len() - i + 1]).to_string();\n\
    \  |                  +                                               +++++++++++++\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x%10);\n\
    \        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptn3_dzh2.rs:7:16\n  |\n7 |\
    \         s.push(x%10);\n  |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn3_dzh2.rs:10:12\n   |\n10 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= shift {\n        digits.push(x.to_digit(10).unwrap());\n        x -= shift;\n\
    \        carry += 1;\n    }\n    if carry > 0 {\n        digits.push(x.to_digit(10).unwrap());\n\
    \    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for type `isize` in the\
    \ current scope\n --> /tmp/tmphjceqde_.rs:8:23\n  |\n8 |         digits.push(x.to_digit(10).unwrap());\n\
    \  |                       ^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digit` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmphjceqde_.rs:13:23\n   |\n13 |         digits.push(x.to_digit(10).unwrap());\n\
    \   |                       ^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for i in 0..shift\
    \ {\n        if x >= 10 {\n            s += &format!(\"{}{}\", x % 10, &carry);\n\
    \            x /= 10;\n            carry = 1;\n        } else {\n            s\
    \ += &format!(\"{}\", x % 10);\n            x /= 10;\n            carry = 0;\n\
    \        }\n    }\n    if carry > 0 {\n        s += &format!(\"{}\", carry);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n --> /tmp/tmp5gy1xbcg.rs:7:9\n  |\n7 | \
    \    for i in 0..shift {\n  |         ^ help: if this is intentional, prefix it\
    \ with an underscore: `_i`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\
    \nerror[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp5gy1xbcg.rs:10:13\n\
    \   |\n4  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \             - help: consider making this binding mutable: `mut x`\n...\n10 |\
    \             x /= 10;\n   |             ^^^^^^^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp5gy1xbcg.rs:14:13\n\
    \   |\n4  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \             - help: consider making this binding mutable: `mut x`\n...\n14 |\
    \             x /= 10;\n   |             ^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(shift - i) % digits.len()]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpag3afgk4.rs:8:47\n  |\n8 |\
    \         result.push_str(&digits[(shift - i) % digits.len()]);\n  |         \
    \                                      ^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpag3afgk4.rs:8:45\n\
    \  |\n8 |         result.push_str(&digits[(shift - i) % digits.len()]);\n  | \
    \                                            ^ no implementation for `isize %\
    \ usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for `isize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `isize`\n --> /tmp/tmpag3afgk4.rs:8:26\n\
    \  |\n8 |         result.push_str(&digits[(shift - i) % digits.len()]);\n  | \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `isize`\n  |\n  = help: the trait `Index<isize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(shift - 1) - i]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n --> /tmp/tmpzpzo50dd.rs:8:26\n\
    \  |\n8 |         result.push_str(&digits[(shift - 1) - i]);\n  |            \
    \              ^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `isize`\n\
    \  |\n  = help: the trait `Index<isize>` is not implemented for `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
