language: rs
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= shift {\n        digits.push(format!(\"{}\", x % 10));\n        x /= 10;\n\
    \        carry += 1;\n    }\n    if carry > 0 {\n        digits.push(format!(\"\
    {}\", carry));\n    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5mrh9sne.rs:8:21\n  |\n8 |\
    \         digits.push(format!(\"{}\", x % 10));\n  |                     ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n  |\n  = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5mrh9sne.rs:13:21\n \
    \  |\n13 |         digits.push(format!(\"{}\", carry));\n   |                \
    \     ^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n   |\n   =\
    \ note: this error originates in the macro `format` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        digits.push(remainder % 10);\n        remainder = remainder\
    \ / 10;\n    }\n    if shift > digits.len() {\n        digits.reverse();\n   \
    \ }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx40rpssa.rs:8:21\n  |\n8 |\
    \         digits.push(remainder % 10);\n  |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx40rpssa.rs:11:16\n\
    \   |\n11 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpx40rpssa.rs:12:16\n   |\n12 |         digits.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += &format!(\"\
    {}\", x % 10);\n        x /= 10;\n    }\n    if shift > x.len() {\n        s[shift..].copy_from_slice(&s[0..shift]);\n\
    \    } else {\n        s[0..shift].copy_from_slice(&s[shift..]);\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp87dlk2y2.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmp87dlk2y2.rs:11:9\n\
    \   |\n11 |         s[shift..].copy_from_slice(&s[0..shift]);\n   |         ^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait\
    \ `Index<RangeFrom<isize>>` is not implemented for `String`\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmp87dlk2y2.rs:11:37\n\
    \   |\n11 |         s[shift..].copy_from_slice(&s[0..shift]);\n   |          \
    \                           ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp87dlk2y2.rs:13:9\n   |\n13 |         s[0..shift].copy_from_slice(&s[shift..]);\n\
    \   |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmp87dlk2y2.rs:13:38\n   |\n13 |         s[0..shift].copy_from_slice(&s[shift..]);\n\
    \   |                                      ^^^^^^^^^^ `String` cannot be indexed\
    \ by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_digits(10);\n\
    \        x = x >> 1;\n    }\n    s +=\n        x.to_digits(10).reverse().to_string().into_owned();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmps76293gc.rs:7:16\n  |\n7 |         s += x.to_digits(10);\n\
    \  |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmps76293gc.rs:11:11\n   |\n11 |         x.to_digits(10).reverse().to_string().into_owned();\n\
    \   |           ^^^^^^^^^ method not found in `isize`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    while x >= shift {\n        s += &format!(\"\
    {}\", x % 10);\n        x /= 10;\n    }\n    s += &format!(\"{}\", x);\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpq48sdrll.rs:8:9\n\
    \  |\n4 | fn circular_shift(x: isize, shift: isize) -> String {\n  |         \
    \          - help: consider making this binding mutable: `mut x`\n...\n8 |   \
    \      x /= 10;\n  |         ^^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += char::from_u32(x%10);\n\
    \        x /= 10;\n    }\n    s += char::from_u32(x);\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr0h4_hrm.rs:7:29\n  |\n7 |\
    \         s += char::from_u32(x%10);\n  |                             ^^^^ expected\
    \ `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic\
    \ if the converted value doesn't fit\n  |\n7 |         s += char::from_u32((x%10).try_into().unwrap());\n\
    \  |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpr0h4_hrm.rs:7:14\n  |\n7 |         s += char::from_u32(x%10);\n\
    \  |              ^^^^^^^^^^^^^^^^^^^^ expected `&str`, found enum `Option`\n\
    \  |\n  = note: expected reference `&str`\n                  found enum `Option<char>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpr0h4_hrm.rs:10:25\n   |\n10 |\
    \     s += char::from_u32(x);\n   |                         ^ expected `u32`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and panic if\
    \ the converted value doesn't fit\n   |\n10 |     s += char::from_u32(x.try_into().unwrap());\n\
    \   |                         ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpr0h4_hrm.rs:10:10\n   |\n10 |     s += char::from_u32(x);\n\
    \   |          ^^^^^^^^^^^^^^^^^ expected `&str`, found enum `Option`\n   |\n\
    \   = note: expected reference `&str`\n                   found enum `Option<char>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string()[i];\n\
    \    }\n    for i in 0..shift {\n        s += x.to_string()[x.len() - 1 - i];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n --> /tmp/tmp6el0xp15.rs:7:14\n\
    \  |\n7 |         s += x.to_string()[i];\n  |              ^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `isize`\n  |\n  = help: the trait `Index<isize>` is not\
    \ implemented for `String`\n\nerror[E0599]: no method named `len` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp6el0xp15.rs:10:30\n   |\n10 |  \
    \       s += x.to_string()[x.len() - 1 - i];\n   |                           \
    \   ^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    while x >= shift {\n        s += &format!(\"\
    {}\", x % 10);\n        x /= 10;\n    }\n    s += &format!(\"{}\", x);\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpq48sdrll.rs:8:9\n\
    \  |\n4 | fn circular_shift(x: isize, shift: isize) -> String {\n  |         \
    \          - help: consider making this binding mutable: `mut x`\n...\n8 |   \
    \      x /= 10;\n  |         ^^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= shift {\n        digits.push(x.to_digit(10).unwrap());\n        x -= shift;\n\
    \        carry += 1;\n    }\n    while carry > 0 {\n        digits.push(x.to_digit(10).unwrap());\n\
    \        carry -= 1;\n    }\n    digits.reverse()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpjotktiws.rs:8:23\n  |\n8 |         digits.push(x.to_digit(10).unwrap());\n\
    \  |                       ^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digit` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpjotktiws.rs:13:23\n   |\n13 |         digits.push(x.to_digit(10).unwrap());\n\
    \   |                       ^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpjotktiws.rs:16:12\n   |\n16 |     digits.reverse()\n   |       \
    \     ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for &d in x.to_digits()\
    \ {\n        let digit = d.to_digit(10);\n        let digit = digit + carry +\
    \ 1;\n        carry = digit / 10;\n        s += digit.to_char().to_string();\n\
    \    }\n    if carry > 0 {\n        s += \"1\".to_string();\n    }\n    if shift\
    \ > s.len() {\n        s[s.len() - shift..].to_string()\n    } else {\n      \
    \  s[0..shift].to_string()\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmp_9qk2_v5.rs:7:17\n  |\n7 |     for &d in x.to_digits()\
    \ {\n  |                 ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_9qk2_v5.rs:14:14\n   |\n14 |         s += \"\
    1\".to_string();\n   |              ^^^^^^^^^^^^^^^\n   |              |\n   |\
    \              expected `&str`, found struct `String`\n   |              help:\
    \ consider borrowing here: `&\"1\".to_string()`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_9qk2_v5.rs:16:16\n   |\n16 |     if shift > s.len() {\n   |  \
    \              ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |     if shift > s.len().try_into().unwrap() {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_9qk2_v5.rs:17:21\n   |\n17 |\
    \         s[s.len() - shift..].to_string()\n   |                     ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmp_9qk2_v5.rs:17:19\n   |\n17 |         s[s.len() - shift..].to_string()\n\
    \   |                   ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmp_9qk2_v5.rs:19:9\n\
    \   |\n19 |         s[0..shift].to_string()\n   |         ^^^^^^^^^^^ `String`\
    \ cannot be indexed by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    for digit\
    \ in x.to_string().chars().skip(shift) {\n        digits.push(digit + carry);\n\
    \        carry = digit as usize;\n    }\n    digits.push(carry);\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwzr8js66.rs:7:45\n  |\n7 |\
    \     for digit in x.to_string().chars().skip(shift) {\n  |                  \
    \                           ^^^^^ expected `usize`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     for digit in x.to_string().chars().skip(shift.try_into().unwrap())\
    \ {\n  |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0369]: cannot add `{integer}` to `char`\n --> /tmp/tmpwzr8js66.rs:8:27\n\
    \  |\n8 |         digits.push(digit + carry);\n  |                     ----- ^\
    \ ----- {integer}\n  |                     |\n  |                     char\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpwzr8js66.rs:11:17\n   |\n11 |  \
    \   digits.push(carry);\n   |                 ^^^^^ expected `char`, found `usize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for i in 0..shift\
    \ {\n        if carry == 0 {\n            s.push(x%10);\n            x /= 10;\n\
    \        } else {\n            s.push(carry % 10);\n            carry /= 10;\n\
    \        }\n    }\n    if carry != 0 {\n        s.push(carry % 10);\n    }\n \
    \   s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpza5hec21.rs:9:20\n  |\n9 |\
    \             s.push(x%10);\n  |                    ^^^^ expected `char`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpza5hec21.rs:12:20\n\
    \   |\n12 |             s.push(carry % 10);\n   |                    ^^^^^^^^^^\
    \ expected `char`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpza5hec21.rs:17:16\n\
    \   |\n17 |         s.push(carry % 10);\n   |                ^^^^^^^^^^ expected\
    \ `char`, found integer\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string();\n\
    \        x = x >> 1;\n    }\n    s += x.to_string();\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsi9302g4.rs:7:14\n  |\n7 |\
    \         s += x.to_string();\n  |              ^^^^^^^^^^^^^\n  |           \
    \   |\n  |              expected `&str`, found struct `String`\n  |          \
    \    help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsi9302g4.rs:10:10\n   |\n10 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x%10);\n\
    \        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptn3_dzh2.rs:7:16\n  |\n7 |\
    \         s.push(x%10);\n  |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn3_dzh2.rs:10:12\n   |\n10 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[..]);\n        digits\
    \ = &digits[digits.len() - i..digits.len() - i + 1];\n    }\n    result.push_str(&digits);\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0zffpjgp.rs:9:41\n  |\n9 |\
    \         digits = &digits[digits.len() - i..digits.len() - i + 1];\n  |     \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n --> /tmp/tmp0zffpjgp.rs:9:39\n  |\n9\
    \ |         digits = &digits[digits.len() - i..digits.len() - i + 1];\n  |   \
    \                                    ^ no implementation for `usize - isize`\n\
    \  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp0zffpjgp.rs:9:59\n  |\n9 |         digits = &digits[digits.len()\
    \ - i..digits.len() - i + 1];\n  |                                           \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n --> /tmp/tmp0zffpjgp.rs:9:57\n  |\n9 |         digits\
    \ = &digits[digits.len() - i..digits.len() - i + 1];\n  |                    \
    \                                     ^ no implementation for `usize - isize`\n\
    \  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp0zffpjgp.rs:9:18\n  |\n9 |         digits = &digits[digits.len()\
    \ - i..digits.len() - i + 1];\n  |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n\
    \  |\n9 |         digits = (&digits[digits.len() - i..digits.len() - i + 1]).to_string();\n\
    \  |                  +                                               +++++++++++++\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x%10);\n\
    \        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptn3_dzh2.rs:7:16\n  |\n7 |\
    \         s.push(x%10);\n  |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn3_dzh2.rs:10:12\n   |\n10 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= shift {\n        digits.push(x.to_digit(10).unwrap());\n        x -= shift;\n\
    \        carry += 1;\n    }\n    if carry > 0 {\n        digits.push(x.to_digit(10).unwrap());\n\
    \    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for type `isize` in the\
    \ current scope\n --> /tmp/tmphjceqde_.rs:8:23\n  |\n8 |         digits.push(x.to_digit(10).unwrap());\n\
    \  |                       ^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digit` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmphjceqde_.rs:13:23\n   |\n13 |         digits.push(x.to_digit(10).unwrap());\n\
    \   |                       ^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for i in 0..shift\
    \ {\n        if x >= 10 {\n            s += &format!(\"{}{}\", x % 10, &carry);\n\
    \            x /= 10;\n            carry = 1;\n        } else {\n            s\
    \ += &format!(\"{}\", x % 10);\n            x /= 10;\n            carry = 0;\n\
    \        }\n    }\n    if carry > 0 {\n        s += &format!(\"{}\", carry);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n --> /tmp/tmp5gy1xbcg.rs:7:9\n  |\n7 | \
    \    for i in 0..shift {\n  |         ^ help: if this is intentional, prefix it\
    \ with an underscore: `_i`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\
    \nerror[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp5gy1xbcg.rs:10:13\n\
    \   |\n4  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \             - help: consider making this binding mutable: `mut x`\n...\n10 |\
    \             x /= 10;\n   |             ^^^^^^^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp5gy1xbcg.rs:14:13\n\
    \   |\n4  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \             - help: consider making this binding mutable: `mut x`\n...\n14 |\
    \             x /= 10;\n   |             ^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(shift - i) % digits.len()]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpag3afgk4.rs:8:47\n  |\n8 |\
    \         result.push_str(&digits[(shift - i) % digits.len()]);\n  |         \
    \                                      ^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpag3afgk4.rs:8:45\n\
    \  |\n8 |         result.push_str(&digits[(shift - i) % digits.len()]);\n  | \
    \                                            ^ no implementation for `isize %\
    \ usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for `isize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `isize`\n --> /tmp/tmpag3afgk4.rs:8:26\n\
    \  |\n8 |         result.push_str(&digits[(shift - i) % digits.len()]);\n  | \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `isize`\n  |\n  = help: the trait `Index<isize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(shift - 1) - i]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n --> /tmp/tmpzpzo50dd.rs:8:26\n\
    \  |\n8 |         result.push_str(&digits[(shift - 1) - i]);\n  |            \
    \              ^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `isize`\n\
    \  |\n  = help: the trait `Index<isize>` is not implemented for `String`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut shift = shift % digits.len();\n    while shift != 0 {\n        result.insert(0,\
    \ digits[shift..]);\n        shift -= digits.len();\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkc3ayspk.rs:7:29\n  |\n7 |\
    \     let mut shift = shift % digits.len();\n  |                             ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \ --> /tmp/tmpkc3ayspk.rs:7:27\n  |\n7 |     let mut shift = shift % digits.len();\n\
    \  |                           ^ no implementation for `isize % usize`\n  |\n\
    \  = help: the trait `Rem<usize>` is not implemented for `isize`\n  = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n\
    \            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n    \
    \        <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n          \
    \  <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize\
    \ as Rem<isize>>\n          and 54 others\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `RangeFrom<isize>`\n --> /tmp/tmpkc3ayspk.rs:9:26\n  |\n9 |  \
    \       result.insert(0, digits[shift..]);\n  |                          ^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n  |\n  = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkc3ayspk.rs:10:18\n   |\n10 |\
    \         shift -= digits.len();\n   |                  ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from\
    \ `isize`\n  --> /tmp/tmpkc3ayspk.rs:10:15\n   |\n10 |         shift -= digits.len();\n\
    \   |               ^^ no implementation for `isize -= usize`\n   |\n   = help:\
    \ the trait `SubAssign<usize>` is not implemented for `isize`\n   = help: the\
    \ following other types implement trait `SubAssign<Rhs>`"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for d in x.to_string().chars().take(shift)\
    \ {\n        s.push(*d);\n    }\n    s[..]\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2r67iqal.rs:6:41\n  |\n6 |\
    \     for d in x.to_string().chars().take(shift) {\n  |                      \
    \                   ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \  |\n6 |     for d in x.to_string().chars().take(shift.try_into().unwrap()) {\n\
    \  |                                              ++++++++++++++++++++\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n --> /tmp/tmp2r67iqal.rs:7:16\n  |\n7 |\
    \         s.push(*d);\n  |                ^^\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp2r67iqal.rs:9:5\n  |\n4 | fn circular_shift(x: isize, shift: isize)\
    \ -> String {\n  |                                              ------ expected\
    \ `String` because of return type\n...\n9 |     s[..]\n  |     ^^^^^- help: try\
    \ using a conversion method: `.to_string()`\n  |     |\n  |     expected struct\
    \ `String`, found `str`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string();\n\
    \        x = x >> 1;\n    }\n    s += x.to_string();\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsi9302g4.rs:7:14\n  |\n7 |\
    \         s += x.to_string();\n  |              ^^^^^^^^^^^^^\n  |           \
    \   |\n  |              expected `&str`, found struct `String`\n  |          \
    \    help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsi9302g4.rs:10:10\n   |\n10 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n   \
    \ for i in 0..shift {\n        s += &digits[(shift - i) % digits.len()];\n   \
    \ }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl_oscezl.rs:8:36\n  |\n8 |\
    \         s += &digits[(shift - i) % digits.len()];\n  |                     \
    \               ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot mod `isize` by `usize`\n --> /tmp/tmpl_oscezl.rs:8:34\n  |\n8 |     \
    \    s += &digits[(shift - i) % digits.len()];\n  |                          \
    \        ^ no implementation for `isize % usize`\n  |\n  = help: the trait `Rem<usize>`\
    \ is not implemented for `isize`\n  = help: the following other types implement\
    \ trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n            <&'a f64 as\
    \ Rem<f64>>\n            <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n\
    \            <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n      \
    \      <&'a i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and\
    \ 54 others\n\nerror[E0277]: the type `String` cannot be indexed by `isize`\n\
    \ --> /tmp/tmpl_oscezl.rs:8:15\n  |\n8 |         s += &digits[(shift - i) % digits.len()];\n\
    \  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `isize`\n  |\n  = help: the trait `Index<isize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut carry = 0;\n    while digits.len() > shift {\n        digits = digits.chars().nth(shift).collect();\n\
    \        carry = digits.len() - shift;\n        result += digits[..].to_string();\n\
    \    }\n    if carry > 0 {\n        result += digits[..].to_string();\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpvlchz456.rs:8:26\n  |\n8 |\
    \     while digits.len() > shift {\n  |                          ^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n8 |     while digits.len() >\
    \ shift.try_into().unwrap() {\n  |                               ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpvlchz456.rs:9:37\n  |\n9 |    \
    \     digits = digits.chars().nth(shift).collect();\n  |                     \
    \                ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    9 |         digits = digits.chars().nth(shift.try_into().unwrap()).collect();\n\
    \  |                                          ++++++++++++++++++++\n\nerror[E0599]:\
    \ `Option<char>` is not an iterator\n   --> /tmp/tmpvlchz456.rs:9:44\n    |\n\
    9   |           digits = digits.chars().nth(shift).collect();\n    |         \
    \                                     ^^^^^^^ `Option<char>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<char>: Iterator`\n            which is required by `&mut Option<char>:\
    \ Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvlchz456.rs:10:32\n\
    \   |\n10 |         carry = digits.len() - shift;\n   |                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpvlchz456.rs:10:30\n   |\n10 |         carry\
    \ = digits.len() - shift;\n   |                              ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n     "
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string()[..i];\n\
    \    }\n    s += x.to_string()[shift..];\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \ --> /tmp/tmpdqrwfb02.rs:7:14\n  |\n7 |         s += x.to_string()[..i];\n  |\
    \              ^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \  |\n  = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n -->\
    \ /tmp/tmpdqrwfb02.rs:9:10\n  |\n9 |     s += x.to_string()[shift..];\n  |   \
    \       ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  |\n  = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - 1 -\
    \ i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi7mkg2kg.rs:8:53\n  |\n8 |\
    \         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n \
    \ |                                                     ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpi7mkg2kg.rs:8:51\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n\
    \  |                                                   ^ no implementation for\
    \ `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for\
    \ `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n \
    \           <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n       \
    \     <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n           \
    \ <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8\
    \ as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpi7mkg2kg.rs:8:26\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n\
    \  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += char::from(x%10);\n\
    \        x /= 10;\n    }\n    if shift > x.len() {\n        s[..shift].copy_from_slice(&s[shift..]);\n\
    \    } else {\n        s[shift..].copy_from_slice(&s[..shift]);\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `char: From<isize>` is not satisfied\n -->\
    \ /tmp/tmpfypphflz.rs:7:14\n  |\n7 |         s += char::from(x%10);\n  |     \
    \         ^^^^^^^^^^ the trait `From<isize>` is not implemented for `char`\n \
    \ |\n  = help: the trait `From<u8>` is implemented for `char`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpfypphflz.rs:7:14\n  |\n7 |         s += char::from(x%10);\n\
    \  |              ^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpfypphflz.rs:10:18\n\
    \   |\n10 |     if shift > x.len() {\n   |                  ^^^ method not found\
    \ in `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpfypphflz.rs:11:9\n   |\n11 |         s[..shift].copy_from_slice(&s[shift..]);\n\
    \   |         ^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n   |\n\
    \   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmpfypphflz.rs:11:37\n   |\n11 |         s[..shift].copy_from_slice(&s[shift..]);\n\
    \   |                                     ^^^^^^^^^^ `String` cannot be indexed\
    \ by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut shift = shift % digits.len();\n    if shift > 0 {\n        digits\
    \ = digits.chars().skip(shift).collect();\n    }\n    while digits.len() > 0 {\n\
    \        result.push(digits[digits.len() - 1]);\n        digits.truncate(digits.len()\
    \ - 1);\n    }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpa3_60qok.rs:7:29\n  |\n7 |\
    \     let mut shift = shift % digits.len();\n  |                             ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \ --> /tmp/tmpa3_60qok.rs:7:27\n  |\n7 |     let mut shift = shift % digits.len();\n\
    \  |                           ^ no implementation for `isize % usize`\n  |\n\
    \  = help: the trait `Rem<usize>` is not implemented for `isize`\n  = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n\
    \            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n    \
    \        <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n          \
    \  <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize\
    \ as Rem<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpa3_60qok.rs:9:38\n  |\n9 |         digits = digits.chars().skip(shift).collect();\n\
    \  |                                      ^^^^^ expected `usize`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n  |\n9 |         digits = digits.chars().skip(shift.try_into().unwrap()).collect();\n\
    \  |                                           ++++++++++++++++++++\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpa3_60qok.rs:12:21\n\
    \   |\n12 |         result.push(digits[digits.len() - 1]);\n   |             \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in t"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string()[..i];\n\
    \    }\n    s += x.to_string()[shift..];\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \ --> /tmp/tmpdqrwfb02.rs:7:14\n  |\n7 |         s += x.to_string()[..i];\n  |\
    \              ^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \  |\n  = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n -->\
    \ /tmp/tmpdqrwfb02.rs:9:10\n  |\n9 |     s += x.to_string()[shift..];\n  |   \
    \       ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  |\n  = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += char::from(x%10);\n\
    \        x /= 10;\n    }\n    if shift > x.len() {\n        s[shift..].copy_from_slice(&s[0..shift]);\n\
    \    } else {\n        s[0..shift].copy_from_slice(&s[shift..]);\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `char: From<isize>` is not satisfied\n -->\
    \ /tmp/tmpj_isenhq.rs:7:14\n  |\n7 |         s += char::from(x%10);\n  |     \
    \         ^^^^^^^^^^ the trait `From<isize>` is not implemented for `char`\n \
    \ |\n  = help: the trait `From<u8>` is implemented for `char`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpj_isenhq.rs:7:14\n  |\n7 |         s += char::from(x%10);\n\
    \  |              ^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpj_isenhq.rs:10:18\n\
    \   |\n10 |     if shift > x.len() {\n   |                  ^^^ method not found\
    \ in `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmpj_isenhq.rs:11:9\n   |\n11 |         s[shift..].copy_from_slice(&s[0..shift]);\n\
    \   |         ^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n  \
    \ |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpj_isenhq.rs:11:37\n   |\n11 |         s[shift..].copy_from_slice(&s[0..shift]);\n\
    \   |                                     ^^^^^^^^^^^ `String` cannot be indexed\
    \ by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= 10 {\n        digits.push(x % 10);\n        x /= 10;\n        carry += 1;\n\
    \    }\n    if carry > 0 {\n        digits.push(carry);\n    }\n    digits.reverse();\n\
    \    digits.push_str(&format!(\"{}\", x));\n    digits\n}\n\nfn main() {\n   \
    \ let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm_p3ni2g.rs:8:21\n  |\n8 |\
    \         digits.push(x % 10);\n  |                     ^^^^^^ expected `char`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm_p3ni2g.rs:13:21\n\
    \   |\n13 |         digits.push(carry);\n   |                     ^^^^^ expected\
    \ `char`, found integer\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpm_p3ni2g.rs:15:12\n   |\n15 | \
    \    digits.reverse();\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..(digits.len() - shift)].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpiklws2ak.rs:6:39\n  |\n6 |\
    \     digits = digits[..(digits.len() - shift)].to_string();\n  |            \
    \                           ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n --> /tmp/tmpiklws2ak.rs:6:37\n  |\n6\
    \ |     digits = digits[..(digits.len() - shift)].to_string();\n  |          \
    \                           ^ no implementation for `usize - isize`\n  |\n  =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n\
    \            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n    \
    \        <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n          \
    \  <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize\
    \ as Sub<isize>>\n          and 48 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpiklws2ak.rs:7:39\n  |\n7 |     digits = digits[..(digits.len() -\
    \ shift)].to_string();\n  |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \ --> /tmp/tmpiklws2ak.rs:7:37\n  |\n7 |     digits = digits[..(digits.len() -\
    \ shift)].to_string();\n  |                                     ^ no implementation\
    \ for `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n\
    \            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n      \
    \      <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n          \
    \  <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a\
    \ i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut shift = shift % digits.len();\n    while shift > 0 {\n        result.push_str(&digits[digits.len()\
    \ - shift - 1]);\n        shift -= digits.len() - shift;\n    }\n    result.push_str(&digits[digits.len()\
    \ - shift]);\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm38dhk9k.rs:7:29\n  |\n7 |\
    \     let mut shift = shift % digits.len();\n  |                             ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \ --> /tmp/tmpm38dhk9k.rs:7:27\n  |\n7 |     let mut shift = shift % digits.len();\n\
    \  |                           ^ no implementation for `isize % usize`\n  |\n\
    \  = help: the trait `Rem<usize>` is not implemented for `isize`\n  = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n\
    \            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n    \
    \        <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n          \
    \  <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize\
    \ as Rem<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpm38dhk9k.rs:9:48\n  |\n9 |         result.push_str(&digits[digits.len()\
    \ - shift - 1]);\n  |                                                ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \ --> /tmp/tmpm38dhk9k.rs:9:46\n  |\n9 |         result.push_str(&digits[digits.len()\
    \ - shift - 1]);\n  |                                              ^ no implementation\
    \ for `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n\
    \            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n      \
    \      <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n          \
    \  <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a\
    \ i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpm38dhk9k.rs:9:26\n\
    \  |\n9 |         result.push_str(&digits[digits.len() - shift - 1]);\n  |   \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: th"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        digits.push(format!(\"{}\", remainder % 10));\n   \
    \     remainder /= 10;\n    }\n    if shift > digits.len() {\n        digits.reverse();\n\
    \    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphjm5fokl.rs:8:21\n  |\n8 |\
    \         digits.push(format!(\"{}\", remainder % 10));\n  |                 \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n  |\n\
    \  = note: this error originates in the macro `format` (in Nightly builds, run\
    \ with -Z macro-backtrace for more info)\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmphjm5fokl.rs:11:16\n   |\n11 |     if shift > digits.len() {\n  \
    \ |                ^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     if shift > digits.len().try_into().unwrap() {\n   |    \
    \                        ++++++++++++++++++++\n\nerror[E0599]: no method named\
    \ `reverse` found for struct `String` in the current scope\n  --> /tmp/tmphjm5fokl.rs:12:16\n\
    \   |\n12 |         digits.reverse();\n   |                ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += &format!(\"\
    {:0>2}\", x % 10);\n        x /= 10;\n    }\n    if shift > x.len() {\n      \
    \  s[shift..].copy_from_slice(&s[..shift]);\n    } else {\n        s[0..shift].copy_from_slice(&s[shift..]);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpr557ufwx.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmpr557ufwx.rs:11:9\n\
    \   |\n11 |         s[shift..].copy_from_slice(&s[..shift]);\n   |         ^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait\
    \ `Index<RangeFrom<isize>>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpr557ufwx.rs:11:37\n   |\n11 |         s[shift..].copy_from_slice(&s[..shift]);\n\
    \   |                                     ^^^^^^^^^^ `String` cannot be indexed\
    \ by `RangeTo<isize>`\n   |\n   = help: the trait `Index<RangeTo<isize>>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpr557ufwx.rs:13:9\n   |\n13 |         s[0..shift].copy_from_slice(&s[shift..]);\n\
    \   |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the following other types imple"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    while x >= shift {\n        digits.push_str(&format!(\"\
    {}\", x % 10));\n        x /= 10;\n    }\n    digits.push_str(&format!(\"{}\"\
    , x));\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n --> /tmp/tmpl8tsvkvj.rs:8:9\n\
    \  |\n4 | fn circular_shift(x: isize, shift: isize) -> String {\n  |         \
    \          - help: consider making this binding mutable: `mut x`\n...\n8 |   \
    \      x /= 10;\n  |         ^^^^^^^ cannot assign to immutable argument\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut shift = shift % digits.len();\n    while shift != 0 {\n        let\
    \ mut digit = digits[shift..digits.len() - 1];\n        digit = digit.to_string().chars().nth(digits.len()\
    \ - shift).unwrap();\n        digits.push(digit);\n        shift -= digits.len()\
    \ - shift;\n    }\n    result.push_str(&digits);\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpey601fne.rs:7:29\n  |\n7 |\
    \     let mut shift = shift % digits.len();\n  |                             ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \ --> /tmp/tmpey601fne.rs:7:27\n  |\n7 |     let mut shift = shift % digits.len();\n\
    \  |                           ^ no implementation for `isize % usize`\n  |\n\
    \  = help: the trait `Rem<usize>` is not implemented for `isize`\n  = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n\
    \            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n    \
    \        <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n          \
    \  <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize\
    \ as Rem<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpey601fne.rs:9:39\n  |\n9 |         let mut digit = digits[shift..digits.len()\
    \ - 1];\n  |                                       ^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \ --> /tmp/tmpey601fne.rs:9:25\n  |\n9 |         let mut digit = digits[shift..digits.len()\
    \ - 1];\n  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `std::ops::Range<isize>`\n  |\n  = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpey601fne.rs:10:62\n   |\n10 |\
    \         digit = digit.to_string().chars().nth(digits.len() - shift).unwrap();\n\
    \   |                                                              ^^^^^ expected\
    \ `usize`, fou"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= shift {\n        digits.push(x.to_digit(10).unwrap());\n        x -= shift;\n\
    \        carry += 1;\n    }\n    digits.push(x.to_digit(10).unwrap());\n    digits.push(carry.to_string());\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpp4i4cw6e.rs:8:23\n  |\n8 |         digits.push(x.to_digit(10).unwrap());\n\
    \  |                       ^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digit` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpp4i4cw6e.rs:12:19\n   |\n12 |     digits.push(x.to_digit(10).unwrap());\n\
    \   |                   ^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp4i4cw6e.rs:13:17\n   |\n13 |     digits.push(carry.to_string());\n\
    \   |                 ^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        digits.push(remainder % 10);\n        remainder = remainder\
    \ / 10;\n    }\n    if shift > digits.len() {\n        digits.reverse();\n   \
    \ }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx40rpssa.rs:8:21\n  |\n8 |\
    \         digits.push(remainder % 10);\n  |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx40rpssa.rs:11:16\n\
    \   |\n11 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpx40rpssa.rs:12:16\n   |\n12 |         digits.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for d in x.to_digits().rev() {\n    \
    \    s += *d % 10 + '0';\n        *d = *d / 10;\n    }\n    if shift > s.len()\
    \ {\n        s.reverse();\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpyk8__gj9.rs:6:16\n  |\n6 |     for d in x.to_digits().rev()\
    \ {\n  |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyk8__gj9.rs:10:16\n   |\n10 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n10 |     if shift > s.len().try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpyk8__gj9.rs:11:11\n\
    \   |\n11 |         s.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(shift + i) % digits.len()]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpory4dui6.rs:8:47\n  |\n8 |\
    \         result.push_str(&digits[(shift + i) % digits.len()]);\n  |         \
    \                                      ^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpory4dui6.rs:8:45\n\
    \  |\n8 |         result.push_str(&digits[(shift + i) % digits.len()]);\n  | \
    \                                            ^ no implementation for `isize %\
    \ usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for `isize`\n\
    \  = help: the following other types implement trait `Rem<Rhs>`:\n           \
    \ <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n            <&'a i128\
    \ as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n\
    \            <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n        \
    \    <&'a isize as Rem<isize>>\n          and 54 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `isize`\n --> /tmp/tmpory4dui6.rs:8:26\n  |\n\
    8 |         result.push_str(&digits[(shift + i) % digits.len()]);\n  |       \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `isize`\n  |\n  = help: the trait `Index<isize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += &format!(\"\
    {:0>2}\", x % 10);\n        x /= 10;\n    }\n    if shift > x.len() {\n      \
    \  s[shift..].copy_from_slice(&s[0..shift]);\n    } else {\n        s[0..shift].copy_from_slice(&s[shift..]);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpwjragrt4.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmpwjragrt4.rs:11:9\n\
    \   |\n11 |         s[shift..].copy_from_slice(&s[0..shift]);\n   |         ^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait\
    \ `Index<RangeFrom<isize>>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpwjragrt4.rs:11:37\n   |\n11 |         s[shift..].copy_from_slice(&s[0..shift]);\n\
    \   |                                     ^^^^^^^^^^^ `String` cannot be indexed\
    \ by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpwjragrt4.rs:13:9\n   |\n13 |         s[0..shift].copy_from_slice(&s[shift..]);\n\
    \   |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the "
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for d in x.to_digits() {\n        s.push(*d);\n\
    \    }\n    s[shift..].copy_from_slice(&s[..shift]);\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmp1022scnx.rs:6:16\n  |\n6 |     for d in x.to_digits()\
    \ {\n  |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `RangeFrom<isize>`\n --> /tmp/tmp1022scnx.rs:9:5\n\
    \  |\n9 |     s[shift..].copy_from_slice(&s[..shift]);\n  |     ^^^^^^^^^^ `String`\
    \ cannot be indexed by `RangeFrom<isize>`\n  |\n  = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n -->\
    \ /tmp/tmp1022scnx.rs:9:33\n  |\n9 |     s[shift..].copy_from_slice(&s[..shift]);\n\
    \  |                                 ^^^^^^^^^^ `String` cannot be indexed by\
    \ `RangeTo<isize>`\n  |\n  = help: the trait `Index<RangeTo<isize>>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut carry = 0;\n    let mut\
    \ digits = x.to_string().chars().collect::<Vec<_>>();\n    for i in 0..shift {\n\
    \        let digit = digits[(shift - 1) - i];\n        if digit < '0' || digit\
    \ > '9' {\n            carry += 1;\n            digits[(shift - 1) - i] = '0';\n\
    \        } else {\n            digits[(shift - 1) - i] = digit as char;\n    \
    \    }\n    }\n    for i in 0..shift {\n        let digit = digits[(shift - 1)\
    \ - i];\n        if digit < '0' || digit > '9' {\n            result += digit\
    \ as char;\n        } else {\n            result += digit as char + &*format!(\"\
    {}\", carry);\n            carry = 0;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[char]` cannot be indexed by `isize`\n --> /tmp/tmp1te71w07.rs:9:21\n\
    \  |\n9 |         let digit = digits[(shift - 1) - i];\n  |                  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[char]>` is not implemented for `isize`\n\
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<char>`\n\n\
    error[E0277]: the type `[char]` cannot be indexed by `isize`\n  --> /tmp/tmp1te71w07.rs:12:13\n\
    \   |\n12 |             digits[(shift - 1) - i] = '0';\n   |             ^^^^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[char]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<char>`\n\nerror[E0277]:\
    \ the type `[char]` cannot be indexed by `isize`\n  --> /tmp/tmp1te71w07.rs:14:13\n\
    \   |\n14 |             digits[(shift - 1) - i] = digit as char;\n   |       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[char]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<char>`\n\nerror[E0277]: the type `[char]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp1te71w07.rs:18:21\n   |\n18 |         let digit = digits[(shift\
    \ - 1) - i];\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[char]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<char>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1te71w07.rs:20:23\n\
    \   |\n20 |             result += digit as"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for digit in\
    \ x.to_string().chars().take(shift) {\n        if digit < '0' || digit > '9' {\n\
    \            s += \"0\";\n        } else {\n            s += digit;\n        }\n\
    \        carry = digit as usize;\n    }\n    if carry != 0 {\n        s += \"\
    1\";\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbmvoc_d4.rs:7:45\n  |\n7 |\
    \     for digit in x.to_string().chars().take(shift) {\n  |                  \
    \                           ^^^^^ expected `usize`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     for digit in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n  |                                                  ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbmvoc_d4.rs:11:18\n   |\n11 |\
    \             s += digit;\n   |                  ^^^^^ expected `&str`, found\
    \ `char`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += &format!(\"\
    {:0>2}\", x % 10);\n        x /= 10;\n    }\n    if shift > x.len() {\n      \
    \  s[shift..].to_owned()\n    } else {\n        s[0..shift].to_owned()\n    }\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpq0ceupi0.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmpq0ceupi0.rs:11:9\n\
    \   |\n11 |         s[shift..].to_owned()\n   |         ^^^^^^^^^^ `String` cannot\
    \ be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpq0ceupi0.rs:13:9\n   |\n13 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x%10);\n\
    \        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptn3_dzh2.rs:7:16\n  |\n7 |\
    \         s.push(x%10);\n  |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn3_dzh2.rs:10:12\n   |\n10 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for i in 0..shift\
    \ {\n        let digit = x % 10;\n        s += if carry > 0 {\n            digit\
    \ + &format!(\"{}\", &carry)\n        } else {\n            digit\n        };\n\
    \        x /= 10;\n        carry = digit as isize;\n    }\n    if carry > 0 {\n\
    \        s += &format!(\"{}\", &carry)\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&String` to `isize`\n  --> /tmp/tmpefmv95ca.rs:10:19\n\
    \   |\n10 |             digit + &format!(\"{}\", &carry)\n   |               \
    \    ^ no implementation for `isize + &String`\n   |\n   = help: the trait `Add<&String>`\
    \ is not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n             <&'a f64\
    \ as Add<f64>>\n             <&'a i128 as Add<i128>>\n             <&'a i16 as\
    \ Add<i16>>\n             <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n\
    \             <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpefmv95ca.rs:12:13\n\
    \   |\n12 |             digit\n   |             ^^^^^ expected `&str`, found `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for &d in x.to_string().chars()\
    \ {\n        let digit = d.to_digit(10);\n        if carry > 0 {\n           \
    \ digit += carry;\n        }\n        carry = digit / 10;\n        digit %= 10;\n\
    \        s.push((digit as char).to_string());\n    }\n    if carry > 0 {\n   \
    \     s.push((carry as char).to_string());\n    }\n    s\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprffkf8v4.rs:7:9\n  |\n7 |\
    \     for &d in x.to_string().chars() {\n  |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n  |         |\n  |         expected\
    \ `char`, found reference\n  |         help: you can probably remove the explicit\
    \ borrow: `d`\n  |\n  = note:   expected type `char`\n          found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprffkf8v4.rs:14:16\n  \
    \ |\n14 |         s.push((digit as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmprffkf8v4.rs:17:16\n   |\n17 |         s.push((carry as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0604]: only `u8` can be cast as `char`, not `{integer}`\n\
    \  --> /tmp/tmprffkf8v4.rs:17:16\n   |\n17 |         s.push((carry as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32`\
    \ instead (via a `u32`)\n  --> /tmp/tmprffkf8v4.rs:17:16\n   |\n17 |         s.push((carry\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0604.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut remainder = x;\n    let\
    \ mut digits = 1;\n    while remainder > 0 {\n        remainder %= 10;\n     \
    \   digits = digits * 10 + remainder;\n        remainder /= 10;\n    }\n    while\
    \ digits > shift {\n        result.push((digits % 10) as char);\n        digits\
    \ /= 10;\n    }\n    while digits > 0 {\n        result.push((digits % 10) as\
    \ char);\n        digits /= 10;\n    }\n    result.reverse();\n    result\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp9_qx5ee2.rs:21:12\n   |\n21 |     result.reverse();\n\
    \   |            ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n\
    \  --> /tmp/tmp9_qx5ee2.rs:14:21\n   |\n14 |         result.push((digits % 10)\
    \ as char);\n   |                     ^^^^^^^^^^^^^^^^^^^^^ invalid cast\n   |\n\
    help: try `char::from_u32` instead (via a `u32`)\n  --> /tmp/tmp9_qx5ee2.rs:14:21\n\
    \   |\n14 |         result.push((digits % 10) as char);\n   |                \
    \     ^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0604]: only `u8` can be cast as `char`,\
    \ not `isize`\n  --> /tmp/tmp9_qx5ee2.rs:18:21\n   |\n18 |         result.push((digits\
    \ % 10) as char);\n   |                     ^^^^^^^^^^^^^^^^^^^^^ invalid cast\n\
    \   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  --> /tmp/tmp9_qx5ee2.rs:18:21\n\
    \   |\n18 |         result.push((digits % 10) as char);\n   |                \
    \     ^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0599, E0604.\nFor more information about\
    \ an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_digits(i).to_string();\n\
    \    }\n    for i in 0..shift {\n        s += x.to_digits(i + shift).to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmp0_ntd7hj.rs:7:16\n  |\n7 |         s += x.to_digits(i).to_string();\n\
    \  |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmp0_ntd7hj.rs:10:16\n   |\n10 |         s += x.to_digits(i + shift).to_string();\n\
    \   |                ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x%10);\n\
    \        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptn3_dzh2.rs:7:16\n  |\n7 |\
    \         s.push(x%10);\n  |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn3_dzh2.rs:10:12\n   |\n10 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - 1 -\
    \ i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi7mkg2kg.rs:8:53\n  |\n8 |\
    \         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n \
    \ |                                                     ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpi7mkg2kg.rs:8:51\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n\
    \  |                                                   ^ no implementation for\
    \ `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for\
    \ `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n \
    \           <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n       \
    \     <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n           \
    \ <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8\
    \ as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpi7mkg2kg.rs:8:26\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n\
    \  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x%10);\n\
    \        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptn3_dzh2.rs:7:16\n  |\n7 |\
    \         s.push(x%10);\n  |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn3_dzh2.rs:10:12\n   |\n10 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    for i in 0..shift {\n        result.push(x%10);\n\
    \        x /= 10;\n    }\n    for i in 0..shift {\n        result.push(x%10);\n\
    \        x /= 10;\n    }\n    result.reverse();\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4zzqpiyz.rs:7:21\n  |\n7 |\
    \         result.push(x%10);\n  |                     ^^^^ expected `char`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4zzqpiyz.rs:11:21\n\
    \   |\n11 |         result.push(x%10);\n   |                     ^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp4zzqpiyz.rs:14:12\n   |\n14 | \
    \    result.reverse();\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    for i in 0..shift {\n        result.push(x%10);\n\
    \        x /= 10;\n    }\n    if x > 0 {\n        result.push(x%10);\n    }\n\
    \    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1_8u0fy5.rs:7:21\n  |\n7 |\
    \         result.push(x%10);\n  |                     ^^^^ expected `char`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1_8u0fy5.rs:11:21\n\
    \   |\n11 |         result.push(x%10);\n   |                     ^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp1_8u0fy5.rs:13:12\n   |\n13 | \
    \    result.reverse();\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x%10);\n\
    \        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptn3_dzh2.rs:7:16\n  |\n7 |\
    \         s.push(x%10);\n  |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn3_dzh2.rs:10:12\n   |\n10 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    if shift > digits.len() {\n    \
    \    digits = digits.chars().collect::<String>().rev().collect();\n    }\n   \
    \ digits.chars().nth(shift).collect()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpknmkgh4e.rs:6:16\n  |\n6 |\
    \     if shift > digits.len() {\n  |                ^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n  |\n6 |     if shift > digits.len().try_into().unwrap()\
    \ {\n  |                            ++++++++++++++++++++\n\nerror[E0599]: `String`\
    \ is not an iterator\n   --> /tmp/tmpknmkgh4e.rs:7:53\n    |\n7   |          \
    \ digits = digits.chars().collect::<String>().rev().collect();\n    |        \
    \                                               ^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpknmkgh4e.rs:9:24\n  |\n9 |     digits.chars().nth(shift).collect()\n\
    \  |                        ^^^^^ expected `usize`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n9 |     digits.chars().nth(shift.try_into().unwrap()).collect()\n\
    \  |                             ++++++++++++++++++++\n\nerror[E0599]: `Option<char>`\
    \ is not an iterator\n   --> /tmp/tmpknmkgh4e.rs:9:31\n    |\n9   |       digits.chars().nth(shift).collect()\n\
    \    |                                 ^^^^^^^ `Option<char>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<char>: Iterator`\n            which is required by `&mut Option<char>:\
    \ Iterator`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..digits.len() + shift].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_cbq4_rr.rs:6:39\n  |\n6 |\
    \     digits = digits[..(digits.len() - shift)].to_string();\n  |            \
    \                           ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n --> /tmp/tmp_cbq4_rr.rs:6:37\n  |\n6\
    \ |     digits = digits[..(digits.len() - shift)].to_string();\n  |          \
    \                           ^ no implementation for `usize - isize`\n  |\n  =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n\
    \            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n    \
    \        <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n          \
    \  <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize\
    \ as Sub<isize>>\n          and 48 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp_cbq4_rr.rs:7:38\n  |\n7 |     digits = digits[..digits.len() +\
    \ shift].to_string();\n  |                                      ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n -->\
    \ /tmp/tmp_cbq4_rr.rs:7:36\n  |\n7 |     digits = digits[..digits.len() + shift].to_string();\n\
    \  |                                    ^ no implementation for `usize + isize`\n\
    \  |\n  = help: the trait `Add<isize>` is not implemented for `usize`\n  = help:\
    \ the following other types implement trait `Add<Rhs>`:\n            <&'a f32\
    \ as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n\
    \            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n      \
    \      <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a\
    \ isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        digits.push(remainder % 10);\n        remainder = remainder\
    \ / 10;\n    }\n    digits.push(remainder);\n    digits.reverse();\n    digits.rotate_left(shift);\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6le_m8ug.rs:8:21\n  |\n8 |\
    \         digits.push(remainder % 10);\n  |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6le_m8ug.rs:11:17\n\
    \   |\n11 |     digits.push(remainder);\n   |                 ^^^^^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp6le_m8ug.rs:12:12\n   |\n12 | \
    \    digits.reverse();\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror[E0599]: no method named `rotate_left`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp6le_m8ug.rs:13:12\n\
    \   |\n13 |     digits.rotate_left(shift);\n   |            ^^^^^^^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i >= shift {\n            c.to_string()\n        } else {\n\
    \            c.to_string() + digits[i - shift]\n        }\n    }).collect();\n\
    \    digits.reverse().join(\"\")\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpritnolz1.rs:7:17\n  |\n7 |\
    \         if i >= shift {\n  |                 ^^^^^ expected `usize`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |         if i >= shift.try_into().unwrap() {\n  |\
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpritnolz1.rs:10:40\n   |\n10 |             c.to_string() + digits[i\
    \ - shift]\n   |                                        ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpritnolz1.rs:10:38\n\
    \   |\n10 |             c.to_string() + digits[i - shift]\n   |              \
    \                        ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpritnolz1.rs:10:29\n   |\n\
    10 |             c.to_string() + digits[i - shift]\n   |                     \
    \        ^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpritnolz1.rs:13:12\n   "
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string()[..i];\n\
    \    }\n    s += x.to_string()[shift..];\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \ --> /tmp/tmpdqrwfb02.rs:7:14\n  |\n7 |         s += x.to_string()[..i];\n  |\
    \              ^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \  |\n  = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n -->\
    \ /tmp/tmpdqrwfb02.rs:9:10\n  |\n9 |     s += x.to_string()[shift..];\n  |   \
    \       ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  |\n  = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    let mut\
    \ digit = x;\n    while digit > 0 {\n        digits.push(digit % 10);\n      \
    \  digit /= 10;\n        carry += 1;\n    }\n    while carry > 0 {\n        digits.push(carry\
    \ % 10);\n        carry /= 10;\n    }\n    digits.reverse()\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpju12178g.rs:9:21\n  |\n9 |\
    \         digits.push(digit % 10);\n  |                     ^^^^^^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpju12178g.rs:14:21\n\
    \   |\n14 |         digits.push(carry % 10);\n   |                     ^^^^^^^^^^\
    \ expected `char`, found integer\n\nerror[E0599]: no method named `reverse` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpju12178g.rs:17:12\n\
    \   |\n17 |     digits.reverse()\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n   \
    \ for i in 0..shift {\n        digits = digits.chars().nth(i).unwrap().to_string();\n\
    \    }\n    for i in digits.chars().skip(shift) {\n        s += i;\n    }\n  \
    \  s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpt9amabyj.rs:8:37\n  |\n8 |\
    \         digits = digits.chars().nth(i).unwrap().to_string();\n  |          \
    \                           ^ expected `usize`, found `isize`\n  |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n8 |         digits = digits.chars().nth(i.try_into().unwrap()).unwrap().to_string();\n\
    \  |                                      ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt9amabyj.rs:10:34\n   |\n10 |     for i in digits.chars().skip(shift)\
    \ {\n   |                                  ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n10 |     for i in digits.chars().skip(shift.try_into().unwrap())\
    \ {\n   |                                       ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt9amabyj.rs:11:14\n   |\n11 |         s += i;\n\
    \   |              ^ expected `&str`, found `char`\n\nerror: aborting due to 3\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        digits.push(remainder % 10);\n        remainder = remainder\
    \ / 10;\n    }\n    digits.push(remainder);\n    digits.reverse();\n    digits.push_str(&circular_shift_digits(digits,\
    \ shift));\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `circular_shift_digits` in this scope\n\
    \  --> /tmp/tmpta8vg11r.rs:13:22\n   |\n13 |     digits.push_str(&circular_shift_digits(digits,\
    \ shift));\n   |                      ^^^^^^^^^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpta8vg11r.rs:8:21\n  |\n\
    8 |         digits.push(remainder % 10);\n  |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpta8vg11r.rs:11:17\n\
    \   |\n11 |     digits.push(remainder);\n   |                 ^^^^^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpta8vg11r.rs:12:12\n   |\n12 | \
    \    digits.reverse();\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits.reverse();\n    digits\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppfdh45sg.rs:6:39\n  |\n6 |\
    \     digits = digits[..(digits.len() - shift)].to_string();\n  |            \
    \                           ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n --> /tmp/tmppfdh45sg.rs:6:37\n  |\n6\
    \ |     digits = digits[..(digits.len() - shift)].to_string();\n  |          \
    \                           ^ no implementation for `usize - isize`\n  |\n  =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n\
    \            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n    \
    \        <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n          \
    \  <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize\
    \ as Sub<isize>>\n          and 48 others\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmppfdh45sg.rs:7:21\n\
    \  |\n7 |     digits = digits.reverse();\n  |                     ^^^^^^^ help:\
    \ there is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += char::from_u32(x>>(i*8));\n\
    \    }\n    s[..shift].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplou2s34i.rs:7:29\n  |\n7 |\
    \         s += char::from_u32(x>>(i*8));\n  |                             ^^^^^^^^\
    \ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32`\
    \ and panic if the converted value doesn't fit\n  |\n7 |         s += char::from_u32((x>>(i*8)).try_into().unwrap());\n\
    \  |                             +        +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmplou2s34i.rs:7:14\n  |\n7 |         s += char::from_u32(x>>(i*8));\n\
    \  |              ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found enum `Option`\n\
    \  |\n  = note: expected reference `&str`\n                  found enum `Option<char>`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n -->\
    \ /tmp/tmplou2s34i.rs:9:5\n  |\n9 |     s[..shift].to_string()\n  |     ^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeTo<isize>`\n  |\n  = help: the trait `Index<RangeTo<isize>>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_digits(10);\n\
    \        x = x >> 10;\n    }\n    s +=\n        x.to_digits(10).reverse().to_string().into_owned().chars().collect::<String>();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpv5u1e24l.rs:7:16\n  |\n7 |         s += x.to_digits(10);\n\
    \  |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpv5u1e24l.rs:11:11\n   |\n11 |         x.to_digits(10).reverse().to_string().into_owned().chars().collect::<String>();\n\
    \   |           ^^^^^^^^^ method not found in `isize`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for d in x.digits().cloned()\
    \ {\n        let digit = if carry > 0 {\n            d + carry\n        } else\
    \ {\n            d\n        };\n        carry = digit / 10;\n        s += digit.to_string();\n\
    \    }\n    if carry > 0 {\n        s += carry.to_string();\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpqekunk9a.rs:7:16\n  |\n7 |     for d in x.digits().cloned()\
    \ {\n  |                ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqekunk9a.rs:17:14\n   |\n17 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        digits.push(remainder % 10);\n        remainder = remainder\
    \ / 10;\n    }\n    if shift > digits.len() {\n        digits.extend(digits.iter().rev().take(shift).collect::<Vec<_>>());\n\
    \    } else {\n        digits.extend(digits.iter().rev().take(shift).collect::<Vec<_>>());\n\
    \        digits.extend(digits.iter().rev().take(digits.len() - shift).collect::<Vec<_>>());\n\
    \    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgolma189.rs:8:21\n  |\n8 |\
    \         digits.push(remainder % 10);\n  |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgolma189.rs:11:16\n\
    \   |\n11 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0599]: no\
    \ method named `iter` found for struct `String` in the current scope\n  --> /tmp/tmpgolma189.rs:12:30\n\
    \   |\n12 |         digits.extend(digits.iter().rev().take(shift).collect::<Vec<_>>());\n\
    \   |                              ^^^^ method not found in `String`\n   |\nhelp:\
    \ because of the in-memory representation of `&str`, to obtain an `Iterator` over\
    \ each of its codepoint use method `chars`\n   |\n12 |         digits.extend(digits.chars().rev().take(shift).collect::<Vec<_>>());\n\
    \   |                              ~~~~~\n\nerror[E0599]: no method named `iter`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpgolma189.rs:14:30\n\
    \   |\n14 |         digits.extend(digits.iter().rev().take(shift).collect::<Vec<_>>());\n\
    \   |                              ^^^^ method not found in `String`\n   |\nhelp:\
    \ because of the in-memory representation of `&str`, to obtain an `Iterator` over\
    \ each of its codepoint use method `chars`\n   |\n14 |         digits.extend(digits.chars().rev().take(shift).collect::<Vec<_>>());\n\
    \   |                              ~~~~~\n\nerror[E0599]: no method named `iter`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpgolma189.rs:15:30\n\
    \   |\n15 |         digits.extend(digits.iter().rev().take(digits.len() - shift).collect::<Vec<_>>());\n\
    \   |                              ^^^^ method not found in `String`\n   |\nhelp:\
    \ because of the in-memory representation of `&str`, to obtain an `Iterator` over\
    \ each of its codepoint use method `chars`\n   |\n15 |       "
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - 1) -\
    \ i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6euzpa_.rs:8:54\n  |\n8 |\
    \         result.push_str(&digits[(digits.len() - 1) - i]);\n  |             \
    \                                         ^ expected `usize`, found `isize`\n\n\
    error[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpw6euzpa_.rs:8:52\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - 1) - i]);\n  |     \
    \                                               ^ no implementation for `usize\
    \ - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \ <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128\
    \ as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n\
    \            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n        \
    \    <&'a isize as Sub<isize>>\n          and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n --> /tmp/tmpw6euzpa_.rs:8:26\n  |\n\
    8 |         result.push_str(&digits[(digits.len() - 1) - i]);\n  |           \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n  =\
    \ help: the following other types implement trait `Index<Idx>`:\n            <String\
    \ as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n    \
    \        <String as Index<RangeInclusive<usize>>>\n            <String as Index<RangeTo<usize>>>\n\
    \            <String as Index<RangeToInclusive<usize>>>\n            <String as\
    \ Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= 10 {\n        digits.push_str(&format!(\"{}{}\", x / 10, &carry));\n    \
    \    x %= 10;\n        carry = x % 10;\n    }\n    digits.push_str(&format!(\"\
    {}\", &x));\n    if carry > 0 {\n        digits.push_str(&format!(\"{}\", &carry));\n\
    \    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `shift`\n --> /tmp/tmp5_lultti.rs:4:29\n  |\n\
    4 | fn circular_shift(x: isize, shift: isize) -> String {\n  |               \
    \              ^^^^^ help: if this is intentional, prefix it with an underscore:\
    \ `_shift`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\nerror[E0384]:\
    \ cannot assign to immutable argument `x`\n --> /tmp/tmp5_lultti.rs:9:9\n  |\n\
    4 | fn circular_shift(x: isize, shift: isize) -> String {\n  |               \
    \    - help: consider making this binding mutable: `mut x`\n...\n9 |         x\
    \ %= 10;\n  |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x%10);\n\
    \        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptn3_dzh2.rs:7:16\n  |\n7 |\
    \         s.push(x%10);\n  |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn3_dzh2.rs:10:12\n   |\n10 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - i) %\
    \ digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphcs16tu2.rs:8:49\n  |\n8 |\
    \         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  |  \
    \                                               ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmphcs16tu2.rs:8:47\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \  |                                               ^ no implementation for `usize\
    \ - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \ <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128\
    \ as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n\
    \            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n        \
    \    <&'a isize as Sub<isize>>\n          and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n --> /tmp/tmphcs16tu2.rs:8:26\n  |\n\
    8 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  |\
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - 1) -\
    \ i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6euzpa_.rs:8:54\n  |\n8 |\
    \         result.push_str(&digits[(digits.len() - 1) - i]);\n  |             \
    \                                         ^ expected `usize`, found `isize`\n\n\
    error[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpw6euzpa_.rs:8:52\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - 1) - i]);\n  |     \
    \                                               ^ no implementation for `usize\
    \ - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \ <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128\
    \ as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n\
    \            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n        \
    \    <&'a isize as Sub<isize>>\n          and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n --> /tmp/tmpw6euzpa_.rs:8:26\n  |\n\
    8 |         result.push_str(&digits[(digits.len() - 1) - i]);\n  |           \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n  =\
    \ help: the following other types implement trait `Index<Idx>`:\n            <String\
    \ as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n    \
    \        <String as Index<RangeInclusive<usize>>>\n            <String as Index<RangeTo<usize>>>\n\
    \            <String as Index<RangeToInclusive<usize>>>\n            <String as\
    \ Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += if\
    \ x & (1 << i) != 0 {\n            '0'\n        } else {\n            '1'\n  \
    \      };\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdousoaf5.rs:8:13\n  |\n8 |\
    \             '0'\n  |             ^^^ expected `&str`, found `char`\n  |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n  |\n8 |         \
    \    \"0\"\n  |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdousoaf5.rs:10:13\n\
    \   |\n10 |             '1'\n   |             ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    10 |             \"1\"\n   |\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits[..digits.len() - shift].to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdvbb0_u8.rs:6:39\n  |\n6 |\
    \     digits = digits[..(digits.len() - shift)].to_string();\n  |            \
    \                           ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n --> /tmp/tmpdvbb0_u8.rs:6:37\n  |\n6\
    \ |     digits = digits[..(digits.len() - shift)].to_string();\n  |          \
    \                           ^ no implementation for `usize - isize`\n  |\n  =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n\
    \            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n    \
    \        <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n          \
    \  <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize\
    \ as Sub<isize>>\n          and 48 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpdvbb0_u8.rs:7:38\n  |\n7 |     digits = digits[..digits.len() -\
    \ shift].to_string();\n  |                                      ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \ --> /tmp/tmpdvbb0_u8.rs:7:36\n  |\n7 |     digits = digits[..digits.len() -\
    \ shift].to_string();\n  |                                    ^ no implementation\
    \ for `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n\
    \            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n      \
    \      <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n          \
    \  <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a\
    \ i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for d in x.to_digits().rev() {\n    \
    \    if d > 0 {\n            s.push_str(&format!(\"{}\", d));\n        } else\
    \ {\n            s.push_str(&format!(\"{}\", -d));\n        }\n    }\n    if shift\
    \ > s.len() {\n        s.reverse();\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmph_989xel.rs:6:16\n  |\n6 |     for d in x.to_digits().rev()\
    \ {\n  |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph_989xel.rs:13:16\n   |\n13 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n13 |     if shift > s.len().try_into().unwrap() {\n   | \
    \                      ++++++++++++++++++++\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmph_989xel.rs:14:11\n\
    \   |\n14 |         s.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    let mut shift = shift % digits.len();\n\
    \    if shift > 0 {\n        digits = digits.chars().enumerate().map(|(i, c)|\
    \ {\n            if i == shift {\n                c\n            } else {\n  \
    \              digits[i - shift].to_string()\n            }\n        }).collect::<String>();\n\
    \    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmar2taue.rs:6:29\n  |\n6 |\
    \     let mut shift = shift % digits.len();\n  |                             ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \ --> /tmp/tmpmar2taue.rs:6:27\n  |\n6 |     let mut shift = shift % digits.len();\n\
    \  |                           ^ no implementation for `isize % usize`\n  |\n\
    \  = help: the trait `Rem<usize>` is not implemented for `isize`\n  = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n\
    \            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n    \
    \        <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n          \
    \  <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize\
    \ as Rem<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpmar2taue.rs:9:21\n  |\n9 |             if i == shift {\n  |    \
    \                 ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    9 |             if i == shift.try_into().unwrap() {\n  |                     \
    \     ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmar2taue.rs:12:28\n\
    \   |\n12 |                 digits[i - shift].to_string()\n   |              \
    \              ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpmar2taue.rs:12:26\n   |\n12 |          \
    \       digits[i - shift].to_string()\n   |                          ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0277]: the type `Str"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i == shift {\n            c.to_string()\n        } else {\n\
    \            c\n        }\n    }).collect::<String>();\n    digits.reverse()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph43yfjma.rs:7:17\n  |\n7 |\
    \         if i == shift {\n  |                 ^^^^^ expected `usize`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |         if i == shift.try_into().unwrap() {\n  |\
    \                      ++++++++++++++++++++\n\nerror[E0308]: `if` and `else` have\
    \ incompatible types\n  --> /tmp/tmph43yfjma.rs:10:13\n   |\n7  | /         if\
    \ i == shift {\n8  | |             c.to_string()\n   | |             -------------\
    \ expected because of this\n9  | |         } else {\n10 | |             c\n  \
    \ | |             ^- help: try using a conversion method: `.to_string()`\n   |\
    \ |             |\n   | |             expected struct `String`, found `char`\n\
    11 | |         }\n   | |_________- `if` and `else` have incompatible types\n\n\
    error[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmph43yfjma.rs:13:12\n   |\n13 |     digits.reverse()\n  \
    \ |            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += char::from(x%10);\n\
    \        x /= 10;\n    }\n    if x > 0 {\n        s += char::from(x%10);\n   \
    \ }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `char: From<isize>` is not satisfied\n -->\
    \ /tmp/tmp0vc3iprx.rs:7:14\n  |\n7 |         s += char::from(x%10);\n  |     \
    \         ^^^^^^^^^^ the trait `From<isize>` is not implemented for `char`\n \
    \ |\n  = help: the trait `From<u8>` is implemented for `char`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp0vc3iprx.rs:7:14\n  |\n7 |         s += char::from(x%10);\n\
    \  |              ^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0277]:\
    \ the trait bound `char: From<isize>` is not satisfied\n  --> /tmp/tmp0vc3iprx.rs:11:14\n\
    \   |\n11 |         s += char::from(x%10);\n   |              ^^^^^^^^^^ the trait\
    \ `From<isize>` is not implemented for `char`\n   |\n   = help: the trait `From<u8>`\
    \ is implemented for `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0vc3iprx.rs:11:14\n\
    \   |\n11 |         s += char::from(x%10);\n   |              ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - i) %\
    \ digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphcs16tu2.rs:8:49\n  |\n8 |\
    \         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  |  \
    \                                               ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmphcs16tu2.rs:8:47\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \  |                                               ^ no implementation for `usize\
    \ - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \ <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128\
    \ as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n\
    \            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n        \
    \    <&'a isize as Sub<isize>>\n          and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n --> /tmp/tmphcs16tu2.rs:8:26\n  |\n\
    8 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  |\
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string();\n\
    \        x = x >> 1;\n    }\n    s += x.to_string();\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsi9302g4.rs:7:14\n  |\n7 |\
    \         s += x.to_string();\n  |              ^^^^^^^^^^^^^\n  |           \
    \   |\n  |              expected `&str`, found struct `String`\n  |          \
    \    help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpsi9302g4.rs:10:10\n   |\n10 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for d in x.to_digits()\
    \ {\n        let digit = d.unwrap();\n        let digit = digit + carry % 10;\n\
    \        carry = digit / 10;\n        s += digit.to_string();\n    }\n    if carry\
    \ > 0 {\n        s += carry.to_string();\n    }\n    s\n}\n\nfn main() {\n   \
    \ let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpvnpiijiw.rs:7:16\n  |\n7 |     for d in x.to_digits()\
    \ {\n  |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvnpiijiw.rs:14:14\n   |\n14 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += char::from_u32(x>>(32-i))\
    \ as char;\n    }\n    s[..shift].to_string()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0jbhl7uk.rs:7:29\n  |\n7 |\
    \         s += char::from_u32(x>>(32-i)) as char;\n  |                       \
    \      ^^^^^^^^^ expected `u32`, found `isize`\n  |\nhelp: you can convert an\
    \ `isize` to a `u32` and panic if the converted value doesn't fit\n  |\n7 |  \
    \       s += char::from_u32((x>>(32-i)).try_into().unwrap()) as char;\n  |   \
    \                          +         +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp0jbhl7uk.rs:7:14\n  |\n7 |         s += char::from_u32(x>>(32-i))\
    \ as char;\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`,\
    \ found `char`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \ --> /tmp/tmp0jbhl7uk.rs:9:5\n  |\n9 |     s[..shift].to_string()\n  |     ^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeTo<isize>`\n  |\n  = help: the trait `Index<RangeTo<isize>>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0605]: non-primitive cast: `Option<char>` as `char`\n --> /tmp/tmp0jbhl7uk.rs:7:14\n\
    \  |\n7 |         s += char::from_u32(x>>(32-i)) as char;\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0605.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= shift {\n        let digit = x % 10;\n        digits.push(digit.to_string());\n\
    \        x /= 10;\n        carry += digit as isize;\n    }\n    if carry > 0 {\n\
    \        digits.push(carry.to_string());\n    }\n    digits\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwl_6y9g3.rs:9:21\n  |\n9 |\
    \         digits.push(digit.to_string());\n  |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpwl_6y9g3.rs:14:21\n   |\n14 |         digits.push(carry.to_string());\n\
    \   |                     ^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for _ in 0..shift {\n        result.push_str(&digits[..]);\n        digits\
    \ = &digits[digits.len() - 1];\n    }\n    result.push_str(&digits[..]);\n   \
    \ result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpbuorsadx.rs:9:19\n\
    \  |\n9 |         digits = &digits[digits.len() - 1];\n  |                   ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpbuorsadx.rs:9:18\n  |\n6 |    \
    \ let mut digits = x.to_string();\n  |                      ------------- expected\
    \ due to this value\n...\n9 |         digits = &digits[digits.len() - 1];\n  |\
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found reference\n\
    \  |\n  = note: expected struct `String`\n          found reference `&_`\nhelp:\
    \ consider removing the borrow\n  |\n9 -         digits = &digits[digits.len()\
    \ - 1];\n9 +         digits = digits[digits.len() - 1];\n  | \n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(shift - i) % digits.len()]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpag3afgk4.rs:8:47\n  |\n8 |\
    \         result.push_str(&digits[(shift - i) % digits.len()]);\n  |         \
    \                                      ^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpag3afgk4.rs:8:45\n\
    \  |\n8 |         result.push_str(&digits[(shift - i) % digits.len()]);\n  | \
    \                                            ^ no implementation for `isize %\
    \ usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for `isize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `isize`\n --> /tmp/tmpag3afgk4.rs:8:26\n\
    \  |\n8 |         result.push_str(&digits[(shift - i) % digits.len()]);\n  | \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `isize`\n  |\n  = help: the trait `Index<isize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        digits.push(remainder % 10);\n        remainder = remainder\
    \ / 10;\n    }\n    if shift > digits.len() {\n        digits.reverse();\n   \
    \ }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx40rpssa.rs:8:21\n  |\n8 |\
    \         digits.push(remainder % 10);\n  |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx40rpssa.rs:11:16\n\
    \   |\n11 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpx40rpssa.rs:12:16\n   |\n12 |         digits.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut remainder = x;\n    let\
    \ mut shift = shift % 10;\n    while shift > 0 {\n        remainder /= 10;\n \
    \       remainder %= 10;\n        shift -= 1;\n        result.push(remainder);\n\
    \    }\n    result.reverse();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz9_itaa3.rs:12:21\n   |\n\
    12 |         result.push(remainder);\n   |                     ^^^^^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpz9_itaa3.rs:14:12\n   |\n14 | \
    \    result.reverse();\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        digits.push(remainder % 10);\n        remainder = remainder\
    \ / 10;\n    }\n    digits.push(remainder);\n    digits.reverse();\n    digits.chars().take(shift).collect()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzo0fy5_8.rs:8:21\n  |\n8 |\
    \         digits.push(remainder % 10);\n  |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzo0fy5_8.rs:11:17\n\
    \   |\n11 |     digits.push(remainder);\n   |                 ^^^^^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpzo0fy5_8.rs:12:12\n   |\n12 | \
    \    digits.reverse();\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzo0fy5_8.rs:13:25\n\
    \   |\n13 |     digits.chars().take(shift).collect()\n   |                   \
    \      ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n13 |     digits.chars().take(shift.try_into().unwrap()).collect()\n\
    \   |                              ++++++++++++++++++++\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += if\
    \ x & (1 << i) != 0 {\n            '1'\n        } else {\n            '0'\n  \
    \      };\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp69d531j8.rs:8:13\n  |\n8 |\
    \             '1'\n  |             ^^^ expected `&str`, found `char`\n  |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n  |\n8 |         \
    \    \"1\"\n  |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp69d531j8.rs:10:13\n\
    \   |\n10 |             '0'\n   |             ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    10 |             \"0\"\n   |\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_digit(10);\n\
    \        x = x >> 1;\n    }\n    if shift > x.len() {\n        s[..shift].copy_from_slice(&x[..shift]);\n\
    \    } else {\n        s[..shift].copy_from_slice(&x[shift..]);\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for type `isize` in the\
    \ current scope\n --> /tmp/tmp5edjqxu5.rs:7:16\n  |\n7 |         s += x.to_digit(10);\n\
    \  |                ^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmp5edjqxu5.rs:10:18\n\
    \   |\n10 |     if shift > x.len() {\n   |                  ^^^ method not found\
    \ in `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmp5edjqxu5.rs:11:9\n   |\n11 |         s[..shift].copy_from_slice(&x[..shift]);\n\
    \   |         ^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n   |\n\
    \   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0608]: cannot index into a value of type `isize`\n  -->\
    \ /tmp/tmp5edjqxu5.rs:11:37\n   |\n11 |         s[..shift].copy_from_slice(&x[..shift]);\n\
    \   |                                     ^^^^^^^^^^\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmp5edjqxu5.rs:13:9\n\
    \   |\n13 |         s[..shift].copy_from_slice(&x[shift..]);\n   |         ^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeTo<isize>`\n   |\n   = help: the trait `Index<RangeTo<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += &format!(\"\
    {:0>2}\", x % 10);\n        x /= 10;\n    }\n    if shift > x.len() {\n      \
    \  s[shift..].copy_from_slice(&s[0..shift]);\n    } else {\n        s[0..shift].copy_from_slice(&s[shift..]);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpwjragrt4.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmpwjragrt4.rs:11:9\n\
    \   |\n11 |         s[shift..].copy_from_slice(&s[0..shift]);\n   |         ^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait\
    \ `Index<RangeFrom<isize>>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpwjragrt4.rs:11:37\n   |\n11 |         s[shift..].copy_from_slice(&s[0..shift]);\n\
    \   |                                     ^^^^^^^^^^^ `String` cannot be indexed\
    \ by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpwjragrt4.rs:13:9\n   |\n13 |         s[0..shift].copy_from_slice(&s[shift..]);\n\
    \   |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the "
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += char::from_u32(x).unwrap();\n\
    \        x = x >> 8;\n    }\n    s += char::from_u32(x).unwrap();\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl7pwxgvr.rs:7:29\n  |\n7 |\
    \         s += char::from_u32(x).unwrap();\n  |                             ^\
    \ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32`\
    \ and panic if the converted value doesn't fit\n  |\n7 |         s += char::from_u32(x.try_into().unwrap()).unwrap();\n\
    \  |                              ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpl7pwxgvr.rs:7:14\n  |\n7 |         s += char::from_u32(x).unwrap();\n\
    \  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpl7pwxgvr.rs:10:25\n   |\n10 |  \
    \   s += char::from_u32(x).unwrap();\n   |                         ^ expected\
    \ `u32`, found `isize`\n   |\nhelp: you can convert an `isize` to a `u32` and\
    \ panic if the converted value doesn't fit\n   |\n10 |     s += char::from_u32(x.try_into().unwrap()).unwrap();\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl7pwxgvr.rs:10:10\n   |\n10 |     s += char::from_u32(x).unwrap();\n\
    \   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for digit in x.to_string().chars().take(shift)\
    \ {\n        s.push(digit.to_string());\n    }\n    s[..].reverse()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfeve1rim.rs:6:45\n  |\n6 |\
    \     for digit in x.to_string().chars().take(shift) {\n  |                  \
    \                           ^^^^^ expected `usize`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n6 |     for digit in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n  |                                                  ++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpfeve1rim.rs:7:16\n  |\n7 |    \
    \     s.push(digit.to_string());\n  |                ^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0599]: no method named `reverse` found\
    \ for type `str` in the current scope\n --> /tmp/tmpfeve1rim.rs:9:11\n  |\n9 |\
    \     s[..].reverse()\n  |           ^^^^^^^ method not found in `str`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut i = x;\n    while i > 0 {\n \
    \       i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '0') {\n        s.push('0');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '1') {\n        s.push('1');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '0') {\n        s.push('0');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '1') {\n        s.push('1');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '0') {\n        s.push('0');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '1') {\n        s.push('1');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '0') {\n        s.push('0');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '1') {\n        s.push('1');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '0') {\n        s.push('0');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '1') {\n        s.push('1');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '0') {\n        s.push('0');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '1') {\n        s.push('1');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '0') {\n        s.push('0');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '1') {\n        s.push('1');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '0') {\n        s.push('0');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '1') {\n        s.push('1');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '0') {\n        s.push('0');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '1') {\n        s.push('1');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '0') {\n        s.push('0');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '1') {\n        s.push('1');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '0') {\n        s.push('0');\n    }\n    for i in s.chars().rposition(|c|\
    \ c != '1') {\n        s.push('1');\n    }\n    for i in s.chars().rposition(|c|\
    \ \n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `)`\n  --> /tmp/tmpimduw8eb.rs:78:1\n\
    \   |\n78 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpimduw8eb.rs:77:33\n   |\n4  | fn circular_shift(x: isize,\
    \ shift: isize) -> String {\n   |                                            \
    \         - closing delimiter possibly meant for this\n...\n77 |     for i in\
    \ s.chars().rposition(|c| \n   |                                 ^ unclosed delimiter\n\
    78 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpimduw8eb.rs:9:16\n  |\n9 |         s.push(i);\n  |             \
    \   ^ expected `char`, found `isize`\n\nerror[E0277]: the trait bound `Chars<'_>:\
    \ ExactSizeIterator` is not satisfied\n    --> /tmp/tmpimduw8eb.rs:11:24\n   \
    \  |\n11   |     for i in s.chars().rposition(|c| c != '0') {\n     |        \
    \                ^^^^^^^^^ the trait `ExactSizeIterator` is not implemented for\
    \ `Chars<'_>`\n     |\n     = help: the following other types implement trait\
    \ `ExactSizeIterator`:\n               &mut I\n               Args\n         \
    \      ArgsOs\n               ArrayChunks<'_, T, N>\n               ArrayChunksMut<'_,\
    \ T, N>\n               ArrayWindows<'_, T, N>\n               Box<I, A>\n   \
    \            Chunks<'_, T>\n             and 109 others\nnote: required by a bound\
    \ in `rposition`\n\nerror[E0277]: the trait bound `Chars<'_>: ExactSizeIterator`\
    \ is not satisfied\n    --> /tmp/tmpimduw8eb.rs:14:24\n     |\n14   |     for\
    \ i in s.chars().rposition(|c| c != '1') {\n     |                        ^^^^^^^^^\
    \ the trait `ExactSizeIterator` is not implemented for `Chars<'_>`\n     |\n \
    \    = help: the following other types implement trait `ExactSizeIterator`:\n\
    \               &mut I\n               Args\n               ArgsOs\n         \
    \      ArrayChunks<'_, T, N>\n               ArrayChunksMut<'_, T, N>\n      \
    \         ArrayWindows<'_, T, N>\n               Box<I, A>\n               Chunks<'_,\
    \ T>\n             and 109 others\nnote: required by a bound in `rposition`\n\n\
    error[E0277]: the trait bound `Chars<'_>: ExactSizeIterator` is not satisfied\n\
    \ "
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for d in x.to_string().chars().rev()\
    \ {\n        s.push(*d);\n        if shift > s.len() {\n            s.reverse();\n\
    \            break;\n        }\n        shift -= s.len();\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n --> /tmp/tmp3tbtf6lk.rs:7:16\n\
    \  |\n7 |         s.push(*d);\n  |                ^^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp3tbtf6lk.rs:8:20\n  |\n8 |         if shift > s.len() {\n\
    \  |                    ^^^^^^^ expected `isize`, found `usize`\n  |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n  |\n8 |         if shift > s.len().try_into().unwrap() {\n  |        \
    \                   ++++++++++++++++++++\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmp3tbtf6lk.rs:9:15\n\
    \  |\n9 |             s.reverse();\n  |               ^^^^^^^ help: there is an\
    \ associated function with a similar name: `reserve`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3tbtf6lk.rs:12:18\n   |\n12 |         shift -= s.len();\n\
    \   |                  ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot subtract-assign `usize` from `isize`\n  --> /tmp/tmp3tbtf6lk.rs:12:15\n\
    \   |\n12 |         shift -= s.len();\n   |               ^^ no implementation\
    \ for `isize -= usize`\n   |\n   = help: the trait `SubAssign<usize>` is not implemented\
    \ for `isize`\n   = help: the following other types implement trait `SubAssign<Rhs>`:\n\
    \             <f32 as SubAssign<&f32>>\n             <f32 as SubAssign>\n    \
    \         <f64 as SubAssign<&f64>>\n             <f64 as SubAssign>\n        \
    \     <i128 as SubAssign<&i128>>\n             <i128 as SubAssign>\n         \
    \    <i16 as SubAssign<&i16>>\n             <i16 as SubAssign>\n           and\
    \ 20 others\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0599, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits[..(shift % digits.len())].to_string();\n\
    \    digits = digits[..(digits.len() - shift)].to_string();\n    digits\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo2vy6bp7.rs:6:32\n  |\n6 |\
    \     digits = digits[..(shift % digits.len())].to_string();\n  |            \
    \                    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot mod `isize` by `usize`\n --> /tmp/tmpo2vy6bp7.rs:6:30\n  |\n6 |     digits\
    \ = digits[..(shift % digits.len())].to_string();\n  |                       \
    \       ^ no implementation for `isize % usize`\n  |\n  = help: the trait `Rem<usize>`\
    \ is not implemented for `isize`\n  = help: the following other types implement\
    \ trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n            <&'a f64 as\
    \ Rem<f64>>\n            <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n\
    \            <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n      \
    \      <&'a i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and\
    \ 54 others\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \ --> /tmp/tmpo2vy6bp7.rs:6:14\n  |\n6 |     digits = digits[..(shift % digits.len())].to_string();\n\
    \  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `RangeTo<isize>`\n  |\n  = help: the trait `Index<RangeTo<isize>>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpo2vy6bp7.rs:7:39\n  |\n7 |    \
    \ digits = digits[..(digits.len() - shift)].to_string();\n  |                \
    \                       ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n --> /tmp/tmpo2vy6bp7.rs:7:37\n  |\n7\
    \ |     digits = digits[..(digits.len() - shift)].to_string();\n  |          \
    \                           ^ no implementation for `usize - isize`\n  |\n  =\
    \ help: the"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    for d in\
    \ x.digits().cloned() {\n        let digit = if carry > 0 {\n            d + &carry\n\
    \        } else {\n            d\n        };\n        digits.push(digit.to_string());\n\
    \        carry = digit as isize - d;\n    }\n    if carry > 0 {\n        digits.push(carry.to_string());\n\
    \    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpq2lbnxar.rs:7:16\n  |\n7 |     for d in x.digits().cloned()\
    \ {\n  |                ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpq2lbnxar.rs:17:21\n   |\n17 |         digits.push(carry.to_string());\n\
    \   |                     ^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut i = 0;\n    while i < shift {\n\
    \        s += char::from(x%10);\n        x /= 10;\n        i += 1;\n    }\n  \
    \  s += char::from(x%10);\n    String::from_utf8_lossy(&s).to_string()\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `char: From<isize>` is not satisfied\n -->\
    \ /tmp/tmpqbowymfh.rs:8:14\n  |\n8 |         s += char::from(x%10);\n  |     \
    \         ^^^^^^^^^^ the trait `From<isize>` is not implemented for `char`\n \
    \ |\n  = help: the trait `From<u8>` is implemented for `char`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpqbowymfh.rs:8:14\n  |\n8 |         s += char::from(x%10);\n\
    \  |              ^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0277]:\
    \ the trait bound `char: From<isize>` is not satisfied\n  --> /tmp/tmpqbowymfh.rs:12:10\n\
    \   |\n12 |     s += char::from(x%10);\n   |          ^^^^^^^^^^ the trait `From<isize>`\
    \ is not implemented for `char`\n   |\n   = help: the trait `From<u8>` is implemented\
    \ for `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqbowymfh.rs:12:10\n\
    \   |\n12 |     s += char::from(x%10);\n   |          ^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqbowymfh.rs:13:29\n\
    \   |\n13 |     String::from_utf8_lossy(&s).to_string()\n   |                \
    \             ^^ expected slice `[u8]`, found struct `String`\n   |\n   = note:\
    \ expected reference `&[u8]`\n              found reference `&String`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    while x >= shift {\n        s += '0';\n\
    \        x -= shift;\n    }\n    s += '0' + (x % 10);\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdee8fn9n.rs:7:14\n  |\n7 |\
    \         s += '0';\n  |              ^^^ expected `&str`, found `char`\n  |\n\
    help: if you meant to write a `str` literal, use double quotes\n  |\n7 |     \
    \    s += \"0\";\n  |              ~~~\n\nerror[E0369]: cannot add `isize` to\
    \ `char`\n  --> /tmp/tmpdee8fn9n.rs:10:14\n   |\n10 |     s += '0' + (x % 10);\n\
    \   |          --- ^ -------- isize\n   |          |\n   |          char\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut carry = 0;\n    let mut\
    \ digits = x.to_string();\n    let mut digits_len = digits.length;\n    let mut\
    \ digits_len_pow = digits_len.powf(2);\n    let mut digits_len_pow_next = digits_len_pow.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next = digits_len_pow_next.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next_next = digits_len_pow_next_next.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next_next_next = digits_len_pow_next_next_next.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next_next_next_next = digits_len_pow_next_next_next_next.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next_next_next_next_next = digits_len_pow_next_next_next_next_next.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next_next_next_next_next_next = digits_len_pow_next_next_next_next_next_next.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next_next_next_next_next_next_next = digits_len_pow_next_next_next_next_next_next_next.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next_next_next_next_next_next_next_next = digits_len_pow_next_next_next_next_next_next_next_next_next.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next_next_next_next_next_next_next_next_next\
    \ = digits_len_pow_next_next_next_next_next_next_next_next_next_next.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next_next_next_next_next_next_next_next_next_next\
    \ = digits_len_pow_next_next_next_next_next_next_next_next_next_next_next.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next_next_next_next_next_next_next_next_next_next\
    \ = digits_len_pow_next_next_next_next_next_next_next_next_next_next_next_next.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = digits_len_pow_next_next_next_next_next_next_next_next_next_next_next_next_next_next.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = digits_len_pow_next_next_next_next_next_next_next_next_next_next_next_next_next_next.next_power_of_two();\n\
    \    let mut digits_len_pow_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = digits_len_\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp60ky4rws.rs:24:111\n   |\n\
    24 |     let mut digits_len_pow_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = digits_len_\n   |                                                        \
    \                                                       ^ help: add `;` here\n\
    25 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `digits_len_pow_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp60ky4rws.rs:18:75\n   |\n18 | ...t_next_next_next_next_next\
    \ = digits_len_pow_next_next_next_next_next_next_next_next_next.next_power_of_two();\n\
    \   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `digits_len_pow_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `digits_len_pow_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp60ky4rws.rs:19:80\n   |\n19 | ...next_next_next_next_next\
    \ = digits_len_pow_next_next_next_next_next_next_next_next_next_next.next_power_of_two();\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `digits_len_pow_next_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `digits_len_pow_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp60ky4rws.rs:20:85\n   |\n20 | ...xt_next_next_next_next\
    \ = digits_len_pow_next_next_next_next_next_next_next_next_next_next_next.next_power_of_two();\n\
    \   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `digits_len_pow_next_next_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `digits_len_pow_next_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp60ky4rws.rs:21:85\n   |\n21 | ..._next_next_next_next\
    \ = digits_len_pow_next_next_next_next_next_next_next"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for i in 0..shift\
    \ {\n        let digit = x % 10;\n        s +=\n            match digit {\n  \
    \              0 => \"0\",\n                1 => \"1\",\n                2 =>\
    \ \"2\",\n                3 => \"3\",\n                4 => \"4\",\n         \
    \       5 => \"5\",\n                6 => \"6\",\n                7 => \"7\",\n\
    \                8 => \"8\",\n                9 => \"9\",\n                _ =>\
    \ digit.to_string(),\n            };\n        x /= 10;\n        carry = digit\
    \ as isize + (carry as isize);\n    }\n    if carry > 0 {\n        s += \"1\"\
    .to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpo8sc7ben.rs:21:22\n\
    \   |\n10 | /             match digit {\n11 | |                 0 => \"0\",\n\
    12 | |                 1 => \"1\",\n13 | |                 2 => \"2\",\n...  |\n\
    20 | |                 9 => \"9\",\n   | |                      --- this and all\
    \ prior arms are found to be of type `&str`\n21 | |                 _ => digit.to_string(),\n\
    \   | |                      ^^^^^^^^^^^^^^^^^\n   | |                      |\n\
    \   | |                      expected `&str`, found struct `String`\n   | |  \
    \                    help: consider borrowing here: `&digit.to_string()`\n22 |\
    \ |             };\n   | |_____________- `match` arms have incompatible types\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpo8sc7ben.rs:27:14\n   |\n27 |\
    \         s += \"1\".to_string();\n   |              ^^^^^^^^^^^^^^^\n   |   \
    \           |\n   |              expected `&str`, found struct `String`\n   |\
    \              help: consider borrowing here: `&\"1\".to_string()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    for i in 0..shift {\n        result.push(x%10);\n\
    \        x /= 10;\n    }\n    for i in 0..shift {\n        result.push(x%10);\n\
    \        x /= 10;\n    }\n    result.reverse();\n    result\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4zzqpiyz.rs:7:21\n  |\n7 |\
    \         result.push(x%10);\n  |                     ^^^^ expected `char`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4zzqpiyz.rs:11:21\n\
    \   |\n11 |         result.push(x%10);\n   |                     ^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmp4zzqpiyz.rs:14:12\n   |\n14 | \
    \    result.reverse();\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits.chars().nth(shift).collect::<String>();\n\
    \    digits.reverse();\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqnph2j36.rs:6:33\n  |\n6 |\
    \     digits = digits.chars().nth(shift).collect::<String>();\n  |           \
    \                      ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \  |\n6 |     digits = digits.chars().nth(shift.try_into().unwrap()).collect::<String>();\n\
    \  |                                      ++++++++++++++++++++\n\nerror[E0599]:\
    \ `Option<char>` is not an iterator\n   --> /tmp/tmpqnph2j36.rs:6:40\n    |\n\
    6   |       digits = digits.chars().nth(shift).collect::<String>();\n    |   \
    \                                       ^^^^^^^ `Option<char>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<char>: Iterator`\n            which is required by `&mut Option<char>:\
    \ Iterator`\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpqnph2j36.rs:7:12\n  |\n7 |     digits.reverse();\n\
    \  |            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for d in x.digits().cloned()\
    \ {\n        let digit = d.to_digit(10);\n        let digit = digit + carry %\
    \ 10;\n        carry = digit / 10;\n        s += digit.to_string();\n    }\n \
    \   if carry > 0 {\n        s += carry.to_string();\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpclgr0poo.rs:7:16\n  |\n7 |     for d in x.digits().cloned()\
    \ {\n  |                ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpclgr0poo.rs:14:14\n   |\n14 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += char::from_u32(x%10);\n\
    \        x /= 10;\n    }\n    if shift > x.len() {\n        for i in x.len() -\
    \ shift..x.len() {\n            s += char::from_u32(x%10);\n            x /= 10;\n\
    \        }\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1gy84l9a.rs:7:29\n  |\n7 |\
    \         s += char::from_u32(x%10);\n  |                             ^^^^ expected\
    \ `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32` and panic\
    \ if the converted value doesn't fit\n  |\n7 |         s += char::from_u32((x%10).try_into().unwrap());\n\
    \  |                             +    +++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp1gy84l9a.rs:7:14\n  |\n7 |         s += char::from_u32(x%10);\n\
    \  |              ^^^^^^^^^^^^^^^^^^^^ expected `&str`, found enum `Option`\n\
    \  |\n  = note: expected reference `&str`\n                  found enum `Option<char>`\n\
    \nerror[E0599]: no method named `len` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp1gy84l9a.rs:10:18\n   |\n10 |     if shift > x.len() {\n   |  \
    \                ^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `len` found for type `isize` in the current scope\n  --> /tmp/tmp1gy84l9a.rs:11:20\n\
    \   |\n11 |         for i in x.len() - shift..x.len() {\n   |                \
    \    ^^^ method not found in `isize`\n\nerror[E0599]: no method named `len` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmp1gy84l9a.rs:11:37\n   |\n\
    11 |         for i in x.len() - shift..x.len() {\n   |                       \
    \              ^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1gy84l9a.rs:12:33\n   |\n12 |             s += char::from_u32(x%10);\n\
    \   |                                 ^^^^ expected `u32`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `u32` and panic if the converted value doesn't\
    \ fit\n   |\n12 |             s += char::from_u32((x%10).try_into().unwrap());\n\
    \   |                                 +    +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1gy84l9a.rs:12:18\n   |\n12 |             s\
    \ += char::from_u32(x%10);\n   |                  ^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found enum `Option`\n   |\n   = note: expected reference `&str`\n  \
    \                 found enum `Option<char>`\n\nerror: aborting due to 7 previous\
    \ er"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits[..(digits.len()\
    \ - shift)].to_string();\n    digits = digits.reverse();\n    digits\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppfdh45sg.rs:6:39\n  |\n6 |\
    \     digits = digits[..(digits.len() - shift)].to_string();\n  |            \
    \                           ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n --> /tmp/tmppfdh45sg.rs:6:37\n  |\n6\
    \ |     digits = digits[..(digits.len() - shift)].to_string();\n  |          \
    \                           ^ no implementation for `usize - isize`\n  |\n  =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n  = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n\
    \            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n    \
    \        <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n          \
    \  <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize\
    \ as Sub<isize>>\n          and 48 others\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n --> /tmp/tmppfdh45sg.rs:7:21\n\
    \  |\n7 |     digits = digits.reverse();\n  |                     ^^^^^^^ help:\
    \ there is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    for i in 0..shift {\n        result.push(x%10);\n\
    \        x = x/10;\n    }\n    if shift > x.len() {\n        for i in x.len()\
    \ - shift..x.len() {\n            result.push(x%10);\n            x = x/10;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi88613_v.rs:7:21\n  |\n7 |\
    \         result.push(x%10);\n  |                     ^^^^ expected `char`, found\
    \ `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpi88613_v.rs:10:18\n   |\n10 |     if shift > x.len()\
    \ {\n   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `len` found for type `isize` in the current scope\n  --> /tmp/tmpi88613_v.rs:11:20\n\
    \   |\n11 |         for i in x.len() - shift..x.len() {\n   |                \
    \    ^^^ method not found in `isize`\n\nerror[E0599]: no method named `len` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpi88613_v.rs:11:37\n   |\n\
    11 |         for i in x.len() - shift..x.len() {\n   |                       \
    \              ^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpi88613_v.rs:12:25\n   |\n12 |             result.push(x%10);\n\
    \   |                         ^^^^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += &format!(\"\
    {:0>2}\", x % 10);\n        x /= 10;\n    }\n    if shift > x.len() {\n      \
    \  s[..shift].iter().cloned().collect()\n    } else {\n        s[..shift].iter().rev().cloned().collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp6tnkq198.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmp6tnkq198.rs:11:9\n\
    \   |\n11 |         s[..shift].iter().cloned().collect()\n   |         ^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeTo<isize>`\n   |\n   = help: the trait `Index<RangeTo<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmp6tnkq198.rs:13:9\n   |\n13 |         s[..shift].iter().rev().cloned().collect()\n\
    \   |         ^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n   |\n\
    \   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits[..(shift as usize)].to_string();\n\
    \    digits = digits.reverse();\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpceqva6j7.rs:7:21\n  |\n7 |     digits = digits.reverse();\n\
    \  |                     ^^^^^^^ help: there is an associated function with a\
    \ similar name: `reserve`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n   \
    \ for i in 0..shift {\n        s += &digits[(digits.len() - 1 - i) % digits.len()];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpaw74t2xg.rs:8:42\n  |\n8 |\
    \         s += &digits[(digits.len() - 1 - i) % digits.len()];\n  |          \
    \                                ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n --> /tmp/tmpaw74t2xg.rs:8:40\n  |\n8\
    \ |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n  |        \
    \                                ^ no implementation for `usize - isize`\n  |\n\
    \  = help: the trait `Sub<isize>` is not implemented for `usize`\n  = help: the\
    \ following other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n\
    \            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n    \
    \        <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n          \
    \  <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize\
    \ as Sub<isize>>\n          and 48 others\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `usize`\n --> /tmp/tmpaw74t2xg.rs:8:15\n  |\n8 |         s +=\
    \ &digits[(digits.len() - 1 - i) % digits.len()];\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for digit in\
    \ x.to_string().chars().take(shift) {\n        let digit = digit + carry;\n  \
    \      carry = digit % 10;\n        s += digit.to_string();\n    }\n    if carry\
    \ != 0 {\n        s += &format!(\"{}\", carry).to_string();\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmph4wtu65b.rs:7:45\n  |\n7 |\
    \     for digit in x.to_string().chars().take(shift) {\n  |                  \
    \                           ^^^^^ expected `usize`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n7 |     for digit in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n  |                                                  ++++++++++++++++++++\n\
    \nerror[E0369]: cannot add `{integer}` to `char`\n --> /tmp/tmph4wtu65b.rs:8:27\n\
    \  |\n8 |         let digit = digit + carry;\n  |                     ----- ^\
    \ ----- {integer}\n  |                     |\n  |                     char\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(shift - i) % digits.len()]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpag3afgk4.rs:8:47\n  |\n8 |\
    \         result.push_str(&digits[(shift - i) % digits.len()]);\n  |         \
    \                                      ^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpag3afgk4.rs:8:45\n\
    \  |\n8 |         result.push_str(&digits[(shift - i) % digits.len()]);\n  | \
    \                                            ^ no implementation for `isize %\
    \ usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for `isize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `isize`\n --> /tmp/tmpag3afgk4.rs:8:26\n\
    \  |\n8 |         result.push_str(&digits[(shift - i) % digits.len()]);\n  | \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `isize`\n  |\n  = help: the trait `Index<isize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= shift {\n        digits.push(x % 10);\n        x /= 10;\n        carry +=\
    \ 1;\n    }\n    if carry > 0 {\n        digits.push(carry % 10);\n    }\n   \
    \ digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7gw2g7p6.rs:8:21\n  |\n8 |\
    \         digits.push(x % 10);\n  |                     ^^^^^^ expected `char`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7gw2g7p6.rs:13:21\n\
    \   |\n13 |         digits.push(carry % 10);\n   |                     ^^^^^^^^^^\
    \ expected `char`, found integer\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n   \
    \ for i in 0..shift {\n        s.push(*digits[digits.len() - i - 1]);\n    }\n\
    \    s.push(*digits[digits.len() - shift]);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpule050wv.rs:8:39\n  |\n8 |\
    \         s.push(*digits[digits.len() - i - 1]);\n  |                        \
    \               ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n --> /tmp/tmpule050wv.rs:8:37\n  |\n8 |         s.push(*digits[digits.len()\
    \ - i - 1]);\n  |                                     ^ no implementation for\
    \ `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for\
    \ `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n \
    \           <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n       \
    \     <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n           \
    \ <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8\
    \ as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpule050wv.rs:8:17\n\
    \  |\n8 |         s.push(*digits[digits.len() - i - 1]);\n  |                \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n  |\n  =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n  = help: the\
    \ following other types implement trait `Index<Idx>`:\n            <String as\
    \ Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n       \
    \     <String as Index<RangeInclusive<usize>>>\n            <String as Index<RangeTo<usize>>>\n\
    \            <String as Index<RangeToInclusive<usize>>>\n            <String as\
    \ Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpule050wv.rs:10:35\n   |\n10 |     s.push(*digits[digits.len()\
    \ - shift]);\n   |                                   ^^^^^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpule050wv.rs:10:33\n\
    \   |\n10 |     s.push(*digits[digits.len() - shift]);\n   |                 \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other "
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits.chars().nth(shift).collect::<String>();\n\
    \    digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplyi33srf.rs:6:33\n  |\n6 |\
    \     digits = digits.chars().nth(shift).collect::<String>();\n  |           \
    \                      ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \  |\n6 |     digits = digits.chars().nth(shift.try_into().unwrap()).collect::<String>();\n\
    \  |                                      ++++++++++++++++++++\n\nerror[E0599]:\
    \ `Option<char>` is not an iterator\n   --> /tmp/tmplyi33srf.rs:6:40\n    |\n\
    6   |       digits = digits.chars().nth(shift).collect::<String>();\n    |   \
    \                                       ^^^^^^^ `Option<char>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<char>: Iterator`\n            which is required by `&mut Option<char>:\
    \ Iterator`\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n --> /tmp/tmplyi33srf.rs:7:12\n  |\n7 |     digits.reverse()\n\
    \  |            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n   \
    \ for i in 0..shift {\n        s += &digits[(shift - 1) - i];\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n --> /tmp/tmpp2j0vcdx.rs:8:15\n\
    \  |\n8 |         s += &digits[(shift - 1) - i];\n  |               ^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n  |\n  = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += char::from(x%10);\n\
    \        x /= 10;\n    }\n    if x > 0 {\n        s += char::from(x%10);\n   \
    \ }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `char: From<isize>` is not satisfied\n -->\
    \ /tmp/tmp0vc3iprx.rs:7:14\n  |\n7 |         s += char::from(x%10);\n  |     \
    \         ^^^^^^^^^^ the trait `From<isize>` is not implemented for `char`\n \
    \ |\n  = help: the trait `From<u8>` is implemented for `char`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp0vc3iprx.rs:7:14\n  |\n7 |         s += char::from(x%10);\n\
    \  |              ^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0277]:\
    \ the trait bound `char: From<isize>` is not satisfied\n  --> /tmp/tmp0vc3iprx.rs:11:14\n\
    \   |\n11 |         s += char::from(x%10);\n   |              ^^^^^^^^^^ the trait\
    \ `From<isize>` is not implemented for `char`\n   |\n   = help: the trait `From<u8>`\
    \ is implemented for `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0vc3iprx.rs:11:14\n\
    \   |\n11 |         s += char::from(x%10);\n   |              ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for _ in 0..shift {\n        s += '0';\n\
    \    }\n    for i in 0..shift {\n        s += '1';\n    }\n    for i in 0..shift\
    \ {\n        s += '0';\n    }\n    for i in 0..shift {\n        s += '1';\n  \
    \  }\n    for i in 0..shift {\n        s += '0';\n    }\n    for i in 0..shift\
    \ {\n        s += '1';\n    }\n    for i in 0..shift {\n        s += '0';\n  \
    \  }\n    for i in 0..shift {\n        s += '1';\n    }\n    for i in 0..shift\
    \ {\n        s += '0';\n    }\n    for i in 0..shift {\n        s += '1';\n  \
    \  }\n    for i in 0..shift {\n        s += '0';\n    }\n    for i in 0..shift\
    \ {\n        s += '1';\n    }\n    for i in 0..shift {\n        s += '0';\n  \
    \  }\n    for i in 0..shift {\n        s += '1';\n    }\n    for i in 0..shift\
    \ {\n        s += '0';\n    }\n    for i in 0..shift {\n        s += '1';\n  \
    \  }\n    for i in 0..shift {\n        s += '0';\n    }\n    for i in 0..shift\
    \ {\n        s += '1';\n    }\n    for i in 0..shift {\n        s += '0';\n  \
    \  }\n    for i in 0..shift {\n        s += '1';\n    }\n    for i in 0..shift\
    \ {\n        s += '0';\n    }\n    for i in 0..shift {\n        s += '1';\n  \
    \  }\n    for i in 0..shift {\n        s += '0';\n    }\n    for i in 0..shift\
    \ {\n        s += '1';\n    }\n    for i in 0..shift {\n        s += '0';\n  \
    \  }\n    for i in 0..shift {\n        s += '1';\n    }\n    for i in 0..shift\
    \ {\n        s += '0';\n    }\n    for i in 0..shift {\n        s += '1';\n  \
    \  }\n    for i in 0..shift {\n        s += '0';\n    }\n    for i in 0..shift\
    \ {\n        s += '1';\n    }\n    for i in 0..shift {\n        s += '0';\n  \
    \  }\n    for i in 0..shift {\n        s += '1';\n    }\n    for i in 0..shift\
    \ {\n        s += '0';\n    }\n    for i in 0..shift {\n        s += '1';\n  \
    \  }\n    for i in 0..shift {\n        s += '0';\n    }\n    for i in 0..shift\
    \ {\n        s += '1';\n\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp6i4vrayw.rs:123:3\n\
    \    |\n4   | fn circular_shift(x: isize, shift: isize) -> String {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    111 |     for i in 0..shift {\n    |                       - this delimiter might\
    \ not be properly closed...\n...\n114 | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n123 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp6i4vrayw.rs:7:14\n  |\n7 |         s += '0';\n  |      \
    \        ^^^ expected `&str`, found `char`\n  |\nhelp: if you meant to write a\
    \ `str` literal, use double quotes\n  |\n7 |         s += \"0\";\n  |        \
    \      ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6i4vrayw.rs:10:14\n\
    \   |\n10 |         s += '1';\n   |              ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    10 |         s += \"1\";\n   |              ~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6i4vrayw.rs:13:14\n   |\n13 |         s += '0';\n   |         \
    \     ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write a `str`\
    \ literal, use double quotes\n   |\n13 |         s += \"0\";\n   |           \
    \   ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6i4vrayw.rs:16:14\n \
    \  |\n16 |         s += '1';\n   |              ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    16 |         s += \"1\";\n   |              ~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6i4vrayw.rs:19:14\n   |\n19 |         s += '0';\n   |         \
    \     ^^^ expected `&str`, found `char`\n   |\nhelp: if you meant to write a `str`\
    \ literal, use double quotes\n   |\n19 |         s += \"0\";\n   |           \
    \   ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6i4vrayw.rs:22:14\n \
    \  |\n22 |         s += '1';\n   |              ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    22 |         s += \"1\";\n   |              ~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6i4vr"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for d in x.to_string().chars().cloned()\
    \ {\n        if d >= '0' && d <= '9' {\n            s.push_str(&format!(\"{}{}\"\
    , d, (d + '0') as char));\n        } else {\n            s.push_str(&format!(\"\
    {}{}\", d, (d - '0') as char));\n        }\n    }\n    if shift > s.len() {\n\
    \        s.reverse();\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item ==\
    \ &_`\n    --> /tmp/tmp1q1g4m7b.rs:6:36\n     |\n6    |     for d in x.to_string().chars().cloned()\
    \ {\n     |                                    ^^^^^^ expected reference, found\
    \ `char`\n     |\n     = note: expected reference `&_`\n                     found\
    \ type `char`\nnote: required by a bound in `cloned`\n\nerror[E0271]: type mismatch\
    \ resolving `<Chars<'_> as Iterator>::Item == &_`\n --> /tmp/tmp1q1g4m7b.rs:6:14\n\
    \  |\n6 |     for d in x.to_string().chars().cloned() {\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found reference\n  |\n  = note:   expected type `char`\n  \
    \        found reference `&_`\n  = note: required because of the requirements\
    \ on the impl of `Iterator` for `Cloned<Chars<'_>>`\n  = note: required because\
    \ of the requirements on the impl of `IntoIterator` for `Cloned<Chars<'_>>`\n\n\
    error[E0271]: type mismatch resolving `<Chars<'_> as Iterator>::Item == &_`\n\
    \ --> /tmp/tmp1q1g4m7b.rs:6:14\n  |\n6 |     for d in x.to_string().chars().cloned()\
    \ {\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n\
    \  |\n  = note:   expected type `char`\n          found reference `&_`\n  = note:\
    \ required because of the requirements on the impl of `Iterator` for `Cloned<Chars<'_>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1q1g4m7b.rs:13:16\n   |\n13 |\
    \     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n13 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp1q1g4m7b.rs:14:11\n\
    \   |\n14 |         s.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0271, E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explai"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for i in 0..shift\
    \ {\n        let digit = x % 10;\n        s += if carry {\n            digit.to_string()\n\
    \        } else {\n            digit.to_string()\n        };\n        x /= 10;\n\
    \        carry = 1;\n    }\n    if carry {\n        s += \"1\".to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl2sfehro.rs:9:17\n  |\n9 |\
    \         s += if carry {\n  |                 ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl2sfehro.rs:10:13\n   |\n10 |\
    \             digit.to_string()\n   |             ^^^^^^^^^^^^^^^^^\n   |    \
    \         |\n   |             expected `&str`, found struct `String`\n   |   \
    \          help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl2sfehro.rs:12:13\n   |\n12 |             digit.to_string()\n\
    \   |             ^^^^^^^^^^^^^^^^^\n   |             |\n   |             expected\
    \ `&str`, found struct `String`\n   |             help: consider borrowing here:\
    \ `&digit.to_string()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl2sfehro.rs:17:8\n\
    \   |\n17 |     if carry {\n   |        ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpl2sfehro.rs:18:14\n   |\n18 |\
    \         s += \"1\".to_string();\n   |              ^^^^^^^^^^^^^^^\n   |   \
    \           |\n   |              expected `&str`, found struct `String`\n   |\
    \              help: consider borrowing here: `&\"1\".to_string()`\n\nerror: aborting\
    \ due to 5 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut carry = 0;\n    for digit\
    \ in x.to_string().chars().take(shift as usize) {\n        let digit = digit as\
    \ char;\n        if carry > 0 {\n            result += '1';\n            carry\
    \ = 0;\n        } else {\n            result += digit;\n            carry = 1;\n\
    \        }\n    }\n    if carry > 0 {\n        result += '1';\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpij9rvrop.rs:10:23\n   |\n\
    10 |             result += '1';\n   |                       ^^^ expected `&str`,\
    \ found `char`\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n10 |             result += \"1\";\n   |                      \
    \ ~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpij9rvrop.rs:13:23\n   |\n\
    13 |             result += digit;\n   |                       ^^^^^ expected `&str`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpij9rvrop.rs:18:19\n\
    \   |\n18 |         result += '1';\n   |                   ^^^ expected `&str`,\
    \ found `char`\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n18 |         result += \"1\";\n   |                   ~~~\n\n\
    error: aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[..]);\n        digits.rotate_left(1);\n\
    \    }\n    result.push_str(&digits[..]);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rotate_left` found for struct `String` in\
    \ the current scope\n --> /tmp/tmps1mgdvij.rs:9:16\n  |\n9 |         digits.rotate_left(1);\n\
    \  |                ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x%10);\n\
    \        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptn3_dzh2.rs:7:16\n  |\n7 |\
    \         s.push(x%10);\n  |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn3_dzh2.rs:10:12\n   |\n10 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x%10);\n\
    \        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptn3_dzh2.rs:7:16\n  |\n7 |\
    \         s.push(x%10);\n  |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn3_dzh2.rs:10:12\n   |\n10 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string()[i];\n\
    \    }\n    for i in 0..shift {\n        s += x.to_string()[x.len() - 1 - i];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n --> /tmp/tmp6el0xp15.rs:7:14\n\
    \  |\n7 |         s += x.to_string()[i];\n  |              ^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `isize`\n  |\n  = help: the trait `Index<isize>` is not\
    \ implemented for `String`\n\nerror[E0599]: no method named `len` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp6el0xp15.rs:10:30\n   |\n10 |  \
    \       s += x.to_string()[x.len() - 1 - i];\n   |                           \
    \   ^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string().chars().nth(i).unwrap();\n\
    \    }\n    s[..].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj7q6y9yc.rs:7:40\n  |\n7 |\
    \         s += x.to_string().chars().nth(i).unwrap();\n  |                   \
    \                     ^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    7 |         s += x.to_string().chars().nth(i.try_into().unwrap()).unwrap();\n\
    \  |                                         ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpj7q6y9yc.rs:7:14\n  |\n7 |         s += x.to_string().chars().nth(i).unwrap();\n\
    \  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ `char`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - i) %\
    \ digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphcs16tu2.rs:8:49\n  |\n8 |\
    \         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  |  \
    \                                               ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmphcs16tu2.rs:8:47\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \  |                                               ^ no implementation for `usize\
    \ - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \ <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128\
    \ as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n\
    \            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n        \
    \    <&'a isize as Sub<isize>>\n          and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n --> /tmp/tmphcs16tu2.rs:8:26\n  |\n\
    8 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  |\
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ != 0 {\n        let digit = x % 10;\n        digits.push(digit + &*digits[digits.len()\
    \ - shift]);\n        x /= 10;\n        carry += digit as isize;\n    }\n    if\
    \ carry != 0 {\n        digits.push(carry.to_string());\n    }\n    digits\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfmbbfaao.rs:9:53\n  |\n9 |\
    \         digits.push(digit + &*digits[digits.len() - shift]);\n  |          \
    \                                           ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpfmbbfaao.rs:9:51\n\
    \  |\n9 |         digits.push(digit + &*digits[digits.len() - shift]);\n  |  \
    \                                                 ^ no implementation for `usize\
    \ - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \ <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128\
    \ as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n\
    \            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n        \
    \    <&'a isize as Sub<isize>>\n          and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n --> /tmp/tmpfmbbfaao.rs:9:31\n  |\n\
    9 |         digits.push(digit + &*digits[digits.len() - shift]);\n  |        \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpfmbbfaao.rs:9:21\n  |\n9 |    \
    \     digits.push(digit + &*digits[digits.len() - shift]);\n  |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfmbbfaao.rs:14:21\n   |\n14 |\
    \         digits.push(carry.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut carry = 0;\n    while shift\
    \ > 0 {\n        if shift > x.len() {\n            shift -= x.len();\n       \
    \     carry = 1;\n        } else {\n            shift -= 1;\n            carry\
    \ = 1;\n        }\n        result.push((x & !carry) as char);\n        x >>= 1;\n\
    \    }\n    if carry > 0 {\n        result.push(carry as char);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n --> /tmp/tmphw9qt6ft.rs:8:22\n  |\n8 |         if shift > x.len() {\n\
    \  |                      ^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `len` found for type `isize` in the current scope\n --> /tmp/tmphw9qt6ft.rs:9:24\n\
    \  |\n9 |             shift -= x.len();\n  |                        ^^^ method\
    \ not found in `isize`\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n\
    \  --> /tmp/tmphw9qt6ft.rs:15:21\n   |\n15 |         result.push((x & !carry)\
    \ as char);\n   |                     ^^^^^^^^^^^^^^^^^^^^ invalid cast\n   |\n\
    help: try `char::from_u32` instead (via a `u32`)\n  --> /tmp/tmphw9qt6ft.rs:15:21\n\
    \   |\n15 |         result.push((x & !carry) as char);\n   |                 \
    \    ^^^^^^^^^^^^^^^^^^^^\n\nerror[E0604]: only `u8` can be cast as `char`, not\
    \ `isize`\n  --> /tmp/tmphw9qt6ft.rs:19:21\n   |\n19 |         result.push(carry\
    \ as char);\n   |                     ^^^^^^^^^^^^^ invalid cast\n   |\nhelp:\
    \ try `char::from_u32` instead (via a `u32`)\n  --> /tmp/tmphw9qt6ft.rs:19:21\n\
    \   |\n19 |         result.push(carry as char);\n   |                     ^^^^^^^^^^^^^\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0604.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for &d in x.digits().iter()\
    \ {\n        let d = d + carry;\n        carry = d / 10;\n        s += d.to_string();\n\
    \    }\n    if carry > 0 {\n        s += &format!(\"{}\", carry).to_string();\n\
    \    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_string()\n \
    \   } else {\n        s[0..shift].to_string()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n --> /tmp/tmp7in2g38v.rs:7:17\n  |\n7 |     for &d in x.digits().iter()\
    \ {\n  |                 ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7in2g38v.rs:15:16\n   |\n15 |     if shift > s.len() {\n\
    \   |                ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n15 |     if shift > s.len().try_into().unwrap() {\n   |         \
    \              ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7in2g38v.rs:16:21\n\
    \   |\n16 |         s[s.len() - shift..].to_string()\n   |                   \
    \  ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmp7in2g38v.rs:16:19\n   |\n16 |         s[s.len()\
    \ - shift..].to_string()\n   |                   ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \   = help: the following other types implement trait `Sub<Rhs>`:\n          \
    \   <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a\
    \ i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i32\
    \ as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n\
    \             <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmp7in2g38v.rs:18:9\n\
    \   |\n18 |         s[0..shift].to_string()\n   |         ^^^^^^^^^^^ `String`\
    \ cannot be indexed by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string();\n\
    \        x = x >> 1;\n    }\n    s + x.to_string()\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbm9igqzm.rs:7:14\n  |\n7 |\
    \         s += x.to_string();\n  |              ^^^^^^^^^^^^^\n  |           \
    \   |\n  |              expected `&str`, found struct `String`\n  |          \
    \    help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbm9igqzm.rs:10:9\n   |\n10 |     s + x.to_string()\n  \
    \ |         ^^^^^^^^^^^^^\n   |         |\n   |         expected `&str`, found\
    \ struct `String`\n   |         help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        remainder %= 10;\n        result.push(remainder);\n\
    \    }\n    if shift > result.len() {\n        result.reverse();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpg1dd4vkm.rs:9:21\n  |\n9 |\
    \         result.push(remainder);\n  |                     ^^^^^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg1dd4vkm.rs:11:16\n\
    \   |\n11 |     if shift > result.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n11 |     if shift > result.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpg1dd4vkm.rs:12:16\n   |\n12 |         result.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += if\
    \ x & (1 << i) != 0 {\n            '1'\n        } else {\n            '0'\n  \
    \      };\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp69d531j8.rs:8:13\n  |\n8 |\
    \             '1'\n  |             ^^^ expected `&str`, found `char`\n  |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n  |\n8 |         \
    \    \"1\"\n  |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp69d531j8.rs:10:13\n\
    \   |\n10 |             '0'\n   |             ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    10 |             \"0\"\n   |\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= shift {\n        digits.push(format!(\"{}\", x % 10));\n        x /= 10;\n\
    \        carry += 1;\n    }\n    if carry > 0 {\n        digits.push(format!(\"\
    {}\", carry));\n    }\n    digits.reverse()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0x6h688r.rs:8:21\n  |\n8 |\
    \         digits.push(format!(\"{}\", x % 10));\n  |                     ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n  |\n  = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0x6h688r.rs:13:21\n \
    \  |\n13 |         digits.push(format!(\"{}\", carry));\n   |                \
    \     ^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n   |\n   =\
    \ note: this error originates in the macro `format` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmp0x6h688r.rs:15:12\n\
    \   |\n15 |     digits.reverse()\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - 1 -\
    \ i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi7mkg2kg.rs:8:53\n  |\n8 |\
    \         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n \
    \ |                                                     ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpi7mkg2kg.rs:8:51\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n\
    \  |                                                   ^ no implementation for\
    \ `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for\
    \ `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n \
    \           <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n       \
    \     <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n           \
    \ <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8\
    \ as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpi7mkg2kg.rs:8:26\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n\
    \  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for &c in x.to_string().chars()\
    \ {\n        let digit = c - '0';\n        if carry > 0 {\n            digit +=\
    \ carry;\n        }\n        carry = digit / 10;\n        digit %= 10;\n     \
    \   s.push((digit as char).to_string());\n    }\n    if carry > 0 {\n        s.push((carry\
    \ as char).to_string());\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptxjfzryb.rs:7:9\n  |\n7 |\
    \     for &c in x.to_string().chars() {\n  |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n  |         |\n  |         expected\
    \ `char`, found reference\n  |         help: you can probably remove the explicit\
    \ borrow: `c`\n  |\n  = note:   expected type `char`\n          found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptxjfzryb.rs:14:16\n  \
    \ |\n14 |         s.push((digit as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmptxjfzryb.rs:17:16\n   |\n17 |         s.push((carry as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0604]: only `u8` can be cast as `char`, not `{integer}`\n\
    \  --> /tmp/tmptxjfzryb.rs:17:16\n   |\n17 |         s.push((carry as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^ invalid cast\n   |\nhelp: try `char::from_u32`\
    \ instead (via a `u32`)\n  --> /tmp/tmptxjfzryb.rs:17:16\n   |\n17 |         s.push((carry\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0604.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits.chars().nth(shift).collect::<String>();\n\
    \    digits.reverse();\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqnph2j36.rs:6:33\n  |\n6 |\
    \     digits = digits.chars().nth(shift).collect::<String>();\n  |           \
    \                      ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \  |\n6 |     digits = digits.chars().nth(shift.try_into().unwrap()).collect::<String>();\n\
    \  |                                      ++++++++++++++++++++\n\nerror[E0599]:\
    \ `Option<char>` is not an iterator\n   --> /tmp/tmpqnph2j36.rs:6:40\n    |\n\
    6   |       digits = digits.chars().nth(shift).collect::<String>();\n    |   \
    \                                       ^^^^^^^ `Option<char>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<char>: Iterator`\n            which is required by `&mut Option<char>:\
    \ Iterator`\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpqnph2j36.rs:7:12\n  |\n7 |     digits.reverse();\n\
    \  |            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    while x >= shift {\n        result.insert(0,\
    \ x.remainder(shift).unwrap());\n        x /= shift;\n    }\n    result.insert(0,\
    \ x);\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n   \
    \ assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `remainder` found for type `isize` in the\
    \ current scope\n --> /tmp/tmplt9vuuur.rs:7:28\n  |\n7 |         result.insert(0,\
    \ x.remainder(shift).unwrap());\n  |                            ^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplt9vuuur.rs:10:22\n\
    \   |\n10 |     result.insert(0, x);\n   |                      ^ expected `char`,\
    \ found `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for i in 0..shift\
    \ {\n        if x % 10 == 0 {\n            s += &format!(\"{}{}\", carry, &format!(\"\
    {}\", x % 10));\n            carry = 0;\n        } else {\n            s += &format!(\"\
    {}{}\", carry, &format!(\"{}\", x % 10));\n            carry = 1;\n        }\n\
    \        x /= 10;\n    }\n    if carry != 0 {\n        s += &format!(\"{}\", carry)\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n --> /tmp/tmp1evzwofm.rs:7:9\n  |\n7 | \
    \    for i in 0..shift {\n  |         ^ help: if this is intentional, prefix it\
    \ with an underscore: `_i`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\
    \nerror[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp1evzwofm.rs:15:9\n\
    \   |\n4  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \             - help: consider making this binding mutable: `mut x`\n...\n15 |\
    \         x /= 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i == shift {\n            c.to_string()\n        } else {\n\
    \            c.to_string().chars().nth(i - shift).unwrap().to_string()\n     \
    \   }\n    }).collect::<String>();\n    digits.reverse()\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppsy1prm1.rs:7:17\n  |\n7 |\
    \         if i == shift {\n  |                 ^^^^^ expected `usize`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |         if i == shift.try_into().unwrap() {\n  |\
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppsy1prm1.rs:10:43\n   |\n10 |             c.to_string().chars().nth(i\
    \ - shift).unwrap().to_string()\n   |                                        \
    \   ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmppsy1prm1.rs:10:41\n   |\n10 |             c.to_string().chars().nth(i\
    \ - shift).unwrap().to_string()\n   |                                        \
    \ ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmppsy1prm1.rs:13:12\n   |\n13 | \
    \    digits.reverse()\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for digit in\
    \ x.to_string().chars().take(shift as usize) {\n        match digit {\n      \
    \      '1' => s.push_str(&format!(\"{}{}\", carry, digit)),\n            '0' =>\
    \ s.push_str(&format!(\"{}{}\", carry, digit)),\n            _ => s.push_str(&format!(\"\
    {}{}\", carry, digit)),\n        }\n        carry = 1;\n    }\n    if carry >\
    \ 0 {\n        s.push_str(&format!(\"{}\", carry));\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"01101\"`,\n right: `\"001\"`', /tmp/tmp3cd8cupc.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string()[i];\n\
    \    }\n    for i in 0..shift {\n        s += x.to_string()[x.len() - 1 - i];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n --> /tmp/tmp6el0xp15.rs:7:14\n\
    \  |\n7 |         s += x.to_string()[i];\n  |              ^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `isize`\n  |\n  = help: the trait `Index<isize>` is not\
    \ implemented for `String`\n\nerror[E0599]: no method named `len` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp6el0xp15.rs:10:30\n   |\n10 |  \
    \       s += x.to_string()[x.len() - 1 - i];\n   |                           \
    \   ^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += &format!(\"\
    {:0>2}\", x % 10);\n        x /= 10;\n    }\n    if shift > x.len() {\n      \
    \  s[shift..].copy_from_slice(&s[..shift]);\n    } else {\n        s[..shift].copy_from_slice(&s[shift..]);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpamlv7_qr.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmpamlv7_qr.rs:11:9\n\
    \   |\n11 |         s[shift..].copy_from_slice(&s[..shift]);\n   |         ^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait\
    \ `Index<RangeFrom<isize>>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpamlv7_qr.rs:11:37\n   |\n11 |         s[shift..].copy_from_slice(&s[..shift]);\n\
    \   |                                     ^^^^^^^^^^ `String` cannot be indexed\
    \ by `RangeTo<isize>`\n   |\n   = help: the trait `Index<RangeTo<isize>>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmpamlv7_qr.rs:13:9\n   |\n13 |         s[..shift].copy_from_slice(&s[shift..]);\n\
    \   |         ^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n   |\n\
    \   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n "
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for &d in x.to_string().chars()\
    \ {\n        let digit = d.to_digit(10);\n        let digit = digit + carry %\
    \ 10;\n        carry = digit / 10;\n        s += digit.to_string();\n    }\n \
    \   if carry > 0 {\n        s += carry.to_string();\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_e52b4zp.rs:7:9\n  |\n7 |\
    \     for &d in x.to_string().chars() {\n  |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n  |         |\n  |         expected\
    \ `char`, found reference\n  |         help: you can probably remove the explicit\
    \ borrow: `d`\n  |\n  = note:   expected type `char`\n          found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_e52b4zp.rs:14:14\n  \
    \ |\n14 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut carry = 0;\n    for d in\
    \ x.to_digits() {\n        let digit = if carry == 0 {\n            d + 1\n  \
    \      } else {\n            d + carry\n        };\n        carry = digit % 10;\n\
    \        result.push(digit as char);\n    }\n    if carry != 0 {\n        result.push(carry\
    \ as char);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpivv7e6pc.rs:7:16\n  |\n7 |     for d in x.to_digits()\
    \ {\n  |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0604]:\
    \ only `u8` can be cast as `char`, not `{integer}`\n  --> /tmp/tmpivv7e6pc.rs:17:21\n\
    \   |\n17 |         result.push(carry as char);\n   |                     ^^^^^^^^^^^^^\
    \ invalid cast\n   |\nhelp: try `char::from_u32` instead (via a `u32`)\n  -->\
    \ /tmp/tmpivv7e6pc.rs:17:21\n   |\n17 |         result.push(carry as char);\n\
    \   |                     ^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0599, E0604.\nFor more information\
    \ about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for i in 0..shift\
    \ {\n        let digit = x % 10;\n        s += digit.to_string();\n        x /=\
    \ 10;\n        carry = digit + carry;\n    }\n    if carry > 0 {\n        s +=\
    \ carry.to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1cj5cova.rs:9:14\n  |\n9 |\
    \         s += digit.to_string();\n  |              ^^^^^^^^^^^^^^^^^\n  |   \
    \           |\n  |              expected `&str`, found struct `String`\n  |  \
    \            help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1cj5cova.rs:14:14\n   |\n14 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for d in x.to_digits().rev() {\n    \
    \    *s = d.to_string();\n        s += *s;\n    }\n    s[..shift].to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmp0bxf9ve6.rs:6:16\n  |\n6 |     for d in x.to_digits().rev()\
    \ {\n  |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n -->\
    \ /tmp/tmp0bxf9ve6.rs:7:9\n  |\n7 |         *s = d.to_string();\n  |         ^^\
    \ doesn't have a size known at compile-time\n  |\n  = help: the trait `Sized`\
    \ is not implemented for `str`\n  = note: the left-hand-side of an assignment\
    \ must have a statically known size\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0bxf9ve6.rs:8:14\n\
    \  |\n8 |         s += *s;\n  |              ^^\n  |              |\n  |     \
    \         expected `&str`, found `str`\n  |              help: consider borrowing\
    \ here: `&*s`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \  --> /tmp/tmp0bxf9ve6.rs:10:5\n   |\n10 |     s[..shift].to_string()\n   | \
    \    ^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n   |\n   = help:\
    \ the trait `Index<RangeTo<isize>>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut i = x;\n    while i >= shift\
    \ {\n        digits.insert(0, i % 10);\n        i /= 10;\n    }\n    digits.insert(0,\
    \ i % 10);\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1d0fpi5a.rs:8:26\n  |\n8 |\
    \         digits.insert(0, i % 10);\n  |                          ^^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1d0fpi5a.rs:11:22\n\
    \   |\n11 |     digits.insert(0, i % 10);\n   |                      ^^^^^^ expected\
    \ `char`, found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string();\n\
    \        x = x >> 8;\n    }\n    s += x.to_string();\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7qywiqu1.rs:7:14\n  |\n7 |\
    \         s += x.to_string();\n  |              ^^^^^^^^^^^^^\n  |           \
    \   |\n  |              expected `&str`, found struct `String`\n  |          \
    \    help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7qywiqu1.rs:10:10\n   |\n10 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for d in x.to_digits()\
    \ {\n        let digit = d.unwrap();\n        let digit = digit + carry + 1;\n\
    \        carry = digit / 10;\n        digit %= 10;\n        s.push(digit.to_string());\n\
    \    }\n    if carry > 0 {\n        s.push(carry.to_string());\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpo3n8my3y.rs:7:16\n  |\n7 |     for d in x.to_digits()\
    \ {\n  |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpo3n8my3y.rs:15:16\n   |\n15 |         s.push(carry.to_string());\n\
    \   |                ^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut remainder = x;\n    let\
    \ mut digits = 1;\n    while remainder > 0 {\n        remainder %= 10;\n     \
    \   result.append(&format!(\"{}\", digits));\n        digits *= 10;\n    }\n \
    \   if shift > result.len() {\n        result.reverse();\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `append` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpwglqm0cc.rs:10:16\n   |\n10 |         result.append(&format!(\"\
    {}\", digits));\n   |                ^^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwglqm0cc.rs:13:16\n   |\n13 |     if shift >\
    \ result.len() {\n   |                ^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |     if shift > result.len().try_into().unwrap()\
    \ {\n   |                            ++++++++++++++++++++\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpwglqm0cc.rs:14:16\n   |\n14 |         result.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for _ in 0..shift {\n        result.push_str(&digits[digits.len() - 1]);\n\
    \        digits.remove_suffix(1);\n    }\n    result.push_str(&digits);\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpnkb6tmll.rs:8:26\n\
    \  |\n8 |         result.push_str(&digits[digits.len() - 1]);\n  |           \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n  =\
    \ help: the following other types implement trait `Index<Idx>`:\n            <String\
    \ as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n    \
    \        <String as Index<RangeInclusive<usize>>>\n            <String as Index<RangeTo<usize>>>\n\
    \            <String as Index<RangeToInclusive<usize>>>\n            <String as\
    \ Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\nerror[E0599]:\
    \ no method named `remove_suffix` found for struct `String` in the current scope\n\
    \ --> /tmp/tmpnkb6tmll.rs:9:16\n  |\n9 |         digits.remove_suffix(1);\n  |\
    \                ^^^^^^^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits.chars().nth(shift).collect::<String>();\n\
    \    digits.reverse();\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqnph2j36.rs:6:33\n  |\n6 |\
    \     digits = digits.chars().nth(shift).collect::<String>();\n  |           \
    \                      ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \  |\n6 |     digits = digits.chars().nth(shift.try_into().unwrap()).collect::<String>();\n\
    \  |                                      ++++++++++++++++++++\n\nerror[E0599]:\
    \ `Option<char>` is not an iterator\n   --> /tmp/tmpqnph2j36.rs:6:40\n    |\n\
    6   |       digits = digits.chars().nth(shift).collect::<String>();\n    |   \
    \                                       ^^^^^^^ `Option<char>` is not an iterator\n\
    \    |\n    = note: the following trait bounds were not satisfied:\n         \
    \   `Option<char>: Iterator`\n            which is required by `&mut Option<char>:\
    \ Iterator`\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n --> /tmp/tmpqnph2j36.rs:7:12\n  |\n7 |     digits.reverse();\n\
    \  |            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += if\
    \ x & (1 << i) != 0 {\n            '0'\n        } else {\n            '1'\n  \
    \      };\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdousoaf5.rs:8:13\n  |\n8 |\
    \             '0'\n  |             ^^^ expected `&str`, found `char`\n  |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n  |\n8 |         \
    \    \"0\"\n  |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdousoaf5.rs:10:13\n\
    \   |\n10 |             '1'\n   |             ^^^ expected `&str`, found `char`\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    10 |             \"1\"\n   |\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x%10);\n\
    \        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptn3_dzh2.rs:7:16\n  |\n7 |\
    \         s.push(x%10);\n  |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn3_dzh2.rs:10:12\n   |\n10 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= shift {\n        digits.push(x.to_digit(10).unwrap());\n        x -= shift;\n\
    \        carry += 1;\n    }\n    while carry > 0 {\n        digits.push(x.to_digit(10).unwrap());\n\
    \        carry -= 1;\n        x >>= 1;\n    }\n    digits.reverse()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpp9xf9s6q.rs:8:23\n  |\n8 |         digits.push(x.to_digit(10).unwrap());\n\
    \  |                       ^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digit` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpp9xf9s6q.rs:13:23\n   |\n13 |         digits.push(x.to_digit(10).unwrap());\n\
    \   |                       ^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpp9xf9s6q.rs:17:12\n   |\n17 |     digits.reverse()\n   |       \
    \     ^^^^^^^ help: there is an associated function with a similar name: `reserve`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += &format!(\"\
    {:0>2}\", x % 10);\n        x /= 10;\n    }\n    if shift > x.len() {\n      \
    \  s[shift..].to_owned()\n    } else {\n        s[0..shift].to_owned()\n    }\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpq0ceupi0.rs:10:18\n   |\n10 |     if shift > x.len() {\n\
    \   |                  ^^^ method not found in `isize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmpq0ceupi0.rs:11:9\n\
    \   |\n11 |         s[shift..].to_owned()\n   |         ^^^^^^^^^^ `String` cannot\
    \ be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpq0ceupi0.rs:13:9\n   |\n13 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits[..(shift % digits.len())].to_string()\
    \ + digits[(shift % digits.len())..].to_string();\n    digits\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyxv_5oaq.rs:6:32\n  |\n6 |\
    \     digits = digits[..(shift % digits.len())].to_string() + digits[(shift %\
    \ digits.len())..].to_string();\n  |                                ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \ --> /tmp/tmpyxv_5oaq.rs:6:30\n  |\n6 |     digits = digits[..(shift % digits.len())].to_string()\
    \ + digits[(shift % digits.len())..].to_string();\n  |                       \
    \       ^ no implementation for `isize % usize`\n  |\n  = help: the trait `Rem<usize>`\
    \ is not implemented for `isize`\n  = help: the following other types implement\
    \ trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n            <&'a f64 as\
    \ Rem<f64>>\n            <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n\
    \            <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n      \
    \      <&'a i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and\
    \ 54 others\n\nerror[E0277]: the type `String` cannot be indexed by `RangeTo<isize>`\n\
    \ --> /tmp/tmpyxv_5oaq.rs:6:14\n  |\n6 |     digits = digits[..(shift % digits.len())].to_string()\
    \ + digits[(shift % digits.len())..].to_string();\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeTo<isize>`\n  |\n  = help: the trait `Index<RangeTo<isize>>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpyxv_5oaq.rs:6:77\n  |\n6 |    \
    \ digits = digits[..(shift % digits.len())].to_string() + digits[(shift % digits.len())..].to_string();\n\
    \  |                                                                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string();\n\
    \        x = x >> 8;\n    }\n    s += x.to_string();\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7qywiqu1.rs:7:14\n  |\n7 |\
    \         s += x.to_string();\n  |              ^^^^^^^^^^^^^\n  |           \
    \   |\n  |              expected `&str`, found struct `String`\n  |          \
    \    help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7qywiqu1.rs:10:10\n   |\n10 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string();\n\
    \        x = x >> 8;\n    }\n    s += x.to_string();\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7qywiqu1.rs:7:14\n  |\n7 |\
    \         s += x.to_string();\n  |              ^^^^^^^^^^^^^\n  |           \
    \   |\n  |              expected `&str`, found struct `String`\n  |          \
    \    help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7qywiqu1.rs:10:10\n   |\n10 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    for i in 0..shift {\n        result.push(x%10);\n\
    \        x /= 10;\n    }\n    if shift > x.len() {\n        result.reverse();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoz26amtg.rs:7:21\n  |\n7 |\
    \         result.push(x%10);\n  |                     ^^^^ expected `char`, found\
    \ `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpoz26amtg.rs:10:18\n   |\n10 |     if shift > x.len()\
    \ {\n   |                  ^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpoz26amtg.rs:11:16\n   |\n11 |         result.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    for i in 0..shift {\n        result.push(x%10);\n\
    \        x /= 10;\n    }\n    for i in 0..shift {\n        result.push(x%10);\n\
    \        x /= 10;\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyrgpkz9i.rs:7:21\n  |\n7 |\
    \         result.push(x%10);\n  |                     ^^^^ expected `char`, found\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyrgpkz9i.rs:11:21\n\
    \   |\n11 |         result.push(x%10);\n   |                     ^^^^ expected\
    \ `char`, found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut carry = 0;\n    let mut\
    \ digits = x.to_string();\n    for d in digits.chars() {\n        let digit =\
    \ d.to_digit(10);\n        let digit = digit + carry % 10;\n        carry = digit\
    \ / 10;\n        result += digit.to_string();\n    }\n    if carry > 0 {\n   \
    \     result += '1';\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `{integer}` to `Option<u32>`\n  --> /tmp/tmpe6u5kdb2.rs:10:27\n\
    \   |\n10 |         let digit = digit + carry % 10;\n   |                    \
    \ ----- ^ ---------- {integer}\n   |                     |\n   |             \
    \        Option<u32>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6u5kdb2.rs:15:19\n\
    \   |\n15 |         result += '1';\n   |                   ^^^ expected `&str`,\
    \ found `char`\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n15 |         result += \"1\";\n   |                   ~~~\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n   \
    \ for i in 0..shift {\n        digits = digits[..digits.len() - i];\n    }\n \
    \   for i in 0..shift {\n        s += digits[digits.len() - shift - i];\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqopvsamw.rs:8:42\n  |\n8 |\
    \         digits = digits[..digits.len() - i];\n  |                          \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n --> /tmp/tmpqopvsamw.rs:8:40\n  |\n8 |         digits\
    \ = digits[..digits.len() - i];\n  |                                        ^\
    \ no implementation for `usize - isize`\n  |\n  = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n  = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as\
    \ Sub<f64>>\n            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n\
    \            <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n      \
    \      <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and\
    \ 48 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmpqopvsamw.rs:8:18\n\
    \  |\n6 |     let mut digits = x.to_string();\n  |                      -------------\
    \ expected due to this value\n7 |     for i in 0..shift {\n8 |         digits\
    \ = digits[..digits.len() - i];\n  |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |                  |\n\
    \  |                  expected struct `String`, found `str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqopvsamw.rs:11:36\n   |\n11 |         s += digits[digits.len()\
    \ - shift - i];\n   |                                    ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpqopvsamw.rs:11:34\n\
    \   |\n11 |         s += digits[digits.len() - shift - i];\n   |             \
    \                     ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n        "
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut remainder = x;\n    let\
    \ mut shift = shift % 10;\n    while shift != 0 {\n        remainder *= 10;\n\
    \        remainder += x % 10;\n        x /= 10;\n        shift -= 1;\n    }\n\
    \    result.push_str(&format!(\"{}{}\", remainder, shift));\n    result\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpo9zhhcxd.rs:11:9\n\
    \   |\n4  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \             - help: consider making this binding mutable: `mut x`\n...\n11 |\
    \         x /= 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits.chars().enumerate().map(|(i,\
    \ c)| {\n        if i == shift {\n            c.to_string()\n        } else {\n\
    \            c.to_string() + digits[i - shift]\n        }\n    }).collect();\n\
    \    digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjjr__tiu.rs:7:17\n  |\n7 |\
    \         if i == shift {\n  |                 ^^^^^ expected `usize`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n  |\n7 |         if i == shift.try_into().unwrap() {\n  |\
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjjr__tiu.rs:10:40\n   |\n10 |             c.to_string() + digits[i\
    \ - shift]\n   |                                        ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpjjr__tiu.rs:10:38\n\
    \   |\n10 |             c.to_string() + digits[i - shift]\n   |              \
    \                        ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n\
    \             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n  \
    \           <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n      \
    \       <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n            \
    \ <&'a isize as Sub<isize>>\n           and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpjjr__tiu.rs:10:29\n   |\n\
    10 |             c.to_string() + digits[i - shift]\n   |                     \
    \        ^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpjjr__tiu.rs:13:12\n   "
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for &d in x.to_string().chars().take(shift)\
    \ {\n        s.push(d);\n    }\n    s[..].reverse()\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0d8pe7jf.rs:6:42\n  |\n6 |\
    \     for &d in x.to_string().chars().take(shift) {\n  |                     \
    \                     ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \  |\n6 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n  |                                               ++++++++++++++++++++\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmp0d8pe7jf.rs:6:9\n  |\n6 |     for\
    \ &d in x.to_string().chars().take(shift) {\n  |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n  |         |\n  |         expected\
    \ `char`, found reference\n  |         help: you can probably remove the explicit\
    \ borrow: `d`\n  |\n  = note:   expected type `char`\n          found reference\
    \ `&_`\n\nerror[E0599]: no method named `reverse` found for type `str` in the\
    \ current scope\n --> /tmp/tmp0d8pe7jf.rs:9:11\n  |\n9 |     s[..].reverse()\n\
    \  |           ^^^^^^^ method not found in `str`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= 10 {\n        digits.push(format!(\"{}\", x / 10));\n        x %= 10;\n \
    \       carry += 1;\n    }\n    if carry > 0 {\n        digits.push(format!(\"\
    {}\", carry));\n    }\n    digits.reverse();\n    digits.push_str(&format!(\"\
    {}\", x));\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpe83a08z3.rs:8:21\n  |\n8 |\
    \         digits.push(format!(\"{}\", x / 10));\n  |                     ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n  |\n  = note: this error originates\
    \ in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more\
    \ info)\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe83a08z3.rs:13:21\n \
    \  |\n13 |         digits.push(format!(\"{}\", carry));\n   |                \
    \     ^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n   |\n   =\
    \ note: this error originates in the macro `format` (in Nightly builds, run with\
    \ -Z macro-backtrace for more info)\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpe83a08z3.rs:15:12\n\
    \   |\n15 |     digits.reverse();\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - i) %\
    \ digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphcs16tu2.rs:8:49\n  |\n8 |\
    \         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  |  \
    \                                               ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmphcs16tu2.rs:8:47\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \  |                                               ^ no implementation for `usize\
    \ - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \ <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128\
    \ as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n\
    \            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n        \
    \    <&'a isize as Sub<isize>>\n          and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n --> /tmp/tmphcs16tu2.rs:8:26\n  |\n\
    8 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  |\
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= 10 {\n        let digit = x % 10;\n        digits += &digit + &*carry.to_string();\n\
    \        carry = digit as isize;\n        x /= 10;\n    }\n    digits += &*carry.to_string();\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&str` to `&isize`\n --> /tmp/tmpsbad7bnp.rs:9:26\n\
    \  |\n9 |         digits += &digit + &*carry.to_string();\n  |               \
    \           ^ no implementation for `&isize + &str`\n  |\n  = help: the trait\
    \ `Add<&str>` is not implemented for `&isize`\n  = help: the following other types\
    \ implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n           \
    \ <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a\
    \ i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as\
    \ Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n\
    \          and 48 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_digits(10);\n\
    \        x >>= 10;\n    }\n    s[..shift].to_string()\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpwd2ir5vq.rs:7:16\n  |\n7 |         s += x.to_digits(10);\n\
    \  |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmpwd2ir5vq.rs:10:5\n\
    \   |\n10 |     s[..shift].to_string()\n   |     ^^^^^^^^^^ `String` cannot be\
    \ indexed by `RangeTo<isize>`\n   |\n   = help: the trait `Index<RangeTo<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string()[i];\n\
    \    }\n    for i in 0..shift {\n        s += x.to_string()[x.len() - 1 - i];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `isize`\n --> /tmp/tmp6el0xp15.rs:7:14\n\
    \  |\n7 |         s += x.to_string()[i];\n  |              ^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `isize`\n  |\n  = help: the trait `Index<isize>` is not\
    \ implemented for `String`\n\nerror[E0599]: no method named `len` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp6el0xp15.rs:10:30\n   |\n10 |  \
    \       s += x.to_string()[x.len() - 1 - i];\n   |                           \
    \   ^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - 1 -\
    \ i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi7mkg2kg.rs:8:53\n  |\n8 |\
    \         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n \
    \ |                                                     ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpi7mkg2kg.rs:8:51\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n\
    \  |                                                   ^ no implementation for\
    \ `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for\
    \ `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n \
    \           <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n       \
    \     <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n           \
    \ <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8\
    \ as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpi7mkg2kg.rs:8:26\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n\
    \  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string().chars().nth(i).unwrap();\n\
    \    }\n    s[..].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj7q6y9yc.rs:7:40\n  |\n7 |\
    \         s += x.to_string().chars().nth(i).unwrap();\n  |                   \
    \                     ^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    7 |         s += x.to_string().chars().nth(i.try_into().unwrap()).unwrap();\n\
    \  |                                         ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpj7q6y9yc.rs:7:14\n  |\n7 |         s += x.to_string().chars().nth(i).unwrap();\n\
    \  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ `char`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_digits(10);\n\
    \        x = x >> 10;\n    }\n    s += x.to_digits(10);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n --> /tmp/tmpk99_597q.rs:7:16\n  |\n7 |         s += x.to_digits(10);\n\
    \  |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no\
    \ method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpk99_597q.rs:10:12\n   |\n10 |     s += x.to_digits(10);\n   |      \
    \      ^^^^^^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits[..(shift as usize)].to_string();\n\
    \    digits = digits[..(digits.len() - shift as usize)].to_string();\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"001\"`', /tmp/tmprvjtegq9.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n   \
    \ for i in 0..shift {\n        s += &digits[(digits.len() - i) % digits.len()];\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpp_vqnjad.rs:8:38\n  |\n8 |\
    \         s += &digits[(digits.len() - i) % digits.len()];\n  |              \
    \                        ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n --> /tmp/tmpp_vqnjad.rs:8:36\n  |\n8 |     \
    \    s += &digits[(digits.len() - i) % digits.len()];\n  |                   \
    \                 ^ no implementation for `usize - isize`\n  |\n  = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n  = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n     \
    \       <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n         \
    \   <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n            <&'a\
    \ i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize as\
    \ Sub<isize>>\n          and 48 others\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `usize`\n --> /tmp/tmpp_vqnjad.rs:8:15\n  |\n8 |         s +=\
    \ &digits[(digits.len() - i) % digits.len()];\n  |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    while x >= shift {\n        digits.push(x.to_digit(10).unwrap());\n\
    \        x -= shift;\n    }\n    digits.push(x.to_digit(10).unwrap());\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for type `isize` in the\
    \ current scope\n --> /tmp/tmp47p59v70.rs:7:23\n  |\n7 |         digits.push(x.to_digit(10).unwrap());\n\
    \  |                       ^^^^^^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `to_digit` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmp47p59v70.rs:10:19\n   |\n10 |     digits.push(x.to_digit(10).unwrap());\n\
    \   |                   ^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for &d in x.to_string().chars()\
    \ {\n        let digit = d.to_digit(10);\n        let digit = digit + carry %\
    \ 10;\n        carry = digit / 10;\n        s += digit.to_string();\n    }\n \
    \   if carry > 0 {\n        s += &format!(\"{}\", carry);\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfcxn_khc.rs:7:9\n  |\n7 |\
    \     for &d in x.to_string().chars() {\n  |         ^^    ---------------------\
    \ this expression has type `Option<char>`\n  |         |\n  |         expected\
    \ `char`, found reference\n  |         help: you can probably remove the explicit\
    \ borrow: `d`\n  |\n  = note:   expected type `char`\n          found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string().chars().nth(i).unwrap();\n\
    \    }\n    s[..].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj7q6y9yc.rs:7:40\n  |\n7 |\
    \         s += x.to_string().chars().nth(i).unwrap();\n  |                   \
    \                     ^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    7 |         s += x.to_string().chars().nth(i.try_into().unwrap()).unwrap();\n\
    \  |                                         ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpj7q6y9yc.rs:7:14\n  |\n7 |         s += x.to_string().chars().nth(i).unwrap();\n\
    \  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ `char`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - 1) -\
    \ i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw6euzpa_.rs:8:54\n  |\n8 |\
    \         result.push_str(&digits[(digits.len() - 1) - i]);\n  |             \
    \                                         ^ expected `usize`, found `isize`\n\n\
    error[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpw6euzpa_.rs:8:52\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - 1) - i]);\n  |     \
    \                                               ^ no implementation for `usize\
    \ - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \ <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128\
    \ as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n\
    \            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n        \
    \    <&'a isize as Sub<isize>>\n          and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n --> /tmp/tmpw6euzpa_.rs:8:26\n  |\n\
    8 |         result.push_str(&digits[(digits.len() - 1) - i]);\n  |           \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n  =\
    \ help: the following other types implement trait `Index<Idx>`:\n            <String\
    \ as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n    \
    \        <String as Index<RangeInclusive<usize>>>\n            <String as Index<RangeTo<usize>>>\n\
    \            <String as Index<RangeToInclusive<usize>>>\n            <String as\
    \ Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += char::from_u32(x\
    \ % 10);\n        x /= 10;\n    }\n    if shift > x.len() {\n        s[shift..].copy_from_slice(&s[0..shift]);\n\
    \    } else {\n        s[0..shift].copy_from_slice(&s[shift..]);\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyfgnzrjg.rs:7:29\n  |\n7 |\
    \         s += char::from_u32(x % 10);\n  |                             ^^^^^^\
    \ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to a `u32`\
    \ and panic if the converted value doesn't fit\n  |\n7 |         s += char::from_u32((x\
    \ % 10).try_into().unwrap());\n  |                             +      +++++++++++++++++++++\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpyfgnzrjg.rs:7:14\n  |\n7 |    \
    \     s += char::from_u32(x % 10);\n  |              ^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `&str`, found enum `Option`\n  |\n  = note: expected reference `&str`\n    \
    \              found enum `Option<char>`\n\nerror[E0599]: no method named `len`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmpyfgnzrjg.rs:10:18\n\
    \   |\n10 |     if shift > x.len() {\n   |                  ^^^ method not found\
    \ in `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmpyfgnzrjg.rs:11:9\n   |\n11 |         s[shift..].copy_from_slice(&s[0..shift]);\n\
    \   |         ^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n  \
    \ |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `Index<Idx>`:\n        \
    \     <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpyfgnzrjg.rs:11:37\n   |\n11 |         s[shift..].copy_from_slice(&s[0..shift]);\n\
    \   |                                     ^^^^^^^^^^^ `String` cannot be indexed\
    \ by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as "
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut carry = 0;\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        if carry > 0 {\n \
    \           result.push(carry.to_string());\n            carry = 0;\n        }\n\
    \        let digit = digits.chars().nth(i).unwrap();\n        carry = digit as\
    \ isize - digit as isize;\n        result.push(digit);\n    }\n    if carry >\
    \ 0 {\n        result.push(carry.to_string());\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxacbwn8n.rs:10:25\n   |\n\
    10 |             result.push(carry.to_string());\n   |                       \
    \  ^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxacbwn8n.rs:13:40\n   |\n13 |         let digit = digits.chars().nth(i).unwrap();\n\
    \   |                                        ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |         let digit = digits.chars().nth(i.try_into().unwrap()).unwrap();\n\
    \   |                                         ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxacbwn8n.rs:18:21\n   |\n18 |         result.push(carry.to_string());\n\
    \   |                     ^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for &d in x.to_string().chars().take(shift)\
    \ {\n        s.push(d);\n    }\n    s[..]\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp03x7v6jr.rs:6:42\n  |\n6 |\
    \     for &d in x.to_string().chars().take(shift) {\n  |                     \
    \                     ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \  |\n6 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n  |                                               ++++++++++++++++++++\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmp03x7v6jr.rs:6:9\n  |\n6 |     for\
    \ &d in x.to_string().chars().take(shift) {\n  |         ^^    ---------------------------------\
    \ this expression has type `Option<char>`\n  |         |\n  |         expected\
    \ `char`, found reference\n  |         help: you can probably remove the explicit\
    \ borrow: `d`\n  |\n  = note:   expected type `char`\n          found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp03x7v6jr.rs:9:5\n  |\n\
    4 | fn circular_shift(x: isize, shift: isize) -> String {\n  |               \
    \                               ------ expected `String` because of return type\n\
    ...\n9 |     s[..]\n  |     ^^^^^- help: try using a conversion method: `.to_string()`\n\
    \  |     |\n  |     expected struct `String`, found `str`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut i = 0;\n    while i < shift {\n\
    \        s += char::from(x%10);\n        x /= 10;\n        i += 1;\n    }\n  \
    \  if x > 0 {\n        s += char::from(x%10);\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `char: From<isize>` is not satisfied\n -->\
    \ /tmp/tmp2yujfsu3.rs:8:14\n  |\n8 |         s += char::from(x%10);\n  |     \
    \         ^^^^^^^^^^ the trait `From<isize>` is not implemented for `char`\n \
    \ |\n  = help: the trait `From<u8>` is implemented for `char`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp2yujfsu3.rs:8:14\n  |\n8 |         s += char::from(x%10);\n\
    \  |              ^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0277]:\
    \ the trait bound `char: From<isize>` is not satisfied\n  --> /tmp/tmp2yujfsu3.rs:13:14\n\
    \   |\n13 |         s += char::from(x%10);\n   |              ^^^^^^^^^^ the trait\
    \ `From<isize>` is not implemented for `char`\n   |\n   = help: the trait `From<u8>`\
    \ is implemented for `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2yujfsu3.rs:13:14\n\
    \   |\n13 |         s += char::from(x%10);\n   |              ^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = String::new();\n    let mut carry = 0;\n    while x\
    \ >= 10 {\n        digits.push_str(&format!(\"{}\", x % 10));\n        x /= 10;\n\
    \        carry += 1;\n    }\n    if carry > 0 {\n        digits.push_str(&format!(\"\
    {}\", carry));\n    }\n    digits.reverse();\n    digits.push_str(&format!(\"\
    {}\", x));\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp3_b68090.rs:15:12\n   |\n15 |     digits.reverse();\n\
    \   |            ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - i) %\
    \ digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphcs16tu2.rs:8:49\n  |\n8 |\
    \         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  |  \
    \                                               ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmphcs16tu2.rs:8:47\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \  |                                               ^ no implementation for `usize\
    \ - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \ <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128\
    \ as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n\
    \            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n        \
    \    <&'a isize as Sub<isize>>\n          and 48 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n --> /tmp/tmphcs16tu2.rs:8:26\n  |\n\
    8 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  |\
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(digits.len() - 1 -\
    \ i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi7mkg2kg.rs:8:53\n  |\n8 |\
    \         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n \
    \ |                                                     ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpi7mkg2kg.rs:8:51\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n\
    \  |                                                   ^ no implementation for\
    \ `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for\
    \ `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n \
    \           <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n       \
    \     <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n           \
    \ <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8\
    \ as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpi7mkg2kg.rs:8:26\n\
    \  |\n8 |         result.push_str(&digits[(digits.len() - 1 - i) % digits.len()]);\n\
    \  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n  = help: the following other types implement trait\
    \ `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n           \
    \ <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s.push(x%10);\n\
    \        x /= 10;\n    }\n    s.push(x%10);\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptn3_dzh2.rs:7:16\n  |\n7 |\
    \         s.push(x%10);\n  |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmptn3_dzh2.rs:10:12\n   |\n10 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749057
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut digits = x.to_string();\n   \
    \ for i in 0..shift {\n        s.push(*digits[i as usize]);\n    }\n    s.push(*digits[shift\
    \ as usize]);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpghpibccu.rs:8:17\n\
    \  |\n8 |         s.push(*digits[i as usize]);\n  |                 ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpghpibccu.rs:10:13\n\
    \   |\n10 |     s.push(*digits[shift as usize]);\n   |             ^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut shift = shift % digits.len();\n    while shift > 0 {\n        result.push_str(&digits[digits.len()\
    \ - shift..digits.len() - shift]);\n        shift -= digits.len() - shift;\n \
    \   }\n    result.push_str(&digits[digits.len() - shift..]);\n    result\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpje1v4qom.rs:7:29\n  |\n7 |\
    \     let mut shift = shift % digits.len();\n  |                             ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \ --> /tmp/tmpje1v4qom.rs:7:27\n  |\n7 |     let mut shift = shift % digits.len();\n\
    \  |                           ^ no implementation for `isize % usize`\n  |\n\
    \  = help: the trait `Rem<usize>` is not implemented for `isize`\n  = help: the\
    \ following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n\
    \            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n    \
    \        <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n          \
    \  <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize\
    \ as Rem<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpje1v4qom.rs:9:48\n  |\n9 |         result.push_str(&digits[digits.len()\
    \ - shift..digits.len() - shift]);\n  |                                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n --> /tmp/tmpje1v4qom.rs:9:46\n  |\n9 |         result.push_str(&digits[digits.len()\
    \ - shift..digits.len() - shift]);\n  |                                      \
    \        ^ no implementation for `usize - isize`\n  |\n  = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n  = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as\
    \ Sub<f64>>\n            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n\
    \            <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n      \
    \      <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and\
    \ 48 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmpje1v4qom.rs:9:70\n\
    \  |\n9 |         result.push_str(&digits[digits.len() - shift..digits.len() -\
    \ shift]);\n  |                                                              \
    \        ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usi"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    for i in 0..shift {\n        s += x.to_string().chars().nth(i).unwrap();\n\
    \    }\n    s[..].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpj7q6y9yc.rs:7:40\n  |\n7 |\
    \         s += x.to_string().chars().nth(i).unwrap();\n  |                   \
    \                     ^ expected `usize`, found `isize`\n  |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n\
    7 |         s += x.to_string().chars().nth(i.try_into().unwrap()).unwrap();\n\
    \  |                                         ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpj7q6y9yc.rs:7:14\n  |\n7 |         s += x.to_string().chars().nth(i).unwrap();\n\
    \  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found\
    \ `char`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    while x > 0 {\n        s += char::from_u32(x%10).unwrap();\n\
    \        x /= 10;\n    }\n    if shift > s.len() {\n        s[s.len() - shift..].copy_from_slice(&s[..shift]);\n\
    \    } else {\n        s[shift..].copy_from_slice(&s[..shift]);\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmlfptfl5.rs:7:29\n  |\n7 |\
    \         s += char::from_u32(x%10).unwrap();\n  |                           \
    \  ^^^^ expected `u32`, found `isize`\n  |\nhelp: you can convert an `isize` to\
    \ a `u32` and panic if the converted value doesn't fit\n  |\n7 |         s +=\
    \ char::from_u32((x%10).try_into().unwrap()).unwrap();\n  |                  \
    \           +    +++++++++++++++++++++\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpmlfptfl5.rs:7:14\n  |\n7 |         s += char::from_u32(x%10).unwrap();\n\
    \  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpmlfptfl5.rs:10:16\n   |\n10 |\
    \     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n10 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                       ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmlfptfl5.rs:11:21\n   |\n11 |         s[s.len() - shift..].copy_from_slice(&s[..shift]);\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpmlfptfl5.rs:11:19\n   |\n\
    11 |         s[s.len() - shift..].copy_from_slice(&s[..shift]);\n   |        \
    \           ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n   = help: the following other\
    \ types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n    \
    \         <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n      \
    \       <&'a i16 as Sub<i16>>\n             <&'a i32 as Sub<i32>>\n          \
    \   <&'a i64 as Sub<i64>>\n             <&'a i8 as Sub<i8>>\n             <&'a\
    \ isize as Sub<isize>>\n           and 48 others\n\nerror[E0599]: no method named\
    \ `copy_from_slice` found for type `str` in the current scope\n  --> /tmp/tmpmlfptfl5.rs:11:30\n\
    \   |\n11 |         s[s.len() - shift..].copy_from_slice(&s[..shift]);\n   | \
    \                             ^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut digits = x.to_string();\n    digits = digits[..(shift as usize)].to_string()\
    \ + digits[(shift as usize)..].to_string();\n    digits\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2gt_81jv.rs:6:55\n  |\n6 |\
    \     digits = digits[..(shift as usize)].to_string() + digits[(shift as usize)..].to_string();\n\
    \  |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |                                                       |\n  |            \
    \                                           expected `&str`, found struct `String`\n\
    \  |                                                       help: consider borrowing\
    \ here: `&digits[(shift as usize)..].to_string()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976452
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    for i in 0..shift {\n        result.push_str(&digits[(shift + i) % digits.len()]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpory4dui6.rs:8:47\n  |\n8 |\
    \         result.push_str(&digits[(shift + i) % digits.len()]);\n  |         \
    \                                      ^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpory4dui6.rs:8:45\n\
    \  |\n8 |         result.push_str(&digits[(shift + i) % digits.len()]);\n  | \
    \                                            ^ no implementation for `isize %\
    \ usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for `isize`\n\
    \  = help: the following other types implement trait `Rem<Rhs>`:\n           \
    \ <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n            <&'a i128\
    \ as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n\
    \            <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n        \
    \    <&'a isize as Rem<isize>>\n          and 54 others\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `isize`\n --> /tmp/tmpory4dui6.rs:8:26\n  |\n\
    8 |         result.push_str(&digits[(shift + i) % digits.len()]);\n  |       \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `isize`\n  |\n  = help: the trait `Index<isize>` is not implemented for `String`\n\
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \   <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976451
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\nfn circular_shift(x: isize, shift: isize) -> String\
    \ {\n    let mut s = String::new();\n    let mut carry = 0;\n    for i in 0..shift\
    \ {\n        if x >= 10 {\n            s.push_str(&format!(\"{}{}\", x / 10, &format!(\"\
    {}\", x%10)));\n            x /= 10;\n        } else {\n            s.push_str(&format!(\"\
    {}\", x));\n            carry = 0;\n        }\n    }\n    if carry > 0 {\n   \
    \     s.push_str(&format!(\"{}\", x));\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n --> /tmp/tmp4_pb_y84.rs:7:9\n  |\n7 | \
    \    for i in 0..shift {\n  |         ^ help: if this is intentional, prefix it\
    \ with an underscore: `_i`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\
    \nerror[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp4_pb_y84.rs:10:13\n\
    \   |\n4  | fn circular_shift(x: isize, shift: isize) -> String {\n   |      \
    \             - help: consider making this binding mutable: `mut x`\n...\n10 |\
    \             x /= 10;\n   |             ^^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1659976452
