language: rs
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut sum = 0;\n    for x in q {\n        sum +=\
    \ x;\n    }\n    sum < w && is_balanced(q)\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmpvtkma0ce.rs:15:16\n\
    \   |\n15 |     sum < w && is_balanced(q)\n   |                ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749427
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut balanced = false;\n    let mut sum = 0;\n \
    \   for x in q {\n        sum += x;\n        if sum == w {\n            balanced\
    \ = true;\n            break;\n        }\n    }\n    balanced\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp61_ddyiv.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749428
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut max_sum = 0;\n    let mut is_balanced = false;\n\
    \    for el in q {\n        if el > max_sum {\n            max_sum = el;\n   \
    \     }\n        if el == max_sum {\n            is_balanced = true;\n       \
    \ }\n    }\n    if !is_balanced {\n        return false;\n    }\n    if max_sum\
    \ == w {\n        return true;\n    }\n    let mut sum = 0;\n    for el in q {\n\
    \        sum += el;\n    }\n    if sum == w {\n        return true;\n    }\n \
    \   return false;\n}\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `q`\n   --> /tmp/tmpcixuttou.rs:28:15\n\
    \    |\n10  | fn will_it_fly(q: Vec<isize>, w: isize) -> bool {\n    |       \
    \         - move occurs because `q` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n13  |     for el in q {\n    |               -\n    |\
    \               |\n    |               `q` moved due to this implicit call to\
    \ `.into_iter()`\n    |               help: consider borrowing to avoid moving\
    \ into the for loop: `&q`\n...\n28  |     for el in q {\n    |               ^\
    \ value used here after move\n    |\nnote: this function takes ownership of the\
    \ receiver `self`, which moves `q`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749427
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut balanced = false;\n    let mut sum = 0;\n \
    \   for x in q {\n        sum += x;\n        if sum == w {\n            balanced\
    \ = true;\n            break;\n        }\n    }\n    balanced\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp61_ddyiv.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749428
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut sum = 0;\n    let mut max_weight = 0;\n   \
    \ for &i in q {\n        sum += i;\n        max_weight = if sum > w {\n      \
    \      max_weight\n        } else {\n            sum\n        };\n    }\n    sum\
    \ == w && max_weight <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplo__m0q0.rs:13:9\n   |\n\
    13 |     for &i in q {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749427
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut sum = 0;\n    let mut max_weight = 0;\n   \
    \ for v in q {\n        sum += v;\n        if sum > max_weight {\n           \
    \ max_weight = sum;\n        }\n    }\n    if sum == max_weight {\n        return\
    \ true;\n    }\n    if sum < w {\n        return false;\n    }\n    let mut sum\
    \ = 0;\n    let mut max_weight = 0;\n    for v in q {\n        sum += v;\n   \
    \     if sum > max_weight {\n            max_weight = sum;\n        }\n    }\n\
    \    if sum == max_weight {\n        return true;\n    }\n    if sum < w {\n \
    \       return false;\n    }\n    let mut sum = 0;\n    let mut max_weight = 0;\n\
    \    for v in q {\n        sum += v;\n        if sum > max_weight {\n        \
    \    max_weight = sum;\n        }\n    }\n    if sum == max_weight {\n       \
    \ return true;\n    }\n    if sum < w {\n        return false;\n    }\n    let\
    \ mut sum = 0;\n    let mut max_weight = 0;\n    for v in q {\n        sum +=\
    \ v;\n        if sum > max_weight {\n            max_weight = sum;\n        }\n\
    \    }\n    if sum == max_weight {\n        return true;\n    }\n    if sum <\
    \ w {\n        return false;\n    }\n    let mut sum = 0;\n    let mut max_weight\
    \ = 0;\n    for v in q {\n        sum += v;\n        if sum > max_weight {\n \
    \           max_weight = sum;\n        }\n    }\n    if sum == max_weight {\n\
    \        return true;\n    }\n    if sum < w {\n        return false;\n    }\n\
    \    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q {\n       \
    \ sum += v;\n        if sum > max_weight {\n            max_weight = sum;\n  \
    \      }\n    }\n    if sum == max_weight {\n        return true;\n    }\n   \
    \ if sum < w {\n        return false;\n    }\n    let mut sum = 0;\n    let mut\
    \ max_weight = 0;\n    for v in q {\n        sum += v;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n    }\n    if sum == max_weight\
    \ {\n        return true;\n    }\n    if sum < w {\n        return false;\n  \
    \  }\n    let mut sum = 0;\n    let mut max_weight = 0;\n    for v in q {\n  \
    \      sum += v;\n        if sum > max_weight {\n            max_weight = sum;\n\
    \        }\n    }\n    if sum == max_weight {\n        return true;\n    }\n \
    \   if sum < w {\n        return false;\n    }\n    let mut sum = 0;\n    let\
    \ mut max_weight = 0;\n    for v in q {\n        sum += v;\n        if sum > max_weight\
    \ {\n            max_weight = sum;\n        }\n    }\n    if sum\n}\n\nfn main()\
    \ {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3],\
    \ 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpvsbkke4k.rs:132:1\n    |\n\
    131 |     if sum\n    |     -- this `if` expression has a condition, but no block\n\
    132 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659749427
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut sum = 0;\n    let mut max_weight = 0;\n   \
    \ let mut is_balanced = true;\n    for x in q {\n        sum += x;\n        if\
    \ sum > max_weight {\n            max_weight = sum;\n        }\n        if sum\
    \ == w {\n            is_balanced = false;\n        }\n    }\n    is_balanced\
    \ && max_weight <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n   \
    \ assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp7z2dc220.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749428
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut sum = 0;\n    for &i in q {\n        sum +=\
    \ i;\n    }\n    sum < w && is_palindromic(q) && sum >= w\n}\n\nfn main() {\n\
    \    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9),\
    \ true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmp7y5gtmb1.rs:15:16\n   |\n15 |     sum < w && is_palindromic(q) && sum\
    \ >= w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7y5gtmb1.rs:12:9\n   |\n12 |     for &i in q\
    \ {\n   |         ^^    - this expression has type `isize`\n   |         |\n \
    \  |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749427
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut max_weight = 0;\n    let mut balanced = true;\n\
    \    for e in q {\n        if e > max_weight {\n            max_weight = e;\n\
    \        }\n        if e < w {\n            balanced = false;\n        }\n   \
    \ }\n    balanced && max_weight <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsrfyw48j.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749428
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut balanced = false;\n    let mut sum = 0;\n \
    \   for &i in q {\n        sum += i;\n        if sum == w {\n            balanced\
    \ = true;\n        }\n    }\n    balanced\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi9h3g1tp.rs:13:9\n   |\n\
    13 |     for &i in q {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749427
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut sum = 0;\n    let mut max_weight = 0;\n   \
    \ for v in q.iter() {\n        sum += v;\n        if sum > max_weight {\n    \
    \        max_weight = sum;\n        }\n    }\n    if sum == w {\n        return\
    \ true;\n    }\n    if sum < w {\n        return false;\n    }\n    let mut i\
    \ = 0;\n    let mut j = q.len() - 1;\n    while i <= j {\n        if q[i] > q[j]\
    \ {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n\
    \    }\n    return true;\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmplrvz__6g.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749428
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut sum = 0;\n    for x in q {\n        sum +=\
    \ x;\n    }\n    sum < w && is_balanced(q)\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmpvtkma0ce.rs:15:16\n\
    \   |\n15 |     sum < w && is_balanced(q)\n   |                ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749427
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut sum = 0;\n    for x in q {\n        sum +=\
    \ x;\n    }\n    sum < w && is_palindromic(q) && sum <= w\n}\n\nfn main() {\n\
    \    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9),\
    \ true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_palindromic` in this scope\n  -->\
    \ /tmp/tmp5yjycs2z.rs:15:16\n   |\n15 |     sum < w && is_palindromic(q) && sum\
    \ <= w\n   |                ^^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659749427
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut max_sum = 0;\n    let mut is_balanced = true;\n\
    \    for &i in q {\n        let mut sum = 0;\n        for &j in q {\n        \
    \    sum += j;\n        }\n        if sum > max_sum {\n            max_sum = sum;\n\
    \        }\n        if sum == w {\n            is_balanced = false;\n        }\n\
    \    }\n    is_balanced && max_sum <= w\n}\n\nfn main() {\n    let candidate =\
    \ will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp7cbimf6.rs:13:9\n   |\n\
    13 |     for &i in q {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpp7cbimf6.rs:15:13\n   |\n15 |         for &j in q {\n \
    \  |             ^^    - this expression has type `isize`\n   |             |\n\
    \   |             expected `isize`, found reference\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749427
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut sum = 0;\n    for x in q {\n        sum +=\
    \ x;\n    }\n    sum < w && is_balanced(q)\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmpvtkma0ce.rs:15:16\n\
    \   |\n15 |     sum < w && is_balanced(q)\n   |                ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749427
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut sum = 0;\n    let mut max_weight = 0;\n   \
    \ for x in q {\n        sum += x;\n        max_weight = if sum > w {\n       \
    \     max_weight\n        } else {\n            sum\n        };\n    }\n    sum\
    \ == w && max_weight <= w\n}\n\nfn main() {\n    let candidate = will_it_fly;\n\
    \    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7a3gbmje.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749428
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut max_weight = w;\n    let mut balanced = true;\n\
    \    let mut sum = 0;\n    for &i in q {\n        sum += i;\n        if sum >\
    \ max_weight {\n            max_weight = sum;\n        }\n        if sum < max_weight\
    \ {\n            balanced = false;\n        }\n    }\n    balanced && sum == max_weight\n\
    }\n\nfn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzkclb4bl.rs:14:9\n   |\n\
    14 |     for &i in q {\n   |         ^^    - this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749427
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut balanced = false;\n    let mut sum = 0;\n \
    \   for x in q {\n        sum += x;\n        if sum > w {\n            balanced\
    \ = false;\n            break;\n        }\n        if sum == w {\n           \
    \ balanced = true;\n            break;\n        }\n    }\n    balanced\n}\n\n\
    fn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvdzf8uc1.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749428
- exit_code: 1
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut sum = 0;\n    for i in q.iter() {\n       \
    \ sum += i;\n    }\n    sum < w && is_balanced(q)\n}\n\nfn main() {\n    let candidate\
    \ = will_it_fly;\n    assert_eq!(candidate(vec![3, 2, 3], 9), true);\n    assert_eq!(candidate(vec![1,\
    \ 2], 5), false);\n    assert_eq!(candidate(vec![3], 5), true);\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 1), false);\n    assert_eq!(candidate(vec![1, 2, 3], 6), false);\n  \
    \  assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `is_balanced` in this scope\n  --> /tmp/tmp4_lrfh48.rs:15:16\n\
    \   |\n15 |     sum < w && is_balanced(q)\n   |                ^^^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659749427
- exit_code: 101
  program: "/// Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n/// The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n/// Example:\n/// >>> will_it_fly([1, 2], 5) \n/// False \n/// #\
    \ 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// # it's\
    \ balanced, but 3+2+3 is more than the maximum possible weight.\n/// # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n/// # 3 is less than\
    \ the maximum possible weight, and it's balanced.\nfn will_it_fly(q: Vec<isize>,\
    \ w: isize) -> bool {\n    let mut balanced = false;\n    let mut sum = 0;\n \
    \   for v in q.iter() {\n        sum += v;\n        if sum >= w {\n          \
    \  balanced = true;\n            break;\n        }\n    }\n    balanced\n}\n\n\
    fn main() {\n    let candidate = will_it_fly;\n    assert_eq!(candidate(vec![3,\
    \ 2, 3], 9), true);\n    assert_eq!(candidate(vec![1, 2], 5), false);\n    assert_eq!(candidate(vec![3],\
    \ 5), true);\n    assert_eq!(candidate(vec![3, 2, 3], 1), false);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3], 6), false);\n    assert_eq!(candidate(vec![5], 5), true);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpcpcthvvv.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749428
