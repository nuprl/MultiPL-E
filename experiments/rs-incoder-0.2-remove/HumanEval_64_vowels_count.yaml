name: HumanEval_64_vowels_count
language: rs
prompt: "/// Write a function vowels_count which takes a string representing\n///\
  \ a word as input and returns the number of vowels in the string.\n/// Vowels in\
  \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but only\
  \ when it is at the end of the given word.\n/// Example:\nfn vowels_count(s: String)\
  \ -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
  abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
  key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
  keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
  ACEDY\")), 3);\n}\n"
completions: ["    let mut vowel_count = 0;\n    for c in s.chars() {\n        if\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            vowel_count\
    \ += 1;\n        }\n    }\n    return vowel_count;", "    let mut vowel_count\
    \ = 0;\n    for ch in s.chars() {\n        if ch == 'a' || ch == 'e' || ch ==\
    \ 'i' || ch == 'o' || ch == 'u' {\n            vowel_count += 1;\n        }\n\
    \    }\n    return vowel_count;", '    vowels_count(s, 0)', "    let mut vowel_count\
    \ = 0;\n    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' {\n            vowel_count += 1;\n        }\n    }\n\
    \    return vowel_count;", "    s.chars().filter(|c| c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u').count()", "    let mut vowel_count = 0;\n  \
    \  for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' {\n            vowel_count += 1;\n        }\n    }\n    vowel_count",
  "    let mut vowel_count = 0;\n    for ch in s.chars() {\n        if ch == 'a' ||\
    \ ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n            vowel_count\
    \ += 1;\n        }\n    }\n    vowel_count", "    let mut vowel_count = 0;\n \
    \   let mut vowel_end_index = s.len();\n    while vowel_end_index > 0 {\n    \
    \    if s[vowel_end_index - 1] == 'a' || s[vowel_end_index - 1] == 'e' || s[vowel_end_index\
    \ - 1] == 'i' || s[vowel_end_index - 1] == 'o' || s[vowel_end_index - 1] == 'u'\
    \ {\n            vowel_count += 1;\n        }\n        vowel_end_index -= 1;\n\
    \    }\n    vowel_count", "    let mut vowel_count = 0;\n    for c in s.chars()\
    \ {\n        match c {\n            'a' => vowel_count += 1,\n            'e'\
    \ => vowel_count += 1,\n            'i' => vowel_count += 1,\n            'o'\
    \ => vowel_count += 1,\n            'u' => vowel_count += 1,\n            _ =>\
    \ {}\n        }\n    }\n    vowel_count", "    let mut vowel_count = 0;\n    for\
    \ c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' {\n            vowel_count += 1;\n        }\n    }\n    return vowel_count;",
  "    let mut vowel_count = 0;\n    for c in s.chars() {\n        match c {\n   \
    \         'a' => vowel_count += 1,\n            'e' => vowel_count += 1,\n   \
    \         'i' => vowel_count += 1,\n            'o' => vowel_count += 1,\n   \
    \         'u' => vowel_count += 1,\n            _ => (),\n        }\n    }\n \
    \   vowel_count", "    let mut vowel_count = 0;\n    let mut vowel_end_index =\
    \ s.len();\n    while vowel_end_index > 0 {\n        let vowel = s[vowel_end_index\
    \ - 1];\n        if vowel == \"a\" || vowel == \"e\" || vowel == \"i\" || vowel\
    \ == \"o\" || vowel == \"u\" {\n            vowel_count += 1;\n        }\n   \
    \     vowel_end_index -= 1;\n    }\n    vowel_count", "    let mut vowel_count\
    \ = 0;\n    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' {\n            vowel_count += 1;\n        }\n    }\n\
    \    vowel_count", "    let mut vowel_count = 0;\n    for ch in s.chars() {\n\
    \        if ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n\
    \            vowel_count += 1;\n        }\n    }\n    return vowel_count;", '    vowels_count(s,
    0)', "    let mut vowel_count = 0;\n    let mut vowels = vec!['a', 'e', 'i', 'o',\
    \ 'u'];\n    let mut vowel_pos = 0;\n    let mut vowel_end_pos = 0;\n    for c\
    \ in s.chars() {\n        if vowels.contains(&c) {\n            vowel_count +=\
    \ 1;\n        }\n        if c == 'y' {\n            vowel_pos = vowel_end_pos;\n\
    \            vowel_end_pos = s.len();\n        }\n    }\n    vowel_count += vowel_end_pos\
    \ - vowel_pos;\n    vowel_count", "    let mut vowel_count = 0;\n    for ch in\
    \ s.chars() {\n        if ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' ||\
    \ ch == 'u' {\n            vowel_count += 1;\n        }\n    }\n    vowel_count",
  "    let mut vowel_count = 0;\n    for c in s.chars() {\n        if c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            vowel_count += 1;\n\
    \        }\n    }\n    return vowel_count;", '    vowels_count(s, 0, s.len())',
  "    let mut vowel_count = 0;\n    for ch in s.chars() {\n        if ch == 'a' ||\
    \ ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' {\n            vowel_count\
    \ += 1;\n        }\n    }\n    vowel_count"]
stop_tokens:
- "\n}"
