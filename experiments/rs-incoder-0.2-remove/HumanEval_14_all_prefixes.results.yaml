language: rs
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut s = string.chars();\n    let mut c = s.next();\n\
    \    while !c.is_none() {\n        if c.unwrap() == '.' {\n            prefixes.push(c.unwrap());\n\
    \        }\n        c = s.next();\n    }\n    prefixes\n}\n\nfn main() {\n   \
    \ let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpas7aajny.rs:12:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n12 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut len = string.len();\n    while len > 0 {\n        prefix.push(&string[..len]);\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwk83c5a7.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    let mut i = 0;\n\
    \    while i < string.len() {\n        let mut j = i;\n        while j < string.len()\
    \ && string[j] == string[j + 1] {\n            j += 1; // skip duplicates\n  \
    \      }\n        prefixes.push(&string[i..j]);\n        i = j;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpn4j5yekt.rs:8:35\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n --> /tmp/tmpn4j5yekt.rs:8:48\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                                ^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn4j5yekt.rs:14:5\n\
    \   |\n2  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n14 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c == c.to_ascii_lowercase() {\n            current_prefix += c.to_ascii_lowercase();\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n --> /tmp/tmp7_vripx5.rs:7:13\n  |\n7 |             current_prefix +=\
    \ c.to_ascii_lowercase();\n  |             --------------^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |             |\n  |             cannot use `+=` on type `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7_vripx5.rs:14:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current = \"\";\n    for c in string.chars() {\n    \
    \    if c.is_ascii_alphanumeric() {\n            prefix.push(current);\n     \
    \       current = c.to_string();\n        } else {\n            current = current\
    \ + c.to_string();\n        }\n    }\n    prefix.push(current);\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgrzec7uy.rs:8:23\n  |\n8 |\
    \             current = c.to_string();\n  |                       ^^^^^^^^^^^^^\n\
    \  |                       |\n  |                       expected `&str`, found\
    \ struct `String`\n  |                       help: consider borrowing here: `&c.to_string()`\n\
    \nerror[E0369]: cannot add `String` to `&str`\n  --> /tmp/tmpgrzec7uy.rs:10:31\n\
    \   |\n10 |             current = current + c.to_string();\n   |             \
    \          ------- ^ ------------- String\n   |                       |      \
    \ |\n   |                       |       `+` cannot be used to concatenate a `&str`\
    \ with a `String`\n   |                       &str\n   |\nhelp: `to_owned()` can\
    \ be used to create an owned `String` from a string reference. String concatenation\
    \ appends the string on the right to the string on the left and may require reallocation.\
    \ This requires ownership of the string on the left\n   |\n10 |             current\
    \ = current.to_owned() + &c.to_string();\n   |                       ~~~~~~~~~~~~~~~~~~\
    \   ~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgrzec7uy.rs:14:5\n\
    \   |\n2  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n14 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut suffix = String::new();\n\
    \    let mut i = 1;\n    while i < string.len() {\n        prefix = prefix.to_owned()\
    \ + &string[i..i];\n        suffix = suffix.to_owned() + &string[i..i];\n    \
    \    if prefixes.contains(&prefix) {\n            i += 1;\n        } else {\n\
    \            prefixes.push(prefix);\n        }\n    }\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmply8n1rbw.rs:8:18\n\
    \   |\n4  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n8  |         prefix = prefix.to_owned() + &string[i..i];\n   | \
    \        ------   ^^^^^^ value borrowed here after move\n   |         |\n   |\
    \         this reinitialization might get skipped\n...\n13 |             prefixes.push(prefix);\n\
    \   |                           ------ value moved here, in previous iteration\
    \ of loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut string = string.to_string();\n    loop {\n        prefix.push(string);\n\
    \        if string.len() == 0 {\n            break;\n        }\n        string\
    \ = string.chars().next().unwrap();\n    }\n    prefix\n}\n\nfn main() {\n   \
    \ let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfvvuqbg6.rs:10:18\n   |\n\
    10 |         string = string.chars().next().unwrap();\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  |\n\
    \   |                  expected struct `String`, found `char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current_len = string.len();\n    while current_len >\
    \ 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmptx45v7nn.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut s = string.to_string();\n    let mut i = 0;\n   \
    \ while i < s.len() {\n        prefixes.push(s.chars().take(i).collect::<String>());\n\
    \        i += 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp9qdoa49s.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut len = string.len();\n    while len > 0 {\n        prefix.push(&string[..len]);\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwk83c5a7.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: -1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    while !string.is_empty()\
    \ {\n        prefixes.push(string.clone());\n        string = string.chars().next().unwrap().to_string();\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805269
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpaa5a534g.rs:7:28\n  |\n7 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaa5a534g.rs:14:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpaa5a534g.rs:7:28\n  |\n7 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaa5a534g.rs:14:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    while string.len()\
    \ > 0 {\n        prefixes.push(string.chars().take_while(|c| !c.is_ascii_lowercase()).collect::<String>());\n\
    \        string = string.chars().take_while(|c| !c.is_ascii_lowercase()).collect::<String>();\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmpfgd5i225.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut suffix = String::new();\n\
    \    let mut i = 1;\n    while i < string.len() {\n        prefix = prefix.to_owned()\
    \ + &string[i..i];\n        suffix = suffix.to_owned() + &string[i..i];\n    \
    \    i += 1;\n        prefixes.push(prefix);\n    }\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmps3x6lder.rs:8:18\n\
    \   |\n4  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n8  |         prefix = prefix.to_owned() + &string[i..i];\n   | \
    \                 ^^^^^^ value borrowed here after move\n...\n11 |         prefixes.push(prefix);\n\
    \   |                       ------ value moved here, in previous iteration of\
    \ loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    let mut current_len\
    \ = String::new();\n    let mut current_len = string.len();\n    let mut current_len\
    \ = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut\
    \ current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n\
    \    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos\
    \ = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut\
    \ current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n\
    \    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos\
    \ = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut\
    \ current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n\
    \    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos\
    \ = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut\
    \ current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n\
    \    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos\
    \ = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut\
    \ current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n\
    \    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos\
    \ = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut\
    \ current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n\
    \    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos\
    \ = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut\
    \ current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n\
    \    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos\
    \ = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut\
    \ current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n\
    \    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut current_pos\
    \ = 0;\n    let mut current_pos = 0;\n    let mut current_pos = 0;\n    let mut\
    \ current_pos = \n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp9q1om7zn.rs:75:1\n\
    \   |\n75 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut prefix_len = 0;\n    for c in string.chars() {\n    \
    \    if prefix_len > 0 {\n            prefix.push(&string[prefix_len..prefix_len\
    \ + c.len_utf8()]);\n        }\n        prefix_len += c.len_utf8();\n    }\n \
    \   prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfjau2evy.rs:11:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::from(\"\");\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current.push_str(&c.to_string());\n\
    \        } else {\n            prefixes.push(current);\n            current =\
    \ String::from(\"\");\n        }\n    }\n    prefixes.push(current);\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp_wm2db_m.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        current_prefix.push_str(&string[..current_len]);\n\
    \        current_len -= 1;\n        if current_len == 0 {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = String::new();\n        }\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfghasdfgasdfasdasa\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"]`', /tmp/tmpbob0j8fe.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefixes.push(&string[prefix_len..current_len]);\n\
    \        prefix_len += 1;\n        current_len -= 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ycz7gyg.rs:11:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut pos = 0;\n    while\
    \ pos < string.len() {\n        let mut prefix = String::new();\n        prefix.push_str(&string[pos..]);\n\
    \        prefix.push_str(&string[pos]);\n        prefixes.push(prefix);\n    \
    \    prefix_len += prefix.len();\n        pos += 1;\n    }\n    prefixes\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp2qbtlaod.rs:9:26\n\
    \  |\n9 |         prefix.push_str(&string[pos]);\n  |                        \
    \  ^^^^^^^^^^^ `String` cannot be indexed by `usize`\n  |\n  = help: the trait\
    \ `Index<usize>` is not implemented for `String`\n  = help: the following other\
    \ types implement trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n\
    \            <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut s = string;\n    while\
    \ s.len() > 0 {\n        prefix.push(s.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len += 1;\n        s = &s[prefix_len..];\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu3p_2scn.rs:9:13\n  |\n5 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = &s[prefix_len..];\n  |             ^^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n  |\n\
    9 |         s = (&s[prefix_len..]).to_string();\n  |             +           \
    \     +++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::new();\n    current.push_str(string);\n\
    \    prefixes.push(current);\n    while current.len() > 0 {\n        let mut current\
    \ = String::new();\n        for c in current {\n            current.push_str(&c.to_string());\n\
    \        }\n        prefixes.push(current);\n    }\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxpsczowp.rs:5:22\n  |\n5 |\
    \     current.push_str(string);\n  |                      ^^^^^^\n  |        \
    \              |\n  |                      expected `&str`, found struct `String`\n\
    \  |                      help: consider borrowing here: `&string`\n\nerror[E0277]:\
    \ `String` is not an iterator\n --> /tmp/tmpxpsczowp.rs:9:18\n  |\n9 |       \
    \  for c in current {\n  |                  ^^^^^^^ `String` is not an iterator;\
    \ try calling `.chars()` or `.bytes()`\n  |\n  = help: the trait `Iterator` is\
    \ not implemented for `String`\n  = note: required because of the requirements\
    \ on the impl of `IntoIterator` for `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpaa5a534g.rs:7:28\n  |\n7 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaa5a534g.rs:14:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current = \"\";\n    for c in string.chars() {\n    \
    \    if c == ' ' {\n            prefix.push(current);\n            current = \"\
    \";\n        } else {\n            current += &c.to_string();\n        }\n   \
    \ }\n    prefix.push(current);\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n  --> /tmp/tmp5lr9cqu5.rs:10:13\n   |\n10 |             current += &c.to_string();\n\
    \   |             -------^^^^^^^^^^^^^^^^^^\n   |             |\n   |        \
    \     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5lr9cqu5.rs:14:5\n   |\n2  | fn all_prefixes(string: String) -> Vec<String>\
    \ {\n   |                                    ----------- expected `Vec<String>`\
    \ because of return type\n...\n14 |     prefix\n   |     ^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n   \
    \           found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut len = string.len();\n    while len > 0 {\n        prefix.push(&string[..len]);\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwk83c5a7.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut input = string.chars();\n    let mut prefix = String::new();\n\
    \    while input.next() != Some(0) {\n        prefix.push(*input);\n        prefixes.push(prefix);\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp13_3ao19.rs:6:32\n  |\n6 |\
    \     while input.next() != Some(0) {\n  |                                ^ expected\
    \ `char`, found `u8`\n\nerror[E0614]: type `Chars<'_>` cannot be dereferenced\n\
    \ --> /tmp/tmp13_3ao19.rs:7:21\n  |\n7 |         prefix.push(*input);\n  |   \
    \                  ^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = string.len();\n    while prefix_len\
    \ > 0 {\n        prefixes.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len -= 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpnrrwfvw1.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut len = string.len();\n    let mut i = 0;\n    while i\
    \ < len {\n        prefix.push(string.chars().take(i).collect::<String>());\n\
    \        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmph77136t0.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut len = string.len();\n    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpclntoqtx.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut string = string.to_string();\n\
    \    while string.len() > 0 {\n        prefix.push_str(&string[0..]);\n      \
    \  prefixes.push(prefix);\n        string = &string[1..];\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1izx1lr5.rs:9:18\n  |\n5 |\
    \     let mut string = string.to_string();\n  |                      ------------------\
    \ expected due to this value\n...\n9 |         string = &string[1..];\n  |   \
    \               ^^^^^^^^^^^^ expected struct `String`, found `&str`\n  |\nhelp:\
    \ try using a conversion method\n  |\n9 |         string = (&string[1..]).to_string();\n\
    \  |                  +            +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            if current_prefix.len() > 0 {\n               \
    \ prefixes.push(current_prefix);\n                current_prefix = \"\";\n   \
    \         }\n        }\n    }\n    if current_prefix.len() > 0 {\n        prefixes.push(current_prefix);\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpey1m2m2p.rs:7:28\n  |\n7 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpey1m2m2p.rs:18:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n18 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut s = string;\n    while !s.is_empty() {\n        prefix.push(s);\n\
    \        s = s.chars().next().unwrap();\n    }\n    prefix\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsy47670f.rs:7:13\n  |\n4 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n7 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut suffix = String::new();\n\
    \    let mut i = 1;\n    while i < string.len() {\n        prefix.push_str(&string[i..]);\n\
    \        suffix.push_str(&string[i..]);\n        i += 1;\n        prefixes.push(prefix);\n\
    \    }\n    prefixes.push(suffix);\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmpa68rjxx6.rs:8:9\n\
    \   |\n4  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n8  |         prefix.push_str(&string[i..]);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n...\n11 |         prefixes.push(prefix);\n \
    \  |                       ------ value moved here, in previous iteration of loop\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut prefix_len = string.len();\n    while prefix_len\
    \ > 0 {\n        prefix.push(&string[prefix_len..]);\n        prefix_len -= 1;\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp06jqbxqp.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix.clear();\n\
    \        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `current_prefix`\n --> /tmp/tmpw3wlw_24.rs:7:13\n\
    \  |\n4 |     let mut current_prefix = String::new();\n  |         ------------------\
    \ move occurs because `current_prefix` has type `String`, which does not implement\
    \ the `Copy` trait\n...\n7 |             current_prefix.push(c);\n  |        \
    \     ^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n8 |         } else\
    \ {\n9 |             prefixes.push(current_prefix);\n  |                     \
    \      -------------- value moved here, in previous iteration of loop\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_length = 0;\n    let mut current_prefix =\
    \ \"\";\n    for c in string.chars() {\n        if c.is_ascii() {\n          \
    \  current_prefix += c.to_string();\n        } else {\n            prefixes.push(current_prefix);\n\
    \            current_prefix = \"\";\n        }\n        if prefix_length == 0\
    \ {\n            prefix_length = c.len_utf8();\n        }\n        if prefix_length\
    \ == c.len_utf8() {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n --> /tmp/tmphqy2bzcx.rs:8:13\n  |\n8 |             current_prefix +=\
    \ c.to_string();\n  |             --------------^--^^^^^^^^^^^^^^\n  |       \
    \      |              |\n  |             |              `+` cannot be used to\
    \ concatenate a `&str` with a `String`\n  |             cannot use `+=` on type\
    \ `&str`\n  |\n  = note: string concatenation requires an owned `String` on the\
    \ left\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphqy2bzcx.rs:22:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n22 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::new();\n    let mut current_len\
    \ = String::new();\n    let mut current_len_index = 0;\n    let mut current_len_index2\
    \ = 0;\n    let mut current_len_index3 = 0;\n    let mut current_len_index4 =\
    \ 0;\n    let mut current_len_index5 = 0;\n    let mut current_len_index6 = 0;\n\
    \    let mut current_len_index7 = 0;\n    let mut current_len_index8 = 0;\n  \
    \  let mut current_len_index9 = 0;\n    let mut current_len_index10 = 0;\n   \
    \ let mut current_len_index11 = 0;\n    let mut current_len_index12 = 0;\n   \
    \ let mut current_len_index13 = 0;\n    let mut current_len_index14 = 0;\n   \
    \ let mut current_len_index15 = 0;\n    let mut current_len_index16 = 0;\n   \
    \ let mut current_len_index17 = 0;\n    let mut current_len_index18 = 0;\n   \
    \ let mut current_len_index19 = 0;\n    let mut current_len_index20 = 0;\n   \
    \ let mut current_len_index21 = 0;\n    let mut current_len_index22 = 0;\n   \
    \ let mut current_len_index23 = 0;\n    let mut current_len_index24 = 0;\n   \
    \ let mut current_len_index25 = 0;\n    let mut current_len_index26 = 0;\n   \
    \ let mut current_len_index27 = 0;\n    let mut current_len_index28 = 0;\n   \
    \ let mut current_len_index29 = 0;\n    let mut current_len_index30 = 0;\n   \
    \ let mut current_len_index31 = 0;\n    let mut current_len_index32 = 0;\n   \
    \ let mut current_len_index33 = 0;\n    let mut current_len_index34 = 0;\n   \
    \ let mut current_len_index35 = 0;\n    let mut current_len_index36 = 0;\n   \
    \ let mut current_len_index37 = 0;\n    let mut current_len_index38 = 0;\n   \
    \ let mut current_len_index39 = 0;\n    let mut current_len_index40 = 0;\n   \
    \ let mut current_len_index41 = 0;\n    let mut current_len_index42 = 0;\n   \
    \ let mut current_len_index43 = 0;\n    let mut current_len_index44 = 0;\n   \
    \ let mut current_len_index45 = 0;\n    let mut current_len_index46 = 0;\n   \
    \ let mut current_len_index47 = 0;\n    let mut current_len_index48 = 0;\n   \
    \ let mut current_len_index49 = 0;\n    let mut current_len_index50 = 0;\n   \
    \ let mut current_len_index51 = 0;\n    let mut current_len_index52 = 0;\n   \
    \ let mut current_len_index53 = 0;\n    let mut current_len_index54 = 0;\n   \
    \ let mu\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw03_emfd.rs:60:11\n   |\n\
    60 |     let mu\n   |           ^ help: add `;` here\n61 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpw03_emfd.rs:2:36\n  |\n\
    2 | fn all_prefixes(string: String) -> Vec<String> {\n  |    ------------    \
    \                ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<String>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut suffix = String::new();\n\
    \    let mut pos = 0;\n    while pos < string.len() {\n        prefix = prefix.to_owned()\
    \ + string[pos];\n        suffix = suffix.to_owned() + string[pos];\n        if\
    \ pos == 0 {\n            prefixes.push(prefix);\n        } else {\n         \
    \   prefixes.push(prefix);\n            prefixes.push(suffix);\n        }\n  \
    \      pos += 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp3wois8gd.rs:8:38\n\
    \  |\n8 |         prefix = prefix.to_owned() + string[pos];\n  |             \
    \                         ^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n  =\
    \ help: the following other types implement trait `Index<Idx>`:\n            <String\
    \ as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n    \
    \        <String as Index<RangeInclusive<usize>>>\n            <String as Index<RangeTo<usize>>>\n\
    \            <String as Index<RangeToInclusive<usize>>>\n            <String as\
    \ Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n --> /tmp/tmp3wois8gd.rs:9:38\n\
    \  |\n9 |         suffix = suffix.to_owned() + string[pos];\n  |             \
    \                         ^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n  =\
    \ help: the following other types implement trait `Index<Idx>`:\n            <String\
    \ as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n    \
    \        <String as Index<RangeInclusive<usize>>>\n            <String as Index<RangeTo<usize>>>\n\
    \            <String as Index<RangeToInclusive<usize>>>\n            <String as\
    \ Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut string = string.to_string();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        prefix = prefix.to_owned()\
    \ + &string[i..];\n        if prefixes.contains(prefix) {\n            break;\n\
    \        }\n        prefixes.push(prefix);\n        i += 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprs411vrj.rs:9:30\n  |\n9 |\
    \         if prefixes.contains(prefix) {\n  |                              ^^^^^^\n\
    \  |                              |\n  |                              expected\
    \ reference, found struct `String`\n  |                              help: consider\
    \ borrowing here: `&prefix`\n  |\n  = note: expected reference `&_`\n        \
    \        found struct `String`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current = String::from(\"\");\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push(current);\n\
    \        current_len -= 1;\n        current = &string[current_len..];\n    }\n\
    \    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp3z29mzub.rs:9:19\n  |\n4 |\
    \     let mut current = String::from(\"\");\n  |                       ----------------\
    \ expected due to this value\n...\n9 |         current = &string[current_len..];\n\
    \  |                   ^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `&str`\n  |\nhelp: try using a conversion method\n  |\n9 |         current =\
    \ (&string[current_len..]).to_string();\n  |                   +             \
    \         +++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut s = string;\n    while !s.is_empty() {\n        prefix.push(s);\n\
    \        s = s.chars().next().unwrap();\n    }\n    prefix\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz3fsctqu.rs:7:13\n  |\n4 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n7 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::from(\"\");\n    for c in string.chars()\
    \ {\n        current.push_str(&c.to_string());\n        if current.len() > 0 {\n\
    \            prefixes.push(current);\n            current = String::from(\"\"\
    );\n        }\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp7yi5uoka.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut s = string;\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        prefixes.push(&s[..i]);\n        i += 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnwr9b6nm.rs:10:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n10 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::new();\n    let mut current_len\
    \ = 0;\n    let mut current_len2 = 0;\n    let mut current_len3 = 0;\n    let\
    \ mut current_len4 = 0;\n    let mut current_len5 = 0;\n    let mut current_len6\
    \ = 0;\n    let mut current_len7 = 0;\n    let mut current_len8 = 0;\n    let\
    \ mut current_len9 = 0;\n    let mut current_len10 = 0;\n    let mut current_len11\
    \ = 0;\n    let mut current_len12 = 0;\n    let mut current_len13 = 0;\n    let\
    \ mut current_len14 = 0;\n    let mut current_len15 = 0;\n    let mut current_len16\
    \ = 0;\n    let mut current_len17 = 0;\n    let mut current_len18 = 0;\n    let\
    \ mut current_len19 = 0;\n    let mut current_len20 = 0;\n    let mut current_len21\
    \ = 0;\n    let mut current_len22 = 0;\n    let mut current_len23 = 0;\n    let\
    \ mut current_len24 = 0;\n    let mut current_len25 = 0;\n    let mut current_len26\
    \ = 0;\n    let mut current_len27 = 0;\n    let mut current_len28 = 0;\n    let\
    \ mut current_len29 = 0;\n    let mut current_len30 = 0;\n    let mut current_len31\
    \ = 0;\n    let mut current_len32 = 0;\n    let mut current_len33 = 0;\n    let\
    \ mut current_len34 = 0;\n    let mut current_len35 = 0;\n    let mut current_len36\
    \ = 0;\n    let mut current_len37 = 0;\n    let mut current_len38 = 0;\n    let\
    \ mut current_len39 = 0;\n    let mut current_len40 = 0;\n    let mut current_len41\
    \ = 1;\n    let mut current_len42 = 1;\n    let mut current_len43 = 1;\n    let\
    \ mut current_len44 = 1;\n    let mut current_len45 = 1;\n    let mut current_len46\
    \ = 1;\n    let mut current_len47 = 1;\n    let mut current_len48 = 1;\n    let\
    \ mut current_len49 = 1;\n    let mut current_len50 = 1;\n    let mut current_len51\
    \ = 1;\n    let mut current_len52 = 1;\n    let mut current_len53 = 1;\n    let\
    \ mut current_len54 = 1;\n    let mut current_len55 = 1;\n    let mut current_len56\
    \ = 1;\n    let mut current_len57 = 1;\n    let mut current_len58 = 1;\n    let\
    \ mut current_len59 = 1;\n    let mut current_len60 = 1;\n    let mut current_len61\
    \ = 1;\n    let mut current_len6\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7axwq3hr.rs:66:25\n   |\n\
    66 |     let mut current_len6\n   |                         ^ help: add `;` here\n\
    67 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7axwq3hr.rs:2:36\n\
    \  |\n2 | fn all_prefixes(string: String) -> Vec<String> {\n  |    ------------\
    \                    ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<String>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        current.push_str(&string[..current_len]);\n\
    \        prefixes.push(current);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `current`\n --> /tmp/tmpa5ymd2hp.rs:7:9\n\
    \  |\n4 |     let mut current = String::new();\n  |         ----------- move occurs\
    \ because `current` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         current.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(current);\n  |   \
    \                    ------- value moved here, in previous iteration of loop\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut len = string.len();\n    while len > 0 {\n      \
    \  prefixes.push(&string[0..len]);\n        len -= 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk0qxfy_9.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefixes\n  |     ^^^^^^^^ expected struct `String`, found `&str`\n  |\n\
    \  = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut s = string;\n    while !s.is_empty() {\n        prefixes.push(s);\n\
    \        s = s.chars().next().unwrap().to_string();\n    }\n    prefixes\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `s`\n --> /tmp/tmpwgzbjof_.rs:7:13\n\
    \  |\n4 |     let mut s = string;\n  |         ----- move occurs because `s` has\
    \ type `String`, which does not implement the `Copy` trait\n5 |     while !s.is_empty()\
    \ {\n6 |         prefixes.push(s);\n  |                       - value moved here\n\
    7 |         s = s.chars().next().unwrap().to_string();\n  |             ^^^^^^^^^\
    \ value borrowed here after move\n  |\n  = note: borrow occurs due to deref coercion\
    \ to `str`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut len = string.len();\n    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpclntoqtx.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current_len = string.len();\n    while current_len >\
    \ 0 {\n        prefix.push(&string[0..current_len]);\n        current_len -= 1;\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi1gygulr.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    let mut i = 0;\n\
    \    while i < string.len() {\n        let mut j = i;\n        while j < string.len()\
    \ && string[j] == string[j + 1] {\n            j += 1; // skip duplicates\n  \
    \      }\n        prefixes.push(&string[i..j]);\n        i = j;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpn4j5yekt.rs:8:35\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n --> /tmp/tmpn4j5yekt.rs:8:48\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                                ^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn4j5yekt.rs:14:5\n\
    \   |\n2  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n14 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefixes.push(&string[prefix_len..current_len]);\n\
    \        prefix_len += 1;\n        current_len -= 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ycz7gyg.rs:11:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut s = string.to_string();\n    while !s.is_empty()\
    \ {\n        prefixes.push(s);\n        s = s.chars().next().unwrap().to_string();\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `s`\n --> /tmp/tmp_9lbxkjw.rs:7:13\n\
    \  |\n4 |     let mut s = string.to_string();\n  |         ----- move occurs because\
    \ `s` has type `String`, which does not implement the `Copy` trait\n5 |     while\
    \ !s.is_empty() {\n6 |         prefixes.push(s);\n  |                       -\
    \ value moved here\n7 |         s = s.chars().next().unwrap().to_string();\n \
    \ |             ^^^^^^^^^ value borrowed here after move\n  |\n  = note: borrow\
    \ occurs due to deref coercion to `str`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut string = string.to_string();\n    let mut i = 0;\n  \
    \  while i < string.len() {\n        prefix.push(string.chars().nth(i).unwrap());\n\
    \        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv0zpqtfx.rs:10:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n10 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = String::new();\n        }\n    }\n    prefixes.push(current_prefix);\n   \
    \ prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp6usfitpk.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut prefix_len = 0;\n    let mut len = string.len();\n  \
    \  while len > 0 {\n        prefix.push(&string[prefix_len..len]);\n        prefix_len\
    \ += 1;\n        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_rwe0qaf.rs:11:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            if current_prefix.len() > 0 {\n               \
    \ prefixes.push(current_prefix);\n                current_prefix = \"\";\n   \
    \         }\n        }\n    }\n    if current_prefix.len() > 0 {\n        prefixes.push(current_prefix);\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpey1m2m2p.rs:7:28\n  |\n7 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpey1m2m2p.rs:18:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n18 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpaa5a534g.rs:7:28\n  |\n7 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaa5a534g.rs:14:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut s = string.to_string();\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        prefix.push(s.chars().take(i).collect::<String>());\n\
    \        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpkeqcsxac.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut len = string.len();\n    while len > 0 {\n        prefix.push(&string[..len]);\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwk83c5a7.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current_len = string.len();\n    while current_len >\
    \ 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmptx45v7nn.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut len = string.len();\n    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpclntoqtx.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    let mut i = 0;\n\
    \    while i < string.len() {\n        let mut j = i;\n        while j < string.len()\
    \ && string[j] == string[j + 1] {\n            j += 1; // skip duplicates\n  \
    \      }\n        prefixes.push(&string[i..j]);\n        i = j;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpn4j5yekt.rs:8:35\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n --> /tmp/tmpn4j5yekt.rs:8:48\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                                ^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn4j5yekt.rs:14:5\n\
    \   |\n2  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n14 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut s = string;\n    while !s.is_empty() {\n        prefix.push(s);\n\
    \        s = s.chars().next().unwrap();\n    }\n    prefix\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz3fsctqu.rs:7:13\n  |\n4 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n7 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut i = string.len();\n    while i > 0 {\n        prefix.push(&string[0..i]);\n\
    \        i -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppi5ufnuw.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    let mut i = 0;\n\
    \    while i < string.len() {\n        let mut j = i;\n        while j < string.len()\
    \ && string[j] == string[j + 1] {\n            j += 1; // skip duplicate\n   \
    \     }\n        prefixes.push(&string[i..j]);\n        i = j;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpezvj8kyt.rs:8:35\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n  =\
    \ help: the following other types implement trait `Index<Idx>`:\n            <String\
    \ as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n    \
    \        <String as Index<RangeInclusive<usize>>>\n            <String as Index<RangeTo<usize>>>\n\
    \            <String as Index<RangeToInclusive<usize>>>\n            <String as\
    \ Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n --> /tmp/tmpezvj8kyt.rs:8:48\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                                ^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpezvj8kyt.rs:14:5\n   |\n2  | fn\
    \ all_prefixes(string: String) -> Vec<String> {\n   |                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    14 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut s = string;\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        prefixes.push(s.subslice(i, i + 1));\n        i += 1;\n    }\n  \
    \  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `subslice` found for struct `String` in the\
    \ current scope\n --> /tmp/tmpac2db1gm.rs:7:25\n  |\n7 |         prefixes.push(s.subslice(i,\
    \ i + 1));\n  |                         ^^^^^^^^ method not found in `String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: -1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    while !string.is_empty()\
    \ {\n        prefixes.push(string.clone());\n        string = string.chars().next().unwrap().to_string();\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805269
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = String::new();\n        }\n    }\n    prefixes.push(current_prefix);\n   \
    \ prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmppap1hz36.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::new();\n    let mut len = string.len();\n\
    \    while len > 0 {\n        current.push_str(&string[..]);\n        prefixes.push(current);\n\
    \        len -= 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `current`\n --> /tmp/tmpn5dd30mc.rs:7:9\n\
    \  |\n4 |     let mut current = String::new();\n  |         ----------- move occurs\
    \ because `current` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         current.push_str(&string[..]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(current);\n  |   \
    \                    ------- value moved here, in previous iteration of loop\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push_str(&string[0..]);\n    \
    \    prefixes.push(prefix);\n        string = &string[1..];\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfy7r8d2k.rs:9:18\n  |\n5 |\
    \     let mut string = string.to_string();\n  |                      ------------------\
    \ expected due to this value\n...\n9 |         string = &string[1..];\n  |   \
    \               ^^^^^^^^^^^^ expected struct `String`, found `&str`\n  |\nhelp:\
    \ try using a conversion method\n  |\n9 |         string = (&string[1..]).to_string();\n\
    \  |                  +            +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        let mut current_char =\
    \ string.chars().next().unwrap();\n        while current_len > 0 {\n         \
    \   if current_char == current_prefix[current_prefix.len() - 1] {\n          \
    \      current_prefix.pop();\n                current_len -= 1;\n            }\
    \ else {\n                break;\n            }\n        }\n        prefixes.push(current_prefix);\n\
    \        current_prefix = String::new();\n    }\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpahi89rsv.rs:9:32\n\
    \  |\n9 |             if current_char == current_prefix[current_prefix.len() -\
    \ 1] {\n  |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut suffix = String::new();\n\
    \    let mut i = 1;\n    while i < string.len() {\n        prefix = prefix.to_owned()\
    \ + &string[i..i];\n        suffix = suffix.to_owned() + &string[i..i];\n    \
    \    i += 1;\n        prefixes.push(prefix);\n    }\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmps3x6lder.rs:8:18\n\
    \   |\n4  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n8  |         prefix = prefix.to_owned() + &string[i..i];\n   | \
    \                 ^^^^^^ value borrowed here after move\n...\n11 |         prefixes.push(prefix);\n\
    \   |                       ------ value moved here, in previous iteration of\
    \ loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut string = string.to_string();\n\
    \    while string.len() > 0 {\n        prefixes.push(&string[0..prefix_len]);\n\
    \        prefix_len += 1;\n        string = &string[prefix_len..];\n    }\n  \
    \  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbhht632y.rs:9:18\n  |\n5 |\
    \     let mut string = string.to_string();\n  |                      ------------------\
    \ expected due to this value\n...\n9 |         string = &string[prefix_len..];\n\
    \  |                  ^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&str`\n\
    \  |\nhelp: try using a conversion method\n  |\n9 |         string = (&string[prefix_len..]).to_string();\n\
    \  |                  +                     +++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbhht632y.rs:11:5\n   |\n2  | fn all_prefixes(string: String)\
    \ -> Vec<String> {\n   |                                    ----------- expected\
    \ `Vec<String>` because of return type\n...\n11 |     prefixes\n   |     ^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        let mut current_char =\
    \ string.chars().nth(current_len).unwrap();\n        current_prefix += current_char;\n\
    \        current_len -= 1;\n        prefixes.push(current_prefix);\n    }\n  \
    \  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp78u3jvoe.rs:8:27\n  |\n8 |\
    \         current_prefix += current_char;\n  |                           ^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpaa5a534g.rs:7:28\n  |\n7 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaa5a534g.rs:14:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut s = string;\n    while !s.is_empty() {\n        prefix.push(s);\n\
    \        s = s.chars().next().unwrap();\n    }\n    prefix\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpz3fsctqu.rs:7:13\n  |\n4 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n7 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    let mut current_len\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii() {\n\
    \            current_len.push_str(&c.to_string());\n        } else {\n       \
    \     current_prefix.push_str(&c.to_string());\n        }\n        if current_len\
    \ == current_prefix {\n            prefixes.push(current_prefix);\n          \
    \  current_len = String::new();\n            current_prefix = String::new();\n\
    \        }\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`',\
    \ /tmp/tmp5wumx_lt.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut i = 1;\n    while i < string.len() {\n        prefix.push(&string[i..]);\n\
    \        i += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxu6xsakd.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current_len = string.len();\n    while current_len >\
    \ 0 {\n        prefix.push(string.chars().take(current_len).collect::<String>());\n\
    \        current_len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmptx45v7nn.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = String::new();\n        }\n    }\n    prefixes.push(current_prefix);\n   \
    \ prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmppap1hz36.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix.clear();\n\
    \        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `current_prefix`\n --> /tmp/tmp1339a9w2.rs:7:13\n\
    \  |\n4 |     let mut current_prefix = String::new();\n  |         ------------------\
    \ move occurs because `current_prefix` has type `String`, which does not implement\
    \ the `Copy` trait\n...\n7 |             current_prefix.push(c);\n  |        \
    \     ^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n8 |         } else\
    \ {\n9 |             prefixes.push(current_prefix);\n  |                     \
    \      -------------- value moved here, in previous iteration of loop\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::new();\n    for c in string.chars()\
    \ {\n        current.push_str(&c.to_string());\n        if current.len() > 0 {\n\
    \            prefixes.push(current);\n            current = String::new();\n \
    \       }\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp05qd9lqy.rs:18:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut s = string;\n    while !s.is_empty() {\n        prefixes.push(s);\n\
    \        s = s.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n  \
    \  }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `s`\n --> /tmp/tmp6m9mqhvx.rs:7:13\n\
    \  |\n4 |     let mut s = string;\n  |         ----- move occurs because `s` has\
    \ type `String`, which does not implement the `Copy` trait\n5 |     while !s.is_empty()\
    \ {\n6 |         prefixes.push(s);\n  |                       - value moved here\n\
    7 |         s = s.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \  |             ^^^^^^^^^ value borrowed here after move\n  |\n  = note: borrow\
    \ occurs due to deref coercion to `str`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current_len = string.len();\n    while current_len >\
    \ 0 {\n        prefix.push(&string[0..current_len]);\n        current_len -= 1;\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi1gygulr.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::new();\n    let mut current_len\
    \ = 0;\n    for c in string.chars() {\n        if c.is_ascii() {\n           \
    \ current.push_str(&c.to_string());\n            current_len += 1;\n        }\
    \ else {\n            prefixes.push(current);\n            current = String::new();\n\
    \            current_len = 0;\n        }\n    }\n    prefixes.push(current);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp9cmdm7yn.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::new();\n    let mut current_len\
    \ = String::new();\n    let mut current_len_index = 0;\n    let mut current_len_index2\
    \ = 0;\n    let mut current_len_index3 = 0;\n    let mut current_len_index4 =\
    \ 0;\n    let mut current_len_index5 = 0;\n    let mut current_len_index6 = 0;\n\
    \    let mut current_len_index7 = 0;\n    let mut current_len_index8 = 0;\n  \
    \  let mut current_len_index9 = 0;\n    let mut current_len_index10 = 0;\n   \
    \ let mut current_len_index11 = 0;\n    let mut current_len_index12 = 0;\n   \
    \ let mut current_len_index13 = 0;\n    let mut current_len_index14 = 0;\n   \
    \ let mut current_len_index15 = 0;\n    let mut current_len_index16 = 0;\n   \
    \ let mut current_len_index17 = 0;\n    let mut current_len_index18 = 0;\n   \
    \ let mut current_len_index19 = 0;\n    let mut current_len_index20 = 0;\n   \
    \ let mut current_len_index21 = 0;\n    let mut current_len_index22 = 0;\n   \
    \ let mut current_len_index23 = 0;\n    let mut current_len_index24 = 0;\n   \
    \ let mut current_len_index25 = 0;\n    let mut current_len_index26 = 0;\n   \
    \ let mut current_len_index27 = 0;\n    let mut current_len_index28 = 0;\n   \
    \ let mut current_len_index29 = 0;\n    let mut current_len_index30 = 0;\n   \
    \ let mut current_len_index31 = 0;\n    let mut current_len_index32 = 0;\n   \
    \ let mut current_len_index33 = 0;\n    let mut current_len_index34 = 0;\n   \
    \ let mut current_len_index35 = 0;\n    let mut current_len_index36 = 0;\n   \
    \ let mut current_len_index37 = 0;\n    let mut current_len_index38 = 0;\n   \
    \ let mut current_len_index39 = 0;\n    let mut current_len_index40 = 0;\n   \
    \ let mut current_len_index41 = 0;\n    let mut current_len_index42 = 0;\n   \
    \ let mut current_len_index43 = 0;\n    let mut current_len_index44 = 0;\n   \
    \ let mut current_len_index45 = 0;\n    let mut current_len_index46 = 0;\n   \
    \ let mut current_len_index47 = 0;\n    let mut current_len_index48 = 0;\n   \
    \ let mut current_len_index49 = 0;\n    let mut current_len_index50 = 0;\n   \
    \ let mut current_len_index51 = 0;\n    let mut current_len_index52 = 0;\n   \
    \ let mut current_len_index53 = 0;\n    let mut current_len_index54 = 0;\n   \
    \ let mu\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw03_emfd.rs:60:11\n   |\n\
    60 |     let mu\n   |           ^ help: add `;` here\n61 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpw03_emfd.rs:2:36\n  |\n\
    2 | fn all_prefixes(string: String) -> Vec<String> {\n  |    ------------    \
    \                ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<String>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    while string.len()\
    \ > 0 {\n        prefixes.push(string.chars().take_while(|c| !c.is_ascii_lowercase()).collect::<String>());\n\
    \        string = string.chars().take_while(|c| !c.is_ascii_lowercase()).collect::<String>();\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmpfgd5i225.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefix.push(&string[prefix_len..]);\n  \
    \      prefix_len += 1;\n        current_len -= 1;\n    }\n    prefix\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqpa248le.rs:11:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut s = string;\n\
    \    while !s.is_empty() {\n        prefix.push_str(&s[0..]);\n        prefixes.push(prefix);\n\
    \        s = &s[1..];\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjp9sktyd.rs:9:13\n  |\n5 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = &s[1..];\n  |             ^^^^^^^ expected struct `String`,\
    \ found `&str`\n  |\nhelp: try using a conversion method\n  |\n9 |         s =\
    \ (&s[1..]).to_string();\n  |             +       +++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_length = 0;\n    let mut current_string =\
    \ \"\";\n    for c in string.chars() {\n        if prefix_length == 0 {\n    \
    \        current_string += &c.to_string();\n        } else {\n            if c.is_ascii_alphanumeric()\
    \ {\n                current_string += &c.to_string();\n            } else {\n\
    \                prefixes.push(current_string);\n                current_string\
    \ = &c.to_string();\n            }\n        }\n        prefix_length += 1;\n \
    \   }\n    prefixes.push(current_string);\n    prefixes\n}\n\nfn main() {\n  \
    \  let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n --> /tmp/tmp6x759r_a.rs:8:13\n  |\n8 |             current_string +=\
    \ &c.to_string();\n  |             --------------^^^^^^^^^^^^^^^^^^\n  |     \
    \        |\n  |             cannot use `+=` on type `&str`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp6x759r_a.rs:11:17\n\
    \   |\n11 |                 current_string += &c.to_string();\n   |          \
    \       --------------^^^^^^^^^^^^^^^^^^\n   |                 |\n   |       \
    \          cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6x759r_a.rs:20:5\n   |\n2  | fn all_prefixes(string: String) ->\
    \ Vec<String> {\n   |                                    ----------- expected\
    \ `Vec<String>` because of return type\n...\n20 |     prefixes\n   |     ^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0368.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut pos = 0;\n    while\
    \ pos < string.len() {\n        let mut char = string[pos];\n        if char ==\
    \ ' ' {\n            prefix.push(string[..pos]);\n            prefix_len += 1;\n\
    \            pos = pos + 1;\n        } else {\n            prefix.push(char);\n\
    \            prefix_len += 1;\n        }\n    }\n    prefix\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmps_3hkq6g.rs:7:24\n\
    \  |\n7 |         let mut char = string[pos];\n  |                        ^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n   --> /tmp/tmps_3hkq6g.rs:9:25\n    |\n9   |             prefix.push(string[..pos]);\n\
    \    |                    ---- ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |                    |\n    |                    required by a bound introduced\
    \ by this call\n    |\n    = help: the trait `Sized` is not implemented for `str`\n\
    note: required by a bound in `Vec::<T, A>::push`\n\nerror[E0277]: the size for\
    \ values of type `str` cannot be known at compilation time\n   --> /tmp/tmps_3hkq6g.rs:3:22\n\
    \    |\n3   |     let mut prefix = Vec::new();\n    |                      ^^^^^^^^\
    \ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized`\
    \ is not implemented for `str`\nnote: required by a bound in `Vec::<T>::new`\n\
    \nerror[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n   --> /tmp/tmps_3hkq6g.rs:3:22\n    |\n3   |     let mut prefix = Vec::new();\n\
    \    |                      ^^^ doesn't have a size known at compile-time\n  \
    \  |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bound in `Vec`\n\nerror[E0599]: the method `push` exists for struct `Vec<str>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmps_3hkq6g.rs:13:20\n \
    \  |\n13 |             prefix.push(char);\n   |                    ^^^^ method\
    \ cannot be "
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = String::new();\n        }\n    }\n    prefixes.push(current_prefix);\n   \
    \ prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp6usfitpk.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut s = string.chars();\n    let mut i = 0;\n    while\
    \ let Some(next) = s.next() {\n        if i == 0 {\n            prefixes.push(String::from(\"\
    \"));\n        }\n        prefixes.push(String::from(&string[i..]));\n       \
    \ i += 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"asdfgh\", \"sdfgh\", \"dfgh\", \"fgh\", \"gh\", \"h\"]`,\n right:\
    \ `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpr3m_5lkw.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpaa5a534g.rs:7:28\n  |\n7 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaa5a534g.rs:14:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current_len = string.len();\n    while current_len >\
    \ 0 {\n        prefix.push(&string[0..current_len]);\n        current_len -= 1;\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpi1gygulr.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::new();\n    let mut current_len\
    \ = String::new();\n    let mut current_len_index = 0;\n    let mut current_len_index2\
    \ = 0;\n    let mut current_len_index3 = 0;\n    let mut current_len_index4 =\
    \ 0;\n    let mut current_len_index5 = 0;\n    let mut current_len_index6 = 0;\n\
    \    let mut current_len_index7 = 0;\n    let mut current_len_index8 = 0;\n  \
    \  let mut current_len_index9 = 0;\n    let mut current_len_index10 = 0;\n   \
    \ let mut current_len_index11 = 0;\n    let mut current_len_index12 = 0;\n   \
    \ let mut current_len_index13 = 0;\n    let mut current_len_index14 = 0;\n   \
    \ let mut current_len_index15 = 0;\n    let mut current_len_index16 = 0;\n   \
    \ let mut current_len_index17 = 0;\n    let mut current_len_index18 = 0;\n   \
    \ let mut current_len_index19 = 0;\n    let mut current_len_index20 = 0;\n   \
    \ let mut current_len_index21 = 0;\n    let mut current_len_index22 = 0;\n   \
    \ let mut current_len_index23 = 0;\n    let mut current_len_index24 = 0;\n   \
    \ let mut current_len_index25 = 0;\n    let mut current_len_index26 = 0;\n   \
    \ let mut current_len_index27 = 0;\n    let mut current_len_index28 = 0;\n   \
    \ let mut current_len_index29 = 0;\n    let mut current_len_index30 = 0;\n   \
    \ let mut current_len_index31 = 0;\n    let mut current_len_index32 = 0;\n   \
    \ let mut current_len_index33 = 0;\n    let mut current_len_index34 = 0;\n   \
    \ let mut current_len_index35 = 0;\n    let mut current_len_index36 = 0;\n   \
    \ let mut current_len_index37 = 0;\n    let mut current_len_index38 = 0;\n   \
    \ let mut current_len_index39 = 0;\n    let mut current_len_index40 = 0;\n   \
    \ let mut current_len_index41 = 0;\n    let mut current_len_index42 = 0;\n   \
    \ let mut current_len_index43 = 0;\n    let mut current_len_index44 = 0;\n   \
    \ let mut current_len_index45 = 0;\n    let mut current_len_index46 = 0;\n   \
    \ let mut current_len_index47 = 0;\n    let mut current_len_index48 = 0;\n   \
    \ let mut current_len_index49 = 0;\n    let mut current_len_index50 = 0;\n   \
    \ let mut current_len_index51 = 0;\n    let mut current_len_index52 = 0;\n   \
    \ let mut current_len_index53 = 0;\n    let mut current_len_index54 = 0;\n   \
    \ let mu\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw03_emfd.rs:60:11\n   |\n\
    60 |     let mu\n   |           ^ help: add `;` here\n61 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpw03_emfd.rs:2:36\n  |\n\
    2 | fn all_prefixes(string: String) -> Vec<String> {\n  |    ------------    \
    \                ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<String>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::from(\"\");\n    let mut len =\
    \ string.len();\n    while len > 0 {\n        current.push_str(&string[..len]);\n\
    \        prefixes.push(current);\n        len -= 1;\n    }\n    prefixes\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `current`\n --> /tmp/tmpgpiz_cwt.rs:7:9\n\
    \  |\n4 |     let mut current = String::from(\"\");\n  |         ----------- move\
    \ occurs because `current` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n7 |         current.push_str(&string[..len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(current);\n  |   \
    \                    ------- value moved here, in previous iteration of loop\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpaa5a534g.rs:7:28\n  |\n7 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaa5a534g.rs:14:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut string = string.to_string();\n    let mut i = 0;\n  \
    \  while i < string.len() {\n        prefix.push(&string[i..]);\n        i +=\
    \ 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj8w0nff1.rs:10:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n10 |     prefix\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut s = string;\n    while !s.is_empty() {\n        prefixes.push(s);\n\
    \        s = s.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n  \
    \  }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `s`\n --> /tmp/tmp6m9mqhvx.rs:7:13\n\
    \  |\n4 |     let mut s = string;\n  |         ----- move occurs because `s` has\
    \ type `String`, which does not implement the `Copy` trait\n5 |     while !s.is_empty()\
    \ {\n6 |         prefixes.push(s);\n  |                       - value moved here\n\
    7 |         s = s.chars().take_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \  |             ^^^^^^^^^ value borrowed here after move\n  |\n  = note: borrow\
    \ occurs due to deref coercion to `str`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut prefix_len = string.len();\n    while prefix_len\
    \ > 0 {\n        prefix.push(&string[prefix_len..]);\n        prefix_len -= 1;\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp06jqbxqp.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    let mut i = 0;\n\
    \    while i < string.len() {\n        let mut j = i;\n        while j < string.len()\
    \ && string[j] == string[j + 1] {\n            j = j + 1;\n        }\n       \
    \ prefixes.push(&string[i..j]);\n        i = j;\n    }\n    prefixes\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp6u9qcugy.rs:8:35\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n  =\
    \ help: the following other types implement trait `Index<Idx>`:\n            <String\
    \ as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n    \
    \        <String as Index<RangeInclusive<usize>>>\n            <String as Index<RangeTo<usize>>>\n\
    \            <String as Index<RangeToInclusive<usize>>>\n            <String as\
    \ Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n --> /tmp/tmp6u9qcugy.rs:8:48\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                                ^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6u9qcugy.rs:14:5\n   |\n2  | fn\
    \ all_prefixes(string: String) -> Vec<String> {\n   |                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    14 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = string.len();\n    while prefix_len\
    \ > 0 {\n        prefixes.push(&string[..prefix_len]);\n        prefix_len -=\
    \ 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2sus7nc8.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefixes\n  |     ^^^^^^^^ expected struct `String`, found `&str`\n  |\n\
    \  = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefixes.push(&string[prefix_len..current_len]);\n\
    \        prefix_len += 1;\n        current_len -= 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ycz7gyg.rs:11:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut input = string.chars();\n    let mut current = String::new();\n\
    \    while let Some(next) = input.next() {\n        current = current.to_string()\
    \ + next.to_string();\n        prefixes.push(current);\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyzq4oicc.rs:7:41\n  |\n7 |\
    \         current = current.to_string() + next.to_string();\n  |             \
    \                            ^^^^^^^^^^^^^^^^\n  |                           \
    \              |\n  |                                         expected `&str`,\
    \ found struct `String`\n  |                                         help: consider\
    \ borrowing here: `&next.to_string()`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            if current_prefix.len()\
    \ > 0 {\n                prefixes.push(current_prefix);\n            }\n     \
    \       current_prefix = c.to_string();\n        } else {\n            current_prefix\
    \ += c.to_string();\n        }\n    }\n    if current_prefix.len() > 0 {\n   \
    \     prefixes.push(current_prefix);\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_c6_b4ua.rs:10:30\n   |\n\
    4  |     let mut current_prefix = \"\";\n   |                              --\
    \ expected due to this value\n...\n10 |             current_prefix = c.to_string();\n\
    \   |                              ^^^^^^^^^^^^^\n   |                       \
    \       |\n   |                              expected `&str`, found struct `String`\n\
    \   |                              help: consider borrowing here: `&c.to_string()`\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n\
    \  --> /tmp/tmp_c6_b4ua.rs:12:13\n   |\n12 |             current_prefix += c.to_string();\n\
    \   |             --------------^--^^^^^^^^^^^^^^\n   |             |        \
    \      |\n   |             |              `+` cannot be used to concatenate a\
    \ `&str` with a `String`\n   |             cannot use `+=` on type `&str`\n  \
    \ |\n   = note: string concatenation requires an owned `String` on the left\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp_c6_b4ua.rs:18:5\n   |\n2  | fn\
    \ all_prefixes(string: String) -> Vec<String> {\n   |                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    18 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0368.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::new();\n    let mut current_len\
    \ = String::new();\n    let mut current_len_index = 0;\n    let mut current_len_index2\
    \ = 0;\n    let mut current_len_index3 = 0;\n    let mut current_len_index4 =\
    \ 0;\n    let mut current_len_index5 = 0;\n    let mut current_len_index6 = 0;\n\
    \    let mut current_len_index7 = 0;\n    let mut current_len_index8 = 0;\n  \
    \  let mut current_len_index9 = 0;\n    let mut current_len_index10 = 0;\n   \
    \ let mut current_len_index11 = 0;\n    let mut current_len_index12 = 0;\n   \
    \ let mut current_len_index13 = 0;\n    let mut current_len_index14 = 0;\n   \
    \ let mut current_len_index15 = 0;\n    let mut current_len_index16 = 0;\n   \
    \ let mut current_len_index17 = 0;\n    let mut current_len_index18 = 0;\n   \
    \ let mut current_len_index19 = 0;\n    let mut current_len_index20 = 0;\n   \
    \ let mut current_len_index21 = 0;\n    let mut current_len_index22 = 0;\n   \
    \ let mut current_len_index23 = 0;\n    let mut current_len_index24 = 0;\n   \
    \ let mut current_len_index25 = 0;\n    let mut current_len_index26 = 0;\n   \
    \ let mut current_len_index27 = 0;\n    let mut current_len_index28 = 0;\n   \
    \ let mut current_len_index29 = 0;\n    let mut current_len_index30 = 0;\n   \
    \ let mut current_len_index31 = 0;\n    let mut current_len_index32 = 0;\n   \
    \ let mut current_len_index33 = 0;\n    let mut current_len_index34 = 0;\n   \
    \ let mut current_len_index35 = 0;\n    let mut current_len_index36 = 0;\n   \
    \ let mut current_len_index37 = 0;\n    let mut current_len_index38 = 0;\n   \
    \ let mut current_len_index39 = 0;\n    let mut current_len_index40 = 0;\n   \
    \ let mut current_len_index41 = 0;\n    let mut current_len_index42 = 0;\n   \
    \ let mut current_len_index43 = 0;\n    let mut current_len_index44 = 0;\n   \
    \ let mut current_len_index45 = 0;\n    let mut current_len_index46 = 0;\n   \
    \ let mut current_len_index47 = 0;\n    let mut current_len_index48 = 0;\n   \
    \ let mut current_len_index49 = 0;\n    let mut current_len_index50 = 0;\n   \
    \ let mut current_len_index51 = 0;\n    let mut current_len_index52 = 0;\n   \
    \ let mut current_len_index53 = 0;\n    let mut current_len_index54 = 0;\n   \
    \ let mu\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw03_emfd.rs:60:11\n   |\n\
    60 |     let mu\n   |           ^ help: add `;` here\n61 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpw03_emfd.rs:2:36\n  |\n\
    2 | fn all_prefixes(string: String) -> Vec<String> {\n  |    ------------    \
    \                ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<String>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current = String::from(\"\");\n    prefix.push(current);\n\
    \    for c in string.chars() {\n        current = current.to_string().push_str(&c.to_string());\n\
    \        prefix.push(current);\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpszzsk0sg.rs:7:19\n  |\n4 |\
    \     let mut current = String::from(\"\");\n  |                       ----------------\
    \ expected due to this value\n...\n7 |         current = current.to_string().push_str(&c.to_string());\n\
    \  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found `()`\n  |\nnote: method `push_str` modifies its receiver in-place\n\
    \ --> /tmp/tmpszzsk0sg.rs:7:39\n  |\n7 |         current = current.to_string().push_str(&c.to_string());\n\
    \  |                   ------------------- ^^^^^^^^ this call modifies its receiver\
    \ in-place\n  |                   |\n  |                   you probably want to\
    \ use this value after calling the method...\n  = note: ...instead of the `()`\
    \ output of method `push_str`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut s = string;\n    while\
    \ s.len() > 0 {\n        prefixes.push(s.to_string());\n        prefix_len +=\
    \ 1;\n        s = &s[prefix_len..];\n    }\n    prefixes\n}\n\nfn main() {\n \
    \   let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpx26sfl3_.rs:9:13\n  |\n5 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = &s[prefix_len..];\n  |             ^^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n  |\n\
    9 |         s = (&s[prefix_len..]).to_string();\n  |             +           \
    \     +++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut prefix_len = string.len();\n    while prefix_len\
    \ > 0 {\n        prefix.push(&string[prefix_len..]);\n        prefix_len -= 1;\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp06jqbxqp.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefixes.push(&string[..prefix_len]);\n\
    \        prefix_len += 1;\n        current_len -= 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvwtpbfk7.rs:11:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current_prefix = String::new();\n    let mut current_len\
    \ = String::new();\n    let mut current_len = string.len();\n    let mut i = 0;\n\
    \    while i < string.len() {\n        let mut j = i;\n        while j < string.len()\
    \ {\n            if string[j] == current_prefix[j] {\n                j += 1;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    let mut k = i;\n        while k < string.len() {\n            if string[k]\
    \ == current_prefix[k] {\n                k += 1;\n            } else {\n    \
    \            break;\n            }\n        }\n        let mut l = i;\n      \
    \  while l < string.len() {\n            if string[l] == current_prefix[l] {\n\
    \                l += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        let mut m = i;\n        while m < string.len() {\n\
    \            if string[m] == current_prefix[m] {\n                m += 1;\n  \
    \          } else {\n                break;\n            }\n        }\n      \
    \  let mut n = i;\n        while n < string.len() {\n            if string[n]\
    \ == current_prefix[n] {\n                n += 1;\n            } else {\n    \
    \            break;\n            }\n        }\n        let mut o = i;\n      \
    \  while o < string.len() {\n            if string[o] == current_prefix[o] {\n\
    \                o += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        let mut p = i;\n        while p < string.len() {\n\
    \            if string[p] == current_prefix[p] {\n                p += 1;\n  \
    \          } else {\n                break;\n            }\n        }\n      \
    \  let mut q = i;\n        while q < string.len() {\n            if string[q]\
    \ == current_prefix[q] {\n                q += 1;\n            } else {\n    \
    \            break;\n            }\n        }\n        let mut r = i;\n      \
    \  while r < string.len() {\n            if string[r] == current_prefix[r] {\n\
    \                r += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        let mut s = i;\n        while s < string.len() {\n\
    \            if string[s] == current_prefix[s] {\n                s += 1;\n  \
    \          } else {\n                break;\n            }\n        }\n      \
    \  let mut t = i;\n        while t < string.len() {\n            if string[t]\
    \ == current_prefix[t] {\n                t += 1;\n            } else {\n    \
    \            break;\n            }\n        }\n        let mut u = i;\n      \
    \  while u < string.len() {\n            if string[u] == current_prefix[u] {\n\
    \                u += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        let mut v = i;\n        while v < string.len() {\n\
    \            if string[v] == current_prefix[v] {\n                v += 1;\n  \
    \          } else {\n                break;\n            }\n        }\n      \
    \  let mut w = i;\n        while w < string.len() {\n\n}\n\nfn main() {\n    let\
    \ candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpi5lqgoc8.rs:123:3\n\
    \    |\n2   | fn all_prefixes(string: String) -> Vec<String> {\n    |        \
    \                                        - unclosed delimiter\n...\n8   |    \
    \ while i < string.len() {\n    |                            - unclosed delimiter\n\
    ...\n114 |         while w < string.len() {\n    |                           \
    \     - this delimiter might not be properly closed...\n115 | \n116 | }\n    |\
    \ - ...as it matches this but it has different indentation\n...\n123 | }\n   \
    \ |   ^\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n  -->\
    \ /tmp/tmpi5lqgoc8.rs:11:16\n   |\n11 |             if string[j] == current_prefix[j]\
    \ {\n   |                ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n\
    \   = help: the trait `Index<usize>` is not implemented for `String`\n   = help:\
    \ the following other types implement trait `Index<Idx>`:\n             <String\
    \ as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n   \
    \          <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpi5lqgoc8.rs:11:29\n\
    \   |\n11 |             if string[j] == current_prefix[j] {\n   |            \
    \                 ^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n  \
    \ |\n   = help: the trait `Index<usize>` is not implemented for `String`\n   =\
    \ help: the following other types implement trait `Index<Idx>`:\n            \
    \ <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpi5lqgoc8.rs:19:16\n   |\n19"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = string.len();\n    let mut current_len\
    \ = prefix_len;\n    while current_len > 0 {\n        prefixes.push(&string[..current_len]);\n\
    \        current_len -= 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi3pr6mra.rs:10:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n10 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current = String::from(\"\");\n    for c in string.chars()\
    \ {\n        current.push_str(&c.to_string());\n        if current.len() == string.len()\
    \ {\n            prefix.push(current);\n            current = String::from(\"\"\
    );\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmp3x55eaux.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut s = string;\n    while !s.is_empty() {\n        prefix.push(s);\n\
    \        s = &s[..];\n    }\n    prefix\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphwde1p1c.rs:7:13\n  |\n4 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n7 |         s = &s[..];\n  |             ^^^^^^ expected struct `String`,\
    \ found `&str`\n  |\nhelp: try using a conversion method\n  |\n7 |         s =\
    \ (&s[..]).to_string();\n  |             +      +++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut s = string;\n    while\
    \ !s.is_empty() {\n        prefix.push(s.to_string());\n        prefix_len +=\
    \ 1;\n        s = &s[prefix_len..];\n    }\n    prefix\n}\n\nfn main() {\n   \
    \ let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpis4fw8j2.rs:9:13\n  |\n5 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = &s[prefix_len..];\n  |             ^^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n  |\n\
    9 |         s = (&s[prefix_len..]).to_string();\n  |             +           \
    \     +++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut len = string.len();\n    while len > 0 {\n      \
    \  prefixes.push(&string[0..len]);\n        len -= 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk0qxfy_9.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefixes\n  |     ^^^^^^^^ expected struct `String`, found `&str`\n  |\n\
    \  = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    while string.len()\
    \ > 0 {\n        prefixes.push(string.clone());\n        string = string.to_string().chars().take_while(|c|\
    \ !c.is_ascii_lowercase()).collect();\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmp7twwjz5q.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut prefix_len = string.len();\n    let mut i = 0;\n\
    \    while i < prefix_len {\n        prefix.push(&string[i..]);\n        i +=\
    \ 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphh5l8w3l.rs:10:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n10 |     prefix\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut prefix_len = string.len();\n    while prefix_len > 0\
    \ {\n        prefix.push(&string[..prefix_len]);\n        prefix_len -= 1;\n \
    \   }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxbdy_03k.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = String::new();\n        }\n    }\n    prefixes.push(current_prefix);\n   \
    \ prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmppap1hz36.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut len = string.len();\n    while len > 0 {\n        prefix.push(&string[0..len]);\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_6ctxzf2.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut suffix = String::new();\n\
    \    let mut i = 1;\n    while i < string.len() {\n        prefix = prefix.to_owned()\
    \ + &string[i..];\n        suffix = suffix.to_owned() + &string[i..];\n      \
    \  prefixes.push(prefix);\n        i += 1;\n    }\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmpj1vyal3w.rs:8:18\n\
    \   |\n4  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n8  |         prefix = prefix.to_owned() + &string[i..];\n   |  \
    \                ^^^^^^^^^^^^^^^^^ value borrowed here after move\n9  |      \
    \   suffix = suffix.to_owned() + &string[i..];\n10 |         prefixes.push(prefix);\n\
    \   |                       ------ value moved here, in previous iteration of\
    \ loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefixes.push(&string[prefix_len..]);\n\
    \        prefix_len += 1;\n        current_len -= 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2bq5skhw.rs:11:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current = String::from(\"\");\n    for c in string.chars()\
    \ {\n        if current == \"\" {\n            prefix.push(c);\n        } else\
    \ {\n            prefix.push(current.chars().next().unwrap());\n            current\
    \ = c;\n        }\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2jx2i1_j.rs:10:23\n   |\n\
    4  |     let mut current = String::from(\"\");\n   |                       ----------------\
    \ expected due to this value\n...\n10 |             current = c;\n   |       \
    \                ^- help: try using a conversion method: `.to_string()`\n   |\
    \                       |\n   |                       expected struct `String`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2jx2i1_j.rs:13:5\n\
    \   |\n2  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n13 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `char`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<char>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut prefix_len = 0;\n    let mut pos = 0;\n    while pos\
    \ < string.len() {\n        let mut char = string[pos];\n        while !char.ascii_digit().unwrap().is_ascii()\
    \ {\n            char = char.next();\n        }\n        prefix.push(char.to_string());\n\
    \        prefix_len += 1;\n        pos += 1;\n    }\n    prefix.reverse();\n \
    \   prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmp4_gwpnrr.rs:7:24\n\
    \  |\n7 |         let mut char = string[pos];\n  |                        ^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n  |\n  = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n  = help: the following other types implement\
    \ trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n     \
    \       <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current = string.chars().enumerate().filter(|&(_, c)|\
    \ !c.is_ascii_lowercase()).collect::<Vec<_>>();\n    while current.len() > 0 {\n\
    \        let mut next = vec![];\n        for (i, c) in current.iter().enumerate()\
    \ {\n            if c.is_ascii_lowercase() {\n                prefix.push((&string[i\
    \ as usize], c));\n                next.push((&string[i as usize], c));\n    \
    \        }\n        }\n        current = next;\n    }\n    prefix\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_ascii_lowercase` found for reference\
    \ `&(usize, char)` in the current scope\n --> /tmp/tmpi34_a__r.rs:8:18\n  |\n\
    8 |             if c.is_ascii_lowercase() {\n  |                  ^^^^^^^^^^^^^^^^^^\
    \ method not found in `&(usize, char)`\n\nerror[E0277]: the type `String` cannot\
    \ be indexed by `usize`\n --> /tmp/tmpi34_a__r.rs:9:31\n  |\n9 |             \
    \    prefix.push((&string[i as usize], c));\n  |                             \
    \  ^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n  |\n  = help: the\
    \ trait `Index<usize>` is not implemented for `String`\n  = help: the following\
    \ other types implement trait `Index<Idx>`:\n            <String as Index<RangeFrom<usize>>>\n\
    \            <String as Index<RangeFull>>\n            <String as Index<RangeInclusive<usize>>>\n\
    \            <String as Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpi34_a__r.rs:10:29\n\
    \   |\n10 |                 next.push((&string[i as usize], c));\n   |       \
    \                      ^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n \
    \  = help: the following other types implement trait `Index<Idx>`:\n         \
    \    <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi34_a__r.rs:13:19\n\
    \   |\n4  |     let mut current = string.chars().enumerate().filter(|&(_, c)|\
    \ !c.is_ascii_lowercase()).collect::<Vec<_>>();\n   |                       ----------------------------------------------------------------------------------------\
    \ expected due to this value\n...\n13 |         current"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut string = string.to_string();\n    let mut i = 0;\n  \
    \  while i < string.len() {\n        let mut j = i;\n        while j < string.len()\
    \ && string[j] == string[j + 1] {\n            j += 1; // skip duplicates\n  \
    \      }\n        prefix.push(&string[i..j]);\n        i = j;\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpc3tctsr_.rs:8:35\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n  =\
    \ help: the following other types implement trait `Index<Idx>`:\n            <String\
    \ as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n    \
    \        <String as Index<RangeInclusive<usize>>>\n            <String as Index<RangeTo<usize>>>\n\
    \            <String as Index<RangeToInclusive<usize>>>\n            <String as\
    \ Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n --> /tmp/tmpc3tctsr_.rs:8:48\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                                ^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc3tctsr_.rs:14:5\n   |\n2  | fn\
    \ all_prefixes(string: String) -> Vec<String> {\n   |                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    14 |     prefix\n   |     ^^^^^^ expected struct `String`, found `&str`\n   |\n\
    \   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut s = string;\n    while !s.is_empty() {\n        prefixes.push(s);\n\
    \        s = s.chars().next().unwrap();\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk2wo9_18.rs:7:13\n  |\n4 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n7 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut prefix_len = 0;\n    let mut s = string;\n    while s.len()\
    \ > 0 {\n        prefix.push(s.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len += 1;\n        s = &s[prefix_len..];\n    }\n    prefix\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4ntmcil8.rs:9:13\n  |\n5 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n9 |         s = &s[prefix_len..];\n  |             ^^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found `&str`\n  |\nhelp: try using a conversion method\n  |\n\
    9 |         s = (&s[prefix_len..]).to_string();\n  |             +           \
    \     +++++++++++++\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    let mut i = 0;\n\
    \    while i < string.len() {\n        let mut j = i;\n        while j < string.len()\
    \ && string[j] == string[j + 1] {\n            j += 1; // skip duplicates\n  \
    \      }\n        prefixes.push(&string[i..j]);\n        i = j;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpn4j5yekt.rs:8:35\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n --> /tmp/tmpn4j5yekt.rs:8:48\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                                ^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn4j5yekt.rs:14:5\n\
    \   |\n2  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n14 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = String::new();\n        }\n    }\n    prefixes.push(current_prefix);\n   \
    \ prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp6usfitpk.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut current = String::new();\n    let mut current_len\
    \ = String::new();\n    let mut current_len_index = 0;\n    let mut current_len_index2\
    \ = 0;\n    let mut current_len_index3 = 0;\n    let mut current_len_index4 =\
    \ 0;\n    let mut current_len_index5 = 0;\n    let mut current_len_index6 = 0;\n\
    \    let mut current_len_index7 = 0;\n    let mut current_len_index8 = 0;\n  \
    \  let mut current_len_index9 = 0;\n    let mut current_len_index10 = 0;\n   \
    \ let mut current_len_index11 = 0;\n    let mut current_len_index12 = 0;\n   \
    \ let mut current_len_index13 = 0;\n    let mut current_len_index14 = 0;\n   \
    \ let mut current_len_index15 = 0;\n    let mut current_len_index16 = 0;\n   \
    \ let mut current_len_index17 = 0;\n    let mut current_len_index18 = 0;\n   \
    \ let mut current_len_index19 = 0;\n    let mut current_len_index20 = 0;\n   \
    \ let mut current_len_index21 = 0;\n    let mut current_len_index22 = 0;\n   \
    \ let mut current_len_index23 = 0;\n    let mut current_len_index24 = 0;\n   \
    \ let mut current_len_index25 = 0;\n    let mut current_len_index26 = 0;\n   \
    \ let mut current_len_index27 = 0;\n    let mut current_len_index28 = 0;\n   \
    \ let mut current_len_index29 = 0;\n    let mut current_len_index30 = 0;\n   \
    \ let mut current_len_index31 = 0;\n    let mut current_len_index32 = 0;\n   \
    \ let mut current_len_index33 = 0;\n    let mut current_len_index34 = 0;\n   \
    \ let mut current_len_index35 = 0;\n    let mut current_len_index36 = 0;\n   \
    \ let mut current_len_index37 = 0;\n    let mut current_len_index38 = 0;\n   \
    \ let mut current_len_index39 = 0;\n    let mut current_len_index40 = 0;\n   \
    \ let mut current_len_index41 = 0;\n    let mut current_len_index42 = 0;\n   \
    \ let mut current_len_index43 = 0;\n    let mut current_len_index44 = 0;\n   \
    \ let mut current_len_index45 = 0;\n    let mut current_len_index46 = 0;\n   \
    \ let mut current_len_index47 = 0;\n    let mut current_len_index48 = 0;\n   \
    \ let mut current_len_index49 = 0;\n    let mut current_len_index50 = 0;\n   \
    \ let mut current_len_index51 = 0;\n    let mut current_len_index52 = 0;\n   \
    \ let mut current_len_index53 = 0;\n    let mut current_len_index54 = 0;\n   \
    \ let mut \n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp6rkjyup5.rs:61:1\n\
    \   |\n61 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut i = string.len();\n    while i > 0 {\n        prefix.push(&string[..i]);\n\
    \        i -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphm37t6he.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: -1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut string = string.to_string();\n\
    \    while string.len() > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len += 1;\n        string = string.chars().take(prefix_len).collect::<String>();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976647
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut s = string;\n    while !s.is_empty() {\n        prefixes.push(s);\n\
    \        s = s.chars().next().unwrap();\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk2wo9_18.rs:7:13\n  |\n4 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n7 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c == c.to_ascii_lowercase() {\n            current_prefix += c.to_ascii_lowercase();\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = c.to_ascii_lowercase();\n        }\n    }\n    prefixes.push(current_prefix);\n\
    \    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n --> /tmp/tmpruynyi1e.rs:7:13\n  |\n7 |             current_prefix +=\
    \ c.to_ascii_lowercase();\n  |             --------------^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |             |\n  |             cannot use `+=` on type `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpruynyi1e.rs:10:30\n   |\n4  |     let mut current_prefix\
    \ = \"\";\n   |                              -- expected due to this value\n...\n\
    10 |             current_prefix = c.to_ascii_lowercase();\n   |              \
    \                ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpruynyi1e.rs:14:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut i = 1;\n   \
    \ while i < string.len() {\n        prefix = prefix.to_owned() + &string[i..];\n\
    \        prefixes.push(prefix);\n        i += 1;\n    }\n    prefixes\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpvf94pfnp.rs:7:18\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix = prefix.to_owned() + &string[i..];\n  |             \
    \     ^^^^^^^^^^^^^^^^^ value borrowed here after move\n8 |         prefixes.push(prefix);\n\
    \  |                       ------ value moved here, in previous iteration of loop\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut prefix_len = string.len();\n    while prefix_len\
    \ > 0 {\n        prefix.push(&string[prefix_len..]);\n        prefix_len -= 1;\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp06jqbxqp.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            if current_prefix.len() > 0 {\n               \
    \ prefixes.push(current_prefix);\n                current_prefix = String::new();\n\
    \            }\n        }\n    }\n    if current_prefix.len() > 0 {\n        prefixes.push(current_prefix);\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]`', /tmp/tmpjiqcns89.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut current = String::from(\"\");\n    prefix.push(current);\n\
    \    for c in string.chars() {\n        current = current.to_string().push_str(&c.to_string());\n\
    \        prefix.push(current);\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpszzsk0sg.rs:7:19\n  |\n4 |\
    \     let mut current = String::from(\"\");\n  |                       ----------------\
    \ expected due to this value\n...\n7 |         current = current.to_string().push_str(&c.to_string());\n\
    \  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct\
    \ `String`, found `()`\n  |\nnote: method `push_str` modifies its receiver in-place\n\
    \ --> /tmp/tmpszzsk0sg.rs:7:39\n  |\n7 |         current = current.to_string().push_str(&c.to_string());\n\
    \  |                   ------------------- ^^^^^^^^ this call modifies its receiver\
    \ in-place\n  |                   |\n  |                   you probably want to\
    \ use this value after calling the method...\n  = note: ...instead of the `()`\
    \ output of method `push_str`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    let mut i = 0;\n\
    \    while i < string.len() {\n        prefixes.push(&string[i..]);\n        i\
    \ += 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8d6imuay.rs:10:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n10 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut len = string.len();\n    while len > 0 {\n      \
    \  prefixes.push(&string[0..len]);\n        len -= 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk0qxfy_9.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefixes\n  |     ^^^^^^^^ expected struct `String`, found `&str`\n  |\n\
    \  = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: -1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    while !string.is_empty()\
    \ {\n        prefixes.push(string.clone());\n        string = string.chars().next().unwrap().to_string();\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805269
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut input = string.chars();\n    let mut current = String::new();\n\
    \    loop {\n        current.push(input.next().unwrap());\n        if current.len()\
    \ == input.len() {\n            prefixes.push(current);\n        }\n    }\n  \
    \  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for struct `Chars` in the current\
    \ scope\n --> /tmp/tmp3fx76jx0.rs:8:35\n  |\n8 |         if current.len() == input.len()\
    \ {\n  |                                   ^^^ method not found in `Chars<'_>`\n\
    \nwarning: unreachable expression\n  --> /tmp/tmp3fx76jx0.rs:12:5\n   |\n6  |\
    \ /     loop {\n7  | |         current.push(input.next().unwrap());\n8  | |  \
    \       if current.len() == input.len() {\n9  | |             prefixes.push(current);\n\
    10 | |         }\n11 | |     }\n   | |_____- any code following this expression\
    \ is unreachable\n12 |       prefixes\n   |       ^^^^^^^^ unreachable expression\n\
    \   |\n   = note: `#[warn(unreachable_code)]` on by default\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut len = string.len();\n    while len > 0 {\n        prefix.push(string.chars().take(len).collect::<String>());\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"asdfgh\", \"asdfg\", \"asdf\", \"asd\", \"as\", \"a\"]`,\n right: `[\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmpclntoqtx.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefixes.push(&string[prefix_len..current_len]);\n\
    \        prefix_len += 1;\n        current_len -= 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ycz7gyg.rs:11:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut len = string.len();\n    while len > 0 {\n        prefix.push(&string[..len]);\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwk83c5a7.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut string = string.to_string();\n\
    \    while !string.is_empty() {\n        prefix.push_str(&string[0..]);\n    \
    \    prefixes.push(prefix);\n        string = &string[1..];\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfy7r8d2k.rs:9:18\n  |\n5 |\
    \     let mut string = string.to_string();\n  |                      ------------------\
    \ expected due to this value\n...\n9 |         string = &string[1..];\n  |   \
    \               ^^^^^^^^^^^^ expected struct `String`, found `&str`\n  |\nhelp:\
    \ try using a conversion method\n  |\n9 |         string = (&string[1..]).to_string();\n\
    \  |                  +            +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut suffix = String::new();\n\
    \    let mut pos = 0;\n    let mut len = string.len();\n    while pos < len {\n\
    \        prefix = string.chars().take(pos).collect();\n        suffix = string.chars().skip(pos).take(len\
    \ - pos).collect();\n        prefixes.push(prefix.to_owned());\n        prefixes.push(suffix.to_owned());\n\
    \        pos += 1;\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"asdfgh\", \"a\", \"sdfgh\", \"as\", \"dfgh\", \"asd\", \"fgh\", \"\
    asdf\", \"gh\", \"asdfg\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]`', /tmp/tmpx6c2fcpa.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    for c in string.chars()\
    \ {\n        if !c.is_ascii_alphanumeric() {\n            continue;\n        }\n\
    \        prefix.push(c);\n        prefixes.push(prefix);\n        prefix = String::new();\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"]`,\n right: `[\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp3t3jj1ko.rs:19:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::new();\n    let mut current_len\
    \ = String::new();\n    let mut current_len_index = 0;\n    let mut current_len_index2\
    \ = 0;\n    let mut current_len_index3 = 0;\n    let mut current_len_index4 =\
    \ 0;\n    let mut current_len_index5 = 0;\n    let mut current_len_index6 = 0;\n\
    \    let mut current_len_index7 = 0;\n    let mut current_len_index8 = 0;\n  \
    \  let mut current_len_index9 = 0;\n    let mut current_len_index10 = 0;\n   \
    \ let mut current_len_index11 = 0;\n    let mut current_len_index12 = 0;\n   \
    \ let mut current_len_index13 = 0;\n    let mut current_len_index14 = 0;\n   \
    \ let mut current_len_index15 = 0;\n    let mut current_len_index16 = 0;\n   \
    \ let mut current_len_index17 = 0;\n    let mut current_len_index18 = 0;\n   \
    \ let mut current_len_index19 = 0;\n    let mut current_len_index20 = 0;\n   \
    \ let mut current_len_index21 = 0;\n    let mut current_len_index22 = 0;\n   \
    \ let mut current_len_index23 = 0;\n    let mut current_len_index24 = 0;\n   \
    \ let mut current_len_index25 = 0;\n    let mut current_len_index26 = 0;\n   \
    \ let mut current_len_index27 = 0;\n    let mut current_len_index28 = 0;\n   \
    \ let mut current_len_index29 = 0;\n    let mut current_len_index30 = 0;\n   \
    \ let mut current_len_index31 = 0;\n    let mut current_len_index32 = 0;\n   \
    \ let mut current_len_index33 = 0;\n    let mut current_len_index34 = 0;\n   \
    \ let mut current_len_index35 = 0;\n    let mut current_len_index36 = 0;\n   \
    \ let mut current_len_index37 = 0;\n    let mut current_len_index38 = 0;\n   \
    \ let mut current_len_index39 = 0;\n    let mut current_len_index40 = 0;\n   \
    \ let mut current_len_index41 = 0;\n    let mut current_len_index42 = 0;\n   \
    \ let mut current_len_index43 = 0;\n    let mut current_len_index44 = 0;\n   \
    \ let mut current_len_index45 = 0;\n    let mut current_len_index46 = 0;\n   \
    \ let mut current_len_index47 = 0;\n    let mut current_len_index48 = 0;\n   \
    \ let mut current_len_index49 = 0;\n    let mut current_len_index50 = 0;\n   \
    \ let mut current_len_index51 = 0;\n    let mut current_len_index52 = 0;\n   \
    \ let mut current_len_index53 = 0;\n    let mut current_len_index54 = 0;\n   \
    \ let mu\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw03_emfd.rs:60:11\n   |\n\
    60 |     let mu\n   |           ^ help: add `;` here\n61 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpw03_emfd.rs:2:36\n  |\n\
    2 | fn all_prefixes(string: String) -> Vec<String> {\n  |    ------------    \
    \                ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<String>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = String::new();\n        }\n    }\n    prefixes.push(current_prefix);\n   \
    \ prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp6usfitpk.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut i = 1;\n   \
    \ while i < string.len() {\n        prefix = prefix.to_owned() + &string[i..];\n\
    \        prefixes.push(prefix);\n        i += 1;\n    }\n    prefixes\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpvf94pfnp.rs:7:18\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix = prefix.to_owned() + &string[i..];\n  |             \
    \     ^^^^^^^^^^^^^^^^^ value borrowed here after move\n8 |         prefixes.push(prefix);\n\
    \  |                       ------ value moved here, in previous iteration of loop\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut s = string;\n    while !s.is_empty() {\n        prefixes.push(s);\n\
    \        s = s.chars().next().unwrap();\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk2wo9_18.rs:7:13\n  |\n4 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n7 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut input = string.chars();\n    while let Some(prefix)\
    \ = input.next() {\n        prefixes.push(prefix);\n    }\n    prefixes\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpttu66i26.rs:8:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    8 |     prefixes\n  |     ^^^^^^^^ expected struct `String`, found `char`\n  |\n\
    \  = note: expected struct `Vec<String>`\n             found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c == ' ' {\n            prefixes.push(current_prefix);\n     \
    \       current_prefix = \"\";\n        } else {\n            current_prefix.push(c);\n\
    \        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n}\n\nfn main()\
    \ {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n  --> /tmp/tmpo6rr1xn4.rs:10:28\n   |\n10 |             current_prefix.push(c);\n\
    \   |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpo6rr1xn4.rs:14:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut string = string.to_string();\n\
    \    loop {\n        prefix.push_str(&string);\n        prefixes.push(prefix);\n\
    \        if string.len() == 0 {\n            break;\n        }\n        string\
    \ = &string[1..];\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeb14cmfu.rs:12:18\n   |\n\
    5  |     let mut string = string.to_string();\n   |                      ------------------\
    \ expected due to this value\n...\n12 |         string = &string[1..];\n   | \
    \                 ^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n\
    help: try using a conversion method\n   |\n12 |         string = (&string[1..]).to_string();\n\
    \   |                  +            +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut s = string;\n    while !s.is_empty() {\n        prefixes.push(s);\n\
    \        s = s.chars().next().unwrap();\n    }\n    prefixes\n}\n\nfn main() {\n\
    \    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\"\
    )), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk2wo9_18.rs:7:13\n  |\n4 |\
    \     let mut s = string;\n  |                 ------ expected due to this value\n\
    ...\n7 |         s = s.chars().next().unwrap();\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n  |             |\n  |\
    \             expected struct `String`, found `char`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c == c.to_ascii_lowercase() {\n            current_prefix += c;\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0368]: binary assignment operation `+=` cannot be applied to type\
    \ `&str`\n --> /tmp/tmpatr4vrfb.rs:7:13\n  |\n7 |             current_prefix +=\
    \ c;\n  |             --------------^^^^^\n  |             |\n  |            \
    \ cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpatr4vrfb.rs:14:5\n\
    \   |\n2  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n14 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0368.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut string = string.to_string();\n\
    \    while string.len() > 0 {\n        prefixes.push(&string[0..prefix_len]);\n\
    \        prefix_len += 1;\n        string = &string[prefix_len..];\n    }\n  \
    \  prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpbhht632y.rs:9:18\n  |\n5 |\
    \     let mut string = string.to_string();\n  |                      ------------------\
    \ expected due to this value\n...\n9 |         string = &string[prefix_len..];\n\
    \  |                  ^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&str`\n\
    \  |\nhelp: try using a conversion method\n  |\n9 |         string = (&string[prefix_len..]).to_string();\n\
    \  |                  +                     +++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbhht632y.rs:11:5\n   |\n2  | fn all_prefixes(string: String)\
    \ -> Vec<String> {\n   |                                    ----------- expected\
    \ `Vec<String>` because of return type\n...\n11 |     prefixes\n   |     ^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut i = 1;\n   \
    \ while i < string.len() {\n        prefix = prefix.to_owned() + &string[i..];\n\
    \        prefixes.push(prefix);\n        i += 1;\n    }\n    prefixes\n}\n\nfn\
    \ main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpvf94pfnp.rs:7:18\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix = prefix.to_owned() + &string[i..];\n  |             \
    \     ^^^^^^^^^^^^^^^^^ value borrowed here after move\n8 |         prefixes.push(prefix);\n\
    \  |                       ------ value moved here, in previous iteration of loop\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut prefix_len = string.len();\n    while prefix_len > 0\
    \ {\n        prefix.push(&string[prefix_len..]);\n        prefix_len -= 1;\n \
    \   }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppdc4ki7z.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefixes.push(&string[..prefix_len]);\n\
    \        prefix_len += 1;\n        current_len -= 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvwtpbfk7.rs:11:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefixes.push(&string[..prefix_len]);\n\
    \        prefix_len += 1;\n        current_len -= 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvwtpbfk7.rs:11:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut len = string.len();\n    while len > 0 {\n        prefix.push(&string[0..len]);\n\
    \        len -= 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_6ctxzf2.rs:9:5\n  |\n2 |\
    \ fn all_prefixes(string: String) -> Vec<String> {\n  |                      \
    \              ----------- expected `Vec<String>` because of return type\n...\n\
    9 |     prefix\n  |     ^^^^^^ expected struct `String`, found `&str`\n  |\n \
    \ = note: expected struct `Vec<String>`\n             found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        current.push_str(&string[..current_len]);\n\
    \        prefixes.push(current);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `current`\n --> /tmp/tmpa5ymd2hp.rs:7:9\n\
    \  |\n4 |     let mut current = String::new();\n  |         ----------- move occurs\
    \ because `current` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         current.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(current);\n  |   \
    \                    ------- value moved here, in previous iteration of loop\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            current_prefix.push(c);\n\
    \        } else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = \"\";\n        }\n    }\n    prefixes.push(current_prefix);\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpkxs86dpw.rs:7:28\n  |\n7 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkxs86dpw.rs:14:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n14 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut string = string.to_string();\n    let mut i = 0;\n\
    \    while i < string.len() {\n        let mut j = i;\n        while j < string.len()\
    \ && string[j] == string[j + 1] {\n            j += 1; // skip duplicate\n   \
    \     }\n        prefixes.push(&string[i..j]);\n        i = j;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpezvj8kyt.rs:8:35\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                   ^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \  |\n  = help: the trait `Index<usize>` is not implemented for `String`\n  =\
    \ help: the following other types implement trait `Index<Idx>`:\n            <String\
    \ as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n    \
    \        <String as Index<RangeInclusive<usize>>>\n            <String as Index<RangeTo<usize>>>\n\
    \            <String as Index<RangeToInclusive<usize>>>\n            <String as\
    \ Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n --> /tmp/tmpezvj8kyt.rs:8:48\n\
    \  |\n8 |         while j < string.len() && string[j] == string[j + 1] {\n  |\
    \                                                ^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpezvj8kyt.rs:14:5\n   |\n2  | fn\
    \ all_prefixes(string: String) -> Vec<String> {\n   |                        \
    \            ----------- expected `Vec<String>` because of return type\n...\n\
    14 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    let mut current_len\
    \ = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            current_len += c.to_string();\n        } else {\n           \
    \ current_len += c.to_ascii_lowercase();\n        }\n        current_prefix +=\
    \ c.to_string();\n        if current_len == string.len() {\n            prefixes.push(current_prefix);\n\
    \            current_len = String::new();\n            current_prefix = String::new();\n\
    \        }\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp2c0v7pda.rs:8:28\n  |\n8 |\
    \             current_len += c.to_string();\n  |                            ^^^^^^^^^^^^^\n\
    \  |                            |\n  |                            expected `&str`,\
    \ found struct `String`\n  |                            help: consider borrowing\
    \ here: `&c.to_string()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2c0v7pda.rs:10:28\n\
    \   |\n10 |             current_len += c.to_ascii_lowercase();\n   |         \
    \                   ^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2c0v7pda.rs:12:27\n   |\n12 |         current_prefix\
    \ += c.to_string();\n   |                           ^^^^^^^^^^^^^\n   |      \
    \                     |\n   |                           expected `&str`, found\
    \ struct `String`\n   |                           help: consider borrowing here:\
    \ `&c.to_string()`\n\nerror[E0277]: can't compare `String` with `usize`\n  -->\
    \ /tmp/tmp2c0v7pda.rs:13:24\n   |\n13 |         if current_len == string.len()\
    \ {\n   |                        ^^ no implementation for `String == usize`\n\
    \   |\n   = help: the trait `PartialEq<usize>` is not implemented for `String`\n\
    \   = help: the following other types implement trait `PartialEq<Rhs>`:\n    \
    \         <&'a str as PartialEq<OsString>>\n             <&'a str as PartialEq<String>>\n\
    \             <&'b str as PartialEq<Cow<'a, str>>>\n             <String as PartialEq<&'a\
    \ str>>\n             <String as PartialEq<Cow<'a, str>>>\n             <String\
    \ as PartialEq<str>>\n             <String as PartialEq>\n             <str as\
    \ PartialEq<Cow<'a, str>>>\n           and 4 others\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefix.push(string.chars().take(prefix_len).collect::<String>());\n\
    \        prefix_len += 1;\n        current_len -= 1;\n    }\n    prefix\n}\n\n\
    fn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\", \"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"]`,\n right: `[\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]`', /tmp/tmp0ecz6fhq.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut string = string.to_string();\n\
    \    while string.len() > 0 {\n        let mut i = prefix_len;\n        while\
    \ string.len() > i {\n            prefixes.push(&string[i..]);\n            i\
    \ += 1;\n        }\n        prefix_len += 1;\n        string = &string[prefix_len..];\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3i756lt0.rs:13:18\n   |\n\
    5  |     let mut string = string.to_string();\n   |                      ------------------\
    \ expected due to this value\n...\n13 |         string = &string[prefix_len..];\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\nhelp: try using a conversion method\n   |\n13 |         string = (&string[prefix_len..]).to_string();\n\
    \   |                  +                     +++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3i756lt0.rs:15:5\n   |\n2  | fn all_prefixes(string: String)\
    \ -> Vec<String> {\n   |                                    ----------- expected\
    \ `Vec<String>` because of return type\n...\n15 |     prefixes\n   |     ^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut string = string.to_string();\n\
    \    loop {\n        prefix.push_str(&string);\n        prefixes.push(prefix);\n\
    \        if string.len() == 0 {\n            break;\n        }\n        string\
    \ = &string[1..];\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeb14cmfu.rs:12:18\n   |\n\
    5  |     let mut string = string.to_string();\n   |                      ------------------\
    \ expected due to this value\n...\n12 |         string = &string[1..];\n   | \
    \                 ^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n\
    help: try using a conversion method\n   |\n12 |         string = (&string[1..]).to_string();\n\
    \   |                  +            +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut len = string.len();\n    let mut i = 0;\n    while i\
    \ < len {\n        prefix.push(string.chars().nth(i).unwrap());\n        i +=\
    \ 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n\
    \    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq8q5sudd.rs:10:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n10 |     prefix\n   |     ^^^^^^ expected struct `String`, found `char`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<char>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut suffix = String::new();\n\
    \    let mut i = 1;\n    while i < string.len() {\n        prefix = prefix.to_owned()\
    \ + &string[i..];\n        suffix = suffix.to_owned() + &string[i..];\n      \
    \  if prefixes.contains(&prefix) {\n            i += 1;\n            continue;\n\
    \        }\n        prefixes.push(prefix);\n        i += 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmpx6to138h.rs:8:18\n\
    \   |\n4  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n8  |         prefix = prefix.to_owned() + &string[i..];\n   |  \
    \       ------   ^^^^^^^^^^^^^^^^^ value borrowed here after move\n   |      \
    \   |\n   |         this reinitialization might get skipped\n...\n14 |       \
    \  prefixes.push(prefix);\n   |                       ------ value moved here,\
    \ in previous iteration of loop\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = vec![];\n    let mut s = string.to_string();\n    while !s.is_empty() {\n\
    \        prefix.push(s);\n        s = s.chars().next().unwrap().to_string();\n\
    \    }\n    prefix\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `s`\n --> /tmp/tmpxmded26x.rs:7:13\n\
    \  |\n4 |     let mut s = string.to_string();\n  |         ----- move occurs because\
    \ `s` has type `String`, which does not implement the `Copy` trait\n5 |     while\
    \ !s.is_empty() {\n6 |         prefix.push(s);\n  |                     - value\
    \ moved here\n7 |         s = s.chars().next().unwrap().to_string();\n  |    \
    \         ^^^^^^^^^ value borrowed here after move\n  |\n  = note: borrow occurs\
    \ due to deref coercion to `str`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut string = string.to_string();\n\
    \    loop {\n        prefix.push_str(&string);\n        prefixes.push(prefix);\n\
    \        if string.len() == 0 {\n            break;\n        }\n        string\
    \ = &string[1..];\n    }\n    prefixes\n}\n\nfn main() {\n    let candidate =\
    \ all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeb14cmfu.rs:12:18\n   |\n\
    5  |     let mut string = string.to_string();\n   |                      ------------------\
    \ expected due to this value\n...\n12 |         string = &string[1..];\n   | \
    \                 ^^^^^^^^^^^^ expected struct `String`, found `&str`\n   |\n\
    help: try using a conversion method\n   |\n12 |         string = (&string[1..]).to_string();\n\
    \   |                  +            +++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    for c in string.chars() {\n\
    \        if prefix_len > 0 {\n            prefix.push(&string[prefix_len..prefix_len\
    \ + c.len_utf8()]);\n        }\n        prefix.push(c.to_ascii_lowercase());\n\
    \        prefix_len += c.len_utf8();\n    }\n    prefix\n}\n\nfn main() {\n  \
    \  let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\")),\
    \ vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphpshsgiq.rs:9:21\n  |\n9 |\
    \         prefix.push(c.to_ascii_lowercase());\n  |                     ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphpshsgiq.rs:12:5\n\
    \   |\n2  | fn all_prefixes(string: String) -> Vec<String> {\n   |           \
    \                         ----------- expected `Vec<String>` because of return\
    \ type\n...\n12 |     prefix\n   |     ^^^^^^ expected struct `String`, found\
    \ `&str`\n   |\n   = note: expected struct `Vec<String>`\n              found\
    \ struct `Vec<&str>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut current_len = string.len();\n\
    \    while current_len > 0 {\n        prefixes.push(&string[prefix_len..current_len]);\n\
    \        prefix_len += 1;\n        current_len -= 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ycz7gyg.rs:11:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefixes\n   |     ^^^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 101
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = String::new();\n    for c in string.chars()\
    \ {\n        if c.is_ascii() {\n            current_prefix.push(c);\n        }\
    \ else {\n            prefixes.push(current_prefix);\n            current_prefix\
    \ = String::new();\n        }\n    }\n    prefixes.push(current_prefix);\n   \
    \ prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"\"]`,\n right: `[]`', /tmp/tmp6lb81kpy.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659976642
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut suffix = String::new();\n\
    \    let mut i = 0;\n    while i < string.len() {\n        prefix = prefix.to_owned()\
    \ + &string[i];\n        suffix = suffix.to_owned() + &string[i + string.len()];\n\
    \        if let Some(prefix) = prefix.strip_prefix() {\n            prefixes.push(prefix);\n\
    \        }\n        if let Some(suffix) = suffix.strip_suffix() {\n          \
    \  prefixes.push(suffix);\n        }\n        i += 1;\n    }\n    prefixes\n}\n\
    \nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n --> /tmp/tmpesw7xgcv.rs:8:39\n\
    \  |\n8 |         prefix = prefix.to_owned() + &string[i];\n  |              \
    \                         ^^^^^^^^^ `String` cannot be indexed by `usize`\n  |\n\
    \  = help: the trait `Index<usize>` is not implemented for `String`\n  = help:\
    \ the following other types implement trait `Index<Idx>`:\n            <String\
    \ as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n    \
    \        <String as Index<RangeInclusive<usize>>>\n            <String as Index<RangeTo<usize>>>\n\
    \            <String as Index<RangeToInclusive<usize>>>\n            <String as\
    \ Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n --> /tmp/tmpesw7xgcv.rs:9:39\n\
    \  |\n9 |         suffix = suffix.to_owned() + &string[i + string.len()];\n  |\
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n  |\n  = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n  = help: the following other types implement trait `Index<Idx>`:\n\
    \            <String as Index<RangeFrom<usize>>>\n            <String as Index<RangeFull>>\n\
    \            <String as Index<RangeInclusive<usize>>>\n            <String as\
    \ Index<RangeTo<usize>>>\n            <String as Index<RangeToInclusive<usize>>>\n\
    \            <String as Index<std::ops::Range<usize>>>\n            <str as Index<I>>\n\
    \nerror[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpesw7xgcv.rs:10:38\n     |\n10   |         if let Some(prefix)\
    \ = prefix.strip_prefix() {\n     |                                      ^^^^^^^^^^^^-\
    \ supplied 0 arguments\n     |                                      |\n     |\
    \                                      expected 1 argument\n     |\nnote: associated\
    \ function defined here\n\nerror[E0061]: this function takes 1 argument but 0\
    \ arguments were supplied\n    --> /tmp/tmpesw7xgcv.rs:13:38\n     |\n13   | \
    \        if let Some(suffix) = suffix.strip_suffix() {\n     |                "
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut suffix = String::new();\n\
    \    let mut current_len = string.len();\n    while current_len > 0 {\n      \
    \  prefix.push_str(&string[..current_len]);\n        suffix.push_str(&string[current_len..]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n  --> /tmp/tmpe99ns1lp.rs:8:9\n\
    \   |\n4  |     let mut prefix = String::new();\n   |         ---------- move\
    \ occurs because `prefix` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n8  |         prefix.push_str(&string[..current_len]);\n   |    \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n\
    9  |         suffix.push_str(&string[current_len..]);\n10 |         prefixes.push(prefix);\n\
    \   |                       ------ value moved here, in previous iteration of\
    \ loop\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut current_prefix = \"\";\n    for c in string.chars()\
    \ {\n        if c.is_ascii_alphanumeric() {\n            current_prefix.push(c);\n\
    \        } else {\n            if current_prefix.len() > 0 {\n               \
    \ prefixes.push(current_prefix);\n                current_prefix = \"\";\n   \
    \         }\n        }\n    }\n    if current_prefix.len() > 0 {\n        prefixes.push(current_prefix);\n\
    \    }\n    prefixes\n}\n\nfn main() {\n    let candidate = all_prefixes;\n  \
    \  assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"\
    asdfgh\")), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"\
    ), String::from(\"asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n\
    \    assert_eq!(candidate(String::from(\"WWW\")), vec![String::from(\"W\"), String::from(\"\
    WW\"), String::from(\"WWW\")]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push` found for reference `&str` in the\
    \ current scope\n --> /tmp/tmpey1m2m2p.rs:7:28\n  |\n7 |             current_prefix.push(c);\n\
    \  |                            ^^^^ method not found in `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpey1m2m2p.rs:18:5\n   |\n2  | fn all_prefixes(string:\
    \ String) -> Vec<String> {\n   |                                    -----------\
    \ expected `Vec<String>` because of return type\n...\n18 |     prefixes\n   |\
    \     ^^^^^^^^ expected struct `String`, found `&str`\n   |\n   = note: expected\
    \ struct `Vec<String>`\n              found struct `Vec<&str>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefix\
    \ = Vec::new();\n    let mut prefix_len = 0;\n    let mut i = 0;\n    while i\
    \ < string.len() {\n        prefix.push(&string[i..]);\n        i += 1;\n    \
    \    prefix_len += 1;\n    }\n    prefix\n}\n\nfn main() {\n    let candidate\
    \ = all_prefixes;\n    assert_eq!(candidate(String::from(\"\")), Vec::<String>::new());\n\
    \    assert_eq!(candidate(String::from(\"asdfgh\")), vec![String::from(\"a\"),\
    \ String::from(\"as\"), String::from(\"asd\"), String::from(\"asdf\"), String::from(\"\
    asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp875qij42.rs:11:5\n   |\n\
    2  | fn all_prefixes(string: String) -> Vec<String> {\n   |                  \
    \                  ----------- expected `Vec<String>` because of return type\n\
    ...\n11 |     prefix\n   |     ^^^^^^ expected struct `String`, found `&str`\n\
    \   |\n   = note: expected struct `Vec<String>`\n              found struct `Vec<&str>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659976641
- exit_code: 1
  program: "/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfn all_prefixes(string: String) -> Vec<String> {\n    let mut prefixes\
    \ = Vec::new();\n    let mut prefix = String::new();\n    let mut current_len\
    \ = string.len();\n    while current_len > 0 {\n        prefix.push_str(&string[..current_len]);\n\
    \        prefixes.push(prefix);\n        current_len -= 1;\n    }\n    prefixes\n\
    }\n\nfn main() {\n    let candidate = all_prefixes;\n    assert_eq!(candidate(String::from(\"\
    \")), Vec::<String>::new());\n    assert_eq!(candidate(String::from(\"asdfgh\"\
    )), vec![String::from(\"a\"), String::from(\"as\"), String::from(\"asd\"), String::from(\"\
    asdf\"), String::from(\"asdfg\"), String::from(\"asdfgh\")]);\n    assert_eq!(candidate(String::from(\"\
    WWW\")), vec![String::from(\"W\"), String::from(\"WW\"), String::from(\"WWW\"\
    )]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `prefix`\n --> /tmp/tmpgighqjd2.rs:7:9\n\
    \  |\n4 |     let mut prefix = String::new();\n  |         ---------- move occurs\
    \ because `prefix` has type `String`, which does not implement the `Copy` trait\n\
    ...\n7 |         prefix.push_str(&string[..current_len]);\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ value borrowed here after move\n8 |         prefixes.push(prefix);\n  |    \
    \                   ------ value moved here, in previous iteration of loop\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659976641
