{
  "name": "mbpp_630_get_coordinates",
  "language": "lua",
  "prompt": "-- Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nlocal function get_coordinates(test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_coordinates\n    lu.assertEquals(candidate({3, 4}), {{2, 3}, {2, 4}, {2, 5}, {3, 3}, {3, 4}, {3, 5}, {4, 3}, {4, 4}, {4, 5}})\n    lu.assertEquals(candidate({4, 5}), {{3, 4}, {3, 5}, {3, 6}, {4, 4}, {4, 5}, {4, 6}, {5, 4}, {5, 5}, {5, 6}})\n    lu.assertEquals(candidate({5, 6}), {{4, 5}, {4, 6}, {4, 7}, {5, 5}, {5, 6}, {5, 7}, {6, 5}, {6, 6}, {6, 7}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local x, y = test_tup[1], test_tup[2]\n  local adj_coords = {}\n  for i = -1, 1 do\n    for j = -1, 1 do\n      if i ~= 0 or j ~= 0 then\n        table.insert(adj_coords, {x + i, y + j})\n      end\n    end\n  end\n  return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coordinates = {\n\t\t{x-1, y-1},\n\t\t{x, y-1},\n\t\t{x+1, y-1},\n\t\t{x-1, y},\n\t\t{x+1, y},\n\t\t{x-1, y+1},\n\t\t{x, y+1},\n\t\t{x+1, y+1}\n\t}\n\treturn coordinates\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coordinates = {\n\t\t{x - 1, y - 1},\n\t\t{x, y - 1},\n\t\t{x + 1, y - 1},\n\t\t{x - 1, y},\n\t\t{x + 1, y},\n\t\t{x - 1, y + 1},\n\t\t{x, y + 1},\n\t\t{x + 1, y + 1}\n\t}\n\treturn coordinates\nend",
    "    local test_x, test_y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {test_x - 1, test_y},\n        {test_x + 1, test_y},\n        {test_x, test_y - 1},\n        {test_x, test_y + 1}\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y - 1},\n        {x, y - 1},\n        {x + 1, y - 1},\n        {x - 1, y},\n        {x + 1, y},\n        {x - 1, y + 1},\n        {x, y + 1},\n        {x + 1, y + 1}\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x+1, y},\n        {x-1, y},\n        {x, y+1},\n        {x, y-1}\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y-1}, {x, y-1}, {x+1, y-1},\n        {x-1, y}, {x+1, y},\n        {x-1, y+1}, {x, y+1}, {x+1, y+1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if not (i == 0 and j == 0) then\n                table.insert(coords, {x + i, y + j})\n            end\n        end\n    end\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y + 1},\n        {x, y - 1},\n        {x + 1, y},\n        {x - 1, y},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1},\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal adj_coords = {\n\t\t{x, y - 1},\n\t\t{x + 1, y},\n\t\t{x, y + 1},\n\t\t{x - 1, y}\n\t}\n\treturn adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y-1},\n        {x-1, y},\n        {x-1, y+1},\n        {x, y-1},\n        {x, y+1},\n        {x+1, y-1},\n        {x+1, y},\n        {x+1, y+1}\n    }\nend",
    "\tlocal tup_x = test_tup[1]\n\tlocal tup_y = test_tup[2]\n\tlocal tup_z = test_tup[3]\n\tlocal tup_w = test_tup[4]\n\tlocal tup_h = test_tup[5]\n\tlocal tup_d = test_tup[6]\n\tlocal tup_r = test_tup[7]\n\tlocal tup_g = test_tup[8]\n\tlocal tup_b = test_tup[9]\n\tlocal tup_a = test_tup[10]\n\tlocal tup_s = test_tup[11]\n\tlocal tup_t = test_tup[12]\n\tlocal tup_u = test_tup[13]\n\tlocal tup_v = test_tup[14]\n\tlocal tup_n = test_tup[15]\n\tlocal tup_m = test_tup[16]\n\tlocal tup_o = test_tup[17]\n\tlocal tup_p = test_tup[18]\n\tlocal tup_q = test_tup[19]\n\tlocal tup_r = test_tup[20]\n\tlocal tup_s = test_tup[21]\n\tlocal tup_t = test_tup[22]\n\tlocal tup_u = test_tup[23]\n\tlocal tup_v = test_tup[24]\n\tlocal tup_w = test_tup[25]\n\tlocal tup_x = test_tup[26]\n\tlocal tup_y = test_tup[27]\n\tlocal tup_z = test_tup[28]\n\tlocal tup_a = test_tup[29]\n\tlocal tup_b = test_tup[30]\n\tlocal tup_c = test_tup[31]\n\tlocal tup_d = test_tup[32]\n\tlocal tup_e = test_tup[33]\n\tlocal tup_f = test_tup[34]\n\t",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local tup = {x = test_tup.x, y = test_tup.y}\n    local coordinates = {}\n    for i = 1, 8 do\n        table.insert(coordinates, {x = tup.x, y = tup.y})\n        if i % 2 == 0 then\n            tup.x = tup.x + 1\n        else\n            tup.y = tup.y + 1\n        end\n    end\n    return coordinates\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal adj_coords = {\n\t\t{x, y - 1},\n\t\t{x + 1, y},\n\t\t{x, y + 1},\n\t\t{x - 1, y}\n\t}\n\treturn adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x, y + 1},\n        {x, y - 1},\n        {x + 1, y},\n        {x - 1, y},\n        {x + 1, y + 1},\n        {x - 1, y - 1},\n        {x + 1, y - 1},\n        {x - 1, y + 1}\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x-1, y},\n        {x+1, y},\n        {x, y-1},\n        {x, y+1},\n    }\n    return coords\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "  local x, y = test_tup[1], test_tup[2]\n  local coords = {\n    {x - 1, y - 1},\n    {x, y - 1},\n    {x + 1, y - 1},\n    {x - 1, y},\n    {x + 1, y},\n    {x - 1, y + 1},\n    {x, y + 1},\n    {x + 1, y + 1}\n  }\n  return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x, y - 1},\n        {x + 1, y},\n        {x, y + 1},\n        {x - 1, y},\n    }\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y-1},\n        {x, y+1},\n        {x-1, y},\n        {x+1, y},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x-1, y-1}, {x, y-1}, {x+1, y-1},\n        {x-1, y}, {x+1, y},\n        {x-1, y+1}, {x, y+1}, {x+1, y+1}\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y-1},\n        {x, y+1},\n        {x-1, y},\n        {x+1, y},\n    }\nend",
    "    local tup = {test_tup[1], test_tup[2]}\n    local coords = {}\n    for i = 1, #tup do\n        local temp = tup[i]\n        tup[i] = temp - 1\n        table.insert(coords, {tup[1], tup[2]})\n        tup[i] = temp + 1\n        table.insert(coords, {tup[1], tup[2]})\n        tup[i] = temp\n    end\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y - 1},\n        {x + 1, y},\n        {x, y + 1},\n        {x - 1, y}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "  local x, y = test_tup[1], test_tup[2]\n  return {\n    {x, y-1},\n    {x+1, y-1},\n    {x+1, y},\n    {x+1, y+1},\n    {x, y+1},\n    {x-1, y+1},\n    {x-1, y},\n    {x-1, y-1}\n  }\nend",
    "\tlocal tup = {}\n\tfor i = 1, #test_tup do\n\t\tlocal t = test_tup[i]\n\t\tif t == 0 then\n\t\t\ttup[i] = 0\n\t\telseif t == 1 then\n\t\t\ttup[i] = 1\n\t\telseif t == 2 then\n\t\t\ttup[i] = -1\n\t\telse\n\t\t\terror(\"Invalid coordinate tuple\")\n\t\tend\n\tend\n\tlocal coordinates = {}\n\tfor i = 1, #tup do\n\t\tlocal t = tup[i]\n\t\tif t == 0 then\n\t\t\tlocal tup_copy = table.copy(tup)\n\t\t\ttup_copy[i] = 1\n\t\t\ttable.insert(coordinates, tup_copy)\n\t\t\ttup_copy = table.copy(tup)\n\t\t\ttup_copy[i] = -1\n\t\t\ttable.insert(coordinates, tup_copy)\n\t\telseif t == 1 then\n\t\t\tlocal tup_copy = table.copy(tup)\n\t\t\ttup_copy[i] = 0\n\t\t\ttable.insert(coordinates, tup_copy)\n\t\t\ttup_copy = table.copy(tup)\n\t\t\ttup_copy[i] = 2\n\t\t\ttable.insert(coordinates, tup_copy)\n\t\telseif t == -1 then\n\t\t\tlocal tup_copy = table.copy(tup)\n\t\t\ttup_copy[i] = 0\n\t\t\ttable.insert(coordinates, tup_copy)\n\t\t\ttup_copy = table.copy(tup)\n\t\t\ttup_copy[i] = -2\n\t\t\ttable.insert(coordinates, tup_copy)\n\t\telse\n\t\t\terror(\"Invalid coordinate tuple\")\n\t\tend\n\tend\n\treturn coordinates\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1},\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1}, {x, y - 1}, {x + 1, y - 1},\n        {x - 1, y}, {x + 1, y},\n        {x - 1, y + 1}, {x, y + 1}, {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x, y + 1},\n        {x, y - 1},\n        {x + 1, y},\n        {x - 1, y},\n    }\n    return adj_coords\nend",
    "    local tup = {test_tup[1], test_tup[2]}\n    local coords = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coords, {tup[1] + i, tup[2] + j})\n            end\n        end\n    end\n    return coords\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal adjacent_coords = {\n\t\t{x, y - 1},\n\t\t{x, y + 1},\n\t\t{x - 1, y},\n\t\t{x + 1, y},\n\t}\n\treturn adjacent_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x, y - 1},\n        {x + 1, y - 1},\n        {x - 1, y},\n        {x + 1, y},\n        {x - 1, y + 1},\n        {x, y + 1},\n        {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y - 1},\n        {x, y + 1},\n        {x - 1, y},\n        {x + 1, y}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x, y - 1},\n        {x + 1, y - 1},\n        {x - 1, y},\n        {x + 1, y},\n        {x - 1, y + 1},\n        {x, y + 1},\n        {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x-1, y-1},\n        {x, y-1},\n        {x+1, y-1},\n        {x-1, y},\n        {x+1, y},\n        {x-1, y+1},\n        {x, y+1},\n        {x+1, y+1}\n    }\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adjacent_coords = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(adjacent_coords, {x + i, y + j})\n            end\n        end\n    end\n    return adjacent_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal adjacent = {\n\t\t{x, y-1},\n\t\t{x, y+1},\n\t\t{x-1, y},\n\t\t{x+1, y}\n\t}\n\treturn adjacent\nend",
    "\tlocal x = test_tup[1]\n\tlocal y = test_tup[2]\n\tlocal z = test_tup[3]\n\tlocal coords = {\n\t\t{x+1, y, z},\n\t\t{x-1, y, z},\n\t\t{x, y+1, z},\n\t\t{x, y-1, z},\n\t\t{x, y, z+1},\n\t\t{x, y, z-1},\n\t}\n\treturn coords\nend",
    "    local x, y = unpack(test_tup)\n    local coordinates = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1}, {x, y - 1}, {x + 1, y - 1},\n        {x - 1, y}, {x + 1, y},\n        {x - 1, y + 1}, {x, y + 1}, {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if not (i == 0 and j == 0) then\n                table.insert(coords, {x + i, y + j})\n            end\n        end\n    end\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if not (i == 0 and j == 0) then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coordinates = {\n\t\t{x-1, y},\n\t\t{x+1, y},\n\t\t{x, y-1},\n\t\t{x, y+1},\n\t}\n\treturn coordinates\nend",
    "\tlocal x, y = unpack(test_tup)\n\tlocal coordinates = {}\n\tfor i = -1, 1 do\n\t\tfor j = -1, 1 do\n\t\t\tif i ~= 0 or j ~= 0 then\n\t\t\t\ttable.insert(coordinates, {x + i, y + j})\n\t\t\tend\n\t\tend\n\tend\n\treturn coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y-1}, {x, y-1}, {x+1, y-1},\n        {x-1, y}, {x+1, y},\n        {x-1, y+1}, {x, y+1}, {x+1, y+1}\n    }\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coords = {}\n\tfor i = -1, 1 do\n\t\tfor j = -1, 1 do\n\t\t\tif i ~= 0 or j ~= 0 then\n\t\t\t\ttable.insert(coords, {x + i, y + j})\n\t\t\tend\n\t\tend\n\tend\n\treturn coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "    local x,y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y-1},\n        {x-1, y},\n        {x-1, y+1},\n        {x, y-1},\n        {x, y+1},\n        {x+1, y-1},\n        {x+1, y},\n        {x+1, y+1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "  local x, y = test_tup[1], test_tup[2]\n  return {\n    {x-1, y-1}, {x, y-1}, {x+1, y-1},\n    {x-1, y}, {x+1, y},\n    {x-1, y+1}, {x, y+1}, {x+1, y+1}\n  }\nend",
    "    local x = test_tup[1]\n    local y = test_tup[2]\n    local coordinates = {\n        {x-1, y-1},\n        {x, y-1},\n        {x+1, y-1},\n        {x-1, y},\n        {x+1, y},\n        {x-1, y+1},\n        {x, y+1},\n        {x+1, y+1}\n    }\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\n    return coordinates\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coords = {\n\t\t{x-1, y-1},\n\t\t{x-1, y},\n\t\t{x-1, y+1},\n\t\t{x, y-1},\n\t\t{x, y+1},\n\t\t{x+1, y-1},\n\t\t{x+1, y},\n\t\t{x+1, y+1}\n\t}\n\treturn coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1}\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1},\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coords = {\n\t\t{x-1, y},\n\t\t{x+1, y},\n\t\t{x, y-1},\n\t\t{x, y+1},\n\t}\n\treturn coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y-1}, {x, y-1}, {x+1, y-1},\n        {x-1, y}, {x+1, y},\n        {x-1, y+1}, {x, y+1}, {x+1, y+1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y - 1}, {x, y - 1}, {x + 1, y - 1},\n        {x - 1, y}, {x + 1, y},\n        {x - 1, y + 1}, {x, y + 1}, {x + 1, y + 1},\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1},\n    }\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if not (i == 0 and j == 0) then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coordinates, {x + i, y + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        local new_tup = {}\n        for j = 1, #test_tup do\n            if j == i then\n                table.insert(new_tup, test_tup[j] + 1)\n            else\n                table.insert(new_tup, test_tup[j])\n            end\n        end\n        table.insert(coordinates, new_tup)\n    end\n    return coordinates\nend",
    "    local tup = {test_tup[1], test_tup[2]}\n    local adj_coords = {\n        {tup[1] + 1, tup[2]},\n        {tup[1] - 1, tup[2]},\n        {tup[1], tup[2] + 1},\n        {tup[1], tup[2] - 1},\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y - 1},\n        {x, y + 1},\n        {x - 1, y},\n        {x + 1, y},\n    }\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coords = {}\n\tfor i = -1, 1 do\n\t\tfor j = -1, 1 do\n\t\t\tif not (i == 0 and j == 0) then\n\t\t\t\ttable.insert(coords, {x+i, y+j})\n\t\t\tend\n\t\tend\n\tend\n\treturn coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y - 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n        {x, y + 1},\n        {x - 1, y + 1},\n        {x - 1, y},\n        {x - 1, y - 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {x+1, y}, {x-1, y}, {x, y+1}, {x, y-1}\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal adj_coords = {\n\t\t{x-1, y-1},\n\t\t{x-1, y},\n\t\t{x-1, y+1},\n\t\t{x, y-1},\n\t\t{x, y+1},\n\t\t{x+1, y-1},\n\t\t{x+1, y},\n\t\t{x+1, y+1}\n\t}\n\treturn adj_coords\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local tup = {test_tup[1], test_tup[2]}\n    local tups = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                tups[#tups + 1] = {tup[1] + i, tup[2] + j}\n            end\n        end\n    end\n    return tups\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x+1, y},\n        {x-1, y},\n        {x, y+1},\n        {x, y-1},\n        {x+1, y+1},\n        {x-1, y-1},\n        {x+1, y-1},\n        {x-1, y+1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x, y+1},\n        {x, y-1},\n        {x+1, y},\n        {x-1, y},\n        {x+1, y+1},\n        {x-1, y-1},\n        {x+1, y-1},\n        {x-1, y+1}\n    }\n    return coords\nend",
    "  local x, y = test_tup[1], test_tup[2]\n  return {\n    {x, y + 1},\n    {x, y - 1},\n    {x + 1, y},\n    {x - 1, y}\n  }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y - 1},\n        {x, y + 1},\n        {x - 1, y},\n        {x + 1, y},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if not (i == 0 and j == 0) then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y - 1},\n        {x, y - 1},\n        {x + 1, y - 1},\n        {x - 1, y},\n        {x + 1, y},\n        {x - 1, y + 1},\n        {x, y + 1},\n        {x + 1, y + 1}\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y + 1},\n        {x, y - 1},\n        {x + 1, y},\n        {x - 1, y}\n    }\nend",
    "\tlocal coords = {}\n\tfor i = -1, 1 do\n\t\tfor j = -1, 1 do\n\t\t\tif i ~= 0 or j ~= 0 then\n\t\t\t\ttable.insert(coords, {test_tup[1] + i, test_tup[2] + j})\n\t\t\tend\n\t\tend\n\tend\n\treturn coords\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                local x = test_tup[1] + i\n                local y = test_tup[2] + j\n                coordinates[#coordinates + 1] = {x, y}\n            end\n        end\n    end\n    return coordinates\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coords = {}\n\tfor i = -1, 1 do\n\t\tfor j = -1, 1 do\n\t\t\tif i ~= 0 or j ~= 0 then\n\t\t\t\ttable.insert(coords, {x + i, y + j})\n\t\t\tend\n\t\tend\n\tend\n\treturn coords\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coordinates = {\n\t\t{x-1, y-1},\n\t\t{x, y-1},\n\t\t{x+1, y-1},\n\t\t{x-1, y},\n\t\t{x+1, y},\n\t\t{x-1, y+1},\n\t\t{x, y+1},\n\t\t{x+1, y+1}\n\t}\n\treturn coordinates\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal adj_coords = {\n\t\t{x-1, y-1},\n\t\t{x-1, y},\n\t\t{x-1, y+1},\n\t\t{x, y-1},\n\t\t{x, y+1},\n\t\t{x+1, y-1},\n\t\t{x+1, y},\n\t\t{x+1, y+1}\n\t}\n\treturn adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y-1},\n        {x, y+1},\n        {x-1, y},\n        {x+1, y},\n        {x-1, y-1},\n        {x+1, y-1},\n        {x-1, y+1},\n        {x+1, y+1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adjacent_coords = {\n        {x, y - 1},\n        {x, y + 1},\n        {x - 1, y},\n        {x + 1, y}\n    }\n    return adjacent_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y - 1},\n        {x, y + 1},\n        {x - 1, y},\n        {x + 1, y}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x, y - 1},\n        {x + 1, y - 1},\n        {x - 1, y},\n        {x + 1, y},\n        {x - 1, y + 1},\n        {x, y + 1},\n        {x + 1, y + 1},\n    }\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coords = {\n\t\t{x, y + 1},\n\t\t{x, y - 1},\n\t\t{x + 1, y},\n\t\t{x - 1, y},\n\t\t{x + 1, y + 1},\n\t\t{x + 1, y - 1},\n\t\t{x - 1, y + 1},\n\t\t{x - 1, y - 1}\n\t}\n\treturn coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x-1, y-1},\n        {x-1, y},\n        {x-1, y+1},\n        {x, y-1},\n        {x, y+1},\n        {x+1, y-1},\n        {x+1, y},\n        {x+1, y+1},\n    }\n    return adj_coords\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if not (i == 0 and j == 0) then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local coords = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coords, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x, y - 1},\n        {x, y + 1},\n        {x - 1, y},\n        {x + 1, y}\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x, y - 1},\n        {x + 1, y - 1},\n        {x - 1, y},\n        {x + 1, y},\n        {x - 1, y + 1},\n        {x, y + 1},\n        {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x, y-1},\n        {x, y+1},\n        {x-1, y},\n        {x+1, y},\n        {x-1, y-1},\n        {x+1, y-1},\n        {x-1, y+1},\n        {x+1, y+1},\n    }\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "  local x, y = test_tup[1], test_tup[2]\n  local adjacent_coords = {\n    {x - 1, y - 1},\n    {x - 1, y},\n    {x - 1, y + 1},\n    {x, y - 1},\n    {x, y + 1},\n    {x + 1, y - 1},\n    {x + 1, y},\n    {x + 1, y + 1}\n  }\n  return adjacent_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1}\n    }\n    return adj_coords\nend",
    "\tlocal tup = {}\n\tfor i = 1, #test_tup do\n\t\ttup[i] = test_tup[i]\n\tend\n\tlocal coordinates = {}\n\tfor i = 1, #tup do\n\t\tlocal t = {}\n\t\tfor j = 1, #tup do\n\t\t\tt[j] = tup[j]\n\t\tend\n\t\tt[i] = t[i] + 1\n\t\ttable.insert(coordinates, t)\n\t\tt[i] = t[i] - 2\n\t\ttable.insert(coordinates, t)\n\tend\n\treturn coordinates\nend",
    "  local x, y = test_tup[1], test_tup[2]\n  local coords = {\n    {x-1, y-1},\n    {x-1, y},\n    {x-1, y+1},\n    {x, y-1},\n    {x, y+1},\n    {x+1, y-1},\n    {x+1, y},\n    {x+1, y+1}\n  }\n  return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x, y - 1},\n        {x, y + 1},\n        {x - 1, y},\n        {x + 1, y},\n    }\n    return coordinates\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal adjacent_coords = {\n\t\t{x, y - 1},\n\t\t{x + 1, y},\n\t\t{x, y + 1},\n\t\t{x - 1, y},\n\t}\n\treturn adjacent_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x-1, y-1}, {x, y-1}, {x+1, y-1},\n        {x-1, y}, {x+1, y},\n        {x-1, y+1}, {x, y+1}, {x+1, y+1}\n    }\n    return coords\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y - 1},\n        {x, y + 1},\n        {x - 1, y},\n        {x + 1, y}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x + 1, y},\n        {x - 1, y},\n        {x, y + 1},\n        {x, y - 1},\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x-1, y},\n        {x+1, y},\n        {x, y-1},\n        {x, y+1},\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y},\n        {x+1, y},\n        {x, y-1},\n        {x, y+1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x-1, y-1},\n        {x, y-1},\n        {x+1, y-1},\n        {x-1, y},\n        {x+1, y},\n        {x-1, y+1},\n        {x, y+1},\n        {x+1, y+1}\n    }\n    return coords\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if not (i == 0 and j == 0) then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal adjacent_coords = {\n\t\t{x-1, y-1}, {x, y-1}, {x+1, y-1},\n\t\t{x-1, y}, {x+1, y},\n\t\t{x-1, y+1}, {x, y+1}, {x+1, y+1}\n\t}\n\treturn adjacent_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1}, {x, y - 1}, {x + 1, y - 1},\n        {x - 1, y}, {x + 1, y},\n        {x - 1, y + 1}, {x, y + 1}, {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x-1, y},\n        {x+1, y},\n        {x, y-1},\n        {x, y+1}\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y-1}, {x-1, y}, {x-1, y+1},\n        {x, y-1}, {x, y+1},\n        {x+1, y-1}, {x+1, y}, {x+1, y+1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1},\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1}, {x, y - 1}, {x + 1, y - 1},\n        {x - 1, y}, {x + 1, y},\n        {x - 1, y + 1}, {x, y + 1}, {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x-1, y},\n        {x+1, y},\n        {x, y-1},\n        {x, y+1},\n    }\n    return adj_coords\nend",
    "    local coords = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coords, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x-1, y-1},\n        {x-1, y},\n        {x-1, y+1},\n        {x, y-1},\n        {x, y+1},\n        {x+1, y-1},\n        {x+1, y},\n        {x+1, y+1}\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y-1}, {x, y-1}, {x+1, y-1},\n        {x-1, y}, {x+1, y},\n        {x-1, y+1}, {x, y+1}, {x+1, y+1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y-1},\n        {x-1, y},\n        {x-1, y+1},\n        {x, y-1},\n        {x, y+1},\n        {x+1, y-1},\n        {x+1, y},\n        {x+1, y+1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if not (i == 0 and j == 0) then\n                table.insert(coords, {x + i, y + j})\n            end\n        end\n    end\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x + 1, y},\n        {x - 1, y},\n        {x, y + 1},\n        {x, y - 1},\n        {x + 1, y + 1},\n        {x + 1, y - 1},\n        {x - 1, y + 1},\n        {x - 1, y - 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y-1}, {x, y-1}, {x+1, y-1},\n        {x-1, y}, {x+1, y},\n        {x-1, y+1}, {x, y+1}, {x+1, y+1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x + 1, y},\n        {x - 1, y},\n        {x, y + 1},\n        {x, y - 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y-1}, {x, y-1}, {x+1, y-1},\n        {x-1, y}, {x+1, y},\n        {x-1, y+1}, {x, y+1}, {x+1, y+1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1},\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x + 1, y},\n        {x - 1, y},\n        {x, y + 1},\n        {x, y - 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\n    return coordinates\nend",
    "  local x, y = test_tup[1], test_tup[2]\n  local coords = {\n    {x-1, y-1},\n    {x-1, y},\n    {x-1, y+1},\n    {x, y-1},\n    {x, y+1},\n    {x+1, y-1},\n    {x+1, y},\n    {x+1, y+1},\n  }\n  return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y-1},\n        {x, y+1},\n        {x-1, y},\n        {x+1, y},\n    }\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "\tlocal tup = {test_tup[1], test_tup[2]}\n\tlocal tup_list = {}\n\tfor i = -1, 1 do\n\t\tfor j = -1, 1 do\n\t\t\tif not (i == 0 and j == 0) then\n\t\t\t\ttable.insert(tup_list, {tup[1] + i, tup[2] + j})\n\t\t\tend\n\t\tend\n\tend\n\treturn tup_list\nend",
    "  local x, y = test_tup[1], test_tup[2]\n  return {\n    {x - 1, y},\n    {x + 1, y},\n    {x, y - 1},\n    {x, y + 1},\n    {x - 1, y - 1},\n    {x + 1, y - 1},\n    {x - 1, y + 1},\n    {x + 1, y + 1}\n  }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x + 1, y},\n        {x - 1, y},\n        {x, y + 1},\n        {x, y - 1},\n        {x + 1, y + 1},\n        {x - 1, y - 1},\n        {x - 1, y + 1},\n        {x + 1, y - 1},\n    }\n    return coordinates\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        local temp_tup = {}\n        for j = 1, #test_tup do\n            table.insert(temp_tup, test_tup[j])\n        end\n        temp_tup[i] = temp_tup[i] + 1\n        table.insert(coordinates, temp_tup)\n        temp_tup[i] = temp_tup[i] - 2\n        table.insert(coordinates, temp_tup)\n    end\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coordinates, {x + i, y + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x-1, y-1},\n        {x-1, y},\n        {x-1, y+1},\n        {x, y-1},\n        {x, y+1},\n        {x+1, y-1},\n        {x+1, y},\n        {x+1, y+1},\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1}, {x, y - 1}, {x + 1, y - 1},\n        {x - 1, y}, {x + 1, y},\n        {x - 1, y + 1}, {x, y + 1}, {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x, y - 1}, {x, y + 1},\n        {x - 1, y}, {x + 1, y},\n        {x - 1, y - 1}, {x + 1, y - 1},\n        {x - 1, y + 1}, {x + 1, y + 1}\n    }\n    return coords\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "\tlocal result = {}\n\tfor i = -1, 1 do\n\t\tfor j = -1, 1 do\n\t\t\tif not (i == 0 and j == 0) then\n\t\t\t\ttable.insert(result, {test_tup[1] + i, test_tup[2] + j})\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x-1, y-1}, {x, y-1}, {x+1, y-1},\n        {x-1, y}, {x+1, y},\n        {x-1, y+1}, {x, y+1}, {x+1, y+1}\n    }\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x-1, y},\n        {x+1, y},\n        {x, y-1},\n        {x, y+1},\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x + 1, y},\n        {x - 1, y},\n        {x, y + 1},\n        {x, y - 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y - 1},\n        {x, y + 1},\n        {x - 1, y},\n        {x + 1, y},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y},\n        {x+1, y},\n        {x, y-1},\n        {x, y+1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1}\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x + 1, y},\n        {x - 1, y},\n        {x, y + 1},\n        {x, y - 1},\n    }\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coords = {\n\t\t{x, y - 1},\n\t\t{x, y + 1},\n\t\t{x - 1, y},\n\t\t{x + 1, y},\n\t\t{x - 1, y - 1},\n\t\t{x + 1, y - 1},\n\t\t{x - 1, y + 1},\n\t\t{x + 1, y + 1},\n\t}\n\treturn coords\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\treturn {\n\t\t{x, y-1},\n\t\t{x, y+1},\n\t\t{x-1, y},\n\t\t{x+1, y},\n\t}\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1},\n    }\n    return coords\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coords = {\n\t\t{x-1, y-1},\n\t\t{x-1, y},\n\t\t{x-1, y+1},\n\t\t{x, y-1},\n\t\t{x, y+1},\n\t\t{x+1, y-1},\n\t\t{x+1, y},\n\t\t{x+1, y+1}\n\t}\n\treturn coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x-1, y-1}, {x, y-1}, {x+1, y-1},\n        {x-1, y}, {x+1, y},\n        {x-1, y+1}, {x, y+1}, {x+1, y+1}\n    }\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "    local x = test_tup[1]\n    local y = test_tup[2]\n    local adj_coords = {\n        {x-1, y-1},\n        {x, y-1},\n        {x+1, y-1},\n        {x-1, y},\n        {x+1, y},\n        {x-1, y+1},\n        {x, y+1},\n        {x+1, y+1}\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x-1, y-1},\n        {x-1, y},\n        {x-1, y+1},\n        {x, y-1},\n        {x, y+1},\n        {x+1, y-1},\n        {x+1, y},\n        {x+1, y+1}\n    }\n    return coordinates\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal adjacent_coords = {}\n\tfor i = -1, 1 do\n\t\tfor j = -1, 1 do\n\t\t\tif not (i == 0 and j == 0) then\n\t\t\t\ttable.insert(adjacent_coords, {x + i, y + j})\n\t\t\tend\n\t\tend\n\tend\n\treturn adjacent_coords\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x, y-1},\n        {x, y+1},\n        {x-1, y},\n        {x+1, y},\n    }\n    return coords\nend",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if not (i == 0 and j == 0) then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend"
  ]
}