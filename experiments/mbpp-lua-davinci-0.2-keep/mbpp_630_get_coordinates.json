{
  "name": "mbpp_630_get_coordinates",
  "language": "lua",
  "prompt": "-- Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nlocal function get_coordinates(test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_coordinates\n    lu.assertEquals(candidate({3, 4}), {{2, 3}, {2, 4}, {2, 5}, {3, 3}, {3, 4}, {3, 5}, {4, 3}, {4, 4}, {4, 5}})\n    lu.assertEquals(candidate({4, 5}), {{3, 4}, {3, 5}, {3, 6}, {4, 4}, {4, 5}, {4, 6}, {5, 4}, {5, 5}, {5, 6}})\n    lu.assertEquals(candidate({5, 6}), {{4, 5}, {4, 6}, {4, 7}, {5, 5}, {5, 6}, {5, 7}, {6, 5}, {6, 6}, {6, 7}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local x, y = test_tup[1], test_tup[2]\n  local adj_coords = {}\n  for i = -1, 1 do\n    for j = -1, 1 do\n      if i ~= 0 or j ~= 0 then\n        table.insert(adj_coords, {x + i, y + j})\n      end\n    end\n  end\n  return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coordinates = {\n\t\t{x-1, y-1},\n\t\t{x, y-1},\n\t\t{x+1, y-1},\n\t\t{x-1, y},\n\t\t{x+1, y},\n\t\t{x-1, y+1},\n\t\t{x, y+1},\n\t\t{x+1, y+1}\n\t}\n\treturn coordinates\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal coordinates = {\n\t\t{x - 1, y - 1},\n\t\t{x, y - 1},\n\t\t{x + 1, y - 1},\n\t\t{x - 1, y},\n\t\t{x + 1, y},\n\t\t{x - 1, y + 1},\n\t\t{x, y + 1},\n\t\t{x + 1, y + 1}\n\t}\n\treturn coordinates\nend",
    "    local test_x, test_y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {test_x - 1, test_y},\n        {test_x + 1, test_y},\n        {test_x, test_y - 1},\n        {test_x, test_y + 1}\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y - 1},\n        {x, y - 1},\n        {x + 1, y - 1},\n        {x - 1, y},\n        {x + 1, y},\n        {x - 1, y + 1},\n        {x, y + 1},\n        {x + 1, y + 1}\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x+1, y},\n        {x-1, y},\n        {x, y+1},\n        {x, y-1}\n    }\n    return adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y-1}, {x, y-1}, {x+1, y-1},\n        {x-1, y}, {x+1, y},\n        {x-1, y+1}, {x, y+1}, {x+1, y+1}\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if not (i == 0 and j == 0) then\n                table.insert(coords, {x + i, y + j})\n            end\n        end\n    end\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x, y + 1},\n        {x, y - 1},\n        {x + 1, y},\n        {x - 1, y},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x - 1, y},\n        {x + 1, y},\n        {x, y - 1},\n        {x, y + 1},\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1}\n    }\nend",
    "\tlocal x, y = test_tup[1], test_tup[2]\n\tlocal adj_coords = {\n\t\t{x, y - 1},\n\t\t{x + 1, y},\n\t\t{x, y + 1},\n\t\t{x - 1, y}\n\t}\n\treturn adj_coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x - 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x, y - 1},\n        {x, y + 1},\n        {x + 1, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n    }\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    return {\n        {x-1, y-1},\n        {x-1, y},\n        {x-1, y+1},\n        {x, y-1},\n        {x, y+1},\n        {x+1, y-1},\n        {x+1, y},\n        {x+1, y+1}\n    }\nend",
    "\tlocal tup_x = test_tup[1]\n\tlocal tup_y = test_tup[2]\n\tlocal tup_z = test_tup[3]\n\tlocal tup_w = test_tup[4]\n\tlocal tup_h = test_tup[5]\n\tlocal tup_d = test_tup[6]\n\tlocal tup_r = test_tup[7]\n\tlocal tup_g = test_tup[8]\n\tlocal tup_b = test_tup[9]\n\tlocal tup_a = test_tup[10]\n\tlocal tup_s = test_tup[11]\n\tlocal tup_t = test_tup[12]\n\tlocal tup_u = test_tup[13]\n\tlocal tup_v = test_tup[14]\n\tlocal tup_n = test_tup[15]\n\tlocal tup_m = test_tup[16]\n\tlocal tup_o = test_tup[17]\n\tlocal tup_p = test_tup[18]\n\tlocal tup_q = test_tup[19]\n\tlocal tup_r = test_tup[20]\n\tlocal tup_s = test_tup[21]\n\tlocal tup_t = test_tup[22]\n\tlocal tup_u = test_tup[23]\n\tlocal tup_v = test_tup[24]\n\tlocal tup_w = test_tup[25]\n\tlocal tup_x = test_tup[26]\n\tlocal tup_y = test_tup[27]\n\tlocal tup_z = test_tup[28]\n\tlocal tup_a = test_tup[29]\n\tlocal tup_b = test_tup[30]\n\tlocal tup_c = test_tup[31]\n\tlocal tup_d = test_tup[32]\n\tlocal tup_e = test_tup[33]\n\tlocal tup_f = test_tup[34]\n\t",
    "    local coordinates = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coordinates, {test_tup[1] + i, test_tup[2] + j})\n            end\n        end\n    end\n    return coordinates\nend"
  ]
}