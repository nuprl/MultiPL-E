{
  "name": "mbpp_245_max_sum",
  "language": "lua",
  "prompt": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local max_sum = 0\n  local len = #arr\n  local dp = {}\n  for i = 1, len do\n    dp[i] = {}\n    dp[i][i] = arr[i]\n    max_sum = math.max(max_sum, dp[i][i])\n  end\n  for i = 1, len do\n    for j = i + 1, len do\n      dp[i][j] = dp[i][j - 1] + arr[j]\n      max_sum = math.max(max_sum, dp[i][j])\n    end\n  end\n  return max_sum\nend",
    "  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_i = 0\n  local max_sum_right_i = 0\n  local max_sum_left_j = 0\n  local max_sum_right_j = 0\n  local max_sum_left_k = 0\n  local max_sum_right_k = 0\n  local max_sum_left_l = 0\n  local max_sum_right_l = 0\n  local max_sum_left_m = 0\n  local max_sum_right_m = 0\n  local max_sum_left_n = 0\n  local max_sum_right_n = 0\n  local max_sum_left_o = 0\n  local max_sum_right_o = 0\n  local max_sum_left_p = 0\n  local max_sum_right_p = 0\n  local max_sum_left_q = 0\n  local max_sum_right_q = 0\n  local max_sum_left_r = 0\n  local max_sum_right_r = 0\n  local max_sum_left_s = 0\n  local max_sum_right_s = 0\n  local max_sum_left_t = 0\n  local max_sum_right_t = 0\n  local max_sum_left_u = 0\n  local max_sum_right_u = 0\n  local max_sum_left_v = 0\n  local max_sum_right_v = 0\n  local max_sum_left_w = 0\n  local max_sum_right_w = 0\n  local max_sum_left_x = 0\n  local max_sum_right_x = 0\n  local max_sum_left_y = 0\n  local max_sum_right_y = 0\n  local max_sum_left_z = 0\n  local max_sum_right_z = 0\n  local max_sum_left_aa = 0\n  local max_sum_right_aa = 0\n  local max_sum_left_ab = 0\n  local max_sum_right_ab = 0\n  local max",
    "  local max_sum = 0\n  local len = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[len] = arr[len]\n  for i = 2, len do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = len - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, len do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend",
    "  local max_sum = 0\n  local max_sum_arr = {}\n  local max_sum_arr_rev = {}\n  local max_sum_arr_rev_rev = {}\n  local max_sum_arr_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev",
    "  local max_sum = 0\n  local max_sum_arr = {}\n  local max_sum_arr_rev = {}\n  local max_sum_arr_rev_rev = {}\n  local max_sum_arr_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev",
    "  local n = #arr\n  local max_sum_arr = {}\n  local max_sum = 0\n  for i = 1, n do\n    max_sum_arr[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend",
    "  local n = #arr\n  local max_sum_inc = {}\n  local max_sum_dec = {}\n  max_sum_inc[1] = arr[1]\n  max_sum_dec[n] = arr[n]\n  for i = 2, n do\n    max_sum_inc[i] = math.max(arr[i], max_sum_inc[i - 1] + arr[i])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_dec[i] = math.max(arr[i], max_sum_dec[i + 1] + arr[i])\n  end\n  local max_sum = max_sum_inc[1] + max_sum_dec[2]\n  for i = 2, n - 1 do\n    max_sum = math.max(max_sum, max_sum_inc[i] + max_sum_dec[i + 1])\n  end\n  return max_sum\nend",
    "  local n = #arr\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {0, 0}\n  end\n  for i = 1, n do\n    for j = 1, i do\n      if arr[j] < arr[i] then\n        dp[i][1] = math.max(dp[i][1], dp[j][1] + arr[i])\n      end\n    end\n  end\n  for i = n, 1, -1 do\n    for j = n, i, -1 do\n      if arr[j] < arr[i] then\n        dp[i][2] = math.max(dp[i][2], dp[j][2] + arr[i])\n      end\n    end\n  end\n  local max = 0\n  for i = 1, n do\n    max = math.max(max, dp[i][1] + dp[i][2] - arr[i])\n  end\n  return max\nend",
    "  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_left[i] = max_sum\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_right[i] = max_sum\n  end\n  for i = 1, #arr - 1 do\n    local sum = max_sum_left[i] + max_sum_right[i + 1]\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend",
    "  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]",
    "    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_arr = {arr[1]}\n    local max_sum_arr_i = 1\n    local max_sum_arr_j = 1\n    local sum = 0\n    local sum_arr = {}\n    local sum_arr_i = 1\n    local sum_arr_j = 1\n    for i = 2, n do\n        if arr[i] > arr[i - 1] then\n            sum = sum + arr[i]\n            sum_arr[sum_arr_j] = arr[i]\n            sum_arr_j = sum_arr_j + 1\n        else\n            if sum > max_sum then\n                max_sum = sum\n                max_sum_arr = sum_arr\n                max_sum_arr_i = sum_arr_i\n                max_sum_arr_j = sum_arr_j\n            end\n            sum = arr[i]\n            sum_arr = {arr[i]}\n            sum_arr_i = 1\n            sum_arr_j = 2\n        end\n    end\n    if sum > max_sum then\n        max_sum = sum\n        max_sum_arr = sum_arr\n        max_sum_arr_i = sum_arr_i\n        max_sum_arr_j = sum_arr_j\n    end\n    sum = 0\n    sum_arr = {}\n    sum_arr_i = 1\n    sum_arr_j = 1\n    for i = n - 1, 1, -1 do\n        if arr[i] > arr[i + 1] then\n            sum = sum + arr[i]\n            sum_arr[sum_arr_j] = arr[i]\n            sum_arr_j = sum_arr_j + 1\n        else\n            if sum > max_sum then\n                max_sum = sum\n                max_sum_arr = sum_arr\n                max_sum_arr_i = sum_arr_i\n                max_sum_arr_j = sum_arr_j\n            end\n            sum = arr[i]\n            sum_arr = {arr[i]}\n            sum_arr_i",
    "  local max_sum_inc = {}\n  local max_sum_dec = {}\n  local max_sum = 0\n  for i = 1, #arr do\n    max_sum_inc[i] = arr[i]\n    max_sum_dec[i] = arr[i]\n  end\n  for i = 2, #arr do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_inc[i] < max_sum_inc[j] + arr[i] then\n        max_sum_inc[i] = max_sum_inc[j] + arr[i]\n      end\n    end\n  end\n  for i = #arr - 1, 1, -1 do\n    for j = #arr, i + 1, -1 do\n      if arr[i] > arr[j] and max_sum_dec[i] < max_sum_dec[j] + arr[i] then\n        max_sum_dec[i] = max_sum_dec[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, #arr do\n    if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] then\n      max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n    end\n  end\n  return max_sum\nend",
    "  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  for i = 2, n do\n    max_sum_arr[i] = math.max(arr[i], arr[i] + max_sum_arr[i - 1])\n    max_sum = math.max(max_sum, max_sum_arr[i])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_arr_rev[i] = math.max(arr[i], arr[i] + max_sum_arr_rev[i + 1])\n    max_sum = math.max(max_sum, max_sum_arr_rev[i])\n  end\n  for i = 2, n - 1 do\n    max_sum = math.max(max_sum, max_sum_arr[i - 1] + max_sum_arr_rev[i + 1])\n  end\n  return max_sum\nend",
    "    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local max_sum_left[1] = arr[1]\n    local max_sum_right[#arr] = arr[#arr]\n    for i = 2, #arr do\n        max_sum_left[i] = math.max(max_sum_left[i-1] + arr[i], arr[i])\n    end\n    for i = #arr-1, 1, -1 do\n        max_sum_right[i] = math.max(max_sum_right[i+1] + arr[i], arr[i])\n    end\n    for i = 1, #arr do\n        max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    end\n    return max_sum\nend",
    "  local max = arr[1]\n  local sum = arr[1]\n  for i = 2, #arr do\n    sum = math.max(sum + arr[i], arr[i])\n    max = math.max(max, sum)\n  end\n  return max\nend",
    "\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\n\tlocal n = #arr\n\tfor i = 1, n do\n\t\tmax_sum_left[i] = arr[i]\n\t\tmax_sum_right[i] = arr[i]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 1, i - 1 do\n\t\t\tif arr[i] > arr[j] and max_sum_left[i] < max_sum_left[j] + arr[i] then\n\t\t\t\tmax_sum_left[i] = max_sum_left[j] + arr[i]\n\t\t\tend\n\t\tend\n\tend\n\tfor i = n - 1, 1, -1 do\n\t\tfor j = n, i + 1, -1 do\n\t\t\tif arr[i] > arr[j] and max_sum_right[i] < max_sum_right[j] + arr[i] then\n\t\t\t\tmax_sum_right[i] = max_sum_right[j] + arr[i]\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tif max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] then\n\t\t\tmax_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n\t\tend\n\tend\n\treturn max_sum\nend",
    "  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend",
    "    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_arr = {arr[1]}\n    local max_sum_arr_rev = {arr[1]}\n    for i = 2, n do\n        local max_sum_arr_i = arr[i]\n        local max_sum_arr_rev_i = arr[i]\n        for j = 1, i - 1 do\n            if arr[j] < arr[i] then\n                max_sum_arr_i = math.max(max_sum_arr_i, max_sum_arr[j] + arr[i])\n                max_sum_arr_rev_i = math.max(max_sum_arr_rev_i, max_sum_arr_rev[j] + arr[i])\n            end\n        end\n        max_sum_arr[i] = max_sum_arr_i\n        max_sum_arr_rev[i] = max_sum_arr_rev_i\n        max_sum = math.max(max_sum, max_sum_arr_i, max_sum_arr_rev_i)\n    end\n    return max_sum\nend",
    "  local max = 0\n  local sum = 0\n  local len = #arr\n  for i = 1, len do\n    sum = sum + arr[i]\n    if sum > max then\n      max = sum\n    end\n    if sum < 0 then\n      sum = 0\n    end\n  end\n  return max\nend",
    "  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i-1] + arr[i])\n  end\n  for i = #arr-1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i+1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend"
  ]
}