{
  "name": "mbpp_622_get_median",
  "language": "lua",
  "prompt": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx3lntpwo.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = get_median_util(arr1, n)\n  local m2 = get_median_util(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqx0tpfv7.lua:12: attempt to call a nil value (global 'get_median_util')\nstack traceback:\n\t/tmp/tmpqx0tpfv7.lua:12: in local 'candidate'\n\t/tmp/tmpqx0tpfv7.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1)\n  end\n  return get_median(arr1, arr2 + n / 2, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpynrsbb3v.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpynrsbb3v.lua:12: in local 'candidate'\n\t/tmp/tmpynrsbb3v.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfl8r1m5l.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpfl8r1m5l.lua:12: in local 'candidate'\n\t/tmp/tmpfl8r1m5l.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1 = -1\n  local m2 = -1\n  local i = 0\n  local j = 0\n  for count = 0, n do\n    if i == n then\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elseif j == n then\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbrca2hdn.lua:17: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpbrca2hdn.lua:17: in local 'candidate'\n\t/tmp/tmpbrca2hdn.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3v85q0v_.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmp3v85q0v_.lua:12: in local 'candidate'\n\t/tmp/tmp3v85q0v_.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, m1, m2 = 0, 0, -1, -1\n    for _=1,n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[1]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[1]\n            break\n        end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmptbtekuhk.lua:23: 'end' expected (to close 'for' at line 4) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, m1, m2 = 0, 0, -1, -1\n    for k = 1, n do\n        if i == n then\n            m2 = arr2[0]\n        elseif j == n then\n            m2 = arr1[0]\n        elseif arr1[i] < arr2[j] then\n            m2 = m1\n            m1 = arr1[i]\n            i = i + 1\n        else\n            m2 = m1\n            m1 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiamrqacu.lua:9: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpiamrqacu.lua:9: in local 'candidate'\n\t/tmp/tmpiamrqacu.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx3lntpwo.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq7jhrmmr.lua:17: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpq7jhrmmr.lua:17: in local 'candidate'\n\t/tmp/tmpq7jhrmmr.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_d0rpx6.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph_d0rpx6.lua:12: in local 'candidate'\n\t/tmp/tmph_d0rpx6.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj9_0g6cf.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx3lntpwo.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_d0rpx6.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph_d0rpx6.lua:12: in local 'candidate'\n\t/tmp/tmph_d0rpx6.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq7jhrmmr.lua:17: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpq7jhrmmr.lua:17: in local 'candidate'\n\t/tmp/tmpq7jhrmmr.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_d0rpx6.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph_d0rpx6.lua:12: in local 'candidate'\n\t/tmp/tmph_d0rpx6.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, m1, m2 = 0, 0, -1, -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpk9_w0gi1.lua:23: 'end' expected (to close 'for' at line 4) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqz1zfx0h.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsfzeqyeg.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfl8r1m5l.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpfl8r1m5l.lua:12: in local 'candidate'\n\t/tmp/tmpfl8r1m5l.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsfzeqyeg.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_d0rpx6.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph_d0rpx6.lua:12: in local 'candidate'\n\t/tmp/tmph_d0rpx6.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_d0rpx6.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph_d0rpx6.lua:12: in local 'candidate'\n\t/tmp/tmph_d0rpx6.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, m1, m2 = 0, 0, -1, -1\n    for count = 0, n do\n        if i == n then\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxwbvqk2l.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpxwbvqk2l.lua:12: in local 'candidate'\n\t/tmp/tmpxwbvqk2l.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfl8r1m5l.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpfl8r1m5l.lua:12: in local 'candidate'\n\t/tmp/tmpfl8r1m5l.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, m1, m2 = 0, 0, -1, -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmj_gutnu.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpmj_gutnu.lua:14: in local 'candidate'\n\t/tmp/tmpmj_gutnu.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfl8r1m5l.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpfl8r1m5l.lua:12: in local 'candidate'\n\t/tmp/tmpfl8r1m5l.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_d0rpx6.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph_d0rpx6.lua:12: in local 'candidate'\n\t/tmp/tmph_d0rpx6.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + math.floor(n / 2) - 1, arr2, math.floor(n / 2) + 1)\n        else\n            return get_median(arr1 + math.floor(n / 2), arr2, math.floor(n / 2) + 1)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + math.floor(n / 2) - 1, arr1, math.floor(n / 2) + 1)\n        else\n            return get_median(arr2 + math.floor(n / 2), arr1, math.floor(n / 2) + 1)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9h3d3166.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmp9h3d3166.lua:12: in local 'candidate'\n\t/tmp/tmp9h3d3166.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  local i, j, m1, m2 = 0, 0, 0, 0\n  for _ = 1, n do\n    if i == n then\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elseif j == n then\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsk5cww_6.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpsk5cww_6.lua:14: in local 'candidate'\n\t/tmp/tmpsk5cww_6.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq7jhrmmr.lua:17: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpq7jhrmmr.lua:17: in local 'candidate'\n\t/tmp/tmpq7jhrmmr.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbpzselv1.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfl8r1m5l.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpfl8r1m5l.lua:12: in local 'candidate'\n\t/tmp/tmpfl8r1m5l.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsfzeqyeg.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxucslt1f.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, m1, m2 = 0, 0, -1, -1\n    for _ = 1, n do\n        if i == n then\n            m2 = m1\n            m1 = arr2[1]\n            break\n        elseif j == n then\n            m2 = m1\n            m1 = arr1[1]\n            break\n        end\n        if arr1[i+1] < arr2[j+1] then\n            m2 = m1\n            m1 = arr1[i+1]\n            i = i + 1\n        else\n            m2 = m1\n            m1 = arr2[j+1]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0yd98vi.lua:30: expected: 16.0, actual: 14.0\nstack traceback:\n\t/tmp/tmpw0yd98vi.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsfzeqyeg.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfl8r1m5l.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpfl8r1m5l.lua:12: in local 'candidate'\n\t/tmp/tmpfl8r1m5l.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  local i = 1\n  local j = 1\n  local m1 = -1\n  local m2 = -1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__4kbjvc.lua:24: expected: 16.0, actual: 14.0\nstack traceback:\n\t/tmp/tmp__4kbjvc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj9_0g6cf.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local m1 = -1\n    local m2 = -1\n    local i = 0\n    local j = 0\n    local count = 0\n    while count < n + 1 do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5yp70ere.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, m1, m2 = 0, 0, -1, -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmj_gutnu.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpmj_gutnu.lua:14: in local 'candidate'\n\t/tmp/tmpmj_gutnu.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  local i = 0\n  local j = 0\n  local m1 = -1\n  local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmozg3lgk.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j = 1, 1\n    local m1, m2 = -1, -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpk3lvuwd9.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, m1, m2 = 0, 0, -1, -1\n    for count = 0, n do\n        if i == n then\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m2 = arr1[0]\n            break\n        end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp94l6b99m.lua:21: 'end' expected (to close 'for' at line 4) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_d0rpx6.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph_d0rpx6.lua:12: in local 'candidate'\n\t/tmp/tmph_d0rpx6.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_d0rpx6.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph_d0rpx6.lua:12: in local 'candidate'\n\t/tmp/tmph_d0rpx6.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxucslt1f.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfl8r1m5l.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpfl8r1m5l.lua:12: in local 'candidate'\n\t/tmp/tmpfl8r1m5l.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgija6aqz.lua:9: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpgija6aqz.lua:9: in local 'candidate'\n\t/tmp/tmpgija6aqz.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        end\n        return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n    if n % 2 == 0 then\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    end\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprq0l2dzx.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmprq0l2dzx.lua:12: in local 'candidate'\n\t/tmp/tmprq0l2dzx.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j = 1, 1\n    local m1, m2 = -1, -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ds7sx1l.lua:22: expected: 16.0, actual: 14.0\nstack traceback:\n\t/tmp/tmp9ds7sx1l.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj9_0g6cf.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1 = -1\n  local m2 = -1\n  local i = 0\n  local j = 0\n  for count = 0, n do\n    if i == n then\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elseif j == n then\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbrca2hdn.lua:17: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpbrca2hdn.lua:17: in local 'candidate'\n\t/tmp/tmpbrca2hdn.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp58pm_pdp.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbpzselv1.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5yp70ere.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_d0rpx6.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph_d0rpx6.lua:12: in local 'candidate'\n\t/tmp/tmph_d0rpx6.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, m1, m2 = 0, 0, -1, -1\n    for count = 0, n do\n        if i == n then\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxwbvqk2l.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpxwbvqk2l.lua:12: in local 'candidate'\n\t/tmp/tmpxwbvqk2l.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj9_0g6cf.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx3lntpwo.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsfzeqyeg.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1)\n  end\n  return get_median(arr1, arr2 + n / 2, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpynrsbb3v.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpynrsbb3v.lua:12: in local 'candidate'\n\t/tmp/tmpynrsbb3v.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_d0rpx6.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph_d0rpx6.lua:12: in local 'candidate'\n\t/tmp/tmph_d0rpx6.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxkxc57zg.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpxkxc57zg.lua:12: in local 'candidate'\n\t/tmp/tmpxkxc57zg.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + math.floor(n / 2) - 1, arr2, math.floor(n / 2) + 1)\n    else\n      return get_median(arr1 + math.floor(n / 2), arr2, math.floor(n / 2) + 1)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + math.floor(n / 2) - 1, arr1, math.floor(n / 2) + 1)\n  else\n    return get_median(arr2 + math.floor(n / 2), arr1, math.floor(n / 2) + 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp23ala5va.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmp23ala5va.lua:12: in local 'candidate'\n\t/tmp/tmp23ala5va.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj9_0g6cf.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_d0rpx6.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph_d0rpx6.lua:12: in local 'candidate'\n\t/tmp/tmph_d0rpx6.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqz1zfx0h.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqz1zfx0h.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1 = 0\n  local m2 = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpo2xx5prc.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8hnbsh7x.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmp8hnbsh7x.lua:12: in local 'candidate'\n\t/tmp/tmp8hnbsh7x.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfl8r1m5l.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpfl8r1m5l.lua:12: in local 'candidate'\n\t/tmp/tmpfl8r1m5l.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        end\n        return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n    if n % 2 == 0 then\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    end\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprq0l2dzx.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmprq0l2dzx.lua:12: in local 'candidate'\n\t/tmp/tmprq0l2dzx.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx3lntpwo.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj9_0g6cf.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  -- Base cases\n  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcmr1bod8.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then return -1 end\n    if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n    if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3zctdj45.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfl8r1m5l.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpfl8r1m5l.lua:12: in local 'candidate'\n\t/tmp/tmpfl8r1m5l.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1, m2 = 0, 0\n  local i, j = 1, 1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0cg66q1.lua:22: expected: 16.0, actual: 14.0\nstack traceback:\n\t/tmp/tmpa0cg66q1.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfl8r1m5l.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpfl8r1m5l.lua:12: in local 'candidate'\n\t/tmp/tmpfl8r1m5l.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx3lntpwo.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1)\n  end\n  return get_median(arr1, arr2 + n / 2, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4py81vd3.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmp4py81vd3.lua:12: in local 'candidate'\n\t/tmp/tmp4py81vd3.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx3lntpwo.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_d0rpx6.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph_d0rpx6.lua:12: in local 'candidate'\n\t/tmp/tmph_d0rpx6.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j = 1, 1\n    local m1, m2 = -1, -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ds7sx1l.lua:22: expected: 16.0, actual: 14.0\nstack traceback:\n\t/tmp/tmp9ds7sx1l.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local count = 0\n    local m1 = 0\n    local m2 = 0\n    while count < n + 1 do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1ozoq05.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsfzeqyeg.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_15lhci.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpi_15lhci.lua:12: in local 'candidate'\n\t/tmp/tmpi_15lhci.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyrxi35kq.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}