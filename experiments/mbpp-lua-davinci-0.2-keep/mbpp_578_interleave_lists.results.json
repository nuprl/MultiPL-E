{
  "name": "mbpp_578_interleave_lists",
  "language": "lua",
  "prompt": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tresult[#result + 1] = list1[i]\n\t\tresult[#result + 1] = list2[i]\n\t\tresult[#result + 1] = list3[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        table.insert(result, list1[i])\n        table.insert(result, list2[i])\n        table.insert(result, list3[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        table.insert(result, list1[i])\n        table.insert(result, list2[i])\n        table.insert(result, list3[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tresult[#result + 1] = list1[i]\n\t\tresult[#result + 1] = list2[i]\n\t\tresult[#result + 1] = list3[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tresult[#result + 1] = list1[i]\n\t\tresult[#result + 1] = list2[i]\n\t\tresult[#result + 1] = list3[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result+1] = list1[i]\n    result[#result+1] = list2[i]\n    result[#result+1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[(i - 1) * 3 + 1] = list1[i]\n        result[(i - 1) * 3 + 2] = list2[i]\n        result[(i - 1) * 3 + 3] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123700,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local interleaved_list = {}\n    for i = 1, #list1 do\n        table.insert(interleaved_list, list1[i])\n        table.insert(interleaved_list, list2[i])\n        table.insert(interleaved_list, list3[i])\n    end\n    return interleaved_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123700,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tresult[#result+1] = list1[i]\n\t\tresult[#result+1] = list2[i]\n\t\tresult[#result+1] = list3[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123700,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tresult[#result + 1] = list1[i]\n\t\tresult[#result + 1] = list2[i]\n\t\tresult[#result + 1] = list3[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tresult[#result + 1] = list1[i]\n\t\tresult[#result + 1] = list2[i]\n\t\tresult[#result + 1] = list3[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    table.insert(result, list1[i])\n    table.insert(result, list2[i])\n    table.insert(result, list3[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123700,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        table.insert(result, list1[i])\n        table.insert(result, list2[i])\n        table.insert(result, list3[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result+1] = list1[i]\n    result[#result+1] = list2[i]\n    result[#result+1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    table.insert(result, list1[i])\n    table.insert(result, list2[i])\n    table.insert(result, list3[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123700,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tresult[#result + 1] = list1[i]\n\t\tresult[#result + 1] = list2[i]\n\t\tresult[#result + 1] = list3[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        table.insert(result, list1[i])\n        table.insert(result, list2[i])\n        table.insert(result, list3[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        table.insert(result, list1[i])\n        table.insert(result, list2[i])\n        table.insert(result, list3[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        table.insert(result, list1[i])\n        table.insert(result, list2[i])\n        table.insert(result, list3[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    table.insert(result, list1[i])\n    table.insert(result, list2[i])\n    table.insert(result, list3[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123700,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i=1,#list1 do\n        result[#result+1] = list1[i]\n        result[#result+1] = list2[i]\n        result[#result+1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123700,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tresult[#result + 1] = list1[i]\n\t\tresult[#result + 1] = list2[i]\n\t\tresult[#result + 1] = list3[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result+1] = list1[i]\n    result[#result+1] = list2[i]\n    result[#result+1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i, v in ipairs(list1) do\n        table.insert(result, v)\n        table.insert(result, list2[i])\n        table.insert(result, list3[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123700,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tresult[#result + 1] = list1[i]\n\t\tresult[#result + 1] = list2[i]\n\t\tresult[#result + 1] = list3[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result+1] = list1[i]\n    result[#result+1] = list2[i]\n    result[#result+1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        table.insert(result, list1[i])\n        table.insert(result, list2[i])\n        table.insert(result, list3[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tresult[#result + 1] = list1[i]\n\t\tresult[#result + 1] = list2[i]\n\t\tresult[#result + 1] = list3[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        table.insert(result, list1[i])\n        table.insert(result, list2[i])\n        table.insert(result, list3[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local interleaved = {}\n  for i = 1, #list1 do\n    interleaved[#interleaved + 1] = list1[i]\n    interleaved[#interleaved + 1] = list2[i]\n    interleaved[#interleaved + 1] = list3[i]\n  end\n  return interleaved\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123700,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tresult[#result+1] = list1[i]\n\t\tresult[#result+1] = list2[i]\n\t\tresult[#result+1] = list3[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123700,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        table.insert(result, list1[i])\n        table.insert(result, list2[i])\n        table.insert(result, list3[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    table.insert(result, list1[i])\n    table.insert(result, list2[i])\n    table.insert(result, list3[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123700,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tresult[#result + 1] = list1[i]\n\t\tresult[#result + 1] = list2[i]\n\t\tresult[#result + 1] = list3[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tresult[#result + 1] = list1[i]\n\t\tresult[#result + 1] = list2[i]\n\t\tresult[#result + 1] = list3[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    table.insert(result, list1[i])\n    table.insert(result, list2[i])\n    table.insert(result, list3[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123700,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n    local result = {}\n    for i = 1, #list1 do\n        result[#result + 1] = list1[i]\n        result[#result + 1] = list2[i]\n        result[#result + 1] = list3[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n  local result = {}\n  for i = 1, #list1 do\n    result[#result + 1] = list1[i]\n    result[#result + 1] = list2[i]\n    result[#result + 1] = list3[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}