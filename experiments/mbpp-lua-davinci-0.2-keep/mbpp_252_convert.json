{
  "name": "mbpp_252_convert",
  "language": "lua",
  "prompt": "-- Write a python function to convert complex numbers to polar coordinates.\nlocal function convert(numbers)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert\n    lu.assertEquals(candidate(1), {1.0, 0.0})\n    lu.assertEquals(candidate(4), {4.0, 0.0})\n    lu.assertEquals(candidate(5), {5.0, 0.0})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local result = {}\n  for i, number in ipairs(numbers) do\n    local polar = {}\n    polar.r = math.sqrt(number.x^2 + number.y^2)\n    polar.phi = math.atan2(number.y, number.x)\n    result[i] = polar\n  end\n  return result\nend",
    "  local polar = {}\n  for i, v in ipairs(numbers) do\n    local r = math.sqrt(v.real^2 + v.imag^2)\n    local theta = math.atan2(v.imag, v.real)\n    polar[i] = {r = r, theta = theta}\n  end\n  return polar\nend",
    "\tlocal x = numbers.x\n\tlocal y = numbers.y\n\tlocal r = math.sqrt(x^2 + y^2)\n\tlocal theta = math.atan2(y, x)\n\treturn {r = r, theta = theta}\nend",
    "    local polar = {}\n    for i, v in ipairs(numbers) do\n        local r = math.sqrt(v.real^2 + v.imag^2)\n        local phi = math.atan2(v.imag, v.real)\n        polar[i] = {r = r, phi = phi}\n    end\n    return polar\nend",
    "    local polar = {}\n    for i, number in ipairs(numbers) do\n        polar[i] = {\n            r = math.sqrt(number.x^2 + number.y^2),\n            theta = math.atan2(number.y, number.x)\n        }\n    end\n    return polar\nend",
    "    local polar = {}\n    for _, number in ipairs(numbers) do\n        local r = math.sqrt(number.real^2 + number.imag^2)\n        local theta = math.atan(number.imag / number.real)\n        table.insert(polar, {r = r, theta = theta})\n    end\n    return polar\nend",
    "  local polar = {}\n  for i, v in ipairs(numbers) do\n    local r = math.sqrt(v.real ^ 2 + v.imag ^ 2)\n    local theta = math.atan(v.imag / v.real)\n    polar[i] = { r = r, theta = theta }\n  end\n  return polar\nend",
    "\tlocal result = {}\n\tfor i, v in ipairs(numbers) do\n\t\tlocal r = math.sqrt(v.real * v.real + v.imag * v.imag)\n\t\tlocal theta = math.atan(v.imag / v.real)\n\t\tresult[i] = {r = r, theta = theta}\n\tend\n\treturn result\nend",
    "  local polar = {}\n  for i = 1, #numbers do\n    local number = numbers[i]\n    local r = math.sqrt(number.real^2 + number.imaginary^2)\n    local theta = math.atan(number.imaginary/number.real)\n    polar[i] = {r = r, theta = theta}\n  end\n  return polar\nend",
    "    local polar = {}\n    for i, v in ipairs(numbers) do\n        local r = math.sqrt(v.real^2 + v.imag^2)\n        local theta = math.atan(v.imag/v.real)\n        polar[i] = {r, theta}\n    end\n    return polar\nend",
    "    local polar = {}\n    for _, number in ipairs(numbers) do\n        local r = math.sqrt(number.real ^ 2 + number.imaginary ^ 2)\n        local theta = math.atan(number.imaginary / number.real)\n        table.insert(polar, {r = r, theta = theta})\n    end\n    return polar\nend",
    "  local polar = {}\n  for i, number in ipairs(numbers) do\n    local x, y = number:match(\"(%d+%.?%d*)%+(%d+%.?%d*)i\")\n    local r = math.sqrt(x^2 + y^2)\n    local theta = math.atan(y/x)\n    polar[i] = {r = r, theta = theta}\n  end\n  return polar\nend",
    "  local polar = {}\n  for _, number in ipairs(numbers) do\n    local r = math.sqrt(number.real^2 + number.imag^2)\n    local theta = math.atan2(number.imag, number.real)\n    table.insert(polar, {r = r, theta = theta})\n  end\n  return polar\nend",
    "  local polar = {}\n  for i,v in ipairs(numbers) do\n    polar[i] = {math.abs(v), math.atan2(v.i, v.r)}\n  end\n  return polar\nend",
    "  local polar = {}\n  for i, number in ipairs(numbers) do\n    local r = math.sqrt(number.real^2 + number.imag^2)\n    local theta = math.atan(number.imag, number.real)\n    polar[i] = {r = r, theta = theta}\n  end\n  return polar\nend",
    "\tlocal result = {}\n\tfor i, v in ipairs(numbers) do\n\t\tlocal r = math.sqrt(v.real * v.real + v.imag * v.imag)\n\t\tlocal theta = math.atan(v.imag / v.real)\n\t\ttable.insert(result, {r = r, theta = theta})\n\tend\n\treturn result\nend",
    "  local result = {}\n  for i, v in ipairs(numbers) do\n    local r = math.sqrt(v.real^2 + v.imag^2)\n    local theta = math.atan(v.imag/v.real)\n    result[i] = {r=r, theta=theta}\n  end\n  return result\nend",
    "    local result = {}\n    for _, number in ipairs(numbers) do\n        local r = math.sqrt(number.real^2 + number.imag^2)\n        local theta = math.atan2(number.imag, number.real)\n        table.insert(result, {r = r, theta = theta})\n    end\n    return result\nend",
    "    local result = {}\n    for _, number in ipairs(numbers) do\n        local r = math.sqrt(number.real^2 + number.imag^2)\n        local theta = math.atan(number.imag / number.real)\n        table.insert(result, {r=r, theta=theta})\n    end\n    return result\nend",
    "    local polar = {}\n    for i, v in ipairs(numbers) do\n        local r = math.sqrt(v.real^2 + v.imag^2)\n        local theta = math.atan2(v.imag, v.real)\n        polar[i] = {r = r, theta = theta}\n    end\n    return polar\nend"
  ]
}