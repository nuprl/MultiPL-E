{
  "name": "mbpp_567_issort_list",
  "language": "lua",
  "prompt": "-- Write a function to check whether a specified list is sorted or not.\nlocal function issort_list(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = issort_list\n    lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 12, 14, 16, 17}), true)\n    lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 12, 14, 20, 17}), false)\n    lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 15, 14, 20}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local list2 = list1:copy()\n    list2:sort()\n    return list1 == list2\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        list2[i] = list1[i]\n    end\n    table.sort(list2)\n    for i = 1, #list1 do\n        if list1[i] ~= list2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    local list2 = copy_list(list1)\n    sort_list(list2)\n    return isequal_list(list1, list2)\nend",
    "\tfor i = 1, #list1 - 1 do\n\t\tif list1[i] > list1[i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tlocal len = #list1\n\tlocal flag = true\n\tfor i = 1, len - 1 do\n\t\tif list1[i] > list1[i + 1] then\n\t\t\tflag = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn flag\nend",
    "    local list2 = {}\n    for i, v in ipairs(list1) do\n        list2[i] = v\n    end\n    table.sort(list2)\n    for i, v in ipairs(list1) do\n        if v ~= list2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    local i = 1\n    while i < #list1 do\n        if list1[i] > list1[i+1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        list2[i] = list1[i]\n    end\n    table.sort(list2)\n    for i = 1, #list1 do\n        if list1[i] ~= list2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "  for i = 1, #list1 - 1 do\n    if list1[i] > list1[i + 1] then\n      return false\n    end\n  end\n  return true\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlist2[i] = v\n\tend\n\ttable.sort(list2)\n\tfor i, v in ipairs(list1) do\n\t\tif v ~= list2[i] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    local len = #list1\n    for i = 1, len - 1 do\n        if list1[i] > list1[i + 1] then\n            return false\n        end\n    end\n    return true\nend",
    "    local len = #list1\n    for i = 1, len - 1 do\n        if list1[i] > list1[i + 1] then\n            return false\n        end\n    end\n    return true\nend",
    "    local list2 = {}\n    for i, v in ipairs(list1) do\n        list2[i] = v\n    end\n    table.sort(list2)\n    for i, v in ipairs(list1) do\n        if v ~= list2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "\tlocal len = #list1\n\tfor i = 1, len - 1 do\n\t\tif list1[i] > list1[i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tlocal len = #list1\n\tfor i = 1, len - 1 do\n\t\tif list1[i] > list1[i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tlocal len = #list1\n\tfor i = 1, len - 1 do\n\t\tif list1[i] > list1[i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    local list2 = list1:copy()\n    list2:sort()\n    return list1 == list2\nend",
    "\tlocal list2 = table.copy(list1)\n\ttable.sort(list2)\n\treturn table.equal(list1, list2)\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    list2[i] = list1[i]\n  end\n  table.sort(list2)\n  for i = 1, #list1 do\n    if list1[i] ~= list2[i] then\n      return false\n    end\n  end\n  return true\nend",
    "    for i = 1, #list1 - 1 do\n        if list1[i] > list1[i + 1] then\n            return false\n        end\n    end\n    return true\nend"
  ]
}