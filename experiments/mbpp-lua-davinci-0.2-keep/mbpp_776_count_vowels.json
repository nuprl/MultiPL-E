{
  "name": "mbpp_776_count_vowels",
  "language": "lua",
  "prompt": "-- Write a function to count those characters which have vowels as their neighbors in the given string.\nlocal function count_vowels(test_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_vowels\n    lu.assertEquals(candidate('bestinstareels'), 7)\n    lu.assertEquals(candidate('partofthejourneyistheend'), 12)\n    lu.assertEquals(candidate('amazonprime'), 5)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i == 1 then\n                if is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            elseif i == #test_str then\n                if is_vowel(test_str:sub(i - 1, i - 1)) then\n                    count = count + 1\n                end\n            else\n                if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) then\n      if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n        count = count + 1\n      end\n      if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) and (is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      if i > 1 then\n        local prev = test_str:sub(i - 1, i - 1)\n        if prev == 'a' or prev == 'e' or prev == 'i' or prev == 'o' or prev == 'u' then\n          count = count + 1\n        end\n      end\n      if i < #test_str then\n        local next = test_str:sub(i + 1, i + 1)\n        if next == 'a' or next == 'e' or next == 'i' or next == 'o' or next == 'u' then\n          count = count + 1\n        end\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 then\n                local prev = test_str:sub(i - 1, i - 1)\n                if prev == 'a' or prev == 'e' or prev == 'i' or prev == 'o' or prev == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next = test_str:sub(i + 1, i + 1)\n                if next == 'a' or next == 'e' or next == 'i' or next == 'o' or next == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) then\n      if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif (i > 1 and i < #test_str) then\n\t\t\tif (vowels[test_str:sub(i-1, i-1)] and vowels[test_str:sub(i+1, i+1)]) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            local prev_char = test_str:sub(i - 1, i - 1)\n            local next_char = test_str:sub(i + 1, i + 1)\n            if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' or\n                next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if table.contains(vowels, char) then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if table.contains(vowels, prev_char) then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if table.contains(vowels, next_char) then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  local vowels = {\n    ['a'] = true,\n    ['e'] = true,\n    ['i'] = true,\n    ['o'] = true,\n    ['u'] = true,\n  }\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if vowels[char] then\n      if i > 1 and vowels[test_str:sub(i - 1, i - 1)] then\n        count = count + 1\n      end\n      if i < #test_str and vowels[test_str:sub(i + 1, i + 1)] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tif char == ' ' then\n\t\t\tcount = count + 1\n\t\telseif char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n\t\t\tif i > 1 then\n\t\t\t\tlocal prev_char = test_str:sub(i - 1, i - 1)\n\t\t\t\tif prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif i < #test_str then\n\t\t\t\tlocal next_char = test_str:sub(i + 1, i + 1)\n\t\t\t\tif next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend"
  ]
}