{
  "name": "mbpp_776_count_vowels",
  "language": "lua",
  "prompt": "-- Write a function to count those characters which have vowels as their neighbors in the given string.\nlocal function count_vowels(test_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_vowels\n    lu.assertEquals(candidate('bestinstareels'), 7)\n    lu.assertEquals(candidate('partofthejourneyistheend'), 12)\n    lu.assertEquals(candidate('amazonprime'), 5)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i == 1 then\n                if is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            elseif i == #test_str then\n                if is_vowel(test_str:sub(i - 1, i - 1)) then\n                    count = count + 1\n                end\n            else\n                if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) then\n      if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n        count = count + 1\n      end\n      if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) and (is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      if i > 1 then\n        local prev = test_str:sub(i - 1, i - 1)\n        if prev == 'a' or prev == 'e' or prev == 'i' or prev == 'o' or prev == 'u' then\n          count = count + 1\n        end\n      end\n      if i < #test_str then\n        local next = test_str:sub(i + 1, i + 1)\n        if next == 'a' or next == 'e' or next == 'i' or next == 'o' or next == 'u' then\n          count = count + 1\n        end\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 then\n                local prev = test_str:sub(i - 1, i - 1)\n                if prev == 'a' or prev == 'e' or prev == 'i' or prev == 'o' or prev == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next = test_str:sub(i + 1, i + 1)\n                if next == 'a' or next == 'e' or next == 'i' or next == 'o' or next == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) then\n      if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif (i > 1 and i < #test_str) then\n\t\t\tif (vowels[test_str:sub(i-1, i-1)] and vowels[test_str:sub(i+1, i+1)]) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            local prev_char = test_str:sub(i - 1, i - 1)\n            local next_char = test_str:sub(i + 1, i + 1)\n            if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' or\n                next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if table.contains(vowels, char) then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if table.contains(vowels, prev_char) then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if table.contains(vowels, next_char) then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  local vowels = {\n    ['a'] = true,\n    ['e'] = true,\n    ['i'] = true,\n    ['o'] = true,\n    ['u'] = true,\n  }\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if vowels[char] then\n      if i > 1 and vowels[test_str:sub(i - 1, i - 1)] then\n        count = count + 1\n      end\n      if i < #test_str and vowels[test_str:sub(i + 1, i + 1)] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tif char == ' ' then\n\t\t\tcount = count + 1\n\t\telseif char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n\t\t\tif i > 1 then\n\t\t\t\tlocal prev_char = test_str:sub(i - 1, i - 1)\n\t\t\t\tif prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif i < #test_str then\n\t\t\t\tlocal next_char = test_str:sub(i + 1, i + 1)\n\t\t\t\tif next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tif vowels[char] then\n\t\t\tif vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif i > 1 and i < #test_str then\n\t\t\tif (table.contains(vowels, test_str:sub(i-1, i-1)) or table.contains(vowels, test_str:sub(i+1, i+1))) and table.contains(vowels, test_str:sub(i, i)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      if i > 1 then\n        local prev_c = test_str:sub(i - 1, i - 1)\n        if prev_c == 'a' or prev_c == 'e' or prev_c == 'i' or prev_c == 'o' or prev_c == 'u' then\n          count = count + 1\n        end\n      end\n      if i < #test_str then\n        local next_c = test_str:sub(i + 1, i + 1)\n        if next_c == 'a' or next_c == 'e' or next_c == 'i' or next_c == 'o' or next_c == 'u' then\n          count = count + 1\n        end\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) and (is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if is_vowel(c) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) then\n      if i == 1 then\n        if is_vowel(test_str:sub(i + 1, i + 1)) then\n          count = count + 1\n        end\n      elseif i == #test_str then\n        if is_vowel(test_str:sub(i - 1, i - 1)) then\n          count = count + 1\n        end\n      else\n        if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n          count = count + 1\n        end\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif i == 1 then\n\t\t\tif test_str:sub(i + 1, i + 1):lower() == vowels[1] or test_str:sub(i + 1, i + 1):lower() == vowels[2] or test_str:sub(i + 1, i + 1):lower() == vowels[3] or test_str:sub(i + 1, i + 1):lower() == vowels[4] or test_str:sub(i + 1, i + 1):lower() == vowels[5] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\telseif i == #test_str then\n\t\t\tif test_str:sub(i - 1, i - 1):lower() == vowels[1] or test_str:sub(i - 1, i - 1):lower() == vowels[2] or test_str:sub(i - 1, i - 1):lower() == vowels[3] or test_str:sub(i - 1, i - 1):lower() == vowels[4] or test_str:sub(i - 1, i - 1):lower() == vowels[5] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\telse\n\t\t\tif test_str:sub(i + 1, i + 1):lower() == vowels[1] or test_str:sub(i + 1, i + 1):lower() == vowels[2] or test_str:sub(i + 1, i + 1):lower() == vowels[3] or test_str:sub(i + 1, i + 1):lower() == vowels[4] or test_str:sub(i + 1, i + 1):lower() == vowels[5] or test_str:sub(i - 1, i - 1):lower() == vowels[1] or test_str:sub(i - 1, i - 1):lower() == vowels[2] or test_str:sub(i - 1, i",
    "    local count = 0\n    for i=1, #test_str do\n        local c = test_str:sub(i,i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 then\n                local prev = test_str:sub(i-1,i-1)\n                if prev == 'a' or prev == 'e' or prev == 'i' or prev == 'o' or prev == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next = test_str:sub(i+1,i+1)\n                if next == 'a' or next == 'e' or next == 'i' or next == 'o' or next == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        local next_char = test_str:sub(i + 1, i + 1)\n        local prev_char = test_str:sub(i - 1, i - 1)\n        if (next_char and table.contains(vowels, next_char)) or\n            (prev_char and table.contains(vowels, prev_char)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i = 1, #test_str do\n        if (i == 1 and vowels[test_str:sub(i + 1, i + 1)]) or (i == #test_str and vowels[test_str:sub(i - 1, i - 1)]) then\n            count = count + 1\n        elseif vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i == 1 then\n                if test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u' then\n                    count = count + 1\n                end\n            elseif i == #test_str then\n                if test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u' then\n                    count = count + 1\n                end\n            else\n                if test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u' then\n                    count = count + 1\n                end\n                if test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u' then\n                    count",
    "\tlocal count = 0\n\tfor i = 1, #test_str - 1 do\n\t\tif is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif (test_str:sub(i, i) == vowels[1] or test_str:sub(i, i) == vowels[2] or test_str:sub(i, i) == vowels[3] or test_str:sub(i, i) == vowels[4] or test_str:sub(i, i) == vowels[5]) and (test_str:sub(i+1, i+1) == vowels[1] or test_str:sub(i+1, i+1) == vowels[2] or test_str:sub(i+1, i+1) == vowels[3] or test_str:sub(i+1, i+1) == vowels[4] or test_str:sub(i+1, i+1) == vowels[5]) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:find(\"[aeiou]\") then\n            if i > 1 and test_str:sub(i - 1, i - 1):find(\"[aeiou]\") then\n                count = count + 1\n            end\n            if i < #test_str and test_str:sub(i + 1, i + 1):find(\"[aeiou]\") then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            elseif i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if i < #test_str then\n            if table.contains(vowels, test_str:sub(i, i)) and table.contains(vowels, test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i,i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i-1,i-1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i+1,i+1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i = 1, #test_str - 1 do\n        if (vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)]) or\n            (vowels[test_str:sub(i, i)] and vowels[test_str:sub(i - 1, i - 1)]) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if c:match(\"[aeiou]\") then\n      if i > 1 and test_str:sub(i - 1, i - 1):match(\"[aeiou]\") then\n        count = count + 1\n      end\n      if i < #test_str and test_str:sub(i + 1, i + 1):match(\"[aeiou]\") then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if (test_str:sub(i, i) == 'a' or test_str:sub(i, i) == 'e' or test_str:sub(i, i) == 'i' or test_str:sub(i, i) == 'o' or test_str:sub(i, i) == 'u') and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local ch = test_str:sub(i, i)\n        local next_ch = test_str:sub(i + 1, i + 1)\n        if next_ch and is_vowel(next_ch) then\n            count = count + 1\n        end\n        if is_vowel(ch) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) and (is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif i < #test_str and is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif (test_str:sub(i, i) == \"a\" or test_str:sub(i, i) == \"e\" or test_str:sub(i, i) == \"i\" or test_str:sub(i, i) == \"o\" or test_str:sub(i, i) == \"u\") and (test_str:sub(i - 1, i - 1) == \"a\" or test_str:sub(i - 1, i - 1) == \"e\" or test_str:sub(i - 1, i - 1) == \"i\" or test_str:sub(i - 1, i - 1) == \"o\" or test_str:sub(i - 1, i - 1) == \"u\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if char:find('[aeiou]') then\n      if i > 1 and vowels[test_str:sub(i - 1, i - 1)] then\n        count = count + 1\n      end\n      if i < #test_str and vowels[test_str:sub(i + 1, i + 1)] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif test_str:sub(i, i) == \"a\" or test_str:sub(i, i) == \"e\" or test_str:sub(i, i) == \"i\" or test_str:sub(i, i) == \"o\" or test_str:sub(i, i) == \"u\" then\n\t\t\tif test_str:sub(i - 1, i - 1) == \"a\" or test_str:sub(i - 1, i - 1) == \"e\" or test_str:sub(i - 1, i - 1) == \"i\" or test_str:sub(i - 1, i - 1) == \"o\" or test_str:sub(i - 1, i - 1) == \"u\" then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif test_str:sub(i + 1, i + 1) == \"a\" or test_str:sub(i + 1, i + 1) == \"e\" or test_str:sub(i + 1, i + 1) == \"i\" or test_str:sub(i + 1, i + 1) == \"o\" or test_str:sub(i + 1, i + 1) == \"u\" then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\tprint(\"The number of vowels with vowels as neighbors is \" .. count)\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] then\n\t\t\tif vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if char:find(\"[aeiou]\") then\n      if i > 1 and test_str:sub(i - 1, i - 1):find(\"[aeiou]\") then\n        count = count + 1\n      end\n      if i < #test_str and test_str:sub(i + 1, i + 1):find(\"[aeiou]\") then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tif char:match(\"[aeiou]\") then\n\t\t\tif i > 1 and test_str:sub(i - 1, i - 1):match(\"[aeiou]\") then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and test_str:sub(i + 1, i + 1):match(\"[aeiou]\") then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i,i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i-1,i-1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i+1,i+1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 then\n                local prev = test_str:sub(i - 1, i - 1)\n                if prev == 'a' or prev == 'e' or prev == 'i' or prev == 'o' or prev == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next = test_str:sub(i + 1, i + 1)\n                if next == 'a' or next == 'e' or next == 'i' or next == 'o' or next == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif i == 1 then\n\t\t\tif test_str:sub(i + 1, i + 1):find(vowels) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\telseif i == #test_str then\n\t\t\tif test_str:sub(i - 1, i - 1):find(vowels) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\telse\n\t\t\tif test_str:sub(i - 1, i - 1):find(vowels) or test_str:sub(i + 1, i + 1):find(vowels) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif (i < #test_str) and (is_vowel(test_str:sub(i, i)) or is_vowel(test_str:sub(i + 1, i + 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) and (is_vowel(test_str:sub(i + 1, i + 1)) or is_vowel(test_str:sub(i - 1, i - 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if (test_str:sub(i, i) == 'a' or test_str:sub(i, i) == 'e' or test_str:sub(i, i) == 'i' or test_str:sub(i, i) == 'o' or test_str:sub(i, i) == 'u') and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] then\n\t\t\tif vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif i > 1 and i < #test_str then\n\t\t\tif (table.contains(vowels, test_str:sub(i - 1, i - 1)) and table.contains(vowels, test_str:sub(i + 1, i + 1))) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    local next_c = test_str:sub(i + 1, i + 1)\n    if next_c and is_vowel(next_c) or is_vowel(c) then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i = 1, #test_str do\n        if i < #test_str then\n            if table.contains(vowels, test_str:sub(i, i)) and table.contains(vowels, test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif i > 1 and i < #test_str then\n\t\t\tfor j = 1, #vowels do\n\t\t\t\tif test_str:sub(i, i) == vowels[j] then\n\t\t\t\t\tif test_str:sub(i - 1, i - 1) == vowels[j] or test_str:sub(i + 1, i + 1) == vowels[j] then\n\t\t\t\t\t\tcount = count + 1\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i == 1 then\n                if is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            elseif i == #test_str then\n                if is_vowel(test_str:sub(i - 1, i - 1)) then\n                    count = count + 1\n                end\n            else\n                if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if table.contains(vowels, c) then\n            local prev = test_str:sub(i - 1, i - 1)\n            local next = test_str:sub(i + 1, i + 1)\n            if table.contains(vowels, prev) or table.contains(vowels, next) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 then\n                local prev = test_str:sub(i - 1, i - 1)\n                if prev == 'a' or prev == 'e' or prev == 'i' or prev == 'o' or prev == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next = test_str:sub(i + 1, i + 1)\n                if next == 'a' or next == 'e' or next == 'i' or next == 'o' or next == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif (i < #test_str) and (is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n      if i > 1 and i < #test_str then\n        if test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u' then\n          count = count + 1\n        end\n        if test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u' then\n          count = count + 1\n        end\n      elseif i == 1 then\n        if test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u' then\n          count = count + 1\n        end\n      elseif i == #test_str then\n        if test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif (is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if table.contains(vowels, char) then\n      if i > 1 and table.contains(vowels, test_str:sub(i - 1, i - 1)) then\n        count = count + 1\n      end\n      if i < #test_str and table.contains(vowels, test_str:sub(i + 1, i + 1)) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif i > 1 and i < #test_str then\n\t\t\tif table.contains(vowels, test_str:sub(i, i)) and (table.contains(vowels, test_str:sub(i - 1, i - 1)) or table.contains(vowels, test_str:sub(i + 1, i + 1))) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if vowels[c] then\n            if vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i-1, i-1) == 'a' or test_str:sub(i-1, i-1) == 'e' or test_str:sub(i-1, i-1) == 'i' or test_str:sub(i-1, i-1) == 'o' or test_str:sub(i-1, i-1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i+1, i+1) == 'a' or test_str:sub(i+1, i+1) == 'e' or test_str:sub(i+1, i+1) == 'i' or test_str:sub(i+1, i+1) == 'o' or test_str:sub(i+1, i+1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) then\n      if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n        count = count + 1\n      end\n      if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str - 1 do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and test_str:sub(i - 1, i - 1) == 'a' then\n                count = count + 1\n            end\n            if i < #test_str and test_str:sub(i + 1, i + 1) == 'a' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        local n = test_str:sub(i + 1, i + 1)\n        if c:find(\"[aeiou]\") and n:find(\"[aeiou]\") then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if (test_str:sub(i, i) == \"a\" or test_str:sub(i, i) == \"e\" or test_str:sub(i, i) == \"i\" or test_str:sub(i, i) == \"o\" or test_str:sub(i, i) == \"u\") and (test_str:sub(i + 1, i + 1) == \"a\" or test_str:sub(i + 1, i + 1) == \"e\" or test_str:sub(i + 1, i + 1) == \"i\" or test_str:sub(i + 1, i + 1) == \"o\" or test_str:sub(i + 1, i + 1) == \"u\") then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) and (is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\" then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == \"a\" or prev_char == \"e\" or prev_char == \"i\" or prev_char == \"o\" or prev_char == \"u\" then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == \"a\" or next_char == \"e\" or next_char == \"i\" or next_char == \"o\" or next_char == \"u\" then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local ch = test_str:sub(i, i)\n    if ch == 'a' or ch == 'e' or ch == 'i' or ch == 'o' or ch == 'u' then\n      if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n        count = count + 1\n      end\n      if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i ~= 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i ~= #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tif table.contains(vowels, char) then\n\t\t\tif i > 1 then\n\t\t\t\tlocal prev_char = test_str:sub(i - 1, i - 1)\n\t\t\t\tif table.contains(vowels, prev_char) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif i < #test_str then\n\t\t\t\tlocal next_char = test_str:sub(i + 1, i + 1)\n\t\t\t\tif table.contains(vowels, next_char) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\" then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == \"a\" or prev_char == \"e\" or prev_char == \"i\" or prev_char == \"o\" or prev_char == \"u\" then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == \"a\" or next_char == \"e\" or next_char == \"i\" or next_char == \"o\" or next_char == \"u\" then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and test_str:sub(i - 1, i - 1) == 'a' then\n                count = count + 1\n            end\n            if i < #test_str and test_str:sub(i + 1, i + 1) == 'a' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif i == 1 then\n\t\t\tif test_str:sub(i + 1, i + 1):find(vowels) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\telseif i == #test_str then\n\t\t\tif test_str:sub(i - 1, i - 1):find(vowels) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\telse\n\t\t\tif test_str:sub(i - 1, i - 1):find(vowels) or test_str:sub(i + 1, i + 1):find(vowels) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i == 1 then\n                if is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            elseif i == #test_str then\n                if is_vowel(test_str:sub(i - 1, i - 1)) then\n                    count = count + 1\n                end\n            else\n                if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if is_vowel(c) then\n      local prev = test_str:sub(i - 1, i - 1)\n      local next = test_str:sub(i + 1, i + 1)\n      if is_vowel(prev) or is_vowel(next) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str - 1 do\n\t\tif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif c:find('[aeiou]') then\n\t\t\tif i > 1 and test_str:sub(i - 1, i - 1):find('[aeiou]') then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and test_str:sub(i + 1, i + 1):find('[aeiou]') then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif test_str:sub(i, i):match(\"[aeiou]\") then\n\t\t\tif i > 1 and test_str:sub(i - 1, i - 1):match(\"[aeiou]\") then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and test_str:sub(i + 1, i + 1):match(\"[aeiou]\") then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #test_str do\n    if i < #test_str then\n      if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\t\t\tif i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if table.contains(vowels, char) then\n            if i > 1 and table.contains(vowels, test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and table.contains(vowels, test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i ~= 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i ~= #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str - 1 do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if (test_str:sub(i, i) == \"a\" or test_str:sub(i, i) == \"e\" or test_str:sub(i, i) == \"i\" or test_str:sub(i, i) == \"o\" or test_str:sub(i, i) == \"u\") and (test_str:sub(i + 1, i + 1) == \"a\" or test_str:sub(i + 1, i + 1) == \"e\" or test_str:sub(i + 1, i + 1) == \"i\" or test_str:sub(i + 1, i + 1) == \"o\" or test_str:sub(i + 1, i + 1) == \"u\") then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  for i = 1, #test_str do\n    if vowels[test_str:sub(i, i)] and (vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)]) then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif i == 1 and vowels[test_str:sub(i, i)] then\n\t\t\tcount = count + 1\n\t\telseif i == #test_str and vowels[test_str:sub(i, i)] then\n\t\t\tcount = count + 1\n\t\telseif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) and (is_vowel(test_str:sub(i + 1, i + 1)) or is_vowel(test_str:sub(i - 1, i - 1))) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if is_vowel(char) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\" then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == \"a\" or test_str:sub(i - 1, i - 1) == \"e\" or test_str:sub(i - 1, i - 1) == \"i\" or test_str:sub(i - 1, i - 1) == \"o\" or test_str:sub(i - 1, i - 1) == \"u\") then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == \"a\" or test_str:sub(i + 1, i + 1) == \"e\" or test_str:sub(i + 1, i + 1) == \"i\" or test_str:sub(i + 1, i + 1) == \"o\" or test_str:sub(i + 1, i + 1) == \"u\") then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\" then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == \"a\" or prev_char == \"e\" or prev_char == \"i\" or prev_char == \"o\" or prev_char == \"u\" then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == \"a\" or next_char == \"e\" or next_char == \"i\" or next_char == \"o\" or next_char == \"u\" then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local vowels = {\n        ['a'] = true,\n        ['e'] = true,\n        ['i'] = true,\n        ['o'] = true,\n        ['u'] = true,\n    }\n    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if vowels[char] then\n            if i > 1 and vowels[test_str:sub(i - 1, i - 1)] then\n                count = count + 1\n            end\n            if i < #test_str and vowels[test_str:sub(i + 1, i + 1)] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        local next_char = test_str:sub(i + 1, i + 1)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if char:find('[aeiou]') then\n      if i > 1 and test_str:sub(i - 1, i - 1):find('[aeiou]') then\n        count = count + 1\n      end\n      if i < #test_str and test_str:sub(i + 1, i + 1):find('[aeiou]') then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str - 1 do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif i < #test_str then\n\t\t\tfor j = 1, #vowels do\n\t\t\t\tif test_str:sub(i, i) == vowels[j] and test_str:sub(i + 1, i + 1) == vowels[j] then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i == 1 then\n                if is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            elseif i == #test_str then\n                if is_vowel(test_str:sub(i - 1, i - 1)) then\n                    count = count + 1\n                end\n            else\n                if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if (i == 1 or i == #test_str) and vowels[test_str:sub(i, i)] then\n            count = count + 1\n        elseif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n      if i > 1 and test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u' then\n        count = count + 1\n      end\n      if i < #test_str and test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u' then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif (test_str:sub(i, i) == 'a' or test_str:sub(i, i) == 'e' or test_str:sub(i, i) == 'i' or test_str:sub(i, i) == 'o' or test_str:sub(i, i) == 'u') and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i == 1 then\n                if is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            elseif i == #test_str then\n                if is_vowel(test_str:sub(i - 1, i - 1)) then\n                    count = count + 1\n                end\n            else\n                if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i,i)] and vowels[test_str:sub(i+1,i+1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == ' ' then\n            goto continue\n        end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n                count = count + 1\n                goto continue\n            end\n        end\n        ::continue::\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) and (i == 1 or is_vowel(test_str:sub(i - 1, i - 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\t\t\tif i > 1 and i < #test_str then\n\t\t\t\tlocal prev = test_str:sub(i - 1, i - 1)\n\t\t\t\tlocal next = test_str:sub(i + 1, i + 1)\n\t\t\t\tif prev == 'a' or prev == 'e' or prev == 'i' or prev == 'o' or prev == 'u' then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\t\tif next == 'a' or next == 'e' or next == 'i' or next == 'o' or next == 'u' then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if (test_str:sub(i, i) == 'a' or test_str:sub(i, i) == 'e' or test_str:sub(i, i) == 'i' or test_str:sub(i, i) == 'o' or test_str:sub(i, i) == 'u') and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str - 1 do\n    if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] and (vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)]) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) and (is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tlocal n = test_str:sub(i + 1, i + 1)\n\t\tif is_vowel(c) or is_vowel(n) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str - 1 do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i,i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i-1,i-1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i+1,i+1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif (test_str:sub(i, i) == \"a\" or test_str:sub(i, i) == \"e\" or test_str:sub(i, i) == \"i\" or test_str:sub(i, i) == \"o\" or test_str:sub(i, i) == \"u\") and (test_str:sub(i-1, i-1) == \"a\" or test_str:sub(i-1, i-1) == \"e\" or test_str:sub(i-1, i-1) == \"i\" or test_str:sub(i-1, i-1) == \"o\" or test_str:sub(i-1, i-1) == \"u\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\" then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == \"a\" or prev_char == \"e\" or prev_char == \"i\" or prev_char == \"o\" or prev_char == \"u\" then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == \"a\" or next_char == \"e\" or next_char == \"i\" or next_char == \"o\" or next_char == \"u\" then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            elseif i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if i == 1 then\n            if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n                count = count + 1\n            end\n        elseif i == #test_str then\n            if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i - 1, i - 1)] then\n                count = count + 1\n            end\n        else\n            if vowels[test_str:sub(i, i)] and (vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)]) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {\n        ['a'] = true,\n        ['e'] = true,\n        ['i'] = true,\n        ['o'] = true,\n        ['u'] = true,\n    }\n    for i = 1, #test_str - 1 do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str - 1 do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  local vowels = {'a','e','i','o','u'}\n  for i = 1, #test_str do\n    local char = test_str:sub(i,i)\n    local next_char = test_str:sub(i+1,i+1)\n    local prev_char = test_str:sub(i-1,i-1)\n    if (next_char and table.contains(vowels, next_char)) or (prev_char and table.contains(vowels, prev_char)) then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 then\n                local prev = test_str:sub(i - 1, i - 1)\n                if prev == 'a' or prev == 'e' or prev == 'i' or prev == 'o' or prev == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next = test_str:sub(i + 1, i + 1)\n                if next == 'a' or next == 'e' or next == 'i' or next == 'o' or next == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            local prev_char = test_str:sub(i - 1, i - 1)\n            local next_char = test_str:sub(i + 1, i + 1)\n            if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n                count = count + 1\n            end\n            if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] and (vowels[test_str:sub(i + 1, i + 1)] or vowels[test_str:sub(i - 1, i - 1)]) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if (test_str:sub(i, i) == 'a' or test_str:sub(i, i) == 'e' or test_str:sub(i, i) == 'i' or test_str:sub(i, i) == 'o' or test_str:sub(i, i) == 'u') and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) and (i == 1 or is_vowel(test_str:sub(i - 1, i - 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) then\n      if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n        count = count + 1\n      end\n      if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend"
  ]
}