{
  "name": "mbpp_750_add_tuple",
  "language": "lua",
  "prompt": "-- Write a function to add the given tuple to the given list.\nlocal function add_tuple(test_list, test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_tuple\n    lu.assertEquals(candidate({5, 6, 7}, {9, 10}), {5, 6, 7, 9, 10})\n    lu.assertEquals(candidate({6, 7, 8}, {10, 11}), {6, 7, 8, 10, 11})\n    lu.assertEquals(candidate({7, 8, 9}, {11, 12}), {7, 8, 9, 11, 12})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local test_list_len = #test_list\n  local test_tup_len = #test_tup\n  for i = 1, test_tup_len do\n    test_list[test_list_len + i] = test_tup[i]\n  end\nend",
    "  local test_list_size = #test_list\n  local test_tup_size = #test_tup\n  for i = 1, test_tup_size do\n    test_list[test_list_size + i] = test_tup[i]\n  end\nend",
    "  local new_list = {}\n  for _, tup in ipairs(test_list) do\n    table.insert(new_list, tup)\n  end\n  table.insert(new_list, test_tup)\n  return new_list\nend",
    "  test_list[#test_list + 1] = test_tup\nend",
    "    local new_list = {}\n    for _, tup in ipairs(test_list) do\n        table.insert(new_list, tup)\n    end\n    table.insert(new_list, test_tup)\n    return new_list\nend",
    "  local new_list = {}\n  for _, tup in ipairs(test_list) do\n    table.insert(new_list, tup)\n  end\n  table.insert(new_list, test_tup)\n  return new_list\nend",
    "\tlocal new_list = {}\n\tfor i, v in ipairs(test_list) do\n\t\tif type(v) == \"table\" then\n\t\t\tnew_list[i] = add_tuple(v, test_tup)\n\t\telse\n\t\t\tnew_list[i] = v\n\t\tend\n\tend\n\treturn new_list\nend",
    "\tlocal new_list = {}\n\tfor _, tup in ipairs(test_list) do\n\t\ttable.insert(new_list, tup)\n\tend\n\ttable.insert(new_list, test_tup)\n\treturn new_list\nend",
    "    local test_tup_list = test_list[test_tup[1]]\n    if test_tup_list == nil then\n        test_tup_list = {}\n        test_list[test_tup[1]] = test_tup_list\n    end\n    table.insert(test_tup_list, test_tup)\nend",
    "    local test_list_copy = {}\n    for i, v in ipairs(test_list) do\n        test_list_copy[i] = v\n    end\n    table.insert(test_list_copy, test_tup)\n    return test_list_copy\nend",
    "  local new_list = {}\n  for i, v in ipairs(test_list) do\n    new_list[i] = v\n  end\n  new_list[#new_list + 1] = test_tup\n  return new_list\nend",
    "    local new_list = {}\n    for i, v in ipairs(test_list) do\n        new_list[i] = v\n    end\n    new_list[#new_list+1] = test_tup\n    return new_list\nend",
    "    local new_list = {}\n    for i, v in ipairs(test_list) do\n        new_list[i] = v\n    end\n    new_list[#new_list + 1] = test_tup\n    return new_list\nend",
    "  local new_list = {}\n  for _, tup in ipairs(test_list) do\n    if tup[1] == test_tup[1] then\n      new_list[#new_list + 1] = test_tup\n    else\n      new_list[#new_list + 1] = tup\n    end\n  end\n  return new_list\nend",
    "  local new_list = {}\n  for _, tup in ipairs(test_list) do\n    if tup[1] == test_tup[1] then\n      new_list[#new_list+1] = test_tup\n    else\n      new_list[#new_list+1] = tup\n    end\n  end\n  return new_list\nend",
    "  local test_list_len = #test_list\n  local test_tup_len = #test_tup\n  for i = 1, test_tup_len do\n    test_list[test_list_len + i] = test_tup[i]\n  end\nend",
    "    local test_list_len = #test_list\n    local test_tup_len = #test_tup\n    for i = 1, test_tup_len do\n        test_list[test_list_len + i] = test_tup[i]\n    end\nend",
    "    local test_list_len = #test_list\n    local test_tup_len = #test_tup",
    "    local new_list = {}\n    for i, v in ipairs(test_list) do\n        new_list[i] = v\n    end\n    new_list[#new_list + 1] = test_tup\n    return new_list\nend",
    "\tlocal new_list = {}\n\tfor i, v in ipairs(test_list) do\n\t\tnew_list[i] = v\n\tend\n\tnew_list[#new_list + 1] = test_tup\n\treturn new_list\nend"
  ]
}