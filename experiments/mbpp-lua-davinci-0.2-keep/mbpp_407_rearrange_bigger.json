{
  "name": "mbpp_407_rearrange_bigger",
  "language": "lua",
  "prompt": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    for i = #digits, 2, -1 do\n        if digits[i] > digits[i - 1] then\n            local min_index = i\n            for j = i + 1, #digits do\n                if digits[j] < digits[min_index] and digits[j] > digits[i - 1] then\n                    min_index = j\n                end\n            end\n            digits[i - 1], digits[min_index] = digits[min_index], digits[i - 1]\n            table.sort(digits, i, #digits)\n            local result = 0\n            for i = 1, #digits do\n                result = result * 10 + digits[i]\n            end\n            return result\n        end\n    end\n    return -1\nend",
    "  local digits = {}\n  local m = n\n  while m > 0 do\n    table.insert(digits, m % 10)\n    m = math.floor(m / 10)\n  end\n  local len = #digits\n  local i = len - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = len\n  while digits[i] <= digits[j] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = len\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, len do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i - 1] >= digits[i] do\n    i = i - 1\n  end\n  if i <= 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  j = #digits\n  while i < j do\n    digits[i], digits[j] = digits[j], digits[i]\n    i = i + 1\n    j = j - 1\n  end\n  return table.concat(digits)\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  local tmp = digits[i]\n  digits[i] = digits[j]\n  digits[j] = tmp\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    tmp = digits[k]\n    digits[k] = digits[l]\n    digits[l] = tmp\n    k = k + 1\n    l = l - 1\n  end\n  local result = \"\"\n  for i = 1, #digits do\n    result = result .. tostring(digits[i])\n  end\n  return result\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] > digits[i + 1] then\n      local j = i + 1\n      while j < #digits and digits[j] < digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j - 1] = digits[j - 1], digits[i]\n      table.sort(digits, i + 1, #digits)\n      break\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  return tonumber(table.concat(digits))\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return table.concat(digits)\nend",
    "    local digits = {}\n    local i = 1\n    while n > 0 do\n        digits[i] = n % 10\n        n = math.floor(n / 10)\n        i = i + 1\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] > digits[i + 1] then\n            local j = #digits\n            while digits[j] >= digits[i] do\n                j = j - 1\n            end\n            digits[i], digits[j] = digits[j], digits[i]\n            local a, b = i + 1, #digits\n            while a < b do\n                digits[a], digits[b] = digits[b], digits[a]\n                a = a + 1\n                b = b - 1\n            end\n            local result = 0\n            for j = 1, #digits do\n                result = result * 10 + digits[j]\n            end\n            return result\n        end\n    end\n    return nil\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] <= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "  local s = tostring(n)\n  local t = {}\n  for i = 1, #s do\n    t[i] = tonumber(s:sub(i, i))\n  end\n  local i = #t - 1\n  while i > 0 and t[i] >= t[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #t\n  while t[j] <= t[i] do\n    j = j - 1\n  end\n  t[i], t[j] = t[j], t[i]\n  local k = i + 1\n  local l = #t\n  while k < l do\n    t[k], t[l] = t[l], t[k]\n    k = k + 1\n    l = l - 1\n  end\n  local r = 0\n  for i = 1, #t do\n    r = r * 10 + t[i]\n  end\n  return r\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] > digits[i + 1] then\n      local j = i + 1\n      while j < #digits and digits[j] < digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j - 1] = digits[j - 1], digits[i]\n      local k = i + 1\n      local l = #digits\n      while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n      end\n      local result = 0\n      for i = 1, #digits do\n        result = result * 10 + digits[i]\n      end\n      return result\n    end\n  end\n  return -1\nend",
    "  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  table.sort(digits)\n  local bigger = 0\n  for i = 1, #digits do\n    bigger = bigger * 10 + digits[i]\n  end\n  return bigger\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    digits[#digits+1] = tonumber(d)\n  end\n  for i = #digits-1, 1, -1 do\n    if digits[i] < digits[i+1] then\n      local min = math.huge\n      local min_idx = 0\n      for j = i+1, #digits do\n        if digits[j] > digits[i] and digits[j] < min then\n          min = digits[j]\n          min_idx = j\n        end\n      end\n      digits[i], digits[min_idx] = digits[min_idx], digits[i]\n      table.sort(digits, i+1, #digits)\n      return table.concat(digits)\n    end\n  end\n  return nil\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = {}\n    for i = 1, #digits do\n        result[i] = tostring(digits[i])\n    end\n    return table.concat(result)\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end",
    "\tlocal digits = {}\n\tfor i = 1, #n do\n\t\tdigits[i] = tonumber(n:sub(i, i))\n\tend\n\tlocal i = #digits - 1\n\twhile i > 0 and digits[i] >= digits[i + 1] do\n\t\ti = i - 1\n\tend\n\tif i == 0 then\n\t\treturn nil\n\tend\n\tlocal j = #digits\n\twhile digits[j] <= digits[i] do\n\t\tj = j - 1\n\tend\n\tdigits[i], digits[j] = digits[j], digits[i]\n\tlocal k = i + 1\n\tlocal l = #digits\n\twhile k < l do\n\t\tdigits[k], digits[l] = digits[l], digits[k]\n\t\tk = k + 1\n\t\tl = l - 1\n\tend\n\tlocal result = \"\"\n\tfor i = 1, #digits do\n\t\tresult = result .. tostring(digits[i])\n\tend\n\treturn result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits\n    while i > 1 and digits[i-1] >= digits[i] do\n        i = i - 1\n    end\n    if i == 1 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i-1] do\n        j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "\tlocal digits = {}\n\tlocal n_copy = n\n\twhile n_copy > 0 do\n\t\ttable.insert(digits, n_copy % 10)\n\t\tn_copy = math.floor(n_copy / 10)\n\tend\n\ttable.sort(digits)\n\tlocal n_copy = n\n\tlocal i = 1\n\twhile n_copy > 0 do\n\t\tif n_copy % 10 ~= digits[i] then\n\t\t\tbreak\n\t\tend\n\t\tn_copy = math.floor(n_copy / 10)\n\t\ti = i + 1\n\tend\n\tlocal n_copy = n\n\tlocal i = 1\n\twhile n_copy > 0 do\n\t\tif n_copy % 10 == digits[i] then\n\t\t\tbreak\n\t\tend\n\t\tn_copy = math.floor(n_copy / 10)\n\t\ti = i + 1\n\tend\n\tlocal n_copy = n\n\tlocal i = 1\n\twhile n_copy > 0 do\n\t\tif n_copy % 10 == digits[i] then\n\t\t\tbreak\n\t\tend\n\t\tn_copy = math.floor(n_copy / 10)\n\t\ti = i + 1\n\tend\n\tlocal n_copy = n\n\tlocal i = 1\n\twhile n_copy > 0 do\n\t\tif n_copy % 10 == digits[i] then\n\t\t\tbreak\n\t\tend\n\t\tn_copy = math.floor(n_copy / 10)\n\t\ti = i + 1\n\tend\n\tlocal n_copy = n\n\tlocal i = 1\n\twhile n_copy > 0 do\n\t\tif n_copy % 10 == digits[i] then\n\t\t\tbreak\n\t\tend\n\t\tn_copy = math.floor(n_copy / 10)\n\t\ti = i + 1\n\tend\n\tlocal n_copy = n\n\tlocal i = 1\n\twhile n_copy > 0 do\n\t\tif n_copy % 10 == digits[i] then\n\t\t\tbreak\n\t\tend\n\t\tn_copy = math.floor(n_copy / 10)\n\t\ti",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] < digits[i + 1] then\n      local j = i + 1\n      while j < #digits and digits[j] > digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j - 1] = digits[j - 1], digits[i]\n      local left = i + 1\n      local right = #digits\n      while left < right do\n        digits[left], digits[right] = digits[right], digits[left]\n        left = left + 1\n        right = right - 1\n      end\n      return table.concat(digits)\n    end\n  end\n  return nil\nend",
    "    local s = tostring(n)\n    local len = #s\n    local i = len - 1\n    while i > 0 and s:sub(i, i) >= s:sub(i + 1, i + 1) do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = len\n    while s:sub(j, j) <= s:sub(i, i) do\n        j = j - 1\n    end\n    s = s:sub(1, i - 1) .. s:sub(j, j) .. s:sub(i + 1, j - 1) .. s:sub(i, i) .. s:sub(j + 1, len)\n    return tonumber(s)\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] < digits[i + 1] then\n            local j = i + 1\n            while j < #digits and digits[j] > digits[i] do\n                j = j + 1\n            end\n            digits[i], digits[j - 1] = digits[j - 1], digits[i]\n            for k = i + 1, #digits do\n                for l = k + 1, #digits do\n                    if digits[l] < digits[k] then\n                        digits[k], digits[l] = digits[l], digits[k]\n                    end\n                end\n            end\n            break\n        end\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i-1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i-1] do\n        j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    return table.concat(digits)\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i-1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i-1] do\n        j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i - 1] >= digits[i] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return table.concat(digits)\nend",
    "  local digits = {}\n  for digit in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(digit))\n  end\n  table.sort(digits)\n  return tonumber(table.concat(digits))\nend",
    "  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  table.sort(digits)\n  local bigger = 0\n  for i = 1, #digits do\n    bigger = bigger * 10 + digits[i]\n  end\n  return bigger\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    table.sort(digits)\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i >= 1 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i + 1], digits[k] = digits[k], digits[i + 1]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  local n = n\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  table.sort(digits)\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i - 1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n        j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = {}\n    for _, v in ipairs(digits) do\n        table.insert(result, tostring(v))\n    end\n    return table.concat(result)\nend",
    "    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "  local digits = {}\n  local nn = n\n  while nn > 0 do\n    local d = nn % 10\n    table.insert(digits, d)\n    nn = math.floor(nn / 10)\n  end\n  table.sort(digits)\n  local result = 0\n  for i, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    table.sort(digits)\n    local i = #digits\n    while i > 1 and digits[i-1] >= digits[i] do\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i-1] do\n        j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    return table.concat(digits)\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i - 1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n        j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    return table.concat(digits)\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  return tonumber(table.concat(digits))\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] > digits[i + 1] then\n      local j = i + 1\n      while j < #digits and digits[j] < digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j] = digits[j], digits[i]\n      table.sort(digits, i + 1, #digits)\n      local result = 0\n      for _, d in ipairs(digits) do\n        result = result * 10 + d\n      end\n      return result\n    end\n  end\n  return -1\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    digits[#digits+1] = tonumber(d)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i+1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "\tlocal digits = {}\n\tlocal i = 1\n\twhile n > 0 do\n\t\tdigits[i] = n % 10\n\t\tn = math.floor(n / 10)\n\t\ti = i + 1\n\tend\n\tfor i = #digits - 1, 1, -1 do\n\t\tif digits[i] < digits[i + 1] then\n\t\t\tlocal j = i + 1\n\t\t\twhile j <= #digits and digits[i] < digits[j] do\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\t\tj = j - 1\n\t\t\tdigits[i], digits[j] = digits[j], digits[i]\n\t\t\tfor k = i + 1, math.floor((#digits + i) / 2) do\n\t\t\t\tdigits[k], digits[#digits + i - k + 1] = digits[#digits + i - k + 1], digits[k]\n\t\t\tend\n\t\t\tbreak\n\t\tend\n\tend\n\tlocal result = 0\n\tfor i = 1, #digits do\n\t\tresult = result * 10 + digits[i]\n\tend\n\treturn result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then return nil end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return table.concat(digits)\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = {}\n    for i = 1, #digits do\n        result[i] = tostring(digits[i])\n    end\n    return table.concat(result)\nend",
    "\tlocal digits = {}\n\twhile n > 0 do\n\t\ttable.insert(digits, 1, n % 10)\n\t\tn = math.floor(n / 10)\n\tend\n\tlocal i = #digits\n\twhile i > 1 and digits[i] <= digits[i - 1] do\n\t\ti = i - 1\n\tend\n\tif i == 1 then\n\t\treturn nil\n\tend\n\tlocal j = #digits\n\twhile digits[j] <= digits[i - 1] do\n\t\tj = j - 1\n\tend\n\tdigits[i - 1], digits[j] = digits[j], digits[i - 1]\n\tlocal k = #digits\n\twhile i < k do\n\t\tdigits[i], digits[k] = digits[k], digits[i]\n\t\ti = i + 1\n\t\tk = k - 1\n\tend\n\tlocal result = 0\n\tfor _, d in ipairs(digits) do\n\t\tresult = result * 10 + d\n\tend\n\treturn result\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits\n    while i > 1 and digits[i - 1] >= digits[i] do\n        i = i - 1\n    end\n    if i <= 1 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n        j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = \"\"\n    for _, d in ipairs(digits) do\n        result = result .. tostring(d)\n    end\n    return tonumber(result)\nend",
    "    local s = tostring(n)\n    local len = #s\n    local i = len - 1\n    while i > 0 and s:sub(i, i) >= s:sub(i + 1, i + 1) do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = len\n    while s:sub(j, j) <= s:sub(i, i) do\n        j = j - 1\n    end\n    local t = s:sub(1, i - 1) .. s:sub(j, j) .. s:sub(i + 1, j - 1) .. s:sub(i, i) .. s:sub(j + 1, len)\n    return tonumber(t)\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i-1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i-1] do\n        j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i-1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i-1] do\n        j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    return table.concat(digits)\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    table.sort(digits)\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i > 1 then\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n      j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n      digits[i], digits[k] = digits[k], digits[i]\n      i = i + 1\n      k = k - 1\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = \"\"\n  for i = 1, #digits do\n    result = result .. tostring(digits[i])\n  end\n  return tonumber(result)\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = {}\n  for i = 1, #digits do\n    result[i] = tostring(digits[i])\n  end\n  return table.concat(result)\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] < digits[i + 1] then\n      local j = i + 1\n      while j <= #digits and digits[i] < digits[j] do\n        j = j + 1\n      end\n      digits[i], digits[j - 1] = digits[j - 1], digits[i]\n      table.sort(digits, i + 1, #digits)\n      return tonumber(table.concat(digits))\n    end\n  end\n  return nil\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = len - 1\n  while i > 0 and s:sub(i, i) >= s:sub(i + 1, i + 1) do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = len\n  while s:sub(j, j) <= s:sub(i, i) do\n    j = j - 1\n  end\n  local t = s:sub(1, i - 1) .. s:sub(j, j) .. s:sub(i + 1, j - 1) .. s:sub(i, i) .. s:sub(j + 1, len)\n  return tonumber(t)\nend",
    "  local digits = {}\n  for digit in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(digit))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, digit in ipairs(digits) do\n    result = result * 10 + digit\n  end\n  return result\nend",
    "  local digits = {}\n  local i = 1\n  while n > 0 do\n    digits[i] = n % 10\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] < digits[i + 1] then\n      local j = #digits\n      while digits[i] >= digits[j] do\n        j = j - 1\n      end\n      digits[i], digits[j] = digits[j], digits[i]\n      local k = i + 1\n      local l = #digits\n      while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n      end\n      local result = 0\n      for i = 1, #digits do\n        result = result * 10 + digits[i]\n      end\n      return result\n    end\n  end\n  return -1\nend",
    "  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i > 1 then\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n      j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n      digits[i], digits[k] = digits[k], digits[i]\n      i = i + 1\n      k = k - 1\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] > digits[i + 1] then\n      local j = i + 1\n      while j < #digits and digits[j] < digits[i] do\n        j = j + 1\n      end\n      local t = digits[i]\n      digits[i] = digits[j]\n      digits[j] = t\n      table.sort(digits, i + 1, #digits)\n      break\n    end\n  end\n  local result = 0\n  for i = #digits, 1, -1 do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    return table.concat(digits)\nend",
    "  local digits = {}\n  for digit in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(digit))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return tonumber(table.concat(digits))\nend",
    "\tlocal digits = {}\n\tlocal n_copy = n\n\twhile n_copy > 0 do\n\t\ttable.insert(digits, n_copy % 10)\n\t\tn_copy = math.floor(n_copy / 10)\n\tend\n\tfor i = #digits - 1, 1, -1 do\n\t\tif digits[i] < digits[i + 1] then\n\t\t\tlocal min_index = i + 1\n\t\t\tfor j = i + 2, #digits do\n\t\t\t\tif digits[j] < digits[min_index] and digits[j] > digits[i] then\n\t\t\t\t\tmin_index = j\n\t\t\t\tend\n\t\t\tend\n\t\t\tlocal temp = digits[i]\n\t\t\tdigits[i] = digits[min_index]\n\t\t\tdigits[min_index] = temp\n\t\t\ttable.sort(digits, i + 1, #digits)\n\t\t\tlocal result = 0\n\t\t\tfor j = 1, #digits do\n\t\t\t\tresult = result * 10 + digits[j]\n\t\t\tend\n\t\t\treturn result\n\t\tend\n\tend\n\treturn -1\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = \"\"\n    for _, v in ipairs(digits) do\n        result = result .. tostring(v)\n    end\n    return tonumber(result)\nend",
    "    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        n = (n - digit) / 10\n        table.insert(digits, digit)\n    end\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i - 1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return nil\n    end\n    local j = i\n    while j < #digits and digits[j] > digits[i - 1] do\n        j = j + 1\n    end\n    digits[i - 1], digits[j - 1] = digits[j - 1], digits[i - 1]\n    local k = i\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, digit in ipairs(digits) do\n        result = result * 10 + digit\n    end\n    return result\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, digit in ipairs(digits) do\n    result = result * 10 + digit\n  end\n  return result\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  for i = #digits, 1, -1 do\n    if digits[i] > digits[i - 1] then\n      local tmp = digits[i]\n      digits[i] = digits[i - 1]\n      digits[i - 1] = tmp\n      break\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i > 1 then\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n      j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n      digits[i], digits[k] = digits[k], digits[i]\n      i = i + 1\n      k = k - 1\n    end\n  end\n  local result = table.concat(digits)\n  return result\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  i = i + 1\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = l - 1\n    while i > 0 and s:sub(i, i) >= s:sub(i + 1, i + 1) do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = l\n    while s:sub(j, j) <= s:sub(i, i) do\n        j = j - 1\n    end\n    s = s:sub(1, i - 1) .. s:sub(j, j) .. s:sub(i + 1, j - 1) .. s:sub(i, i) .. s:sub(j + 1, l)\n    return tonumber(s)\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  return table.concat(digits)\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i, i))\n  end\n  for i = #digits, 1, -1 do\n    if digits[i] > digits[i - 1] then\n      local tmp = digits[i]\n      digits[i] = digits[i - 1]\n      digits[i - 1] = tmp\n      break\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i > 0 then\n    local j = #digits\n    while digits[j] <= digits[i] do\n      j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n      digits[k], digits[l] = digits[l], digits[k]\n      k = k + 1\n      l = l - 1\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    table.sort(digits)\n    local bigger = 0\n    for i = 1, #digits do\n        bigger = bigger * 10 + digits[i]\n    end\n    return bigger\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    return table.concat(digits)\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch('.') do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, 1, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i - 1] >= digits[i] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return table.concat(digits)\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = {}\n    for i = 1, #digits do\n        result[i] = tostring(digits[i])\n    end\n    return table.concat(result)\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = \"\"\n  for i = 1, #digits do\n    result = result .. tostring(digits[i])\n  end\n  return tonumber(result)\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end",
    "    local digits = {}\n    local nn = n\n    while nn > 0 do\n        local digit = nn % 10\n        table.insert(digits, digit)\n        nn = math.floor(nn / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = \"\"\n  for i = 1, #digits do\n    result = result .. tostring(digits[i])\n  end\n  return tonumber(result)\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch(\".\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i - 1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n        j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "    local digits = {}\n    for i = 1, #tostring(n) do\n        digits[i] = tonumber(tostring(n):sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    digits[#digits + 1] = n_copy % 10\n    n_copy = math.floor(n_copy / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] < digits[i + 1] then\n      local j = i + 1\n      while j <= #digits and digits[j] > digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j - 1] = digits[j - 1], digits[i]\n      local k = i + 1\n      local l = #digits\n      while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n      end\n      break\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  local nn = n\n  while nn > 0 do\n    local d = nn % 10\n    table.insert(digits, d)\n    nn = math.floor(nn / 10)\n  end\n  local len = #digits\n  for i = len - 1, 1, -1 do\n    if digits[i] > digits[i + 1] then\n      local j = i + 1\n      while j < len and digits[j] < digits[i] do\n        j = j + 1\n      end\n      local tmp = digits[i]\n      digits[i] = digits[j]\n      digits[j] = tmp\n      break\n    end\n  end\n  local result = 0\n  for i = 1, len do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    digits[#digits+1] = tonumber(d)\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  local i = 1\n  while n > 0 do\n    digits[i] = n % 10\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n  local j = i - 1\n  while j > 1 do\n    if digits[j] > digits[j - 1] then\n      local k = j\n      while k < i and digits[k] > digits[j - 1] do\n        k = k + 1\n      end\n      digits[j - 1], digits[k - 1] = digits[k - 1], digits[j - 1]\n      local l, r = j, i - 1\n      while l < r do\n        digits[l], digits[r] = digits[r], digits[l]\n        l = l + 1\n        r = r - 1\n      end\n      break\n    end\n    j = j - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = {}\n    for i = 1, #digits do\n        result[i] = tostring(digits[i])\n    end\n    return table.concat(result)\nend",
    "    local s = tostring(n)\n    local t = {}\n    for i = 1, #s do\n        t[i] = tonumber(s:sub(i, i))\n    end\n    local i = #t - 1\n    while i > 0 and t[i] >= t[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #t\n    while t[j] <= t[i] do\n        j = j - 1\n    end\n    t[i], t[j] = t[j], t[i]\n    local k = #t\n    while i < k do\n        t[i], t[k] = t[k], t[i]\n        i = i + 1\n        k = k - 1\n    end\n    local r = 0\n    for i = 1, #t do\n        r = r * 10 + t[i]\n    end\n    return r\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "    local digits = {}\n    while n > 0 do\n        local digit = n % 10\n        n = (n - digit) / 10\n        table.insert(digits, digit)\n    end\n    local i = #digits - 1\n    while i >= 1 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i < 1 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, digit in ipairs(digits) do\n        result = result * 10 + digit\n    end\n    return result\nend",
    "    local digits = {}\n    for i = 1, #tostring(n) do\n        digits[i] = tonumber(tostring(n):sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i - 1] >= digits[i] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return table.concat(digits)\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, 1, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = \"\"\n    for i = 1, #digits do\n        result = result .. tostring(digits[i])\n    end\n    return tonumber(result)\nend",
    "  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  table.sort(digits, function(a, b) return a > b end)\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  local i = 1\n  while n > 0 do\n    digits[i] = n % 10\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n  local j = i - 1\n  while j > 1 and digits[j] <= digits[j - 1] do\n    j = j - 1\n  end\n  if j == 1 then\n    return -1\n  end\n  local k = i - 1\n  while digits[k] <= digits[j - 1] do\n    k = k - 1\n  end\n  digits[j - 1], digits[k] = digits[k], digits[j - 1]\n  local l = j\n  local r = i - 1\n  while l < r do\n    digits[l], digits[r] = digits[r], digits[l]\n    l = l + 1\n    r = r - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i - 1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n        j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = \"\"\n    for _, v in ipairs(digits) do\n        result = result .. tostring(v)\n    end\n    return result\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] <= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "  local s = tostring(n)\n  local i = #s\n  while i > 1 and s:sub(i, i) <= s:sub(i - 1, i - 1) do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #s\n  while s:sub(j, j) <= s:sub(i - 1, i - 1) do\n    j = j - 1\n  end\n  s = s:sub(1, i - 1) .. s:sub(j, j) .. s:sub(i, j - 1) .. s:sub(i - 1, i - 1) .. s:sub(j + 1, #s)\n  return tonumber(s)\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = l - 1\n  while i > 0 and s:sub(i, i) >= s:sub(i + 1, i + 1) do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = l\n  while s:sub(j, j) <= s:sub(i, i) do\n    j = j - 1\n  end\n  local t = s:sub(1, i - 1) .. s:sub(j, j)\n  local k = i + 1\n  while k < j do\n    t = t .. s:sub(k, k)\n    k = k + 1\n  end\n  t = t .. s:sub(i, i)\n  while k <= l do\n    t = t .. s:sub(k, k)\n    k = k + 1\n  end\n  return tonumber(t)\nend",
    "    local digits = {}\n    for i = 1, #tostring(n) do\n        digits[i] = tonumber(tostring(n):sub(i, i))\n    end\n    local i = #digits\n    while i > 1 and digits[i - 1] >= digits[i] do\n        i = i - 1\n    end\n    if i <= 1 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n        j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    j = #digits\n    while i < j do\n        digits[i], digits[j] = digits[j], digits[i]\n        i = i + 1\n        j = j - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "    local s = tostring(n)\n    local t = {}\n    for i = 1, #s do\n        t[i] = tonumber(s:sub(i, i))\n    end\n    local i = #t\n    while i > 1 and t[i - 1] >= t[i] do\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = #t\n    while t[j] <= t[i - 1] do\n        j = j - 1\n    end\n    t[i - 1], t[j] = t[j], t[i - 1]\n    local k = #t\n    while i < k do\n        t[i], t[k] = t[k], t[i]\n        i = i + 1\n        k = k - 1\n    end\n    local r = 0\n    for i = 1, #t do\n        r = r * 10 + t[i]\n    end\n    return r\nend",
    "  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i <= 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end",
    "  local digits = {}\n  local m = n\n  while m > 0 do\n    table.insert(digits, m % 10)\n    m = math.floor(m / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    table.sort(digits)\n    local result = 0\n    for i = #digits, 1, -1 do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] > digits[i + 1] then\n            local min = i + 1\n            for j = i + 2, #digits do\n                if digits[j] < digits[min] and digits[j] > digits[i] then\n                    min = j\n                end\n            end\n            digits[i], digits[min] = digits[min], digits[i]\n            table.sort(digits, i + 1, #digits)\n            local result = 0\n            for j = 1, #digits do\n                result = result * 10 + digits[j]\n            end\n            return result\n        end\n    end\n    return -1\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] > digits[i + 1] then\n            local j = i + 1\n            while j < #digits and digits[j] > digits[i] do\n                j = j + 1\n            end\n            j = j - 1\n            digits[i], digits[j] = digits[j], digits[i]\n            local tail = {}\n            for k = i + 1, #digits do\n                table.insert(tail, digits[k])\n            end\n            table.sort(tail)\n            for k = i + 1, #digits do\n                digits[k] = tail[k - i]\n            end\n            break\n        end\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    digits[#digits + 1] = tonumber(d)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = {}\n  for i = 1, #digits do\n    result[i] = tostring(digits[i])\n  end\n  return table.concat(result)\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end",
    "  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return table.concat(digits)\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end",
    "    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    table.sort(digits)\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i-1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i-1] do\n        j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    return table.concat(digits)\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = {}\n  for i = 1, #digits do\n    result[i] = tostring(digits[i])\n  end\n  return table.concat(result)\nend",
    "  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i,i))\n  end\n  local i = #digits\n  while i > 1 and digits[i-1] >= digits[i] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i > 1 then\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n      j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n      digits[i], digits[k] = digits[k], digits[i]\n      i = i + 1\n      k = k - 1\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  for digit in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(digit))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[i] >= digits[j] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return tonumber(table.concat(digits))\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] > digits[i + 1] then\n      local j = i + 1\n      while j < #digits and digits[j] < digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j] = digits[j], digits[i]\n      local k = i + 1\n      local l = #digits\n      while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n      end\n      break\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return table.concat(digits)\nend",
    "  local digits = {}\n  for digit in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(digit))\n  end\n  table.sort(digits)\n  local result = 0\n  for i, digit in ipairs(digits) do\n    result = result + digit * 10 ^ (i - 1)\n  end\n  return result\nend",
    "  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits - 1\n  while i >= 1 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] < digits[i + 1] then\n            local j = #digits\n            while digits[i] >= digits[j] do\n                j = j - 1\n            end\n            digits[i], digits[j] = digits[j], digits[i]\n            local k = i + 1\n            local l = #digits\n            while k < l do\n                digits[k], digits[l] = digits[l], digits[k]\n                k = k + 1\n                l = l - 1\n            end\n            return table.concat(digits)\n        end\n    end\n    return nil\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch(\".\") do\n        table.insert(digits, tonumber(d))\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] < digits[i + 1] then\n            local min = digits[i + 1]\n            local min_idx = i + 1\n            for j = i + 2, #digits do\n                if digits[j] < min and digits[j] > digits[i] then\n                    min = digits[j]\n                    min_idx = j\n                end\n            end\n            digits[i], digits[min_idx] = digits[min_idx], digits[i]\n            table.sort(digits, i + 1, #digits)\n            return tonumber(table.concat(digits))\n        end\n    end\n    return -1\nend",
    "  local digits = {}\n  local i = 1\n  while n > 0 do\n    digits[i] = n % 10\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n  local n_digits = i - 1\n  local j = n_digits - 1\n  while j > 0 and digits[j] >= digits[j + 1] do\n    j = j - 1\n  end\n  if j == 0 then\n    return nil\n  end\n  local k = n_digits\n  while digits[j] >= digits[k] do\n    k = k - 1\n  end\n  digits[j], digits[k] = digits[k], digits[j]\n  local l = j + 1\n  local r = n_digits\n  while l < r do\n    digits[l], digits[r] = digits[r], digits[l]\n    l = l + 1\n    r = r - 1\n  end\n  local result = 0\n  for i = 1, n_digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i > 1 then\n    local j = #digits\n    while digits[j] <= digits[i-1] do\n      j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = #digits\n    while i < k do\n      digits[i], digits[k] = digits[k], digits[i]\n      i = i + 1\n      k = k - 1\n    end\n  end\n  return tonumber(table.concat(digits))\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = \"\"\n  for _, d in ipairs(digits) do\n    result = result .. tostring(d)\n  end\n  return result\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = \"\"\n    for _, digit in ipairs(digits) do\n        result = result .. tostring(digit)\n    end\n    return tonumber(result)\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] > digits[i + 1] then\n      local j = i + 1\n      while j < #digits and digits[j] > digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j - 1] = digits[j - 1], digits[i]\n      table.sort(digits, i + 1, #digits)\n      local result = 0\n      for k = 1, #digits do\n        result = result * 10 + digits[k]\n      end\n      return result\n    end\n  end\n  return -1\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch('.') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    table.sort(digits)\n    local i = #digits\n    while i > 1 and digits[i-1] >= digits[i] do\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i-1] do\n        j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    return table.concat(digits)\nend",
    "\tlocal digits = {}\n\tlocal n_copy = n\n\twhile n_copy > 0 do\n\t\ttable.insert(digits, n_copy % 10)\n\t\tn_copy = math.floor(n_copy / 10)\n\tend\n\tfor i = #digits - 1, 1, -1 do\n\t\tif digits[i] > digits[i + 1] then\n\t\t\tlocal min_index = i + 1\n\t\t\tfor j = i + 1, #digits do\n\t\t\t\tif digits[j] < digits[min_index] and digits[j] > digits[i] then\n\t\t\t\t\tmin_index = j\n\t\t\t\tend\n\t\t\tend\n\t\t\tdigits[i], digits[min_index] = digits[min_index], digits[i]\n\t\t\ttable.sort(digits, i + 1, #digits)\n\t\t\tlocal result = 0\n\t\t\tfor j = 1, #digits do\n\t\t\t\tresult = result * 10 + digits[j]\n\t\t\tend\n\t\t\treturn result\n\t\tend\n\tend\n\treturn -1\nend",
    "    local digits = {}\n    for i = 1, #tostring(n) do\n        digits[i] = tonumber(tostring(n):sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] <= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while j > 0 and digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] <= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[i] >= digits[j] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = {}\n  for i = 1, #digits do\n    result[i] = tostring(digits[i])\n  end\n  return table.concat(result)\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = {}\n  for i = 1, #digits do\n    result[i] = tostring(digits[i])\n  end\n  return table.concat(result)\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = \"\"\n  for i = 1, #digits do\n    result = result .. tostring(digits[i])\n  end\n  return tonumber(result)\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, 1, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i > 1 then\n    local j = #digits\n    while digits[j] >= digits[i - 1] do\n      j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n      digits[i], digits[k] = digits[k], digits[i]\n      i = i + 1\n      k = k - 1\n    end\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    for i = #digits, 2, -1 do\n        if digits[i] > digits[i - 1] then\n            local j = i\n            while j < #digits and digits[j] > digits[i - 1] do\n                j = j + 1\n            end\n            digits[i - 1], digits[j - 1] = digits[j - 1], digits[i - 1]\n            table.sort(digits, i, #digits)\n            local result = 0\n            for k = 1, #digits do\n                result = result * 10 + digits[k]\n            end\n            return result\n        end\n    end\n    return -1\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  table.sort(digits, function(a, b) return a > b end)\n  local result = 0\n  for i, d in ipairs(digits) do\n    result = result + d * 10 ^ (i - 1)\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i+1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end",
    "  local s = tostring(n)\n  local i = #s - 1\n  while i > 0 and s:sub(i, i) >= s:sub(i + 1, i + 1) do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #s\n  while s:sub(j, j) <= s:sub(i, i) do\n    j = j - 1\n  end\n  s = s:sub(1, i - 1) .. s:sub(j, j) .. s:sub(i + 1, j - 1) .. s:sub(i, i) .. s:sub(j + 1, #s)\n  return tonumber(s)\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = \"\"\n  for i = 1, #digits do\n    result = result .. tostring(digits[i])\n  end\n  return tonumber(result)\nend",
    "    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] > digits[i + 1] then\n            local j = i + 1\n            while j < #digits and digits[j] < digits[i] do\n                j = j + 1\n            end\n            digits[i], digits[j] = digits[j], digits[i]\n            local k = i + 1\n            local l = #digits\n            while k < l do\n                digits[k], digits[l] = digits[l], digits[k]\n                k = k + 1\n                l = l - 1\n            end\n            break\n        end\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits\n    while i > 1 and digits[i-1] >= digits[i] do\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i-1] do\n        j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i > 0 then\n    local j = #digits\n    while digits[j] <= digits[i] do\n      j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n      digits[k], digits[l] = digits[l], digits[k]\n      k = k + 1\n      l = l - 1\n    end\n  end\n  local result = {}\n  for i = 1, #digits do\n    result[i] = tostring(digits[i])\n  end\n  return table.concat(result)\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits\n    while i > 1 and digits[i - 1] >= digits[i] do\n        i = i - 1\n    end\n    if i <= 1 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n        j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "  local s = tostring(n)\n  local i = #s\n  while i > 1 and s:byte(i) <= s:byte(i-1) do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = i\n  while j < #s and s:byte(j+1) > s:byte(i-1) do\n    j = j + 1\n  end\n  local t = s:sub(1, i-1) .. s:sub(j, j) .. s:sub(i, j-1) .. s:sub(i+1, j-1)\n  return tonumber(t)\nend",
    "    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] > digits[i + 1] then\n            local j = i + 1\n            while j < #digits and digits[i] > digits[j] do\n                j = j + 1\n            end\n            digits[i], digits[j - 1] = digits[j - 1], digits[i]\n            table.sort(digits, i + 1, #digits)\n            local result = 0\n            for k = 1, #digits do\n                result = result * 10 + digits[k]\n            end\n            return result\n        end\n    end\n    return -1\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = l\n  while i > 1 and s:sub(i, i) <= s:sub(i - 1, i - 1) do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = l\n  while s:sub(j, j) >= s:sub(i - 1, i - 1) do\n    j = j - 1\n  end\n  local t = s:sub(1, i - 2) .. s:sub(j, j) .. s:sub(i, j - 1) .. s:sub(i - 1, i - 1) .. s:sub(j + 1, l)\n  return tonumber(t)\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        local digit = n_copy % 10\n        table.insert(digits, digit)\n        n_copy = (n_copy - digit) / 10\n    end\n    table.sort(digits)\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    table.sort(digits)\n    local bigger = 0\n    for i = 1, #digits do\n        bigger = bigger * 10 + digits[i]\n    end\n    return bigger\nend",
    "    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] <= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, digit in ipairs(digits) do\n        result = result * 10 + digit\n    end\n    return result\nend",
    "  local digits = {}\n  local m = n\n  while m > 0 do\n    table.insert(digits, m % 10)\n    m = math.floor(m / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    table.sort(digits)\n    local bigger = 0\n    for i = #digits, 1, -1 do\n        bigger = bigger * 10 + digits[i]\n    end\n    return bigger\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = {}\n  for _, digit in ipairs(digits) do\n    result[#result + 1] = tostring(digit)\n  end\n  return table.concat(result)\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    return table.concat(digits)\nend",
    "    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] <= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = #digits\n    while i < k do\n        digits[i + 1], digits[k] = digits[k], digits[i + 1]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend",
    "    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = {}\n    for i = 1, #digits do\n        result[i] = tostring(digits[i])\n    end\n    return table.concat(result)\nend",
    "    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] <= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] > digits[i + 1] then\n            local min = i + 1\n            for j = i + 2, #digits do\n                if digits[j] < digits[min] and digits[j] > digits[i] then\n                    min = j\n                end\n            end\n            digits[i], digits[min] = digits[min], digits[i]\n            table.sort(digits, i + 1, #digits)\n            local result = 0\n            for j = 1, #digits do\n                result = result * 10 + digits[j]\n            end\n            return result\n        end\n    end\n    return -1\nend",
    "  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = i\n  while j < #digits and digits[j + 1] > digits[i - 1] do\n    j = j + 1\n  end\n  local tmp = digits[i - 1]\n  digits[i - 1] = digits[j]\n  digits[j] = tmp\n  local k = i\n  local l = #digits\n  while k < l do\n    tmp = digits[k]\n    digits[k] = digits[l]\n    digits[l] = tmp\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        table.insert(digits, tonumber(d))\n    end\n    table.sort(digits)\n    local result = 0\n    for i, d in ipairs(digits) do\n        result = result + d * 10 ^ (i - 1)\n    end\n    return result\nend",
    "    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend",
    "  local s = tostring(n)\n  local p = #s\n  while p > 1 and s:sub(p, p) <= s:sub(p - 1, p - 1) do\n    p = p - 1\n  end\n  if p == 1 then\n    return nil\n  end\n  local q = p\n  while q < #s and s:sub(q, q) > s:sub(p - 1, p - 1) do\n    q = q + 1\n  end\n  return tonumber(s:sub(1, p - 2) .. s:sub(q, q) .. s:sub(p, q - 1) .. s:sub(p - 1, p - 1) .. s:sub(q + 1))\nend",
    "  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = {}\n  for i = 1, #digits do\n    result[i] = tostring(digits[i])\n  end\n  return table.concat(result)\nend",
    "  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] > digits[i + 1] then\n      local j = i + 1\n      while j < #digits and digits[j] < digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j - 1] = digits[j - 1], digits[i]\n      local k = i + 1\n      local l = #digits\n      while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n      end\n      break\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  table.sort(digits)\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend",
    "  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  table.sort(digits)\n  local n_rearranged = 0\n  for i = 1, #digits do\n    n_rearranged = n_rearranged + digits[i] * 10 ^ (i - 1)\n  end\n  return n_rearranged\nend"
  ]
}