{
  "name": "mbpp_245_max_sum",
  "language": "lua",
  "prompt": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local len = #arr\n  local dp = {}\n  for i = 1, len do\n    dp[i] = {}\n    dp[i][i] = arr[i]\n    max_sum = math.max(max_sum, dp[i][i])\n  end\n  for i = 1, len do\n    for j = i + 1, len do\n      dp[i][j] = dp[i][j - 1] + arr[j]\n      max_sum = math.max(max_sum, dp[i][j])\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm58hho_h.lua:23: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpm58hho_h.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_i = 0\n  local max_sum_right_i = 0\n  local max_sum_left_j = 0\n  local max_sum_right_j = 0\n  local max_sum_left_k = 0\n  local max_sum_right_k = 0\n  local max_sum_left_l = 0\n  local max_sum_right_l = 0\n  local max_sum_left_m = 0\n  local max_sum_right_m = 0\n  local max_sum_left_n = 0\n  local max_sum_right_n = 0\n  local max_sum_left_o = 0\n  local max_sum_right_o = 0\n  local max_sum_left_p = 0\n  local max_sum_right_p = 0\n  local max_sum_left_q = 0\n  local max_sum_right_q = 0\n  local max_sum_left_r = 0\n  local max_sum_right_r = 0\n  local max_sum_left_s = 0\n  local max_sum_right_s = 0\n  local max_sum_left_t = 0\n  local max_sum_right_t = 0\n  local max_sum_left_u = 0\n  local max_sum_right_u = 0\n  local max_sum_left_v = 0\n  local max_sum_right_v = 0\n  local max_sum_left_w = 0\n  local max_sum_right_w = 0\n  local max_sum_left_x = 0\n  local max_sum_right_x = 0\n  local max_sum_left_y = 0\n  local max_sum_right_y = 0\n  local max_sum_left_z = 0\n  local max_sum_right_z = 0\n  local max_sum_left_aa = 0\n  local max_sum_right_aa = 0\n  local max_sum_left_ab = 0\n  local max_sum_right_ab = 0\n  local max\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe0w8mrgv.lua:56: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local len = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[len] = arr[len]\n  for i = 2, len do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = len - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, len do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7hfnaddk.lua:7: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_arr = {}\n  local max_sum_arr_rev = {}\n  local max_sum_arr_rev_rev = {}\n  local max_sum_arr_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2a7y9dzu.lua:32: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_arr = {}\n  local max_sum_arr_rev = {}\n  local max_sum_arr_rev_rev = {}\n  local max_sum_arr_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2a7y9dzu.lua:32: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum_arr = {}\n  local max_sum = 0\n  for i = 1, n do\n    max_sum_arr[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxaqa_q18.lua:27: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpxaqa_q18.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum_inc = {}\n  local max_sum_dec = {}\n  max_sum_inc[1] = arr[1]\n  max_sum_dec[n] = arr[n]\n  for i = 2, n do\n    max_sum_inc[i] = math.max(arr[i], max_sum_inc[i - 1] + arr[i])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_dec[i] = math.max(arr[i], max_sum_dec[i + 1] + arr[i])\n  end\n  local max_sum = max_sum_inc[1] + max_sum_dec[2]\n  for i = 2, n - 1 do\n    max_sum = math.max(max_sum, max_sum_inc[i] + max_sum_dec[i + 1])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9olg5_5.lua:24: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp_9olg5_5.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {0, 0}\n  end\n  for i = 1, n do\n    for j = 1, i do\n      if arr[j] < arr[i] then\n        dp[i][1] = math.max(dp[i][1], dp[j][1] + arr[i])\n      end\n    end\n  end\n  for i = n, 1, -1 do\n    for j = n, i, -1 do\n      if arr[j] < arr[i] then\n        dp[i][2] = math.max(dp[i][2], dp[j][2] + arr[i])\n      end\n    end\n  end\n  local max = 0\n  for i = 1, n do\n    max = math.max(max, dp[i][1] + dp[i][2] - arr[i])\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghhwwdqn.lua:32: expected: 194, actual: 184\nstack traceback:\n\t/tmp/tmpghhwwdqn.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_left[i] = max_sum\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_right[i] = max_sum\n  end\n  for i = 1, #arr - 1 do\n    local sum = max_sum_left[i] + max_sum_right[i + 1]\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbilx_kg2.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_arr = {arr[1]}\n    local max_sum_arr_i = 1\n    local max_sum_arr_j = 1\n    local sum = 0\n    local sum_arr = {}\n    local sum_arr_i = 1\n    local sum_arr_j = 1\n    for i = 2, n do\n        if arr[i] > arr[i - 1] then\n            sum = sum + arr[i]\n            sum_arr[sum_arr_j] = arr[i]\n            sum_arr_j = sum_arr_j + 1\n        else\n            if sum > max_sum then\n                max_sum = sum\n                max_sum_arr = sum_arr\n                max_sum_arr_i = sum_arr_i\n                max_sum_arr_j = sum_arr_j\n            end\n            sum = arr[i]\n            sum_arr = {arr[i]}\n            sum_arr_i = 1\n            sum_arr_j = 2\n        end\n    end\n    if sum > max_sum then\n        max_sum = sum\n        max_sum_arr = sum_arr\n        max_sum_arr_i = sum_arr_i\n        max_sum_arr_j = sum_arr_j\n    end\n    sum = 0\n    sum_arr = {}\n    sum_arr_i = 1\n    sum_arr_j = 1\n    for i = n - 1, 1, -1 do\n        if arr[i] > arr[i + 1] then\n            sum = sum + arr[i]\n            sum_arr[sum_arr_j] = arr[i]\n            sum_arr_j = sum_arr_j + 1\n        else\n            if sum > max_sum then\n                max_sum = sum\n                max_sum_arr = sum_arr\n                max_sum_arr_i = sum_arr_i\n                max_sum_arr_j = sum_arr_j\n            end\n            sum = arr[i]\n            sum_arr = {arr[i]}\n            sum_arr_i\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmpid1iam0q.lua:55: syntax error near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_inc = {}\n  local max_sum_dec = {}\n  local max_sum = 0\n  for i = 1, #arr do\n    max_sum_inc[i] = arr[i]\n    max_sum_dec[i] = arr[i]\n  end\n  for i = 2, #arr do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_inc[i] < max_sum_inc[j] + arr[i] then\n        max_sum_inc[i] = max_sum_inc[j] + arr[i]\n      end\n    end\n  end\n  for i = #arr - 1, 1, -1 do\n    for j = #arr, i + 1, -1 do\n      if arr[i] > arr[j] and max_sum_dec[i] < max_sum_dec[j] + arr[i] then\n        max_sum_dec[i] = max_sum_dec[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, #arr do\n    if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] then\n      max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  for i = 2, n do\n    max_sum_arr[i] = math.max(arr[i], arr[i] + max_sum_arr[i - 1])\n    max_sum = math.max(max_sum, max_sum_arr[i])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_arr_rev[i] = math.max(arr[i], arr[i] + max_sum_arr_rev[i + 1])\n    max_sum = math.max(max_sum, max_sum_arr_rev[i])\n  end\n  for i = 2, n - 1 do\n    max_sum = math.max(max_sum, max_sum_arr[i - 1] + max_sum_arr_rev[i + 1])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6t4h38j.lua:12: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpa6t4h38j.lua:12: in local 'candidate'\n\t/tmp/tmpa6t4h38j.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local max_sum_left[1] = arr[1]\n    local max_sum_right[#arr] = arr[#arr]\n    for i = 2, #arr do\n        max_sum_left[i] = math.max(max_sum_left[i-1] + arr[i], arr[i])\n    end\n    for i = #arr-1, 1, -1 do\n        max_sum_right[i] = math.max(max_sum_right[i+1] + arr[i], arr[i])\n    end\n    for i = 1, #arr do\n        max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj7trn6rn.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max = arr[1]\n  local sum = arr[1]\n  for i = 2, #arr do\n    sum = math.max(sum + arr[i], arr[i])\n    max = math.max(max, sum)\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimrhpzqb.lua:15: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpimrhpzqb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\n\tlocal n = #arr\n\tfor i = 1, n do\n\t\tmax_sum_left[i] = arr[i]\n\t\tmax_sum_right[i] = arr[i]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 1, i - 1 do\n\t\t\tif arr[i] > arr[j] and max_sum_left[i] < max_sum_left[j] + arr[i] then\n\t\t\t\tmax_sum_left[i] = max_sum_left[j] + arr[i]\n\t\t\tend\n\t\tend\n\tend\n\tfor i = n - 1, 1, -1 do\n\t\tfor j = n, i + 1, -1 do\n\t\t\tif arr[i] > arr[j] and max_sum_right[i] < max_sum_right[j] + arr[i] then\n\t\t\t\tmax_sum_right[i] = max_sum_right[j] + arr[i]\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tif max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] then\n\t\t\tmax_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n\t\tend\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmpm4ggb8yn.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_arr = {arr[1]}\n    local max_sum_arr_rev = {arr[1]}\n    for i = 2, n do\n        local max_sum_arr_i = arr[i]\n        local max_sum_arr_rev_i = arr[i]\n        for j = 1, i - 1 do\n            if arr[j] < arr[i] then\n                max_sum_arr_i = math.max(max_sum_arr_i, max_sum_arr[j] + arr[i])\n                max_sum_arr_rev_i = math.max(max_sum_arr_rev_i, max_sum_arr_rev[j] + arr[i])\n            end\n        end\n        max_sum_arr[i] = max_sum_arr_i\n        max_sum_arr_rev[i] = max_sum_arr_rev_i\n        max_sum = math.max(max_sum, max_sum_arr_i, max_sum_arr_rev_i)\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzb29_cg.lua:26: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmppzb29_cg.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max = 0\n  local sum = 0\n  local len = #arr\n  for i = 1, len do\n    sum = sum + arr[i]\n    if sum > max then\n      max = sum\n    end\n    if sum < 0 then\n      sum = 0\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18v1jim7.lua:21: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp18v1jim7.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i-1] + arr[i])\n  end\n  for i = #arr-1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i+1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmphwwsdy91.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  local max_sum_arr_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev = {arr[1]}\n  for i = 2, n do\n    local max_sum_arr_i = {arr[i]}\n    local max_sum_arr_rev_i = {arr[i]}\n    local max_sum_arr_rev_rev_i = {arr[i]}\n    local max_sum_arr_rev_rev_rev_i = {arr[i]}\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] then\n        if sum(max_sum_arr_i) < sum(max_sum_arr[j]) + arr[i] then\n          max_sum_arr_i = copy(max_sum_arr[j])\n          table.insert(max_sum_arr_i, arr[i])\n        end\n        if sum(max_sum_arr_rev_i) < sum(max_sum_arr_rev[j]) + arr[i] then\n          max_sum_arr_rev_i = copy(max_sum_arr_rev[j])\n          table.insert(max_sum_arr_rev_i, arr[i])\n        end\n        if sum(max_sum_arr_rev_rev_i) < sum(max_sum_arr_rev_rev[j]) + arr[i] then\n          max_sum_arr_rev_rev_i = copy(max_sum_arr_rev_rev[j])\n          table.insert(max_sum_arr_rev_rev_i, arr[i])\n        end\n        if sum(max_sum_arr_rev_rev_rev_i) < sum(max_sum_arr_rev_rev_rev[j]) + arr[i] then\n          max_sum_arr_rev_rev_rev_i = copy(max_sum_arr_rev_rev_rev[j])\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpekjq1z2q.lua:39: 'end' expected (to close 'if' at line 28) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_so_far = 0\n  local max_sum_ending_here = 0\n  local n = #arr\n  local i = 1\n  while i <= n do\n    max_sum_ending_here = max_sum_ending_here + arr[i]\n    if max_sum_ending_here < 0 then\n      max_sum_ending_here = 0\n    end\n    if max_sum_so_far < max_sum_ending_here then\n      max_sum_so_far = max_sum_ending_here\n    end\n    i = i + 1\n  end\n  return max_sum_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mbv3bin.lua:24: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp2mbv3bin.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6w7r3um0.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfornnt4.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbfornnt4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  for i = 2, n do\n    local max_sum_arr_i = arr[i]\n    local max_sum_arr_rev_i = arr[i]\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] then\n        max_sum_arr_i = math.max(max_sum_arr_i, max_sum_arr[j] + arr[i])\n      end\n      if arr[j] > arr[i] then\n        max_sum_arr_rev_i = math.max(max_sum_arr_rev_i, max_sum_arr_rev[j] + arr[i])\n      end\n    end\n    max_sum_arr[i] = max_sum_arr_i\n    max_sum_arr_rev[i] = max_sum_arr_rev_i\n    max_sum = math.max(max_sum, max_sum_arr_i, max_sum_arr_rev_i)\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptp3_zc7b.lua:28: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmptp3_zc7b.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  local max_sum_arr_rev_rev = {arr[1]}\n  for i = 2, n do\n    local max_sum_arr_i = arr[i]\n    local max_sum_arr_rev_i = arr[i]\n    local max_sum_arr_rev_rev_i = arr[i]\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] then\n        max_sum_arr_i = math.max(max_sum_arr_i, max_sum_arr[j] + arr[i])\n      end\n      if arr[j] > arr[i] then\n        max_sum_arr_rev_i = math.max(max_sum_arr_rev_i, max_sum_arr_rev[j] + arr[i])\n      end\n      if arr[j] < arr[n - i + 1] then\n        max_sum_arr_rev_rev_i = math.max(max_sum_arr_rev_rev_i, max_sum_arr_rev_rev[j] + arr[n - i + 1])\n      end\n    end\n    max_sum = math.max(max_sum, max_sum_arr_i, max_sum_arr_rev_i, max_sum_arr_rev_rev_i)\n    max_sum_arr[i] = max_sum_arr_i\n    max_sum_arr_rev[i] = max_sum_arr_rev_i\n    max_sum_arr_rev_rev[i] = max_sum_arr_rev_rev_i\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfa9z7vuc.lua:34: expected: 194, actual: 217\nstack traceback:\n\t/tmp/tmpfa9z7vuc.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum_arr = {}\n  for i = 1, n do\n    max_sum_arr[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  local max_sum = max_sum_arr[1]\n  for i = 2, n do\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlm7ilcn.lua:27: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpdlm7ilcn.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max = 0\n  local len = #arr\n  local dp = {}\n  for i = 1, len do\n    dp[i] = {}\n    for j = 1, i do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, len do\n    for j = 1, i do\n      if i == j then\n        dp[i][j] = arr[i]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + arr[i]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i - 1][j - 1]) + arr[i]\n      end\n      max = math.max(max, dp[i][j])\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ialie9m.lua:30: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp_ialie9m.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_arr = {}\n\tfor i = 1, #arr do\n\t\tlocal sum = 0\n\t\tlocal sum_arr = {}\n\t\tfor j = i, #arr do\n\t\t\tsum = sum + arr[j]\n\t\t\ttable.insert(sum_arr, arr[j])\n\t\t\tif sum > max_sum then\n\t\t\t\tmax_sum = sum\n\t\t\t\tmax_sum_arr = sum_arr\n\t\t\tend\n\t\tend\n\tend\n\treturn max_sum, max_sum_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnkvva4u.lua:23: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpnnkvva4u.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local n = #arr\n  for i = 1, n do\n    max_sum_left[i] = arr[i]\n    max_sum_right[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_left[i] < max_sum_left[j] + arr[i] then\n        max_sum_left[i] = max_sum_left[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and max_sum_right[i] < max_sum_right[j] + arr[i] then\n        max_sum_right[i] = max_sum_right[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] then\n      max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_end_here = 0\n  for i = 1, #arr do\n    max_sum_end_here = max_sum_end_here + arr[i]\n    if max_sum_end_here < 0 then\n      max_sum_end_here = 0\n    elseif max_sum_end_here > max_sum then\n      max_sum = max_sum_end_here\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppj9iv857.lua:19: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmppj9iv857.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    if sum < 0 then\n      sum = 0\n    end\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    if sum < 0 then\n      sum = 0\n    end\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwr33jox.lua:31: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpmwr33jox.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_left = arr[1]\n  local max_sum_right = arr[1]\n  local max_sum_left_arr = {arr[1]}\n  local max_sum_right_arr = {arr[1]}\n  local max_sum_arr = {arr[1]}\n  for i = 2, #arr do\n    local left_sum = max_sum_left + arr[i]\n    local right_sum = max_sum_right + arr[i]\n    if left_sum > arr[i] then\n      max_sum_left = left_sum\n      table.insert(max_sum_left_arr, arr[i])\n    else\n      max_sum_left = arr[i]\n      max_sum_left_arr = {arr[i]}\n    end\n    if right_sum > arr[i] then\n      max_sum_right = right_sum\n      table.insert(max_sum_right_arr, arr[i])\n    else\n      max_sum_right = arr[i]\n      max_sum_right_arr = {arr[i]}\n    end\n    if max_sum_left > max_sum then\n      max_sum = max_sum_left\n      max_sum_arr = max_sum_left_arr\n    end\n    if max_sum_right > max_sum then\n      max_sum = max_sum_right\n      max_sum_arr = max_sum_right_arr\n    end\n  end\n  return max_sum, max_sum_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvm1n_uxn.lua:41: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpvm1n_uxn.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum_arr = {}\n  local max_sum_arr_rev = {}\n  local max_sum = 0\n  for i = 1, n do\n    max_sum_arr[i] = arr[i]\n    max_sum_arr_rev[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and max_sum_arr_rev[i] < max_sum_arr_rev[j] + arr[i] then\n        max_sum_arr_rev[i] = max_sum_arr_rev[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_arr[i] + max_sum_arr_rev[i] - arr[i] then\n      max_sum = max_sum_arr[i] + max_sum_arr_rev[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local inc = {}\n  local dec = {}\n  inc[1] = arr[1]\n  dec[n] = arr[n]\n  for i = 2, n do\n    inc[i] = arr[i]\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] then\n        inc[i] = math.max(inc[i], inc[j] + arr[i])\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    dec[i] = arr[i]\n    for j = n, i + 1, -1 do\n      if arr[j] < arr[i] then\n        dec[i] = math.max(dec[i], dec[j] + arr[i])\n      end\n    end\n  end\n  local max = inc[1] + dec[1] - arr[1]\n  for i = 2, n do\n    max = math.max(max, inc[i] + dec[i] - arr[i])\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local sum = 0\n    for i = 1, #arr do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        max_sum_left[i] = sum\n    end\n    sum = 0\n    for i = #arr, 1, -1 do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        max_sum_right[i] = sum\n    end\n    for i = 1, #arr do\n        max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8macwub5.lua:31: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp8macwub5.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_i = 0\n  local max_sum_right_i = 0\n  local max_sum_left_j = 0\n  local max_sum_right_j = 0\n  local max_sum_left_k = 0\n  local max_sum_right_k = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpogboqvc2.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local sum = 0\n    for i = 1, #arr do\n        sum = sum + arr[i]\n        max_sum_left[i] = sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    sum = 0\n    for i = #arr, 1, -1 do\n        sum = sum + arr[i]\n        max_sum_right[i] = sum\n        if sum < 0 then\n            sum = 0\n        end\n    end\n    for i = 1, #arr do\n        local sum = max_sum_left[i] + max_sum_right[i]\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5fpim00.lua:34: expected: 194, actual: 384\nstack traceback:\n\t/tmp/tmpj5fpim00.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max = 0\n  local n = #arr\n  local inc = {}\n  local dec = {}\n  for i = 1, n do\n    inc[i] = arr[i]\n    dec[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and inc[i] < inc[j] + arr[i] then\n        inc[i] = inc[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and dec[i] < dec[j] + arr[i] then\n        dec[i] = dec[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    max = math.max(max, inc[i] + dec[i] - arr[i])\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_temp = 0\n  local max_sum_right_temp = 0\n  for i = 1, #arr do\n    max_sum_left_temp = max_sum_left_temp + arr[i]\n    if max_sum_left_temp < 0 then\n      max_sum_left_temp = 0\n    end\n    max_sum_left[i] = max_sum_left_temp\n  end\n  for i = #arr, 1, -1 do\n    max_sum_right_temp = max_sum_right_temp + arr[i]\n    if max_sum_right_temp < 0 then\n      max_sum_right_temp = 0\n    end\n    max_sum_right[i] = max_sum_right_temp\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccquyzut.lua:31: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpccquyzut.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local len = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[len] = arr[len]\n  for i = 2, len do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i-1] + arr[i])\n  end\n  for i = len - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i+1] + arr[i])\n  end\n  for i = 1, len do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpamvbmprg.lua:7: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfornnt4.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbfornnt4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_arr = {}\n  local max_sum_arr_rev = {}\n  local max_sum_arr_rev_rev = {}\n  local max_sum_arr_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2a7y9dzu.lua:32: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local i = 1\n  local j = 1\n  local n = #arr\n  while i <= n do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n      j = i + 1\n    end\n    max_sum = math.max(max_sum, sum)\n    i = i + 1\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpacxcc_w4.lua:23: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpacxcc_w4.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_inc = {}\n  local max_sum_dec = {}\n  local max_sum = 0\n  local n = #arr\n  for i = 1, n do\n    max_sum_inc[i] = arr[i]\n    max_sum_dec[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_inc[i] < max_sum_inc[j] + arr[i] then\n        max_sum_inc[i] = max_sum_inc[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and max_sum_dec[i] < max_sum_dec[j] + arr[i] then\n        max_sum_dec[i] = max_sum_dec[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] then\n      max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_i = {}\n  local max_sum_right_i = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpu44e_aon.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  local max_sum_arr_rev_rev = {arr[1]}\n  for i = 2, n do\n    max_sum_arr[i] = math.max(max_sum_arr[i - 1] + arr[i], arr[i])\n    max_sum_arr_rev[i] = math.max(max_sum_arr_rev[i - 1] + arr[n - i + 1], arr[n - i + 1])\n    max_sum_arr_rev_rev[i] = math.max(max_sum_arr_rev_rev[i - 1] + arr[i], arr[i])\n    max_sum = math.max(max_sum, max_sum_arr[i], max_sum_arr_rev[i], max_sum_arr_rev_rev[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpca826dg6.lua:20: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpca826dg6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local sum = 0\n    for i = 1, #arr do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        if sum > max_sum then\n            max_sum = sum\n        end\n        max_sum_left[i] = max_sum\n    end\n    sum = 0\n    for i = #arr, 1, -1 do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        if sum > max_sum then\n            max_sum = sum\n        end\n        max_sum_right[i] = sum\n    end\n    for i = 1, #arr - 1 do\n        sum = max_sum_left[i] + max_sum_right[i + 1]\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahr2yt2b.lua:40: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpahr2yt2b.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = 0\n  local max_sum_arr = {}\n  for i = 1, n do\n    max_sum_arr[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwwy_hv3.lua:27: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpnwwy_hv3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i, v in ipairs(arr) do\n    sum = sum + v\n    max_sum_left[i] = sum\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  for i = 1, #arr - 1 do\n    if max_sum_left[i] + max_sum_right[i + 1] > max_sum then\n      max_sum = max_sum_left[i] + max_sum_right[i + 1]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsm61kys.lua:39: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbsm61kys.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_arr = {arr[1]}\n    local max_sum_arr_rev = {arr[1]}\n    for i = 2, n do\n        max_sum_arr[i] = math.max(arr[i], arr[i] + max_sum_arr[i - 1])\n        max_sum = math.max(max_sum, max_sum_arr[i])\n    end\n    for i = n - 1, 1, -1 do\n        max_sum_arr_rev[i] = math.max(arr[i], arr[i] + max_sum_arr_rev[i + 1])\n        max_sum = math.max(max_sum, max_sum_arr_rev[i])\n    end\n    for i = 2, n - 1 do\n        max_sum = math.max(max_sum, max_sum_arr[i - 1] + max_sum_arr_rev[i + 1])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9d7ehss9.lua:12: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp9d7ehss9.lua:12: in local 'candidate'\n\t/tmp/tmp9d7ehss9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_arr = {arr[1]}\n    local max_sum_arr_index = 1\n    local max_sum_arr_index_arr = {1}\n    local max_sum_arr_index_arr_index = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1avt0okj.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = 0\n  local max_sum_arr = {}\n  for i = 1, n do\n    max_sum_arr[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwwy_hv3.lua:27: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpnwwy_hv3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  for i = 2, #arr do\n    local max_sum_arr_i = {arr[i]}\n    local max_sum_arr_rev_i = {arr[i]}\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] then\n        local sum = arr[i] + max_sum_arr[j]\n        if sum > max_sum_arr_i[1] then\n          max_sum_arr_i = {sum}\n        end\n      end\n      if arr[j] > arr[i] then\n        local sum = arr[i] + max_sum_arr_rev[j]\n        if sum > max_sum_arr_rev_i[1] then\n          max_sum_arr_rev_i = {sum}\n        end\n      end\n    end\n    max_sum_arr = max_sum_arr_i\n    max_sum_arr_rev = max_sum_arr_rev_i\n    if max_sum_arr[1] > max_sum then\n      max_sum = max_sum_arr[1]\n    end\n    if max_sum_arr_rev[1] > max_sum then\n      max_sum = max_sum_arr_rev[1]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplq_jx9qt.lua:11: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmplq_jx9qt.lua:11: in local 'candidate'\n\t/tmp/tmplq_jx9qt.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local n = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\n  for i = 1, n do\n    max_sum_left[i] = arr[i]\n    max_sum_right[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_left[i] < max_sum_left[j] + arr[i] then\n        max_sum_left[i] = max_sum_left[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and max_sum_right[i] < max_sum_right[j] + arr[i] then\n        max_sum_right[i] = max_sum_right[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] then\n      max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local len = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[len] = arr[len]\n  for i = 2, len do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i-1] + arr[i])\n  end\n  for i = len - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i+1] + arr[i])\n  end\n  for i = 1, len do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpamvbmprg.lua:7: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = 0\n  local max_sum_arr = {}\n  for i = 1, n do\n    max_sum_arr[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwwy_hv3.lua:27: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpnwwy_hv3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum_inc = {}\n    local max_sum_dec = {}\n    max_sum_inc[1] = arr[1]\n    max_sum_dec[n] = arr[n]\n    for i = 2, n do\n        max_sum_inc[i] = arr[i]\n        for j = 1, i - 1 do\n            if arr[j] < arr[i] then\n                max_sum_inc[i] = math.max(max_sum_inc[i], max_sum_inc[j] + arr[i])\n            end\n        end\n    end\n    for i = n - 1, 1, -1 do\n        max_sum_dec[i] = arr[i]\n        for j = n, i + 1, -1 do\n            if arr[j] < arr[i] then\n                max_sum_dec[i] = math.max(max_sum_dec[i], max_sum_dec[j] + arr[i])\n            end\n        end\n    end\n    local max_sum = max_sum_inc[1] + max_sum_dec[1] - arr[1]\n    for i = 2, n do\n        max_sum = math.max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local inc = {}\n    local dec = {}\n    inc[1] = arr[1]\n    dec[n] = arr[n]\n    for i = 2, n do\n        inc[i] = arr[i]\n        for j = 1, i-1 do\n            if arr[j] < arr[i] then\n                inc[i] = math.max(inc[i], inc[j] + arr[i])\n            end\n        end\n    end\n    for i = n-1, 1, -1 do\n        dec[i] = arr[i]\n        for j = n, i+1, -1 do\n            if arr[j] < arr[i] then\n                dec[i] = math.max(dec[i], dec[j] + arr[i])\n            end\n        end\n    end\n    local max = inc[1] + dec[1] - arr[1]\n    for i = 2, n do\n        max = math.max(max, inc[i] + dec[i] - arr[i])\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  local max_sum_arr_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev = {arr[1]}\n  for i = 2, n do\n    local max_sum_arr_rev_rev_rev_rev = max_sum_arr_rev_rev_rev\n    local max_sum_arr_rev_rev_rev = max_sum_arr_rev_rev\n    local max_sum_arr_rev_rev = max_sum_arr_rev\n    local max_sum_arr_rev = max_sum_arr\n    local max_sum_arr = max_sum\n    max_sum = arr[i]\n    for j = 1, i - 1 do\n      local max_sum_arr_rev_rev_rev_rev_j = max_sum_arr_rev_rev_rev_rev[j]\n      local max_sum_arr_rev_rev_rev_j = max_sum_arr_rev_rev_rev[j + 1]\n      local max_sum_arr_rev_rev_j = max_sum_arr_rev_rev[j + 1]\n      local max_sum_arr_rev_j = max_sum_arr_rev[j + 1]\n      local max_sum_arr_j = max_sum_arr[j + 1]\n      local max_sum_arr_rev_rev_rev_rev_j_1 = max_sum_arr_rev_rev_rev_rev[j + 1]\n      local max_sum_arr_rev_rev_rev_j_1 = max_sum_arr_rev_rev_rev[j + 2]\n      local max_sum_arr_rev_rev_j_1 = max_sum_arr_rev_rev[j + 2]\n      local max_sum_arr_rev_j_1 = max_sum_arr_rev[j + 2]\n      local max_sum_arr_j_1 = max_sum_arr[j +\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpc9o1e1u2.lua:27: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = 0\n    local max_sum_arr = {}\n    local max_sum_arr_rev = {}\n    local max_sum_arr_rev_rev = {}\n    local max_sum_arr_rev_rev_rev = {}\n    for i = 1, n do\n        max_sum_arr[i] = arr[i]\n        max_sum_arr_rev[i] = arr[i]\n        max_sum_arr_rev_rev[i] = arr[i]\n        max_sum_arr_rev_rev_rev[i] = arr[i]\n    end\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            end\n        end\n    end\n    for i = n - 1, 1, -1 do\n        for j = n, i + 1, -1 do\n            if arr[i] > arr[j] and max_sum_arr_rev[i] < max_sum_arr_rev[j] + arr[i] then\n                max_sum_arr_rev[i] = max_sum_arr_rev[j] + arr[i]\n            end\n        end\n    end\n    for i = 1, n do\n        max_sum_arr_rev_rev[i] = max_sum_arr_rev[n - i + 1]\n    end\n    for i = 1, n do\n        max_sum_arr_rev_rev_rev[i] = max_sum_arr_rev_rev[n - i + 1]\n    end\n    for i = 1, n do\n        if max_sum < max_sum_arr[i] + max_sum_arr_rev_rev[i] - arr[i] then\n            max_sum = max_sum_arr[i] + max_sum_arr_rev_rev[i] - arr[i]\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2936k_g9.lua:49: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfornnt4.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbfornnt4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local inc = {}\n    local dec = {}\n    inc[1] = arr[1]\n    dec[n] = arr[n]\n    for i = 2, n do\n        inc[i] = arr[i]\n        for j = 1, i - 1 do\n            if arr[j] < arr[i] then\n                inc[i] = math.max(inc[i], inc[j] + arr[i])\n            end\n        end\n    end\n    for i = n - 1, 1, -1 do\n        dec[i] = arr[i]\n        for j = n, i + 1, -1 do\n            if arr[j] < arr[i] then\n                dec[i] = math.max(dec[i], dec[j] + arr[i])\n            end\n        end\n    end\n    local max = inc[1] + dec[1] - arr[1]\n    for i = 2, n do\n        max = math.max(max, inc[i] + dec[i] - arr[i])\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  for i = 2, n do\n    local max_sum_arr_i = {arr[i]}\n    local max_sum_arr_rev_i = {arr[i]}\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] then\n        local max_sum_arr_j = max_sum_arr[j]\n        local sum = arr[i] + max_sum_arr_j[#max_sum_arr_j]\n        if sum > max_sum_arr_i[#max_sum_arr_i] then\n          max_sum_arr_i = {unpack(max_sum_arr_j)}\n          table.insert(max_sum_arr_i, arr[i])\n        end\n      end\n      if arr[j] > arr[i] then\n        local max_sum_arr_rev_j = max_sum_arr_rev[j]\n        local sum = arr[i] + max_sum_arr_rev_j[#max_sum_arr_rev_j]\n        if sum > max_sum_arr_rev_i[#max_sum_arr_rev_i] then\n          max_sum_arr_rev_i = {unpack(max_sum_arr_rev_j)}\n          table.insert(max_sum_arr_rev_i, arr[i])\n        end\n      end\n    end\n    max_sum_arr[i] = max_sum_arr_i\n    max_sum_arr_rev[i] = max_sum_arr_rev_i\n    local sum = max_sum_arr_i[#max_sum_arr_i]\n    if sum > max_sum then\n      max_sum = sum\n    end\n    sum = max_sum_arr_rev_i[#max_sum_arr_rev_i]\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmppbe2k76c.lua:40: 'end' expected (to close 'function' at line 2) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(max_sum_left[i - 1] + arr[i], arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(max_sum_right[i + 1] + arr[i], arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbyt6avwd.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfg97de3a.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum_inc = {}\n  local max_sum_dec = {}\n  max_sum_inc[1] = arr[1]\n  max_sum_dec[n] = arr[n]\n  for i = 2, n do\n    max_sum_inc[i] = math.max(arr[i], max_sum_inc[i-1] + arr[i])\n  end\n  for i = n-1, 1, -1 do\n    max_sum_dec[i] = math.max(arr[i], max_sum_dec[i+1] + arr[i])\n  end\n  local max_sum = max_sum_inc[1] + max_sum_dec[2]\n  for i = 2, n-1 do\n    max_sum = math.max(max_sum, max_sum_inc[i] + max_sum_dec[i+1])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hvmyy_j.lua:24: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp5hvmyy_j.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6w7r3um0.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local len = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmp32xyg1wj.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_i = 0\n  local max_sum_right_i = 0\n  local max_sum_i = 0\n  local max_sum_j = 0\n  local sum = 0\n  local sum_left = 0\n  local sum_right = 0\n  local sum_left_i = 0\n  local sum_right_i = 0\n  local sum_i = 0\n  local sum_j = 0\n  local i = 1\n  local j = 1\n  local k = 1\n  local l = 1\n  local m = 1\n  local n = 1\n  local o = 1\n  local p = 1\n  local q = 1\n  local r = 1\n  local s = 1\n  local t = 1\n  local u = 1\n  local v = 1\n  local w = 1\n  local x = 1\n  local y = 1\n  local z = 1\n  local aa = 1\n  local bb = 1\n  local cc = 1\n  local dd = 1\n  local ee = 1\n  local ff = 1\n  local gg = 1\n  local hh = 1\n  local ii = 1\n  local jj = 1\n  local kk = 1\n  local ll = 1\n  local mm = 1\n  local nn = 1\n  local oo = 1\n  local pp = 1\n  local qq = 1\n  local rr = 1\n  local ss = 1\n  local tt = 1\n  local uu = 1\n  local vv = 1\n  local ww = 1\n  local xx = 1\n  local yy = 1\n  local zz = 1\n  local aaa = 1\n  local bbb = 1\n  local ccc = 1\n  local ddd = 1\n  local eee = 1\n  local fff = 1\n  local ggg = 1\n  local hhh = 1\n  local iii = 1\n  local jjj = 1\n  local kkk = 1\n  local lll = 1\n  local mmm = 1\n  local nnn = 1\n  local o\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpda0knut5.lua:85: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = 0\n    local max_sum_arr = {}\n    for i = 1, n do\n        max_sum_arr[i] = arr[i]\n    end\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[j] < arr[i] then\n                max_sum_arr[i] = math.max(max_sum_arr[i], max_sum_arr[j] + arr[i])\n            end\n        end\n        max_sum = math.max(max_sum, max_sum_arr[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplz05gjxc.lua:23: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmplz05gjxc.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_ending_here = 0\n  local max_sum_ending_here_reverse = 0\n  local max_sum_ending_here_reverse_arr = {}\n  local max_sum_ending_here_arr = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq983ksoo.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_left = arr[1]\n  local max_sum_right = arr[n]\n  local max_sum_left_arr = {arr[1]}\n  local max_sum_right_arr = {arr[n]}\n  for i = 2, n do\n    max_sum_left = math.max(max_sum_left + arr[i], arr[i])\n    max_sum_left_arr[i] = max_sum_left\n    max_sum = math.max(max_sum, max_sum_left)\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_right = math.max(max_sum_right + arr[i], arr[i])\n    max_sum_right_arr[i] = max_sum_right\n    max_sum = math.max(max_sum, max_sum_right)\n  end\n  for i = 2, n - 1 do\n    max_sum = math.max(max_sum, max_sum_left_arr[i - 1] + max_sum_right_arr[i + 1])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz0orkx1l.lua:20: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpz0orkx1l.lua:20: in local 'candidate'\n\t/tmp/tmpz0orkx1l.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local n = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\n  max_sum_left[1] = arr[1]\n  max_sum_right[n] = arr[n]\n  for i = 2, n do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n    max_sum = math.max(max_sum, max_sum_left[i])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n    max_sum = math.max(max_sum, max_sum_right[i])\n  end\n  for i = 2, n - 1 do\n    max_sum = math.max(max_sum, max_sum_left[i - 1] + max_sum_right[i + 1])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqlxoitk.lua:26: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpyqlxoitk.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum = math.max(max_sum, sum)\n    sum = math.max(sum, 0)\n    max_sum_left[i] = max_sum\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum = math.max(max_sum, sum)\n    sum = math.max(sum, 0)\n    max_sum_right[i] = max_sum\n  end\n  for i = 1, #arr - 1 do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i + 1])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66gz9g7i.lua:29: expected: 194, actual: 559\nstack traceback:\n\t/tmp/tmp66gz9g7i.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[n] = arr[n]\n  for i = 2, n do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, n do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx2rrh3fx.lua:7: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i-1] + arr[i])\n  end\n  for i = #arr-1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i+1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmphwwsdy91.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[n] = arr[n]\n  for i = 2, n do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, n do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx2rrh3fx.lua:7: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_arr = {}\n  for i = 1, #arr do\n    local sum = 0\n    local sum_arr = {}\n    for j = i, #arr do\n      sum = sum + arr[j]\n      table.insert(sum_arr, arr[j])\n      if sum > max_sum then\n        max_sum = sum\n        max_sum_arr = sum_arr\n      end\n    end\n  end\n  return max_sum, max_sum_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqcv0o3c.lua:23: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpoqcv0o3c.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfornnt4.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbfornnt4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_so_far = arr[1]\n  local max_ending_here = arr[1]\n  for i = 2, n do\n    max_ending_here = math.max(max_ending_here + arr[i], arr[i])\n    max_so_far = math.max(max_so_far, max_ending_here)\n    max_sum = math.max(max_sum, max_so_far)\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfstijdi.lua:18: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpzfstijdi.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_arr = {}\n  local max_sum = 0\n  for i = 1, #arr do\n    max_sum_arr[i] = arr[i]\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] and max_sum_arr[j] + arr[i] > max_sum_arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n    if max_sum_arr[i] > max_sum then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkatp5d6n.lua:22: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpkatp5d6n.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = 0\n  local max_sum_arr = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpg10_z6kq.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_arr = {}\n    local max_sum_arr_rev = {}\n    local max_sum_arr_rev_rev = {}\n    local max_sum_arr_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n    local max_sum_arr_rev_rev_rev_rev_rev\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmp85gghi0f.lua:32: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local len = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmp32xyg1wj.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_inc = {}\n  local max_sum_dec = {}\n  local max_sum = 0\n  local n = #arr\n  max_sum_inc[1] = arr[1]\n  max_sum_dec[n] = arr[n]\n  for i = 2, n do\n    max_sum_inc[i] = math.max(arr[i], max_sum_inc[i - 1] + arr[i])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_dec[i] = math.max(arr[i], max_sum_dec[i + 1] + arr[i])\n  end\n  for i = 1, n do\n    max_sum = math.max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph87y_g3b.lua:24: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmph87y_g3b.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbj1oev1.lua:20: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpkbj1oev1.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum_arr = {}\n    local max_sum = 0\n    for i=1,n do\n        max_sum_arr[i] = arr[i]\n    end\n    for i=2,n do\n        for j=1,i-1 do\n            if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            end\n        end\n    end\n    for i=1,n do\n        if max_sum < max_sum_arr[i] then\n            max_sum = max_sum_arr[i]\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzs7vimgp.lua:27: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpzs7vimgp.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_arr = {arr[1]}\n    local max_sum_arr_rev = {arr[1]}\n    for i = 2, n do\n        local max_sum_arr_i = {arr[i]}\n        local max_sum_arr_rev_i = {arr[i]}\n        for j = 1, i - 1 do\n            if arr[j] < arr[i] then\n                local sum = arr[i] + max_sum_arr[j]\n                if sum > max_sum_arr_i[1] then\n                    max_sum_arr_i = {sum}\n                end\n            end\n            if arr[j] > arr[i] then\n                local sum = arr[i] + max_sum_arr_rev[j]\n                if sum > max_sum_arr_rev_i[1] then\n                    max_sum_arr_rev_i = {sum}\n                end\n            end\n        end\n        max_sum_arr = max_sum_arr_i\n        max_sum_arr_rev = max_sum_arr_rev_i\n        if max_sum_arr[1] > max_sum then\n            max_sum = max_sum_arr[1]\n        end\n        if max_sum_arr_rev[1] > max_sum then\n            max_sum = max_sum_arr_rev[1]\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl3t4nr41.lua:12: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpl3t4nr41.lua:12: in local 'candidate'\n\t/tmp/tmpl3t4nr41.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_l = {}\n\tlocal max_sum_r = {}\n\tlocal max_sum_l[1] = arr[1]\n\tlocal max_sum_r[#arr] = arr[#arr]\n\tfor i = 2, #arr do\n\t\tmax_sum_l[i] = math.max(arr[i], arr[i] + max_sum_l[i-1])\n\tend\n\tfor i = #arr-1, 1, -1 do\n\t\tmax_sum_r[i] = math.max(arr[i], arr[i] + max_sum_r[i+1])\n\tend\n\tfor i = 1, #arr do\n\t\tmax_sum = math.max(max_sum, max_sum_l[i] + max_sum_r[i] - arr[i])\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr1iwsfaf.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max = 0\n  local n = #arr\n  for i = 1, n do\n    local sum = 0\n    for j = i, n do\n      sum = sum + arr[j]\n      if sum > max then\n        max = sum\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14jciz7g.lua:20: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp14jciz7g.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_arr = {}\n  local max_sum = 0\n  for i = 1, #arr do\n    max_sum_arr[i] = arr[i]\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zlgc_by.lua:22: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmp_zlgc_by.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum_arr = {}\n    local max_sum_arr_rev = {}\n    max_sum_arr[1] = arr[1]\n    max_sum_arr_rev[n] = arr[n]\n    for i = 2, n do\n        max_sum_arr[i] = math.max(max_sum_arr[i - 1] + arr[i], arr[i])\n    end\n    for i = n - 1, 1, -1 do\n        max_sum_arr_rev[i] = math.max(max_sum_arr_rev[i + 1] + arr[i], arr[i])\n    end\n    local max_sum = max_sum_arr[1] + max_sum_arr_rev[2]\n    for i = 2, n - 1 do\n        max_sum = math.max(max_sum, max_sum_arr[i] + max_sum_arr_rev[i + 1])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42wpypsf.lua:24: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp42wpypsf.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum_arr = {}\n  local max_sum_arr_rev = {}\n  local max_sum = 0\n  max_sum_arr[1] = arr[1]\n  max_sum_arr_rev[n] = arr[n]\n  for i = 2, n do\n    max_sum_arr[i] = math.max(arr[i], max_sum_arr[i - 1] + arr[i])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_arr_rev[i] = math.max(arr[i], max_sum_arr_rev[i + 1] + arr[i])\n  end\n  for i = 1, n do\n    max_sum = math.max(max_sum, max_sum_arr[i] + max_sum_arr_rev[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1hp112w.lua:24: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpx1hp112w.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_arr = {}\n  for i = 1, #arr do\n    local sum = 0\n    local sum_arr = {}\n    for j = i, #arr do\n      sum = sum + arr[j]\n      table.insert(sum_arr, arr[j])\n      if sum > max_sum then\n        max_sum = sum\n        max_sum_arr = sum_arr\n      end\n    end\n  end\n  return max_sum, max_sum_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqcv0o3c.lua:23: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpoqcv0o3c.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_i = 0\n  local max_sum_right_i = 0\n  local max_sum_left_j = 0\n  local max_sum_right_j = 0\n  local max_sum_left_k = 0\n  local max_sum_right_k = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpogboqvc2.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_left = arr[1]\n  local max_sum_right = arr[n]\n  local max_sum_left_arr = {arr[1]}\n  local max_sum_right_arr = {arr[n]}\n  for i = 2, n do\n    max_sum_left = math.max(max_sum_left + arr[i], arr[i])\n    max_sum_left_arr[i] = max_sum_left\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_right = math.max(max_sum_right + arr[i], arr[i])\n    max_sum_right_arr[i] = max_sum_right\n  end\n  for i = 1, n - 1 do\n    max_sum = math.max(max_sum, max_sum_left_arr[i] + max_sum_right_arr[i + 1])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqejgpit.lua:18: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpvqejgpit.lua:18: in local 'candidate'\n\t/tmp/tmpvqejgpit.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_arr = {arr[1]}\n    local sum = arr[1]\n    local sum_arr = {arr[1]}\n    local max_sum_arr_rev = {arr[1]}\n    local sum_arr_rev = {arr[1]}\n    local max_sum_rev = arr[1]\n    local sum_rev = arr[1]\n    for i = 2, n do\n        sum = sum + arr[i]\n        table.insert(sum_arr, sum)\n        if sum > max_sum then\n            max_sum = sum\n            max_sum_arr = table.copy(sum_arr)\n        end\n        sum_rev = sum_rev + arr[n - i + 1]\n        table.insert(sum_arr_rev, sum_rev)\n        if sum_rev > max_sum_rev then\n            max_sum_rev = sum_rev\n            max_sum_arr_rev = table.copy(sum_arr_rev)\n        end\n    end\n    local max_sum_arr_rev_rev = table.reverse(max_sum_arr_rev)\n    local max_sum_arr_rev_rev_rev = table.reverse(max_sum_arr_rev_rev)\n    local max_sum_arr_rev_rev_rev_rev = table.reverse(max_sum_arr_rev_rev_rev)\n    local max_sum_arr_rev_rev_rev_rev_rev = table.reverse(max_sum_arr_rev_rev_rev_rev)\n    local max_sum_arr_rev_rev_rev_rev_rev_rev = table.reverse(max_sum_arr_rev_rev_rev_rev_rev)\n    local max_sum_arr_rev_rev_rev_rev_rev_rev_rev = table.reverse(max_sum_arr_rev_rev_rev_rev_rev_rev)\n    local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = table.reverse(max_sum_arr_rev_rev_rev_rev_rev_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpubf5oplp.lua:33: ')' expected (to close '(' at line 32) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local inc = {}\n    local dec = {}\n    local max = 0\n    for i = 1, n do\n        inc[i] = arr[i]\n        dec[i] = arr[i]\n    end\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i] then\n                inc[i] = inc[j] + arr[i]\n            end\n        end\n    end\n    for i = n - 1, 1, -1 do\n        for j = n, i + 1, -1 do\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i] then\n                dec[i] = dec[j] + arr[i]\n            end\n        end\n    end\n    for i = 1, n do\n        if max < inc[i] + dec[i] - arr[i] then\n            max = inc[i] + dec[i] - arr[i]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum_inc = {}\n    local max_sum_dec = {}\n    local max_sum = 0\n    local n = #arr\n    for i = 1, n do\n        max_sum_inc[i] = arr[i]\n        max_sum_dec[i] = arr[i]\n    end\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and max_sum_inc[i] < max_sum_inc[j] + arr[i] then\n                max_sum_inc[i] = max_sum_inc[j] + arr[i]\n            end\n        end\n    end\n    for i = n - 1, 1, -1 do\n        for j = n, i + 1, -1 do\n            if arr[i] > arr[j] and max_sum_dec[i] < max_sum_dec[j] + arr[i] then\n                max_sum_dec[i] = max_sum_dec[j] + arr[i]\n            end\n        end\n    end\n    for i = 1, n do\n        if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] then\n            max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfornnt4.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbfornnt4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local inc = {}\n  local dec = {}\n  local max = 0\n  for i = 1, n do\n    inc[i] = arr[i]\n    dec[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and inc[i] < inc[j] + arr[i] then\n        inc[i] = inc[j] + arr[i]\n      end\n      if arr[i] < arr[j] and dec[i] < dec[j] + arr[i] then\n        dec[i] = dec[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max < inc[i] + dec[i] - arr[i] then\n      max = inc[i] + dec[i] - arr[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplhkhkdxr.lua:32: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmplhkhkdxr.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmpm4ggb8yn.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_ending_here = 0\n  local max_sum_ending_here_rev = 0\n  local max_sum_ending_here_rev_arr = {}\n  for i = 1, #arr do\n    max_sum_ending_here = max_sum_ending_here + arr[i]\n    if max_sum_ending_here < 0 then\n      max_sum_ending_here = 0\n    end\n    max_sum = max(max_sum, max_sum_ending_here)\n  end\n  for i = #arr, 1, -1 do\n    max_sum_ending_here_rev = max_sum_ending_here_rev + arr[i]\n    if max_sum_ending_here_rev < 0 then\n      max_sum_ending_here_rev = 0\n    end\n    max_sum_ending_here_rev_arr[i] = max_sum_ending_here_rev\n  end\n  for i = 1, #arr - 1 do\n    max_sum = max(max_sum, max_sum_ending_here_rev_arr[i + 1] + max_sum_ending_here)\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84byyzfw.lua:12: attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmp84byyzfw.lua:12: in local 'candidate'\n\t/tmp/tmp84byyzfw.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(max_sum_left[i - 1] + arr[i], arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(max_sum_right[i + 1] + arr[i], arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbyt6avwd.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_inc = {}\n  local max_sum_dec = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcladr1vx.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local n = #arr\n    for i = 1, n do\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    end\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and max_sum_left[i] < max_sum_left[j] + arr[i] then\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            end\n        end\n    end\n    for i = n - 1, 1, -1 do\n        for j = n, i + 1, -1 do\n            if arr[i] > arr[j] and max_sum_right[i] < max_sum_right[j] + arr[i] then\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            end\n        end\n    end\n    for i = 1, n do\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] then\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_arr = {}\n  local max_sum_arr_rev = {}\n  local max_sum_arr_rev_rev = {}\n  local max_sum_arr_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2a7y9dzu.lua:32: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local i = 1\n  while i <= #arr do\n    sum = sum + arr[i]\n    if sum > max_sum then\n      max_sum = sum\n    end\n    i = i + 1\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mwthuco.lua:19: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp8mwthuco.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local max_sum_left[1] = arr[1]\n    local max_sum_right[#arr] = arr[#arr]\n    for i = 2, #arr do\n        max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n    end\n    for i = #arr - 1, 1, -1 do\n        max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n    end\n    for i = 1, #arr do\n        max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzi6mi0xi.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_inc = {}\n  local max_sum_dec = {}\n  local max_sum = 0\n  local n = #arr\n  for i = 1, n do\n    max_sum_inc[i] = arr[i]\n    max_sum_dec[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_inc[i] < max_sum_inc[j] + arr[i] then\n        max_sum_inc[i] = max_sum_inc[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and max_sum_dec[i] < max_sum_dec[j] + arr[i] then\n        max_sum_dec[i] = max_sum_dec[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] then\n      max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = 0\n  local max_sum_inc = {}\n  local max_sum_dec = {}\n  for i = 1, n do\n    max_sum_inc[i] = arr[i]\n    max_sum_dec[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_inc[i] < max_sum_inc[j] + arr[i] then\n        max_sum_inc[i] = max_sum_inc[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and max_sum_dec[i] < max_sum_dec[j] + arr[i] then\n        max_sum_dec[i] = max_sum_dec[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] then\n      max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local inc = {}\n  local dec = {}\n  inc[1] = arr[1]\n  dec[n] = arr[n]\n  for i = 2, n do\n    inc[i] = arr[i]\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] then\n        inc[i] = math.max(inc[i], inc[j] + arr[i])\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    dec[i] = arr[i]\n    for j = n, i + 1, -1 do\n      if arr[j] < arr[i] then\n        dec[i] = math.max(dec[i], dec[j] + arr[i])\n      end\n    end\n  end\n  local max = 0\n  for i = 1, n do\n    max = math.max(max, inc[i] + dec[i] - arr[i])\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local inc = {}\n    local dec = {}\n    for i = 1, n do\n        inc[i] = arr[i]\n        dec[i] = arr[i]\n    end\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i] then\n                inc[i] = inc[j] + arr[i]\n            end\n        end\n    end\n    for i = n - 1, 1, -1 do\n        for j = n, i + 1, -1 do\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i] then\n                dec[i] = dec[j] + arr[i]\n            end\n        end\n    end\n    local max = inc[1] + dec[1] - arr[1]\n    for i = 2, n do\n        if inc[i] + dec[i] - arr[i] > max then\n            max = inc[i] + dec[i] - arr[i]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local sum = 0\n    for i = 1, #arr do\n        sum = sum + arr[i]\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg18ktvqv.lua:17: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpg18ktvqv.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local lis = {}\n  local lds = {}\n  for i = 1, n do\n    lis[i] = arr[i]\n    lds[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and lis[i] < lis[j] + arr[i] then\n        lis[i] = lis[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and lds[i] < lds[j] + arr[i] then\n        lds[i] = lds[j] + arr[i]\n      end\n    end\n  end\n  local max = lis[1] + lds[1] - arr[1]\n  for i = 2, n do\n    if lis[i] + lds[i] - arr[i] > max then\n      max = lis[i] + lds[i] - arr[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local n = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsyzjiniv.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmpm4ggb8yn.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_ending_here = 0\n  local max_sum_ending_here_reverse = 0\n  local max_sum_ending_here_reverse_arr = {}\n  local max_sum_ending_here_arr = {}\n  for i = 1, #arr do\n    max_sum_ending_here = max_sum_ending_here + arr[i]\n    if max_sum_ending_here < 0 then\n      max_sum_ending_here = 0\n    end\n    max_sum_ending_here_arr[i] = max_sum_ending_here\n  end\n  for i = #arr, 1, -1 do\n    max_sum_ending_here_reverse = max_sum_ending_here_reverse + arr[i]\n    if max_sum_ending_here_reverse < 0 then\n      max_sum_ending_here_reverse = 0\n    end\n    max_sum_ending_here_reverse_arr[i] = max_sum_ending_here_reverse\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_ending_here_arr[i] + max_sum_ending_here_reverse_arr[i + 1])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzczi9qy5.lua:23: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpzczi9qy5.lua:23: in local 'candidate'\n\t/tmp/tmpzczi9qy5.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local sum = 0\n    for i = 1, #arr do\n        sum = sum + arr[i]\n        max_sum_left[i] = sum\n        sum = math.max(sum, 0)\n    end\n    sum = 0\n    for i = #arr, 1, -1 do\n        sum = sum + arr[i]\n        max_sum_right[i] = sum\n        sum = math.max(sum, 0)\n    end\n    for i = 1, #arr do\n        max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ssbkj6w.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp2ssbkj6w.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmpm4ggb8yn.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_arr = {}\n  local max_sum = 0\n  for i = 1, #arr do\n    max_sum_arr[i] = arr[i]\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] and max_sum_arr[j] + arr[i] > max_sum_arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n    if max_sum_arr[i] > max_sum then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkatp5d6n.lua:22: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpkatp5d6n.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local len = #arr\n  local max = arr[1]\n  local sum = arr[1]\n  for i = 2, len do\n    if arr[i] > max then\n      max = arr[i]\n      sum = sum + arr[i]\n    else\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1j38kt8.lua:20: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpc1j38kt8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_arr = {}\n  local max_sum_arr_len = 0\n  local max_sum_arr_index = 0\n  local max_sum_arr_index_end = 0\n  local max_sum_arr_index_start = 0\n  local max_sum_arr_index_start_end = 0\n  local max_sum_arr_index_start_start = 0\n  local max_sum_arr_index_end_end = 0\n  local max_sum_arr_index_end_start = 0\n  local max_sum_arr_index_start_end_end = 0\n  local max_sum_arr_index_start_start_start = 0\n  local max_sum_arr_index_end_end_end = 0\n  local max_sum_arr_index_end_start_start = 0\n  local max_sum_arr_index_start_end_end_end = 0\n  local max_sum_arr_index_start_start_start_start = 0\n  local max_sum_arr_index_end_end_end_end = 0\n  local max_sum_arr_index_end_start_start_start = 0\n  local max_sum_arr_index_start_end_end_end_end = 0\n  local max_sum_arr_index_start_start_start_start_start = 0\n  local max_sum_arr_index_end_end_end_end_end = 0\n  local max_sum_arr_index_end_start_start_start_start = 0\n  local max_sum_arr_index_start_end_end_end_end_end = 0\n  local max_sum_arr_index_start_start_start_start_start_start = 0\n  local max_sum_arr_index_end_end_end_end_end_end = 0\n  local max_sum_arr_index_end_start_start_start_start_start = 0\n  local max_sum_arr_index_start_end_end_end_end_end_end = 0\n  local max_sum_arr_index_start_start_start\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe1lqkwus.lua:40: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpia5phyrd.lua:27: expected: 194, actual: 384\nstack traceback:\n\t/tmp/tmpia5phyrd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local max_sum_left_so_far = 0\n    local max_sum_right_so_far = 0\n    for i = 1, #arr do\n        max_sum_left_so_far = max_sum_left_so_far + arr[i]\n        max_sum_left_so_far = max(max_sum_left_so_far, 0)\n        max_sum_left[i] = max_sum_left_so_far\n    end\n    for i = #arr, 1, -1 do\n        max_sum_right_so_far = max_sum_right_so_far + arr[i]\n        max_sum_right_so_far = max(max_sum_right_so_far, 0)\n        max_sum_right[i] = max_sum_right_so_far\n    end\n    for i = 1, #arr do\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcicmz3o2.lua:10: attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpcicmz3o2.lua:10: in local 'candidate'\n\t/tmp/tmpcicmz3o2.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  for i = 2, #arr do\n    local max_sum_arr_i = {arr[i]}\n    local max_sum_arr_rev_i = {arr[i]}\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] then\n        local sum = arr[i] + max_sum_arr[j]\n        if sum > max_sum_arr_i[1] then\n          max_sum_arr_i = {sum}\n        end\n      end\n      if arr[i] < arr[j] then\n        local sum = arr[i] + max_sum_arr_rev[j]\n        if sum > max_sum_arr_rev_i[1] then\n          max_sum_arr_rev_i = {sum}\n        end\n      end\n    end\n    max_sum_arr[i] = max_sum_arr_i[1]\n    max_sum_arr_rev[i] = max_sum_arr_rev_i[1]\n    if max_sum_arr[i] > max_sum then\n      max_sum = max_sum_arr[i]\n    end\n    if max_sum_arr_rev[i] > max_sum then\n      max_sum = max_sum_arr_rev[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbujtv7c.lua:38: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpnbujtv7c.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i-1] + arr[i])\n  end\n  for i = #arr-1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i+1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmphwwsdy91.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfornnt4.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbfornnt4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local inc = {}\n  local dec = {}\n  inc[1] = arr[1]\n  dec[n] = arr[n]\n  for i = 2, n do\n    inc[i] = arr[i]\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] then\n        inc[i] = math.max(inc[i], inc[j] + arr[i])\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    dec[i] = arr[i]\n    for j = n, i + 1, -1 do\n      if arr[j] < arr[i] then\n        dec[i] = math.max(dec[i], dec[j] + arr[i])\n      end\n    end\n  end\n  local max = inc[1] + dec[1] - arr[1]\n  for i = 2, n do\n    max = math.max(max, inc[i] + dec[i] - arr[i])\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local len = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[len] = arr[len]\n  for i = 2, len do\n    max_sum_left[i] = math.max(max_sum_left[i - 1] + arr[i], arr[i])\n  end\n  for i = len - 1, 1, -1 do\n    max_sum_right[i] = math.max(max_sum_right[i + 1] + arr[i], arr[i])\n  end\n  for i = 1, len do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx0izwm1n.lua:7: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6w7r3um0.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_left = arr[1]\n  local max_sum_right = arr[1]\n  local max_sum_left_arr = {arr[1]}\n  local max_sum_right_arr = {arr[1]}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzg3k3fg5.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, n do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n  end\n  sum = 0\n  for i = n, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n  end\n  for i = 1, n do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6hl_d5e.lua:26: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpa6hl_d5e.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_left = arr[1]\n  local max_sum_right = arr[1]\n  local max_sum_left_arr = {arr[1]}\n  local max_sum_right_arr = {arr[1]}\n  local max_sum_arr = {arr[1]}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpew0titvi.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local n = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local i = 1\n  while i <= n do\n    max_sum_left[i] = arr[i]\n    max_sum_right[i] = arr[i]\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n    local j = 1\n    while j < i do\n      if arr[i] > arr[j] and max_sum_left[i] < max_sum_left[j] + arr[i] then\n        max_sum_left[i] = max_sum_left[j] + arr[i]\n      end\n      j = j + 1\n    end\n    i = i + 1\n  end\n  i = n - 1\n  while i >= 1 do\n    local j = n\n    while j > i do\n      if arr[i] > arr[j] and max_sum_right[i] < max_sum_right[j] + arr[i] then\n        max_sum_right[i] = max_sum_right[j] + arr[i]\n      end\n      j = j - 1\n    end\n    i = i - 1\n  end\n  i = 1\n  while i <= n do\n    if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] then\n      max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n    end\n    i = i + 1\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum_inc = {}\n    local max_sum_dec = {}\n    local max_sum = 0\n    for i = 1, #arr do\n        max_sum_inc[i] = arr[i]\n        max_sum_dec[i] = arr[i]\n    end\n    for i = 2, #arr do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and max_sum_inc[i] < max_sum_inc[j] + arr[i] then\n                max_sum_inc[i] = max_sum_inc[j] + arr[i]\n            end\n        end\n    end\n    for i = #arr - 1, 1, -1 do\n        for j = #arr, i + 1, -1 do\n            if arr[i] > arr[j] and max_sum_dec[i] < max_sum_dec[j] + arr[i] then\n                max_sum_dec[i] = max_sum_dec[j] + arr[i]\n            end\n        end\n    end\n    for i = 1, #arr do\n        if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] then\n            max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum_inc = {}\n  local max_sum_dec = {}\n  local max_sum = 0\n  max_sum_inc[1] = arr[1]\n  max_sum_dec[n] = arr[n]\n  for i = 2, n do\n    max_sum_inc[i] = math.max(arr[i], arr[i] + max_sum_inc[i - 1])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_dec[i] = math.max(arr[i], arr[i] + max_sum_dec[i + 1])\n  end\n  for i = 1, n do\n    max_sum = math.max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd82y50dx.lua:24: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpd82y50dx.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_ending_here = 0\n  local max_sum_ending_here_reverse = 0\n  local max_sum_ending_here_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpb9j9y1p0.lua:31: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\n\tlocal max_sum_left[1] = arr[1]\n\tlocal max_sum_right[#arr] = arr[#arr]\n\tfor i = 2, #arr do\n\t\tmax_sum_left[i] = math.max(max_sum_left[i - 1] + arr[i], arr[i])\n\tend\n\tfor i = #arr - 1, 1, -1 do\n\t\tmax_sum_right[i] = math.max(max_sum_right[i + 1] + arr[i], arr[i])\n\tend\n\tfor i = 1, #arr do\n\t\tmax_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnv3fw4zv.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_arr = {}\n  local max_sum = 0\n  for i = 1, #arr do\n    max_sum_arr[i] = arr[i]\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzuuxhk5.lua:22: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpuzuuxhk5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local n = #arr\n  for i = 1, n do\n    max_sum_left[i] = arr[i]\n    max_sum_right[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_left[i] < max_sum_left[j] + arr[i] then\n        max_sum_left[i] = max_sum_left[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and max_sum_right[i] < max_sum_right[j] + arr[i] then\n        max_sum_right[i] = max_sum_right[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] then\n      max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local n = #arr\n  local lis = {}\n  local lds = {}\n  for i = 1, n do\n    lis[i] = arr[i]\n    lds[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and lis[i] < lis[j] + arr[i] then\n        lis[i] = lis[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and lds[i] < lds[j] + arr[i] then\n        lds[i] = lds[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < lis[i] + lds[i] - arr[i] then\n      max_sum = lis[i] + lds[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local sum = arr[1]\n  for i = 2, #arr do\n    if arr[i] > arr[i - 1] then\n      sum = sum + arr[i]\n    else\n      max_sum = math.max(max_sum, sum)\n      sum = arr[i]\n    end\n  end\n  return math.max(max_sum, sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp355lnf_i.lua:19: expected: 194, actual: 133\nstack traceback:\n\t/tmp/tmp355lnf_i.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum_arr = {}\n  local max_sum_arr[1] = arr[1]\n  local max_sum_arr[n] = arr[n]\n  for i=2,n do\n    max_sum_arr[i] = arr[i]\n    for j=1,i-1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  local max_sum = max_sum_arr[n]\n  for i=n-1,1,-1 do\n    for j=n,i+1,-1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7gi4qhmt.lua:5: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmpm4ggb8yn.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max = 0\n  local n = #arr\n  local l = {}\n  local r = {}\n  for i = 1, n do\n    l[i] = arr[i]\n    r[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and l[i] < l[j] + arr[i] then\n        l[i] = l[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and r[i] < r[j] + arr[i] then\n        r[i] = r[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max < l[i] + r[i] - arr[i] then\n      max = l[i] + r[i] - arr[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local inc = {}\n  local dec = {}\n  inc[1] = arr[1]\n  dec[n] = arr[n]\n  for i = 2, n do\n    inc[i] = arr[i]\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and inc[i] < inc[j] + arr[i] then\n        inc[i] = inc[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    dec[i] = arr[i]\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and dec[i] < dec[j] + arr[i] then\n        dec[i] = dec[j] + arr[i]\n      end\n    end\n  end\n  local max = inc[1] + dec[1] - arr[1]\n  for i = 2, n do\n    if max < inc[i] + dec[i] - arr[i] then\n      max = inc[i] + dec[i] - arr[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[n] = arr[n]\n  for i = 2, n do\n    max_sum_left[i] = math.max(arr[i], arr[i] + max_sum_left[i - 1])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], arr[i] + max_sum_right[i + 1])\n  end\n  for i = 1, n do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6essybln.lua:7: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509945,
      "stdout": "",
      "stderr": "lua: /tmp/tmpm4ggb8yn.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local sum = 0\n    for i = 1, #arr do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        max_sum_left[i] = sum\n    end\n    sum = 0\n    for i = #arr, 1, -1 do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        max_sum_right[i] = sum\n    end\n    for i = 1, #arr do\n        max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8macwub5.lua:31: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp8macwub5.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local sum = 0\n    local i = 1\n    local j = 1\n    local len = #arr\n    while i <= len and j <= len do\n        if arr[i] < arr[j] then\n            sum = sum + arr[j]\n            j = j + 1\n        else\n            if sum > max_sum then\n                max_sum = sum\n            end\n            sum = 0\n            i = j\n            j = j + 1\n        end\n    end\n    if sum > max_sum then\n        max_sum = sum\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tpb50f0.lua:30: expected: 194, actual: 283\nstack traceback:\n\t/tmp/tmp6tpb50f0.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_arr = {}\n  local max_sum_arr_idx = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpicwucdwx.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  for i = 1, #arr do\n    local sum = 0\n    for j = i, #arr do\n      sum = sum + arr[j]\n      if sum > max_sum then\n        max_sum = sum\n      end\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59qk3jf2.lua:19: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp59qk3jf2.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_temp = 0\n  local max_sum_right_temp = 0\n  local n = #arr\n  for i = 1, n do\n    max_sum_left_temp = max_sum_left_temp + arr[i]\n    if max_sum_left_temp < 0 then\n      max_sum_left_temp = 0\n    end\n    max_sum_left[i] = max_sum_left_temp\n  end\n  for i = n, 1, -1 do\n    max_sum_right_temp = max_sum_right_temp + arr[i]\n    if max_sum_right_temp < 0 then\n      max_sum_right_temp = 0\n    end\n    max_sum_right[i] = max_sum_right_temp\n  end\n  for i = 1, n do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapyt5ldi.lua:32: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpapyt5ldi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum_inc = {}\n    local max_sum_dec = {}\n    local max_sum = 0\n    for i = 1, n do\n        max_sum_inc[i] = arr[i]\n        max_sum_dec[i] = arr[i]\n    end\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and max_sum_inc[i] < max_sum_inc[j] + arr[i] then\n                max_sum_inc[i] = max_sum_inc[j] + arr[i]\n            end\n        end\n    end\n    for i = n - 1, 1, -1 do\n        for j = n, i + 1, -1 do\n            if arr[i] > arr[j] and max_sum_dec[i] < max_sum_dec[j] + arr[i] then\n                max_sum_dec[i] = max_sum_dec[j] + arr[i]\n            end\n        end\n    end\n    for i = 1, n do\n        if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] then\n            max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedefw2bt.lua:25: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpedefw2bt.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i-1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i+1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpp5blxkwl.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = 0\n  local max_sum_inc = {}\n  local max_sum_dec = {}\n  for i = 1, n do\n    max_sum_inc[i] = arr[i]\n    max_sum_dec[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_inc[i] < max_sum_inc[j] + arr[i] then\n        max_sum_inc[i] = max_sum_inc[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and max_sum_dec[i] < max_sum_dec[j] + arr[i] then\n        max_sum_dec[i] = max_sum_dec[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] then\n      max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbqvnmcs6.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local inc = {}\n  local dec = {}\n  local max = 0\n  for i = 1, n do\n    inc[i] = arr[i]\n    dec[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and inc[i] < inc[j] + arr[i] then\n        inc[i] = inc[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and dec[i] < dec[j] + arr[i] then\n        dec[i] = dec[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max < inc[i] + dec[i] - arr[i] then\n      max = inc[i] + dec[i] - arr[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_temp = 0\n  local max_sum_right_temp = 0\n  for i = 1, #arr do\n    max_sum_left_temp = max_sum_left_temp + arr[i]\n    if max_sum_left_temp < 0 then\n      max_sum_left_temp = 0\n    end\n    max_sum_left[i] = max_sum_left_temp\n  end\n  for i = #arr, 1, -1 do\n    max_sum_right_temp = max_sum_right_temp + arr[i]\n    if max_sum_right_temp < 0 then\n      max_sum_right_temp = 0\n    end\n    max_sum_right[i] = max_sum_right_temp\n  end\n  for i = 1, #arr do\n    if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] then\n      max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk93cnn8f.lua:33: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpk93cnn8f.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum_inc = {}\n  local max_sum_dec = {}\n  local max_sum = 0\n  for i = 1, n do\n    max_sum_inc[i] = arr[i]\n    max_sum_dec[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_inc[i] < max_sum_inc[j] + arr[i] then\n        max_sum_inc[i] = max_sum_inc[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and max_sum_dec[i] < max_sum_dec[j] + arr[i] then\n        max_sum_dec[i] = max_sum_dec[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] then\n      max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max = 0\n    local n = #arr\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = arr[i]\n    end\n    for i = 1, n do\n        for j = 1, n do\n            if i ~= j then\n                dp[i][j] = dp[i][j - 1] + arr[j]\n            end\n        end\n    end\n    for i = 1, n do\n        for j = 1, n do\n            if i ~= j then\n                if dp[i][j] > max then\n                    max = dp[i][j]\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuhe7uris.lua:18: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpuhe7uris.lua:18: in local 'candidate'\n\t/tmp/tmpuhe7uris.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfornnt4.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbfornnt4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum_arr = {}\n    for i = 1, n do\n        max_sum_arr[i] = arr[i]\n    end\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            end\n        end\n    end\n    local max_sum = max_sum_arr[1]\n    for i = 2, n do\n        if max_sum < max_sum_arr[i] then\n            max_sum = max_sum_arr[i]\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0s3adzs0.lua:27: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmp0s3adzs0.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local inc = {}\n  local dec = {}\n  inc[1] = arr[1]\n  dec[n] = arr[n]\n  for i = 2, n do\n    inc[i] = math.max(arr[i], inc[i-1] + arr[i])\n  end\n  for i = n-1, 1, -1 do\n    dec[i] = math.max(arr[i], dec[i+1] + arr[i])\n  end\n  local max = 0\n  for i = 1, n do\n    max = math.max(max, inc[i] + dec[i] - arr[i])\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ph0qf0v.lua:24: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp_ph0qf0v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfornnt4.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbfornnt4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_temp = 0\n  local max_sum_right_temp = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6g7diomu.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local n = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[n] = arr[n]\n  for i = 2, n do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, n do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbfxbszhu.lua:7: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local left = {}\n    local right = {}\n    local max = arr[1]\n    for i = 1, n do\n        left[i] = arr[i]\n        right[i] = arr[i]\n        if i > 1 then\n            for j = 1, i - 1 do\n                if arr[j] < arr[i] then\n                    left[i] = math.max(left[i], left[j] + arr[i])\n                end\n            end\n        end\n        max = math.max(max, left[i])\n    end\n    for i = n, 1, -1 do\n        for j = n, i + 1, -1 do\n            if arr[j] < arr[i] then\n                right[i] = math.max(right[i], right[j] + arr[i])\n            end\n        end\n        max = math.max(max, right[i])\n    end\n    for i = 1, n do\n        for j = i + 1, n do\n            if arr[i] < arr[j] then\n                max = math.max(max, left[i] + right[j])\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_left = arr[1]\n  local max_sum_right = arr[1]\n  local max_sum_left_arr = { arr[1] }\n  local max_sum_right_arr = { arr[1] }\n  for i = 2, #arr do\n    max_sum_left = math.max(arr[i], max_sum_left + arr[i])\n    max_sum_left_arr[i] = max_sum_left\n    max_sum = math.max(max_sum, max_sum_left)\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right = math.max(arr[i], max_sum_right + arr[i])\n    max_sum_right_arr[i] = max_sum_right\n    max_sum = math.max(max_sum, max_sum_right)\n  end\n  for i = 2, #arr - 1 do\n    max_sum = math.max(max_sum, max_sum_left_arr[i - 1] + max_sum_right_arr[i + 1])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp60fcvmif.lua:19: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp60fcvmif.lua:19: in local 'candidate'\n\t/tmp/tmp60fcvmif.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfornnt4.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbfornnt4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  local max_sum_arr_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpg4c9j2oo.lua:30: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local lis = {}\n  local lds = {}\n  for i = 1, n do\n    lis[i] = arr[i]\n    lds[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and lis[i] < lis[j] + arr[i] then\n        lis[i] = lis[j] + arr[i]\n      end\n      if arr[i] < arr[j] and lds[i] < lds[j] + arr[i] then\n        lds[i] = lds[j] + arr[i]\n      end\n    end\n  end\n  local max = lis[1] + lds[1] - arr[1]\n  for i = 2, n do\n    if max < lis[i] + lds[i] - arr[i] then\n      max = lis[i] + lds[i] - arr[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplwuemnkx.lua:32: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmplwuemnkx.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  for i = 2, #arr do\n    local max_sum_arr_i = {arr[i]}\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] then\n        local sum = arr[i] + max_sum_arr[j]\n        if sum > max_sum_arr_i[1] then\n          max_sum_arr_i = {sum, j}\n        end\n      end\n    end\n    max_sum_arr[i] = max_sum_arr_i[1]\n    if max_sum_arr[i] > max_sum then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt69pv1st.lua:26: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpt69pv1st.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  for i = 2, n do\n    max_sum_arr[i] = math.max(max_sum_arr[i-1] + arr[i], arr[i])\n    max_sum_arr_rev[i] = math.max(max_sum_arr_rev[i-1] + arr[n-i+1], arr[n-i+1])\n  end\n  for i = 1, n do\n    max_sum = math.max(max_sum, max_sum_arr[i] + max_sum_arr_rev[n-i+1] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrektunn.lua:20: expected: 194, actual: 276\nstack traceback:\n\t/tmp/tmprrektunn.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfornnt4.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbfornnt4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  local max_sum_arr_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev = {arr[1]}\n  for i = 2, #arr do\n    local max_sum_arr_rev_rev_rev_rev = max_sum_arr_rev_rev_rev\n    local max_sum_arr_rev_rev_rev = max_sum_arr_rev_rev\n    local max_sum_arr_rev = max_sum_arr_rev\n    local max_sum_arr = max_sum_arr\n    local max_sum = max_sum\n    local max_sum_arr = {arr[i]}\n    local max_sum_arr_rev = {arr[i]}\n    local max_sum_arr_rev_rev = {arr[i]}\n    local max_sum_arr_rev_rev_rev = {arr[i]}\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] then\n        if max_sum_arr[#max_sum_arr] + arr[i] > max_sum_arr[1] then\n          max_sum_arr[#max_sum_arr + 1] = arr[i]\n        end\n        if max_sum_arr_rev[1] + arr[i] > max_sum_arr_rev[1] then\n          max_sum_arr_rev[1] = max_sum_arr_rev[1] + arr[i]\n        end\n        if max_sum_arr_rev_rev[1] + arr[i] > max_sum_arr_rev_rev[1] then\n          max_sum_arr_rev_rev[1] = max_sum_arr_rev_rev[1] + arr[i]\n        end\n        if max_sum_arr_rev_rev_rev[1] + arr[i] > max_sum_arr_rev_rev_rev[1] then\n          max_sum_arr_rev_rev_rev\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123889,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9_6ihp24.lua:31: syntax error near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(max_sum_left[i - 1] + arr[i], arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(max_sum_right[i + 1] + arr[i], arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbyt6avwd.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local increasing = {}\n    local decreasing = {}\n    for i = 1, n do\n        increasing[i] = arr[i]\n        decreasing[i] = arr[i]\n    end\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and increasing[i] < increasing[j] + arr[i] then\n                increasing[i] = increasing[j] + arr[i]\n            end\n        end\n    end\n    for i = n - 1, 1, -1 do\n        for j = n, i + 1, -1 do\n            if arr[i] > arr[j] and decreasing[i] < decreasing[j] + arr[i] then\n                decreasing[i] = decreasing[j] + arr[i]\n            end\n        end\n    end\n    local max = increasing[1] + decreasing[1] - arr[1]\n    for i = 2, n do\n        if increasing[i] + decreasing[i] - arr[i] > max then\n            max = increasing[i] + decreasing[i] - arr[i]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123889,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_arr = {}\n\tlocal max_sum_arr_i = 1\n\tlocal max_sum_arr_j = 1\n\tlocal max_sum_arr_k = 1\n\tfor i = 1, #arr do\n\t\tlocal sum = 0\n\t\tlocal sum_arr = {}\n\t\tlocal sum_arr_i = 1\n\t\tlocal sum_arr_j = 1\n\t\tlocal sum_arr_k = 1\n\t\tfor j = i, #arr do\n\t\t\tsum = sum + arr[j]\n\t\t\tsum_arr[sum_arr_j] = arr[j]\n\t\t\tsum_arr_j = sum_arr_j + 1\n\t\t\tif sum > max_sum then\n\t\t\t\tmax_sum = sum\n\t\t\t\tmax_sum_arr = sum_arr\n\t\t\t\tmax_sum_arr_i = i\n\t\t\t\tmax_sum_arr_j = j\n\t\t\t\tmax_sum_arr_k = sum_arr_j\n\t\t\tend\n\t\tend\n\tend\n\tfor i = max_sum_arr_i, max_sum_arr_j do\n\t\tmax_sum_arr[max_sum_arr_k] = arr[i]\n\t\tmax_sum_arr_k = max_sum_arr_k + 1\n\tend\n\treturn max_sum, max_sum_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123889,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfyj9x7qx.lua:37: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpfyj9x7qx.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local sum = 0\n    for i = 1, #arr do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        max_sum_left[i] = sum\n    end\n    sum = 0\n    for i = #arr, 1, -1 do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        max_sum_right[i] = sum\n    end\n    for i = 1, #arr do\n        if max_sum_left[i] + max_sum_right[i] > max_sum then\n            max_sum = max_sum_left[i] + max_sum_right[i]\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123889,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgoe_t6f.lua:33: expected: 194, actual: 384\nstack traceback:\n\t/tmp/tmpkgoe_t6f.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local lis = {}\n  local lds = {}\n  for i = 1, n do\n    lis[i] = arr[i]\n    lds[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and lis[i] < lis[j] + arr[i] then\n        lis[i] = lis[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and lds[i] < lds[j] + arr[i] then\n        lds[i] = lds[j] + arr[i]\n      end\n    end\n  end\n  local max = lis[1] + lds[1] - arr[1]\n  for i = 2, n do\n    if max < lis[i] + lds[i] - arr[i] then\n      max = lis[i] + lds[i] - arr[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123889,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "",
      "stderr": "lua: /tmp/tmptv12f405.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123888,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfornnt4.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbfornnt4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}