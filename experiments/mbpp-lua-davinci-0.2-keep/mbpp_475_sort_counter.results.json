{
  "name": "mbpp_475_sort_counter",
  "language": "lua",
  "prompt": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_exkgi0.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp1_exkgi0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2+1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_exkgi0.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp1_exkgi0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n\tlocal dict2 = {}\n\tfor k, v in pairs(dict1) do\n\t\tdict2[v] = k\n\tend\n\treturn dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jbqk6py.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp7jbqk6py.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2+1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {key=k, value=v})\n    end\n    table.sort(dict2, function(a, b) return a.value > b.value end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhqp48st.lua:14: expected: \n{{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: \n{\n    {key=\"Chemistry\", value=87},\n    {key=\"Physics\", value=83},\n    {key=\"Math\", value=81}\n}\nstack traceback:\n\t/tmp/tmpuhqp48st.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kbi9wza.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmp4kbi9wza.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for i = 1, #dict2 do\n        local max_value = 0\n        local max_key = 0\n        for k, v in pairs(dict2) do\n            if k > max_value then\n                max_value = k\n                max_key = v\n            end\n        end\n        dict3[i] = max_key\n        dict2[max_value] = nil\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbzhdd207.lua:26: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {}\nstack traceback:\n\t/tmp/tmpbzhdd207.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        dict2[value] = key\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekft6xpc.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpekft6xpc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kbi9wza.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmp4kbi9wza.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for i, v in ipairs(keys) do\n        dict3[dict2[v]] = v\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw892wo3z.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmpw892wo3z.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        dict2[value] = key\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekft6xpc.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpekft6xpc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2+1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        dict2[value] = key\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekft6xpc.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpekft6xpc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        dict2[value] = key\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekft6xpc.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpekft6xpc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n\tlocal dict2 = {}\n\tfor k,v in pairs(dict1) do\n\t\tdict2[v] = k\n\tend\n\treturn dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2d_oe4b4.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp2d_oe4b4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k,v in pairs(dict2) do\n        table.insert(sorted, {v, k})\n    end\n    table.sort(sorted, function(a,b) return a[2] > b[2] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kbi9wza.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmp4kbi9wza.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggeeoham.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpggeeoham.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_exkgi0.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp1_exkgi0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b)\n        return a[2] > b[2]\n    end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        dict2[value] = key\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekft6xpc.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpekft6xpc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {key=k, value=v})\n    end\n    table.sort(dict2, function(a, b) return a.value > b.value end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhqp48st.lua:14: expected: \n{{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: \n{\n    {key=\"Chemistry\", value=87},\n    {key=\"Physics\", value=83},\n    {key=\"Math\", value=81}\n}\nstack traceback:\n\t/tmp/tmpuhqp48st.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_exkgi0.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp1_exkgi0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local sorted = {}\n    for k, v in pairs(dict1) do\n        table.insert(sorted, {key=k, value=v})\n    end\n    table.sort(sorted, function(a, b) return a.value > b.value end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq3aikkz.lua:14: expected: \n{{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: \n{\n    {key=\"Chemistry\", value=87},\n    {key=\"Physics\", value=83},\n    {key=\"Math\", value=81}\n}\nstack traceback:\n\t/tmp/tmpgq3aikkz.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2+1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n\tlocal dict2 = {}\n\tfor k,v in pairs(dict1) do\n\t\tdict2[v] = k\n\tend\n\tlocal sorted_keys = {}\n\tfor k,v in pairs(dict2) do\n\t\ttable.insert(sorted_keys, k)\n\tend\n\ttable.sort(sorted_keys)\n\tlocal sorted_dict = {}\n\tfor i,v in ipairs(sorted_keys) do\n\t\tsorted_dict[dict2[v]] = v\n\tend\n\treturn sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkebwxjdg.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmpkebwxjdg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kbi9wza.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmp4kbi9wza.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = dict2[v] or {}\n        table.insert(dict2[v], k)\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6_rvz1x.lua:14: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81={\"Math\"}, 83={\"Physics\"}, 87={\"Chemistry\"}}\nstack traceback:\n\t/tmp/tmpv6_rvz1x.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kbi9wza.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmp4kbi9wza.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n\tlocal dict2 = {}\n\tfor k, v in pairs(dict1) do\n\t\tdict2[v] = k\n\tend\n\treturn dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jbqk6py.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp7jbqk6py.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    dict2[v] = k\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggc9h78h.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpggc9h78h.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2+1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        dict2[value] = key\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekft6xpc.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpekft6xpc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    dict2[v] = dict2[v] or {}\n    table.insert(dict2[v], k)\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_it4e7zf.lua:14: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81={\"Math\"}, 83={\"Physics\"}, 87={\"Chemistry\"}}\nstack traceback:\n\t/tmp/tmp_it4e7zf.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kbi9wza.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmp4kbi9wza.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        dict2[value] = key\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekft6xpc.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpekft6xpc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        dict2[value] = key\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122403,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekft6xpc.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpekft6xpc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    dict2[v] = k\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggc9h78h.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpggc9h78h.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        dict2[#dict2 + 1] = {key, value}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for _, k in ipairs(keys) do\n        dict3[dict2[k]] = k\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2j0i8y91.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmp2j0i8y91.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509705,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvnde7iq.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpvvnde7iq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}