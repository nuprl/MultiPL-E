{
  "name": "mbpp_130_max_occurrences",
  "language": "lua",
  "prompt": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa6zz7kx.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpqa6zz7kx.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local max_num, max_count = nil, 0\n  for _, num in ipairs(nums) do\n    local count = 0\n    for _, num2 in ipairs(nums) do\n      if num == num2 then\n        count = count + 1\n      end\n    end\n    if count > max_count then\n      max_num = num\n      max_count = count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_occurrence = nil, 0\n  for num, occurrence in pairs(occurrences) do\n    if occurrence > max_occurrence then\n      max_num, max_occurrence = num, occurrence\n    end\n  end\n  return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hu25aou.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3hu25aou.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpji_ax29n.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpji_ax29n.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_num = nil\n    for _, num in ipairs(nums) do\n        local count = 0\n        for _, num2 in ipairs(nums) do\n            if num == num2 then\n                count = count + 1\n            end\n        end\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6oorrd5.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmps6oorrd5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local occurrences = {}\n    for _, num in ipairs(nums) do\n        occurrences[num] = (occurrences[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_qld0057.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local occurrences = {}\n    for _, num in ipairs(nums) do\n        occurrences[num] = (occurrences[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_qld0057.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, n in ipairs(nums) do\n    counts[n] = (counts[n] or 0) + 1\n  end\n  local max_count = 0\n  local max_item = nil\n  for k, v in pairs(counts) do\n    if v > max_count then\n      max_count = v\n      max_item = k\n    end\n  end\n  return max_item\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6ilko0w.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpb6ilko0w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpji_ax29n.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpji_ax29n.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6oorrd5.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmps6oorrd5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_num = nil\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n        if counts[num] > max_count then\n            max_count = counts[num]\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmn8yu1x1.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqc_bc47a.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqc_bc47a.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_num = nil\n    local counts = {}\n    for _, num in ipairs(nums) do\n        local count = counts[num] or 0\n        counts[num] = count + 1\n        if count + 1 > max_count then\n            max_count = count + 1\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n\tlocal counts = {}\n\tfor _, num in ipairs(nums) do\n\t\tcounts[num] = (counts[num] or 0) + 1\n\tend\n\tlocal max_count = 0\n\tlocal max_num\n\tfor num, count in pairs(counts) do\n\t\tif count > max_count then\n\t\t\tmax_count = count\n\t\t\tmax_num = num\n\t\tend\n\tend\n\treturn max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb154mjr0.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpb154mjr0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, n in ipairs(nums) do\n        counts[n] = (counts[n] or 0) + 1\n    end\n    local max_count = 0\n    local max_num\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyiwo3cb.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpmyiwo3cb.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, n in ipairs(nums) do\n    counts[n] = (counts[n] or 0) + 1\n  end\n  local max_count = 0\n  local max_item\n  for item, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_item = item\n    end\n  end\n  return max_item\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc432nedf.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpc432nedf.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local count = {}\n  for _, num in ipairs(nums) do\n    count[num] = (count[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, c in pairs(count) do\n    if c > max_count then\n      max_num, max_count = num, c\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrs5aj64.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpzrs5aj64.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmn8yu1x1.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, n in ipairs(nums) do\n    counts[n] = (counts[n] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for n, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = n\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_occurrence = nil, 0\n  for num, occurrence in pairs(occurrences) do\n    if occurrence > max_occurrence then\n      max_num, max_occurrence = num, occurrence\n    end\n  end\n  return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hu25aou.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3hu25aou.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkzxhwwvl.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local max_num, max_count = nil, 0\n  for _, num in ipairs(nums) do\n    local count = occurrences(nums, num)\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3gt8fage.lua:5: attempt to call a nil value (global 'occurrences')\nstack traceback:\n\t/tmp/tmp3gt8fage.lua:5: in local 'candidate'\n\t/tmp/tmp3gt8fage.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6oorrd5.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmps6oorrd5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6oorrd5.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmps6oorrd5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmn8yu1x1.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa6zz7kx.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpqa6zz7kx.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local max_count = 0\n  local max_num = nil\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n    if counts[num] > max_count then\n      max_count = counts[num]\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local freq = {}\n  for _, num in ipairs(nums) do\n    freq[num] = (freq[num] or 0) + 1\n  end\n  local max_freq = 0\n  local max_num = nil\n  for num, f in pairs(freq) do\n    if f > max_freq then\n      max_freq = f\n      max_num = num\n    end\n  end\n  return max_num, max_freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7be8k3z.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpc7be8k3z.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jg13pz3.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp5jg13pz3.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmn8yu1x1.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_occurrence = nil, 0\n  for num, occurrence in pairs(occurrences) do\n    if occurrence > max_occurrence then\n      max_num, max_occurrence = num, occurrence\n    end\n  end\n  return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hu25aou.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3hu25aou.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmn8yu1x1.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_num, max_count = nil, 0\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_num, max_count = num, count\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnju7ohw.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmplnju7ohw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local max_count = 0\n  local max_item\n  local counts = {}\n  for _, num in ipairs(nums) do\n    local count = counts[num] or 0\n    counts[num] = count + 1\n    if count + 1 > max_count then\n      max_count = count + 1\n      max_item = num\n    end\n  end\n  return max_item\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_num = nil\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n        if counts[num] > max_count then\n            max_count = counts[num]\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_num = nil\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n        if counts[num] > max_count then\n            max_count = counts[num]\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6oorrd5.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmps6oorrd5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    local max_count = 0\n    local max_num = nil\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n        if counts[num] > max_count then\n            max_count = counts[num]\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local max_count = 0\n  local max_num = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpar28dxwk.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local max = 0\n    local max_num = nil\n    for _, num in ipairs(nums) do\n        local count = occurrences(nums, num)\n        if count > max then\n            max = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphu5ryss9.lua:6: attempt to call a nil value (global 'occurrences')\nstack traceback:\n\t/tmp/tmphu5ryss9.lua:6: in local 'candidate'\n\t/tmp/tmphu5ryss9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkzxhwwvl.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    local max_count = 0\n    local max_item = nil\n    for _, num in ipairs(nums) do\n        local count = counts[num] or 0\n        counts[num] = count + 1\n        if counts[num] > max_count then\n            max_count = counts[num]\n            max_item = num\n        end\n    end\n    return max_item, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt096xs6f.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpt096xs6f.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_num = nil\n    for _, num in ipairs(nums) do\n        local count = 0\n        for _, num2 in ipairs(nums) do\n            if num == num2 then\n                count = count + 1\n            end\n        end\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nassert(max_occurrences({1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3}) == 1)\nassert(max_occurrences({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}) == 1)\nassert(max_occurrences({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1}) == 1)\nassert(max_occurrences({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 1}) == 1)\nassert(max_occurrences({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 1, 1}) == 1)\nassert(max_occurrences({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 1, 1, 1}) == 1)\nassert(max_occurrences({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 1, 1, 1, 1}) == 1)\nassert(max_occurrences({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 1, 1, 1, 1, 1}) == 1)\nassert(max_occurrences({1, 2, 3, 4, 5, 6, 7, 8, 9\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx4g2o2eq.lua:24: '}' expected (to close '{' at line 23) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  local max_count = 0\n  local max_item = nil\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n    if counts[num] > max_count then\n      max_count = counts[num]\n      max_item = num\n    end\n  end\n  return max_item\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii6n5zlg.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii6n5zlg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt096xs6f.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpt096xs6f.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_num, max_count = nil, 0\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_num, max_count = num, count\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnju7ohw.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmplnju7ohw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  local max_count = 0\n  local max_num = nil\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n    if counts[num] > max_count then\n      max_count = counts[num]\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa6zz7kx.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpqa6zz7kx.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_occurrence = 0\n  local max_num = nil\n  for num, occurrence in pairs(occurrences) do\n    if occurrence > max_occurrence then\n      max_occurrence = occurrence\n      max_num = num\n    end\n  end\n  return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssz6pzmp.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpssz6pzmp.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt096xs6f.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpt096xs6f.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max then\n      max = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnceixu90.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpnceixu90.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, n in ipairs(nums) do\n    counts[n] = (counts[n] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2d0cys6b.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp2d0cys6b.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmn8yu1x1.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6oorrd5.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmps6oorrd5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_occurrence = nil, 0\n  for num, occurrence in pairs(occurrences) do\n    if occurrence > max_occurrence then\n      max_num, max_occurrence = num, occurrence\n    end\n  end\n  return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hu25aou.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3hu25aou.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local freq = {}\n  for _, n in ipairs(nums) do\n    freq[n] = (freq[n] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxu7jzegl.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6oorrd5.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmps6oorrd5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count, max_num = 0\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5dmp7ke.lua:21: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpy5dmp7ke.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local occurrences = {}\n    for _, num in ipairs(nums) do\n        occurrences[num] = (occurrences[num] or 0) + 1\n    end\n    local max_num, max_occurrence = nil, 0\n    for num, occurrence in pairs(occurrences) do\n        if occurrence > max_occurrence then\n            max_num, max_occurrence = num, occurrence\n        end\n    end\n    return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_5m6_tiz.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_5m6_tiz.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmn8yu1x1.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6oorrd5.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmps6oorrd5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count, max_num = 0\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt94zdzxv.lua:21: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpt94zdzxv.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt096xs6f.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpt096xs6f.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa6zz7kx.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpqa6zz7kx.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_num, max_count = nil, 0\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_num, max_count = num, count\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnju7ohw.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmplnju7ohw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    local max_count = 0\n    local max_num = nil\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n        if counts[num] > max_count then\n            max_count = counts[num]\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkzxhwwvl.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa6zz7kx.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpqa6zz7kx.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local occurrences = {}\n    for _, num in ipairs(nums) do\n        occurrences[num] = (occurrences[num] or 0) + 1\n    end\n    local max_num, max_count = nil, 0\n    for num, count in pairs(occurrences) do\n        if count > max_count then\n            max_num, max_count = num, count\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitjdc1af.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpitjdc1af.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6oorrd5.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmps6oorrd5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, v in ipairs(nums) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    local max_count = 0\n    local max_item = nil\n    for k, v in pairs(counts) do\n        if v > max_count then\n            max_count = v\n            max_item = k\n        end\n    end\n    return max_item\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5iqpkal2.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp5iqpkal2.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmn8yu1x1.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpji_ax29n.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpji_ax29n.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, n in ipairs(nums) do\n        counts[n] = (counts[n] or 0) + 1\n    end\n    local max_count = 0\n    local max_item\n    for k, v in pairs(counts) do\n        if v > max_count then\n            max_count = v\n            max_item = k\n        end\n    end\n    return max_item, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ctgvg88.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp1ctgvg88.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa6zz7kx.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpqa6zz7kx.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5cftpw1p.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqc_bc47a.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  local max_num, max_occurrence = nil, 0\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n    if occurrences[num] > max_occurrence then\n      max_num, max_occurrence = num, occurrences[num]\n    end\n  end\n  return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max then\n      max = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnceixu90.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpnceixu90.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    local max_count = 0\n    local max_num = nil\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n        if counts[num] > max_count then\n            max_count = counts[num]\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = occurrences[num] and occurrences[num] + 1 or 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbahst_c.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmppbahst_c.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6oorrd5.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmps6oorrd5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local max_count = 0\n  local max_num = nil\n  local counts = {}\n  for _, num in ipairs(nums) do\n    local count = counts[num] or 0\n    count = count + 1\n    counts[num] = count\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jg13pz3.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp5jg13pz3.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_occurrences, max_num = 0, nil\n  for num, occurrences in pairs(occurrences) do\n    if occurrences > max_occurrences then\n      max_occurrences, max_num = occurrences, num\n    end\n  end\n  return max_num, max_occurrences\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpar6vv943.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpar6vv943.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmn8yu1x1.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, n in ipairs(nums) do\n    counts[n] = (counts[n] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for n, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = n\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfp5isarl.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpfp5isarl.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local occurrences = {}\n    for _, num in ipairs(nums) do\n        occurrences[num] = (occurrences[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_qld0057.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii6n5zlg.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii6n5zlg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local freq = {}\n  for _, num in ipairs(nums) do\n    freq[num] = (freq[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_k56hqtz.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkgwtecs.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvkgwtecs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    if counts[num] then\n      counts[num] = counts[num] + 1\n    else\n      counts[num] = 1\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5g_27bc1.lua:20: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa6zz7kx.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpqa6zz7kx.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpji_ax29n.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpji_ax29n.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bkcfa9x.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_bkcfa9x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  local max_count = 0\n  local max_num = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbz60y1xl.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_num = nil\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n        if counts[num] > max_count then\n            max_count = counts[num]\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6oorrd5.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmps6oorrd5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmn8yu1x1.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6oorrd5.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmps6oorrd5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxubo460.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpgxubo460.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509920,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o44jzki.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp3o44jzki.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count, max_num = 0\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122607,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5dmp7ke.lua:21: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpy5dmp7ke.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}