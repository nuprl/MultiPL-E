{
  "name": "mbpp_769_Diff",
  "language": "lua",
  "prompt": "-- Write a python function to get the difference between two lists.\nlocal function Diff(li1, li2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Diff\n    lu.assertEquals(candidate({10, 15, 20, 25, 30, 35, 40}, {25, 40, 35}), {10, 20, 30, 15})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {6, 7, 1}), {2, 3, 4, 5, 6, 7})\n    lu.assertEquals(candidate({1, 2, 3}, {6, 7, 1}), {2, 3, 6, 7})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local li = {}\n  for _, v in ipairs(li1) do\n    if not ListContains(li2, v) then\n      table.insert(li, v)\n    end\n  end\n  return li\nend",
    "  local ret = {}\n  for _, v in ipairs(li1) do\n    if not ListContains(li2, v) then\n      table.insert(ret, v)\n    end\n  end\n  return ret\nend",
    "\tlocal li = {}\n\tfor _, v in pairs(li1) do\n\t\tif not table.contains(li2, v) then\n\t\t\ttable.insert(li, v)\n\t\tend\n\tend\n\treturn li\nend",
    "    local diff = {}\n    for _, v in pairs(li1) do\n        if not table.contains(li2, v) then\n            table.insert(diff, v)\n        end\n    end\n    return diff\nend",
    "\tlocal ret = {}\n\tfor i, v in ipairs(li1) do\n\t\tif not table.contains(li2, v) then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn ret\nend",
    "\tlocal diff = {}\n\tfor i = 1, #li1 do\n\t\tlocal found = false\n\t\tfor j = 1, #li2 do\n\t\t\tif li1[i] == li2[j] then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\tdiff[#diff + 1] = li1[i]\n\t\tend\n\tend\n\treturn diff\nend",
    "\tlocal diff = {}\n\tfor i, v in pairs(li1) do\n\t\tif not table.HasValue(li2, v) then\n\t\t\ttable.insert(diff, v)\n\t\tend\n\tend\n\treturn diff\nend",
    "\tlocal diff = {}\n\tfor _,v in pairs(li1) do\n\t\tif not table.HasValue(li2, v) then\n\t\t\ttable.insert(diff, v)\n\t\tend\n\tend\n\treturn diff\nend",
    "\tlocal ret = {}\n\tfor _, v in ipairs(li1) do\n\t\tif not table.contains(li2, v) then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn ret\nend",
    "\tlocal diff = {}\n\tfor _, v in ipairs(li1) do\n\t\tif not ListContains(li2, v) then\n\t\t\ttable.insert(diff, v)\n\t\tend\n\tend\n\treturn diff\nend",
    "\tlocal li = {}\n\tfor i, v in ipairs(li1) do\n\t\tif not table.contains(li2, v) then\n\t\t\ttable.insert(li, v)\n\t\tend\n\tend\n\treturn li\nend",
    "\tlocal ret = {}\n\tfor _, v in pairs(li1) do\n\t\tif not table.HasValue(li2, v) then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn ret\nend",
    "    local diff = {}\n    for _, v in ipairs(li1) do\n        if not table.contains(li2, v) then\n            table.insert(diff, v)\n        end\n    end\n    return diff\nend",
    "\tlocal diff = {}\n\tfor _, v in pairs(li1) do\n\t\tif not table.HasValue(li2, v) then\n\t\t\ttable.insert(diff, v)\n\t\tend\n\tend\n\treturn diff\nend",
    "\tlocal diff = {}\n\tfor _, v in pairs(li1) do\n\t\tif not table.HasValue(li2, v) then\n\t\t\ttable.insert(diff, v)\n\t\tend\n\tend\n\treturn diff\nend",
    "  local ret = {}\n  for _, v in ipairs(li1) do\n    if not ListContains(li2, v) then\n      table.insert(ret, v)\n    end\n  end\n  return ret\nend",
    "\tlocal diff = {}\n\tfor _, v in pairs(li1) do\n\t\tif not table.HasValue(li2, v) then\n\t\t\ttable.insert(diff, v)\n\t\tend\n\tend\n\treturn diff\nend",
    "\tlocal li = {}\n\tfor _, v in ipairs(li1) do\n\t\tif not List.Contains(li2, v) then\n\t\t\ttable.insert(li, v)\n\t\tend\n\tend\n\treturn li\nend",
    "\tlocal res = {}\n\tfor _, v in ipairs(li1) do\n\t\tif not List.Contains(li2, v) then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\treturn res\nend",
    "\tlocal diff = {}\n\tfor _, v in pairs(li1) do\n\t\tif not table.HasValue(li2, v) then\n\t\t\ttable.insert(diff, v)\n\t\tend\n\tend\n\treturn diff\nend"
  ]
}