{
  "name": "mbpp_602_first_repeated_char",
  "language": "lua",
  "prompt": "-- Write a python function to find the first repeated character in a given string.\nlocal function first_repeated_char(str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_repeated_char\n    lu.assertEquals(candidate('abcabc'), 'a')\n    lu.assertEquals(candidate('abc'), None)\n    lu.assertEquals(candidate('123123'), '1')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_count[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    local result = ''\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n        else\n            result = str1:sub(i, i)\n            break\n        end\n    end\n    return result\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i,i)] then\n            return str1:sub(i,i)\n        else\n            count[str1:sub(i,i)] = (count[str1:sub(i,i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_table = {}\n    for i = 1, #str1 do\n        if char_table[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_table[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    local result = nil\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            result = str1:sub(i, i)\n            break\n        else\n            count[str1:sub(i, i)] = true\n        end\n    end\n    return result\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_table = {}\n    for i = 1, #str1 do\n        local char = string.sub(str1, i, i)\n        if char_table[char] then\n            return char\n        else\n            char_table[char] = true\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_count[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local char_table = {}\n    for i = 1, #str1 do\n        if char_table[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_table[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_count[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    local result = nil\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            result = str1:sub(i, i)\n            break\n        else\n            count[str1:sub(i, i)] = true\n        end\n    end\n    return result\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_count[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i,i)] then\n            return str1:sub(i,i)\n        else\n            count[str1:sub(i,i)] = (count[str1:sub(i,i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for char in str1:gmatch\".\" do\n        count[char] = (count[char] or 0) + 1\n        if count[char] > 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] ~= nil then\n            return str1:sub(i, i)\n        else\n            char_count[str1:sub(i, i)] = i\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for char in str1:gmatch\".\" do\n        if count[char] then\n            return char\n        end\n        count[char] = true\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_count[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = 0\n    local res = \"\"\n    for i = 1, #str1 do\n        if count == 0 then\n            for j = i + 1, #str1 do\n                if str1:sub(i, i) == str1:sub(j, j) then\n                    res = str1:sub(i, i)\n                    count = count + 1\n                    break\n                end\n            end\n        end\n    end\n    return res\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_count[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local char_table = {}\n    for i = 1, #str1 do\n        if char_table[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_table[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_table = {}\n    for i = 1, #str1 do\n        if char_table[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_table[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local result = \"\"\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n        else\n            result = str1:sub(i, i)\n            break\n        end\n    end\n    return result\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local result = \"\"\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n        else\n            result = str1:sub(i, i)\n            break\n        end\n    end\n    return result\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_count[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "  local count = {}\n  for i = 1, #str1 do\n    if count[str1:sub(i, i)] then\n      return str1:sub(i, i)\n    end\n    count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n  end\n  return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for char in str1:gmatch\".\" do\n        if count[char] then\n            return char\n        end\n        count[char] = true\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local result = \"\"\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            result = str1:sub(i, i)\n            break\n        else\n            count[str1:sub(i, i)] = true\n        end\n    end\n    return result\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_count[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            return char\n        else\n            char_count[char] = true\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local result = \"\"\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n        else\n            result = str1:sub(i, i)\n            break\n        end\n    end\n    return result\nend",
    "    local char_table = {}\n    for i = 1, #str1 do\n        if char_table[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_table[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "\tlocal hash = {}\n\tlocal result = nil\n\tfor i = 1, #str1 do\n\t\tif hash[str1:sub(i,i)] then\n\t\t\tresult = str1:sub(i,i)\n\t\t\tbreak\n\t\telse\n\t\t\thash[str1:sub(i,i)] = true\n\t\tend\n\tend\n\treturn result\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "   local chars = {}\n   for i = 1, #str1 do\n      local char = str1:sub(i,i)\n      if chars[char] then\n         return char\n      else\n         chars[char] = true\n      end\n   end\n   return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_table = {}\n    for i = 1, #str1 do\n        if char_table[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        char_table[str1:sub(i, i)] = true\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for char in str1:gmatch(\".\") do\n        if count[char] then\n            return char\n        end\n        count[char] = true\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "\tlocal count = 0\n\tlocal res = \"\"\n\tfor i = 1, #str1 do\n\t\tfor j = i + 1, #str1 do\n\t\t\tif str1[i] == str1[j] then\n\t\t\t\tcount = count + 1\n\t\t\t\tres = str1[i]\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif count == 1 then\n\t\t\tbreak\n\t\tend\n\tend\n\tif count == 0 then\n\t\tprint(\"-1\")\n\telse\n\t\tprint(res)\n\tend\nend\nfirst_repeated_char(\"abcdab\")\nfirst_repeated_char(\"abcd\")\nfirst_repeated_char(\"abcdaab\")\nfirst_repeated_char(\"aab\")\nfirst_repeated_char(\"aabaab\")\nfirst_repeated_char(\"abcde\")\nfirst_repeated_char(\"\")",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_count[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local count = 0\n    local res = \"\"\n    for i = 1, #str1 do\n        if (count == 0) then\n            res = str1:sub(i, i)\n            count = count + 1\n        else\n            if (res == str1:sub(i, i)) then\n                return res\n            end\n        end\n    end\n    return -1\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_table = {}\n    for i = 1, #str1 do\n        if char_table[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_table[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            return char\n        else\n            char_count[char] = 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            char_count[str1:sub(i, i)] = true\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            return char\n        end\n    end\n    return nil\nend",
    "    local len = #str1\n    local char, index = {}, {}\n    for i = 1, len do\n        if char[str1:sub(i, i)] then\n            index[#index+1] = i\n        else\n            char[str1:sub(i, i)] = true\n        end\n    end\n    return str1:sub(index[1], index[1])\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = 0\n    local res = \"\"\n    for i = 1, #str1 do\n        if count == 0 then\n            res = str1:sub(i, i)\n            count = count + 1\n        else\n            if res == str1:sub(i, i) then\n                return res\n            else\n                res = str1:sub(i, i)\n            end\n        end\n    end\n    return -1\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local result = nil\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] then\n            result = char\n            break\n        end\n        count[char] = true\n    end\n    return result\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local len = #str1\n    local char, index = '', 0\n    for i = 1, len do\n        if string.find(str1, str1:sub(i, i), i + 1) then\n            char = str1:sub(i, i)\n            index = i\n            break\n        end\n    end\n    return char, index\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        else\n            count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_table = {}\n    for i = 1, #str1 do\n        if char_table[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        char_table[str1:sub(i, i)] = true\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n        else\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            return str1:sub(i, i)\n        end\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend"
  ]
}