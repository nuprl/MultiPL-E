{
  "name": "mbpp_400_extract_freq",
  "language": "lua",
  "prompt": "-- Write a function to extract the number of unique tuples in the given list.\nlocal function extract_freq(test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_freq\n    lu.assertEquals(candidate({{3, 4}, {1, 2}, {4, 3}, {5, 6}}), 3)\n    lu.assertEquals(candidate({{4, 15}, {2, 3}, {5, 4}, {6, 7}}), 4)\n    lu.assertEquals(candidate({{5, 16}, {2, 3}, {6, 5}, {6, 9}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local freq_list = {}\n    for _, tuple in ipairs(test_list) do\n        local freq = freq_list[tuple]\n        if freq == nil then\n            freq_list[tuple] = 1\n        else\n            freq_list[tuple] = freq + 1\n        end\n    end\n    return freq_list\nend",
    "  local freq = {}\n  for _, v in ipairs(test_list) do\n    if not freq[v] then\n      freq[v] = 1\n    else\n      freq[v] = freq[v] + 1\n    end\n  end\n  return freq\nend",
    "  local freq_list = {}\n  for i = 1, #test_list do\n    local tuple = test_list[i]\n    local key = tuple[1]\n    local value = tuple[2]\n    if freq_list[key] == nil then\n      freq_list[key] = value\n    else\n      freq_list[key] = freq_list[key] + value\n    end\n  end\n  return freq_list\nend",
    "  local freq = {}\n  for i = 1, #test_list do\n    local t = test_list[i]\n    if not freq[t] then\n      freq[t] = 1\n    else\n      freq[t] = freq[t] + 1\n    end\n  end\n  return freq\nend",
    "\tlocal freq_list = {}\n\tfor i,v in ipairs(test_list) do\n\t\tif freq_list[v] == nil then\n\t\t\tfreq_list[v] = 1\n\t\telse\n\t\t\tfreq_list[v] = freq_list[v] + 1\n\t\tend\n\tend\n\treturn freq_list\nend",
    "    local freq_list = {}\n    for _, v in ipairs(test_list) do\n        freq_list[v] = (freq_list[v] or 0) + 1\n    end\n    return freq_list\nend",
    "    local freq_table = {}\n    for _, v in ipairs(test_list) do\n        local key = table.concat(v, ',')\n        if freq_table[key] then\n            freq_table[key] = freq_table[key] + 1\n        else\n            freq_table[key] = 1\n        end\n    end\n    return freq_table\nend",
    "    local freq_list = {}\n    for i = 1, #test_list do\n        local tuple = test_list[i]\n        local freq = freq_list[tuple]\n        if freq == nil then\n            freq_list[tuple] = 1\n        else\n            freq_list[tuple] = freq + 1\n        end\n    end\n    return freq_list\nend",
    "  local freq_list = {}\n  for i = 1, #test_list do\n    local tuple = test_list[i]\n    if freq_list[tuple] == nil then\n      freq_list[tuple] = 1\n    else\n      freq_list[tuple] = freq_list[tuple] + 1\n    end\n  end\n  return freq_list\nend",
    "    local freq = {}\n    for _, v in ipairs(test_list) do\n        local t = table.concat(v, \",\")\n        if freq[t] == nil then\n            freq[t] = 1\n        else\n            freq[t] = freq[t] + 1\n        end\n    end\n    return freq\nend",
    "\tlocal freq_list = {}\n\tfor _, v in ipairs(test_list) do\n\t\tif not freq_list[v] then\n\t\t\tfreq_list[v] = 1\n\t\telse\n\t\t\tfreq_list[v] = freq_list[v] + 1\n\t\tend\n\tend\n\treturn freq_list\nend",
    "    local freq_list = {}\n    for _, v in ipairs(test_list) do\n        local freq = freq_list[v]\n        if freq == nil then\n            freq_list[v] = 1\n        else\n            freq_list[v] = freq + 1\n        end\n    end\n    return freq_list\nend",
    "\tlocal freq_table = {}\n\tfor i = 1, #test_list do\n\t\tif freq_table[test_list[i]] == nil then\n\t\t\tfreq_table[test_list[i]] = 1\n\t\telse\n\t\t\tfreq_table[test_list[i]] = freq_table[test_list[i]] + 1\n\t\tend\n\tend\n\treturn freq_table\nend",
    "  local freq_list = {}\n  for i = 1, #test_list do\n    local t = test_list[i]\n    if freq_list[t] == nil then\n      freq_list[t] = 1\n    else\n      freq_list[t] = freq_list[t] + 1\n    end\n  end\n  return freq_list\nend",
    "    local freq_list = {}\n    for i, v in ipairs(test_list) do\n        if freq_list[v] == nil then\n            freq_list[v] = 1\n        else\n            freq_list[v] = freq_list[v] + 1\n        end\n    end\n    return freq_list\nend",
    "    local freq = {}\n    for _, v in ipairs(test_list) do\n        if freq[v] == nil then\n            freq[v] = 1\n        else\n            freq[v] = freq[v] + 1\n        end\n    end\n    return freq\nend",
    "\tlocal freq_list = {}\n\tfor i = 1, #test_list do\n\t\tlocal test_tuple = test_list[i]\n\t\tlocal test_tuple_freq = test_tuple[1]\n\t\tlocal test_tuple_id = test_tuple[2]\n\t\tfreq_list[test_tuple_id] = test_tuple_freq\n\tend\n\treturn freq_list\nend",
    "    local freq_table = {}\n    for i = 1, #test_list do\n        local tuple = test_list[i]\n        local tuple_str = table.concat(tuple, ',')\n        if freq_table[tuple_str] == nil then\n            freq_table[tuple_str] = 1\n        else\n            freq_table[tuple_str] = freq_table[tuple_str] + 1\n        end\n    end\n    return freq_table\nend",
    "    local freq = {}\n    for _, v in ipairs(test_list) do\n        if not freq[v] then\n            freq[v] = 1\n        else\n            freq[v] = freq[v] + 1\n        end\n    end\n    return freq\nend",
    "    local freq_list = {}\n    for _, v in ipairs(test_list) do\n        local freq = freq_list[v]\n        if freq == nil then\n            freq_list[v] = 1\n        else\n            freq_list[v] = freq + 1\n        end\n    end\n    return freq_list\nend"
  ]
}