{
  "name": "mbpp_786_right_insertion",
  "language": "lua",
  "prompt": "-- Write a function to locate the right insertion point for a specified value in sorted order.\nlocal function right_insertion(a, x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_insertion\n    lu.assertEquals(candidate({1, 2, 4, 5}, 6), 4)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 3), 2)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 7), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local n = #a\n  local l, r = 1, n\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if x < a[m] then\n      r = m - 1\n    else\n      l = m + 1\n    end\n  end\n  return l\nend",
    "  local l, r = 1, #a\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if a[m] <= x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "    local i, j = 1, #a\n    while i <= j do\n        local m = math.floor((i + j) / 2)\n        if a[m] <= x then\n            i = m + 1\n        else\n            j = m - 1\n        end\n    end\n    return i\nend",
    "  local l, r = 1, #a\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if a[m] <= x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  local l, r = 1, #a\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if x < a[m] then\n      r = m - 1\n    else\n      l = m + 1\n    end\n  end\n  return l\nend",
    "  local low, high = 1, #a\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x < a[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "\tlocal i = 1\n\tlocal j = #a\n\twhile i <= j do\n\t\tlocal m = math.floor((i + j) / 2)\n\t\tif a[m] <= x then\n\t\t\ti = m + 1\n\t\telse\n\t\t\tj = m - 1\n\t\tend\n\tend\n\treturn i\nend",
    "  local low, high = 1, #a\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x < a[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return low\nend",
    "  local l, r = 1, #a\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if a[m] <= x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  local l, r = 1, #a\n  while l < r do\n    local m = math.floor((l + r) / 2)\n    if a[m] <= x then\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  return l\nend",
    "    local l, r = 1, #a\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if a[m] <= x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return l\nend",
    "    local i = 1\n    while i <= #a and a[i] < x do\n        i = i + 1\n    end\n    return i\nend",
    "  local l, r = 1, #a\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if a[m] <= x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "    local n = #a\n    local lo, hi = 1, n + 1\n    while lo < hi do\n        local mid = floor((lo + hi) / 2)\n        if a[mid] <= x then\n            lo = mid + 1\n        else\n            hi = mid\n        end\n    end\n    return lo\nend",
    "  local i, j = 1, #a\n  while i <= j do\n    local k = math.floor((i + j) / 2)\n    if a[k] < x then\n      i = k + 1\n    else\n      j = k - 1\n    end\n  end\n  return i\nend",
    "    local l, r = 1, #a\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if a[m] > x then\n            r = m - 1\n        else\n            l = m + 1\n        end\n    end\n    return l\nend",
    "\tlocal n = #a\n\tlocal l, r = 1, n\n\twhile l <= r do\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tif a[m] <= x then\n\t\t\tl = m + 1\n\t\telse\n\t\t\tr = m - 1\n\t\tend\n\tend\n\treturn l\nend",
    "  local l, r = 1, #a\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if a[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "    local i = 1\n    local j = #a\n    while i <= j do\n        local m = math.floor((i + j) / 2)\n        if a[m] <= x then\n            i = m + 1\n        else\n            j = m - 1\n        end\n    end\n    return i\nend",
    "\tlocal l, r = 1, #a\n\twhile l <= r do\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tif a[m] <= x then\n\t\t\tl = m + 1\n\t\telse\n\t\t\tr = m - 1\n\t\tend\n\tend\n\treturn l\nend"
  ]
}