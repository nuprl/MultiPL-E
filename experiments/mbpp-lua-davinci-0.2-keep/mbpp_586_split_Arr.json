{
  "name": "mbpp_586_split_Arr",
  "language": "lua",
  "prompt": "-- Write a python function to split a list at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local l1 = {}\n  local l2 = {}\n  for i = 1, n do\n    l1[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l2[i - n] = l[i]\n  end\n  for i = 1, #l1 do\n    l2[#l2 + 1] = l1[i]\n  end\n  return l2\nend",
    "  local first = {}\n  local second = {}\n  for i = 1, n do\n    first[i] = l[i]\n  end\n  for i = n+1, #l do\n    second[i-n] = l[i]\n  end\n  for i = 1, #first do\n    second[#second+1] = first[i]\n  end\n  return second\nend",
    "  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, #t do\n    l[#l + 1] = t[i]\n  end\n  return l\nend",
    "    local l1 = {}\n    local l2 = {}\n    for i = 1, n do\n        table.insert(l1, l[i])\n    end\n    for i = n + 1, #l do\n        table.insert(l2, l[i])\n    end\n    for i = 1, #l1 do\n        table.insert(l2, l1[i])\n    end\n    return l2\nend",
    "    local l1 = {}\n    local l2 = {}\n    for i = 1, n do\n        table.insert(l1, l[i])\n    end\n    for i = n + 1, #l do\n        table.insert(l2, l[i])\n    end\n    for i = 1, #l1 do\n        table.insert(l2, l1[i])\n    end\n    return l2\nend",
    "    local first = {}\n    local second = {}\n    for i = 1, #l do\n        if i <= n then\n            first[i] = l[i]\n        else\n            second[i - n] = l[i]\n        end\n    end\n    for i = 1, #first do\n        second[#second + 1] = first[i]\n    end\n    return second\nend",
    "\tlocal first, second = {}, {}\n\tfor i = 1, n do\n\t\ttable.insert(first, l[i])\n\tend\n\tfor i = n + 1, #l do\n\t\ttable.insert(second, l[i])\n\tend\n\tfor i = 1, #first do\n\t\ttable.insert(second, first[i])\n\tend\n\treturn second\nend",
    "    local l1 = {}\n    local l2 = {}\n    for i = 1, n do\n        l1[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l2[i - n] = l[i]\n    end\n    for i = 1, #l2 do\n        l1[#l1 + 1] = l2[i]\n    end\n    return l1\nend",
    "  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, #a do\n        l[#l + 1] = a[i]\n    end\n    return l\nend",
    "    local a = {}\n    local b = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend",
    "  local ret = {}\n  for i=n+1, #l do\n    table.insert(ret, l[i])\n  end\n  for i=1,n do\n    table.insert(ret, l[i])\n  end\n  return ret\nend",
    "\tlocal l1 = {}\n\tlocal l2 = {}\n\tfor i = 1, n do\n\t\tl1[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl2[i - n] = l[i]\n\tend\n\tfor i = 1, #l1 do\n\t\tl2[#l2 + 1] = l1[i]\n\tend\n\treturn l2\nend",
    "    local l1 = {}\n    local l2 = {}\n    for i = 1, #l do\n        if i <= n then\n            l1[i] = l[i]\n        else\n            l2[i - n] = l[i]\n        end\n    end\n    for i = 1, #l1 do\n        l2[#l2 + 1] = l1[i]\n    end\n    return l2\nend",
    "    local l1 = {}\n    local l2 = {}\n    for i = 1, n do\n        l1[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l2[i - n] = l[i]\n    end\n    for i = 1, #l1 do\n        l2[#l2 + 1] = l1[i]\n    end\n    return l2\nend",
    "    local first = {}\n    local second = {}\n    for i = 1, n do\n        first[i] = l[i]\n    end\n    for i = n + 1, #l do\n        second[i - n] = l[i]\n    end\n    for i = 1, #first do\n        second[#second + 1] = first[i]\n    end\n    return second\nend",
    "\tlocal first, second = {}, {}\n\tfor i = 1, n do\n\t\tfirst[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tsecond[i - n] = l[i]\n\tend\n\treturn second, first\nend",
    "    local a = {}\n    for i = 1, n do\n        table.insert(a, l[i])\n    end\n    for i = n + 1, #l do\n        table.insert(l, i - n, l[i])\n    end\n    for i = 1, n do\n        table.remove(l)\n    end\n    return a\nend",
    "    local first = {}\n    local second = {}\n    for i = 1, n do\n        table.insert(first, l[i])\n    end\n    for i = n + 1, #l do\n        table.insert(second, l[i])\n    end\n    for i = 1, #first do\n        table.insert(second, first[i])\n    end\n    return second\nend",
    "    local arr = {}\n    for i = 1, n do\n        arr[i] = l[i]\n    end\n    for i = n + 1, #l do\n        table.insert(arr, l[i])\n    end\n    return arr\nend"
  ]
}