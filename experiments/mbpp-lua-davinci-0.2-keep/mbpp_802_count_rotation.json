{
  "name": "mbpp_802_count_rotation",
  "language": "lua",
  "prompt": "-- Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nlocal function count_rotation(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_rotation\n    lu.assertEquals(candidate({3, 2, 1}), 1)\n    lu.assertEquals(candidate({4, 5, 1, 2, 3}), 2)\n    lu.assertEquals(candidate({7, 8, 9, 1, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 2, 3}), 0)\n    lu.assertEquals(candidate({1, 3, 2}), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local n = #arr\n  local min_index = 0\n  local min = arr[1]\n  for i=1,n do\n    if arr[i] < min then\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local min_index = 0\n    local min_value = arr[1]\n    for i = 1, n do\n        if arr[i] < min_value then\n            min_value = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "\tlocal n = #arr\n\tlocal min = arr[1]\n\tlocal min_index = 1\n\tfor i = 2, n do\n\t\tif arr[i] < min then\n\t\t\tmin = arr[i]\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    local min_val = arr[1]\n    for i=1,n do\n        if arr[i] < min_val then\n            min_val = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 2, n do\n    if arr[i] < arr[min_index] then\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  local n = #arr\n  local min = arr[1]\n  local min_index = 1\n  for i = 2, n do\n    if arr[i] < min then\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  local n = #arr\n  local min_i = 1\n  for i = 2, n do\n    if arr[i] < arr[min_i] then\n      min_i = i\n    end\n  end\n  return min_i\nend",
    "    local n = #arr\n    local min_index = 1\n    for i=1,n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local low = 0\n  local high = n - 1\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local low, high = 1, #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if arr[mid] < arr[mid - 1] then\n            return mid\n        elseif arr[mid] > arr[mid + 1] then\n            return mid + 1\n        elseif arr[mid] > arr[1] then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return 1\nend",
    "    local n = #arr\n    local min = math.huge\n    local min_index = -1\n    for i = 1, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local low = 1\n    local high = #arr\n    local n = #arr\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min = arr[1]\n  local min_index = 1\n  for i = 2, n do\n    if arr[i] < min then\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n - 1 do\n        if arr[i] > arr[i + 1] then\n            min_index = i + 1\n            break\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  local mid = 0\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 1, n - 1 do\n    if arr[i] > arr[i + 1] then\n      min_index = i + 1\n      break\n    end\n  end\n  return min_index\nend",
    "\tlocal n = #arr\n\tlocal min_index = 1\n\tfor i = 1, n - 1 do\n\t\tif arr[i] > arr[i + 1] then\n\t\t\tmin_index = i + 1\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n - 1 do\n        if arr[i] > arr[i + 1] then\n            min_index = i + 1\n            break\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local low, high = 1, n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid - 1 + n) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "\tlocal n = #arr\n\tlocal min_index = 1\n\tfor i = 1, n do\n\t\tif arr[i] < arr[min_index] then\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid - 1 + n) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid - 1 + n) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "  local n = #arr\n  local min = math.huge\n  local min_index = -1\n  for i=1,n do\n    if arr[i] < min then\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local low = 1\n    local high = #arr\n    local n = #arr\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min_index = 0\n    local min_value = arr[1]\n    for i = 1, n do\n        if arr[i] < min_value then\n            min_index = i\n            min_value = arr[i]\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local low, high = 1, n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local len = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 2, len do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i=2,n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n - 1 do\n        if arr[i] > arr[i + 1] then\n            min_index = i + 1\n            break\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n - 1 do\n        if arr[i] > arr[i + 1] then\n            min_index = i + 1\n            break\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min_index = 0\n  for i = 1, n do\n    if arr[i] < arr[min_index] then\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "\tlocal n = #arr\n\tlocal min_index = 1\n\tfor i = 2, n do\n\t\tif arr[i] < arr[min_index] then\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 0\n    for i = 1, n - 1 do\n        if arr[i] > arr[i + 1] then\n            min_index = i + 1\n            break\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local low = 0\n    local high = n - 1\n    while low <= high do\n        if arr[low] < arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  local mid = 1\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid - 1 + n) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  local n = #arr\n  local low = 0\n  local high = n - 1\n  local mid = 0\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local low = 1\n    local high = #arr\n    local n = #arr\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "\tlocal n = #arr\n\tlocal low = 1\n\tlocal high = n\n\twhile low <= high do\n\t\tif arr[low] <= arr[high] then\n\t\t\treturn low\n\t\tend\n\t\tlocal mid = math.floor((low + high) / 2)\n\t\tlocal next = (mid + 1) % n\n\t\tlocal prev = (mid + n - 1) % n\n\t\tif arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n\t\t\treturn mid\n\t\telseif arr[mid] <= arr[high] then\n\t\t\thigh = mid - 1\n\t\telseif arr[mid] >= arr[low] then\n\t\t\tlow = mid + 1\n\t\tend\n\tend\n\treturn -1\nend",
    "    local n = #arr\n    local min_index = 1\n    local min_value = arr[1]\n    for i = 2, n do\n        if arr[i] < min_value then\n            min_index = i\n            min_value = arr[i]\n        end\n    end\n    return min_index\nend",
    "  local min = arr[1]\n  local min_index = 1\n  for i = 2, #arr do\n    if arr[i] < min then\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "\tlocal n = #arr\n\tlocal min_index = 1\n\tfor i = 2, n do\n\t\tif arr[i] < arr[min_index] then\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] > arr[i+1] then\n      return i\n    end\n    i = i + 1\n  end\n  return 0\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid - 1 + n) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 0\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "\tlocal n = #arr\n\tlocal min_index = 0\n\tfor i = 0, n-1 do\n\t\tif arr[i] > arr[i+1] then\n\t\t\tmin_index = i+1\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_index\nend",
    "  local n = #arr\n  local low, high = 1, n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local low, high = 1, #arr\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % #arr\n        local prev = (mid - 1 + #arr) % #arr\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min_index = 0\n    local min_value = arr[1]\n    for i = 1, n do\n        if arr[i] < min_value then\n            min_value = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local low, high, n = 1, #arr, #arr\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local min = arr[1]\n  local min_index = 1\n  for i = 2, #arr do\n    if arr[i] < min then\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  local n = #arr\n  local low, high = 1, n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local low = 1\n    local high = #arr\n    local n = #arr",
    "  local n = #arr\n  local min = arr[1]\n  local min_index = 1\n  for i = 1, n do\n    if arr[i] < min then\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 1, n do\n    if arr[i] < arr[min_index] then\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid - 1 + n) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min = math.min(unpack(arr))\n    local min_index = 0\n    for i = 1, n do\n        if arr[i] == min then\n            min_index = i\n            break\n        end\n    end\n    return min_index\nend",
    "\tlocal n = #arr\n\tlocal low, high = 1, n\n\twhile low <= high do\n\t\tif arr[low] <= arr[high] then\n\t\t\treturn low\n\t\tend\n\t\tlocal mid = math.floor((low + high) / 2)\n\t\tlocal next = (mid + 1) % n\n\t\tlocal prev = (mid + n - 1) % n\n\t\tif arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n\t\t\treturn mid\n\t\telseif arr[mid] <= arr[high] then\n\t\t\thigh = mid - 1\n\t\telseif arr[mid] >= arr[low] then\n\t\t\tlow = mid + 1\n\t\tend\n\tend\n\treturn -1\nend",
    "  local n = #arr\n  local min = arr[1]\n  local min_index = 1\n  for i = 2, n do\n    if arr[i] < min then\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 1, n do\n    if arr[i] < arr[min_index] then\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min = arr[1]\n  local min_index = 1\n  for i = 2, n do\n    if arr[i] < min then\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local min_index = 0\n    for i = 1, n - 1 do\n        if arr[i] > arr[i + 1] then\n            min_index = i + 1\n            break\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local low, high = 1, n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local n = #arr\n    local i = 1\n    while i < n do\n        if arr[i] > arr[i+1] then\n            return i\n        end\n        i = i + 1\n    end\n    return 0\nend",
    "    local n = #arr\n    local min_index, min_value = 1, arr[1]\n    for i = 1, n do\n        if arr[i] < min_value then\n            min_index = i\n            min_value = arr[i]\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  local mid = 1\n  while low <= high do\n    mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n - 1 do\n        if arr[i] > arr[i + 1] then\n            min_index = i + 1\n            break\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 0\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_idx = 1\n    for i = 2, n do\n        if arr[i] < arr[min_idx] then\n            min_idx = i\n        end\n    end\n    return min_idx\nend",
    "    local n = #arr\n    local min_index = 0\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 2, n do\n    if arr[i] < arr[min_index] then\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "\tlocal n = #arr\n\tlocal min_index = 0\n\tfor i = 0, n - 1 do\n\t\tif arr[i] > arr[i + 1] then\n\t\t\tmin_index = i + 1\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_index\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "\tlocal min = arr[1]\n\tlocal min_index = 1\n\tfor i = 2, #arr do\n\t\tif arr[i] < min then\n\t\t\tmin = arr[i]\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  local n = #arr\n  local low = 0\n  local high = n - 1\n  local mid = 0\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 2, n do\n    if arr[i] < arr[min_index] then\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  local low, high = 1, #arr\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % #arr\n    local prev = (mid - 1) % #arr\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n - 1 do\n        if arr[i] > arr[i + 1] then\n            min_index = i + 1\n            break\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 1, n - 1 do\n    if arr[i] > arr[i + 1] then\n      min_index = i + 1\n      break\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local min_idx = 1\n    for i = 2, n do\n        if arr[i] < arr[min_idx] then\n            min_idx = i\n        end\n    end\n    return min_idx\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 1, n - 1 do\n    if arr[i] > arr[i + 1] then\n      min_index = i + 1\n      break\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local min_index = 0\n    local min_value = arr[1]\n    for i = 1, n do\n        if arr[i] < min_value then\n            min_value = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_idx = 1\n    for i = 1, n do\n        if arr[i] < arr[min_idx] then\n            min_idx = i\n        end\n    end\n    return min_idx\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  local mid = 0\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 0\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local low, high = 1, #arr\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % #arr\n        local prev = (mid - 1) % #arr\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local low, high = 1, n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid - 1 + n) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "  local min = arr[1]\n  local min_index = 1\n  for i = 2, #arr do\n    if arr[i] < min then\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local low, high = 1, n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 2, n do\n    if arr[i] < arr[min_index] then\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 1, n - 1 do\n    if arr[i] > arr[i + 1] then\n      min_index = i + 1\n      break\n    end\n  end\n  return min_index\nend",
    "    local low = 1\n    local high = #arr\n    local n = #arr\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 2, n do\n    if arr[i] < arr[min_index] then\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local min = arr[1]\n    local min_index = 1\n    for i = 2, #arr do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid - 1 + n) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid - 1 + n) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local i = 1\n    while i < #arr do\n        if arr[i] > arr[i+1] then\n            return i\n        end\n        i = i + 1\n    end\n    return 0\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 2, n do\n    if arr[i] < arr[min_index] then\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  local mid = 1\n  while low <= high do\n    mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid - 1 + n) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return mid\nend",
    "    local low = 1\n    local high = #arr\n    local mid = 1\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if arr[mid] < arr[mid - 1] then\n            return mid\n        elseif arr[mid] > arr[mid + 1] then\n            return mid + 1\n        elseif arr[mid] > arr[high] then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return mid\nend",
    "    local low, high = 1, #arr\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % #arr\n        local prev = (mid - 1 + #arr) % #arr\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "  local n = #arr\n  local min_index = 1\n  for i=1,n-1 do\n    if arr[i] > arr[i+1] then\n      min_index = i+1\n      break\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    local mid = 0\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        mid = low + math.floor((high - low) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 1, n do\n    if arr[i] < arr[min_index] then\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid - 1 + n) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    local mid = 0\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local len = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 2, len do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 1, n - 1 do\n    if arr[i] > arr[i + 1] then\n      min_index = i + 1\n      break\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    local mid = 0\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n - 1 do\n        if arr[i] > arr[i + 1] then\n            min_index = i + 1\n            break\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid - 1 + n) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local low = 1\n    local high = #arr\n    local n = #arr\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local min = arr[1]\n  local min_index = 1\n  for i = 1, #arr do\n    if arr[i] < min then\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid - 1 + n) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i=1,n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min = arr[1]\n  local min_index = 1\n  for i=2,n do\n    if arr[i] < min then\n      min = arr[i]\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local low, high = 1, #arr\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % #arr\n        local prev = (mid - 1 + #arr) % #arr\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i=1,n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 1, n do\n    if arr[i] < arr[min_index] then\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 0\n    for i = 1, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local low = 1\n    local high = #arr\n    local n = #arr\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "\tlocal n = #arr\n\tlocal min_index = 1\n\tfor i = 2, n do\n\t\tif arr[i] < arr[min_index] then\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        if arr[low] <= arr[high] then\n            return low\n        end\n        local mid = math.floor((low + high) / 2)\n        local next = (mid + 1) % n\n        local prev = (mid - 1 + n) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n            return mid\n        elseif arr[mid] <= arr[high] then\n            high = mid - 1\n        elseif arr[mid] >= arr[low] then\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "    local min_index = 1\n    local min_value = arr[1]\n    for i = 1, #arr do\n        if arr[i] < min_value then\n            min_index = i\n            min_value = arr[i]\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 1, n - 1 do\n        if arr[i] > arr[i + 1] then\n            min_index = i + 1\n            break\n        end\n    end\n    return min_index\nend",
    "    local min = arr[1]\n    local min_index = 1\n    for i = 2, #arr do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 0\n    for i = 1, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local min = arr[1]\n    local min_index = 1\n    for i = 1, #arr do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local low, high = 1, n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid - 1 + n) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid - 1 + n) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid - 1 + n) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    local min_value = arr[1]\n    for i = 1, n do\n        if arr[i] < min_value then\n            min_value = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i = 2, n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local n = #arr\n    local min_index = 1\n    for i=1,n do\n        if arr[i] < arr[min_index] then\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min_index = 1\n  for i = 1, n - 1 do\n    if arr[i] > arr[i + 1] then\n      min_index = i + 1\n      break\n    end\n  end\n  return min_index\nend",
    "  local n = #arr\n  local low, high = 1, n\n  while low <= high do\n    if arr[low] <= arr[high] then\n      return low\n    end\n    local mid = math.floor((low + high) / 2)\n    local next = (mid + 1) % n\n    local prev = (mid + n - 1) % n\n    if arr[mid] <= arr[next] and arr[mid] <= arr[prev] then\n      return mid\n    elseif arr[mid] <= arr[high] then\n      high = mid - 1\n    elseif arr[mid] >= arr[low] then\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local n = #arr\n    local min = arr[1]\n    local min_index = 1\n    for i = 1, n do\n        if arr[i] < min then\n            min = arr[i]\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local n = #arr\n  local min_idx = 1\n  for i = 1, n do\n    if arr[i] < arr[min_idx] then\n      min_idx = i\n    end\n  end\n  return min_idx\nend"
  ]
}