{
  "name": "mbpp_573_unique_product",
  "language": "lua",
  "prompt": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, v in pairs(list_data) do\n        if not table.contains(list_data, v) then\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk92uitd1.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpk92uitd1.lua:5: in local 'candidate'\n\t/tmp/tmpk92uitd1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, value in ipairs(list_data) do\n        if not list_contains(list_data, value) then\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph86usgc3.lua:5: attempt to call a nil value (global 'list_contains')\nstack traceback:\n\t/tmp/tmph86usgc3.lua:5: in local 'candidate'\n\t/tmp/tmph86usgc3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, number in ipairs(list_data) do\n        if not unique_numbers[number] then\n            unique_numbers[number] = true\n            product = product * number\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, value in ipairs(list_data) do\n        if not unique_numbers[value] then\n            product = product * value\n            unique_numbers[value] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_numbers = {}\n\tfor _, value in ipairs(list_data) do\n\t\tif not unique_numbers[value] then\n\t\t\tunique_numbers[value] = true\n\t\t\tproduct = product * value\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in pairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            product = product * v\n            unique_list[v] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n  local product = 1\n  local unique_list = {}\n  for i, v in ipairs(list_data) do\n    if not unique_list[v] then\n      unique_list[v] = true\n      product = product * v\n    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_list = {}\n\tfor _, v in ipairs(list_data) do\n\t\tif not unique_list[v] then\n\t\t\tunique_list[v] = true\n\t\t\tproduct = product * v\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, v in pairs(list_data) do\n        if not table.contains(list_data, v) then\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk92uitd1.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpk92uitd1.lua:5: in local 'candidate'\n\t/tmp/tmpk92uitd1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_data = {}\n    for _, value in ipairs(list_data) do\n        if not unique_data[value] then\n            unique_data[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, value in pairs(list_data) do\n        if not unique_numbers[value] then\n            unique_numbers[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_data = {}\n    for _, value in ipairs(list_data) do\n        if not unique_data[value] then\n            unique_data[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_list = {}\n\tfor _, v in ipairs(list_data) do\n\t\tif not unique_list[v] then\n\t\t\tunique_list[v] = true\n\t\t\tproduct = product * v\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, number in ipairs(list_data) do\n        if not unique_numbers[number] then\n            unique_numbers[number] = true\n            product = product * number\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, value in ipairs(list_data) do\n        if not unique_numbers[value] then\n            unique_numbers[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in pairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_list = {}\n\tfor _, value in ipairs(list_data) do\n\t\tif not unique_list[value] then\n\t\t\tunique_list[value] = true\n\t\t\tproduct = product * value\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, value in ipairs(list_data) do\n        if not unique_numbers[value] then\n            unique_numbers[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            product = product * v\n            unique_list[v] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n  local product = 1\n  local unique_numbers = {}\n  for _, number in ipairs(list_data) do\n    if not unique_numbers[number] then\n      unique_numbers[number] = true\n      product = product * number\n    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if unique_list[value] == nil then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_numbers = {}\n\tfor _, value in ipairs(list_data) do\n\t\tif not unique_numbers[value] then\n\t\t\tunique_numbers[value] = true\n\t\t\tproduct = product * value\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, v in pairs(list_data) do\n        if not table.contains(list_data, v) then\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk92uitd1.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpk92uitd1.lua:5: in local 'candidate'\n\t/tmp/tmpk92uitd1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tfor _, v in ipairs(list_data) do\n\t\tif not table.contains(list_data, v) then\n\t\t\tproduct = product * v\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpllf972mc.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpllf972mc.lua:5: in local 'candidate'\n\t/tmp/tmpllf972mc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_list = {}\n\tfor _, v in ipairs(list_data) do\n\t\tif not unique_list[v] then\n\t\t\tunique_list[v] = true\n\t\t\tproduct = product * v\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            product = product * v\n            unique_list[v] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, number in ipairs(list_data) do\n        if not unique_numbers[number] then\n            unique_numbers[number] = true\n            product = product * number\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_list = {}\n\tfor i, v in ipairs(list_data) do\n\t\tif not unique_list[v] then\n\t\t\tunique_list[v] = true\n\t\t\tproduct = product * v\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n  local product = 1\n  local unique_numbers = {}\n  for _, value in ipairs(list_data) do\n    if not unique_numbers[value] then\n      unique_numbers[value] = true\n      product = product * value\n    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n  local product = 1\n  local unique_list = {}\n  for _, v in ipairs(list_data) do\n    if not unique_list[v] then\n      unique_list[v] = true\n      product = product * v\n    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n  local product = 1\n  local unique_data = {}\n  for _, v in pairs(list_data) do\n    if not unique_data[v] then\n      unique_data[v] = true\n      product = product * v\n    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tfor i, v in ipairs(list_data) do\n\t\tif not table.contains(list_data, v, i + 1) then\n\t\t\tproduct = product * v\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp02vurv_z.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp02vurv_z.lua:5: in local 'candidate'\n\t/tmp/tmp02vurv_z.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in pairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            product = product * v\n            unique_list[v] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, number in ipairs(list_data) do\n        if not unique_numbers[number] then\n            unique_numbers[number] = true\n            product = product * number\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for i, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, v in pairs(list_data) do\n        if not table.contains(list_data, v) then\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk92uitd1.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpk92uitd1.lua:5: in local 'candidate'\n\t/tmp/tmpk92uitd1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for i, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            product = product * v\n            unique_list[v] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique = {}\n    for _, v in ipairs(list_data) do\n        if not unique[v] then\n            unique[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_list = {}\n\tfor _, value in ipairs(list_data) do\n\t\tif not unique_list[value] then\n\t\t\tunique_list[value] = true\n\t\t\tproduct = product * value\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for i, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, v in pairs(list_data) do\n        if not table.contains(list_data, v) then\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk92uitd1.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpk92uitd1.lua:5: in local 'candidate'\n\t/tmp/tmpk92uitd1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_list = {}\n\tfor _, v in ipairs(list_data) do\n\t\tif not unique_list[v] then\n\t\t\tunique_list[v] = true\n\t\t\tproduct = product * v\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in pairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, num in ipairs(list_data) do\n        if not unique_numbers[num] then\n            unique_numbers[num] = true\n            product = product * num\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not table.contains(unique_list, v) then\n            table.insert(unique_list, v)\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqrsiq17.lua:6: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpwqrsiq17.lua:6: in local 'candidate'\n\t/tmp/tmpwqrsiq17.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            product = product * v\n            unique_list[v] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            product = product * v\n            unique_list[v] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n  local product = 1\n  local unique_list = {}\n  for _, value in ipairs(list_data) do\n    if not unique_list[value] then\n      unique_list[value] = true\n      product = product * value\n    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not table.contains(unique_list, v) then\n            table.insert(unique_list, v)\n        end\n    end\n    local product = 1\n    for _, v in ipairs(unique_list) do\n        product = product * v\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcijowpvb.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpcijowpvb.lua:5: in local 'candidate'\n\t/tmp/tmpcijowpvb.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n  local product = 1\n  local unique = {}\n  for _, v in ipairs(list_data) do\n    if not unique[v] then\n      unique[v] = true\n      product = product * v\n    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n  local product = 1\n  local unique_list = {}\n  for _, v in ipairs(list_data) do\n    if not unique_list[v] then\n      unique_list[v] = true\n      product = product * v\n    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, value in ipairs(list_data) do\n        if not unique_numbers[value] then\n            unique_numbers[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_numbers = {}\n\tfor _, value in ipairs(list_data) do\n\t\tif not unique_numbers[value] then\n\t\t\tunique_numbers[value] = true\n\t\t\tproduct = product * value\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local unique_list = {}\n    local product = 1\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n  local product = 1\n  for _, v in pairs(list_data) do\n    if not table.contains(list_data, v) then\n      product = product * v\n    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdamr9scu.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpdamr9scu.lua:5: in local 'candidate'\n\t/tmp/tmpdamr9scu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, value in ipairs(list_data) do\n        if not table.contains(list_data, value) then\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp34sylcn2.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp34sylcn2.lua:5: in local 'candidate'\n\t/tmp/tmp34sylcn2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, value in pairs(list_data) do\n        if not table.contains(list_data, value) then\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjv3ppuug.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpjv3ppuug.lua:5: in local 'candidate'\n\t/tmp/tmpjv3ppuug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_list = {}\n\tfor i,v in ipairs(list_data) do\n\t\tif not unique_list[v] then\n\t\t\tunique_list[v] = true\n\t\t\tproduct = product * v\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, v in ipairs(list_data) do\n        if not table.contains(list_data, v) then\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2hachyjc.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp2hachyjc.lua:5: in local 'candidate'\n\t/tmp/tmp2hachyjc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_data = {}\n    for _, value in ipairs(list_data) do\n        if not unique_data[value] then\n            unique_data[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_list = {}\n\tfor i,v in ipairs(list_data) do\n\t\tif not unique_list[v] then\n\t\t\tunique_list[v] = true\n\t\t\tproduct = product * v\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, v in pairs(list_data) do\n        if not table.contains(list_data, v) then\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk92uitd1.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpk92uitd1.lua:5: in local 'candidate'\n\t/tmp/tmpk92uitd1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for i, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, value in ipairs(list_data) do\n        if not table.contains(list_data, value) then\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp34sylcn2.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp34sylcn2.lua:5: in local 'candidate'\n\t/tmp/tmp34sylcn2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, value in pairs(list_data) do\n        if not table.contains(list_data, value) then\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjv3ppuug.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpjv3ppuug.lua:5: in local 'candidate'\n\t/tmp/tmpjv3ppuug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in pairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n  local product = 1\n  local unique_numbers = {}\n  for _, value in ipairs(list_data) do\n    if not unique_numbers[value] then\n      product = product * value\n      unique_numbers[value] = true\n    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, value in pairs(list_data) do\n        if not table.contains(list_data, value) then\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjv3ppuug.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpjv3ppuug.lua:5: in local 'candidate'\n\t/tmp/tmpjv3ppuug.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, value in ipairs(list_data) do\n        if not unique_numbers[value] then\n            unique_numbers[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            product = product * value\n            unique_list[value] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in pairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_numbers = {}\n\tfor _, v in ipairs(list_data) do\n\t\tif not unique_numbers[v] then\n\t\t\tunique_numbers[v] = true\n\t\t\tproduct = product * v\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            product = product * value\n            unique_list[value] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, v in pairs(list_data) do\n        if not table.contains(list_data, v) then\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk92uitd1.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpk92uitd1.lua:5: in local 'candidate'\n\t/tmp/tmpk92uitd1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for i = 1, #list_data do\n        if list_data[i] ~= list_data[i - 1] then\n            product = product * list_data[i]\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksdljm2q.lua:15: expected: 720000000, actual: 576000000000\nstack traceback:\n\t/tmp/tmpksdljm2q.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n  local product = 1\n  local unique_data = {}\n  for _, v in ipairs(list_data) do\n    if not unique_data[v] then\n      product = product * v\n      unique_data[v] = true\n    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n  local product = 1\n  for _, v in ipairs(list_data) do\n    if not table.contains(list_data, v) then\n      product = product * v\n    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz0fkp2iw.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpz0fkp2iw.lua:5: in local 'candidate'\n\t/tmp/tmpz0fkp2iw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_nums = {}\n    for _, num in ipairs(list_data) do\n        if not unique_nums[num] then\n            unique_nums[num] = true\n            product = product * num\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_numbers = {}\n    for _, value in ipairs(list_data) do\n        if not unique_numbers[value] then\n            unique_numbers[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, v in pairs(list_data) do\n        if not table.contains(list_data, v) then\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk92uitd1.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpk92uitd1.lua:5: in local 'candidate'\n\t/tmp/tmpk92uitd1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_list = {}\n\tfor _, value in ipairs(list_data) do\n\t\tif not unique_list[value] then\n\t\t\tunique_list[value] = true\n\t\t\tproduct = product * value\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            product = product * v\n            unique_list[v] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            product = product * value\n            unique_list[value] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_list = {}\n\tfor _, value in ipairs(list_data) do\n\t\tif not unique_list[value] then\n\t\t\tunique_list[value] = true\n\t\t\tproduct = product * value\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_data = {}\n    for _, v in ipairs(list_data) do\n        if not unique_data[v] then\n            unique_data[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            product = product * value\n            unique_list[value] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = value\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_list = {}\n\tfor _,v in pairs(list_data) do\n\t\tif not unique_list[v] then\n\t\t\tunique_list[v] = true\n\t\t\tproduct = product * v\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_data = {}\n    for _, value in ipairs(list_data) do\n        if not unique_data[value] then\n            unique_data[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    for _, value in ipairs(list_data) do\n        if not table.contains(list_data, value) then\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp34sylcn2.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp34sylcn2.lua:5: in local 'candidate'\n\t/tmp/tmp34sylcn2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n\tlocal product = 1\n\tlocal unique_list = {}\n\tfor _,v in pairs(list_data) do\n\t\tif not unique_list[v] then\n\t\t\tunique_list[v] = true\n\t\t\tproduct = product * v\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for i = 1, #list_data do\n        if not unique_list[list_data[i]] then\n            unique_list[list_data[i]] = true\n            product = product * list_data[i]\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for i = 1, #list_data do\n        if not unique_list[list_data[i]] then\n            unique_list[list_data[i]] = true\n            product = product * list_data[i]\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509792,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            product = product * value\n            unique_list[value] = true\n        end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}