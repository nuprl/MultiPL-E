{
  "name": "mbpp_612_merge",
  "language": "lua",
  "prompt": "-- Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nlocal function merge(lst)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = merge\n    lu.assertEquals(candidate({{'x', 'y'}, {'a', 'b'}, {'m', 'n'}}), {{'x', 'a', 'm'}, {'y', 'b', 'n'}})\n    lu.assertEquals(candidate({{1, 2}, {3, 4}, {5, 6}, {7, 8}}), {{1, 3, 5, 7}, {2, 4, 6, 8}})\n    lu.assertEquals(candidate({{'x', 'y', 'z'}, {'a', 'b', 'c'}, {'m', 'n', 'o'}}), {{'x', 'a', 'm'}, {'y', 'b', 'n'}, {'z', 'c', 'o'}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local l1, l2 = {}, {}\n    for _, v in ipairs(lst) do\n        table.insert(l1, v[1])\n        table.insert(l2, v[2])\n    end\n    return l1, l2\nend",
    "  local lst1, lst2 = {}, {}\n  for _, v in ipairs(lst) do\n    table.insert(lst1, v[1])\n    table.insert(lst2, v[2])\n  end\n  return {lst1, lst2}\nend",
    "  local first = {}\n  local second = {}\n  for i, v in ipairs(lst) do\n    first[i] = v[1]\n    second[i] = v[2]\n  end\n  return {first, second}\nend",
    "  local lst1, lst2 = {}, {}\n  for _, sublist in ipairs(lst) do\n    table.insert(lst1, sublist[1])\n    table.insert(lst2, sublist[2])\n  end\n  return {lst1, lst2}\nend",
    "  local first = {}\n  local second = {}\n  for _, sublist in ipairs(lst) do\n    table.insert(first, sublist[1])\n    table.insert(second, sublist[2])\n  end\n  return {first, second}\nend",
    "  local first = {}\n  local second = {}\n  for _, sublist in ipairs(lst) do\n    table.insert(first, sublist[1])\n    table.insert(second, sublist[2])\n  end\n  return {first, second}\nend",
    "  local lst1 = {}\n  local lst2 = {}\n  for i, v in ipairs(lst) do\n    lst1[i] = v[1]\n    lst2[i] = v[2]\n  end\n  return {lst1, lst2}\nend",
    "  local first = {}\n  local second = {}\n  for _, v in ipairs(lst) do\n    table.insert(first, v[1])\n    table.insert(second, v[2])\n  end\n  return {first, second}\nend",
    "  local first, second = {}, {}\n  for _, sublist in ipairs(lst) do\n    table.insert(first, sublist[1])\n    table.insert(second, sublist[2])\n  end\n  return {first, second}\nend",
    "  local first = {}\n  local second = {}\n  for _, v in ipairs(lst) do\n    table.insert(first, v[1])\n    table.insert(second, v[2])\n  end\n  return {first, second}\nend",
    "  local lst1, lst2 = {}, {}\n  for i, v in ipairs(lst) do\n    lst1[i] = v[1]\n    lst2[i] = v[2]\n  end\n  return {lst1, lst2}\nend",
    "  local res = {{}, {}}\n  for _, v in ipairs(lst) do\n    table.insert(res[1], v[1])\n    table.insert(res[2], v[2])\n  end\n  return res\nend",
    "  local first, second = {}, {}\n  for _, sublist in ipairs(lst) do\n    table.insert(first, sublist[1])\n    table.insert(second, sublist[2])\n  end\n  return {first, second}\nend",
    "  local l1 = {}\n  local l2 = {}\n  for i, v in ipairs(lst) do\n    l1[i] = v[1]\n    l2[i] = v[2]\n  end\n  return {l1, l2}\nend",
    "  local a, b = {}, {}\n  for i, v in ipairs(lst) do\n    a[i] = v[1]\n    b[i] = v[2]\n  end\n  return a, b\nend",
    "    local res = {{}, {}}\n    for _, v in ipairs(lst) do\n        table.insert(res[1], v[1])\n        table.insert(res[2], v[2])\n    end\n    return res\nend",
    "  local res = { {}, {} }\n  for _, sub in ipairs(lst) do\n    table.insert(res[1], sub[1])\n    table.insert(res[2], sub[2])\n  end\n  return res\nend",
    "    local first = {}\n    local second = {}\n    for _, v in ipairs(lst) do\n        table.insert(first, v[1])\n        table.insert(second, v[2])\n    end\n    return {first, second}\nend",
    "    local lst1, lst2 = {}, {}\n    for _, v in ipairs(lst) do\n        lst1[#lst1 + 1] = v[1]\n        lst2[#lst2 + 1] = v[2]\n    end\n    return {lst1, lst2}\nend",
    "  local first = {}\n  local second = {}\n  for i, v in ipairs(lst) do\n    table.insert(first, v[1])\n    table.insert(second, v[2])\n  end\n  return {first, second}\nend"
  ]
}