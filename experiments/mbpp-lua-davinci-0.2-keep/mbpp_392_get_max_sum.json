{
  "name": "mbpp_392_get_max_sum",
  "language": "lua",
  "prompt": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max\n    return max\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n < 0 then\n        return 0\n    end",
    "  if n == 0 then\n    return 0\n  end\n  local sum = get_max_sum(math.floor(n/2)) + get_max_sum(math.floor(n/3)) + get_max_sum(math.floor(n/4)) + get_max_sum(math.floor(n/5))\n  if sum > n then\n    return sum\n  else\n    return n\n  end\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local max = n\n    local n2 = math.floor(n / 2)\n    local n3 = math.floor(n / 3)\n    local n4 = math.floor(n / 4)\n    local n5 = math.floor(n / 5)\n    if n2 > 0 then\n        sum = sum + get_max_sum(n2)\n    end\n    if n3 > 0 then\n        sum = sum + get_max_sum(n3)\n    end\n    if n4 > 0 then\n        sum = sum + get_max_sum(n4)\n    end\n    if n5 > 0 then\n        sum = sum + get_max_sum(n5)\n    end\n    if sum > max then\n        max = sum\n    end\n    return max\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    for i = 2, 5 do\n        local sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n < 2 then\n        return n\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "  if n < 12 then\n    return n\n  end\n  local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n  if sum > n then\n    return sum\n  else\n    return n\n  end\nend",
    "    if n == 0 then\n        return 0\n    end\n    local n2 = math.floor(n/2)\n    local n3 = math.floor(n/3)\n    local n4 = math.floor(n/4)\n    local n5 = math.floor(n/5)\n    local sum = get_max_sum(n2) + get_max_sum(n3) + get_max_sum(n4) + get_max_sum(n5)\n    if sum < n then\n        return n\n    else\n        return sum\n    end\nend",
    "    if n < 2 then\n        return n\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(n / i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n  end\n  local max_sum = math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n  return max_sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "    local max_sum = {}\n    max_sum[1] = 1\n    max_sum[2] = 2\n    max_sum[3] = 3\n    max_sum[4] = 4\n    max_sum[5] = 5\n    for i = 6, n do\n        max_sum[i] = math.max(max_sum[math.floor(i/2)] + max_sum[math.floor(i/3)] + max_sum[math.floor(i/4)] + max_sum[math.floor(i/5)], i)\n    end\n    return max_sum[n]\nend",
    "\tif n <= 0 then\n\t\treturn 0\n\tend\n\tif n <= 5 then\n\t\treturn n\n\tend",
    "    if n < 2 then\n        return n\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n < 0 then\n            return 0\n        elseif n == 0 then\n            return 0\n        elseif cache[n] then\n            return cache[n]\n        else\n            local sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n            cache[n] = sum\n            return sum\n        end\n    end\n    return get_max_sum_rec(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    if n < 12 then\n        return n\n    end\n    local max_sum = 0\n    local max_sum_list = {}\n    for i = 1, 5 do\n        local sum = get_max_sum(n / (i + 1))\n        if sum > max_sum then\n            max_sum = sum\n        end\n        table.insert(max_sum_list, sum)\n    end\n    if max_sum > n then\n        return max_sum\n    else\n        return n\n    end\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(n, get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)))\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n <= 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n        cache[n] = sum\n        return sum\n    end\n    return get_max_sum_rec(n)\nend",
    "  if n == 0 then\n    return 0\n  end\n  local sum = get_max_sum(math.floor(n / 2)) + get_max_sum(math.floor(n / 3)) + get_max_sum(math.floor(n / 4)) + get_max_sum(math.floor(n / 5))\n  if sum > n then\n    return sum\n  else\n    return n\n  end\nend",
    "  local cache = {}\n  local function get_max_sum_helper(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(get_max_sum_helper(math.floor(n / 2)) + get_max_sum_helper(math.floor(n / 3)) + get_max_sum_helper(math.floor(n / 4)) + get_max_sum_helper(math.floor(n / 5)), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_helper(n)\nend",
    "  local cache = {}\n  local function f(n)\n    if n == 0 then\n      return 0\n    elseif n == 1 then\n      return 1\n    elseif cache[n] then\n      return cache[n]\n    else\n      local sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n      cache[n] = sum\n      return sum\n    end\n  end\n  return f(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(n/2)\n    local sum2 = get_max_sum(n/3)\n    local sum3 = get_max_sum(n/4)\n    local sum4 = get_max_sum(n/5)\n    if sum1 + sum2 + sum3 + sum4 > sum then\n        sum = sum1 + sum2 + sum3 + sum4\n    end\n    return sum\nend",
    "    if n < 12 then\n        return n\n    end",
    "  local max_sum = {}\n  max_sum[0] = 0\n  max_sum[1] = 1\n  for i = 2, n do\n    local sum = max_sum[i/2] + max_sum[i/3] + max_sum[i/4] + max_sum[i/5]\n    max_sum[i] = math.max(sum, i)\n  end\n  return max_sum[n]\nend",
    "    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local sum = math.max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n    return sum\nend",
    "    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(n / i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local sum = math.max(n, get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5))\n        cache[n] = sum\n        return sum\n    end\n    return get_max_sum_rec(n)\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "    if n <= 0 then\n        return 0\n    end",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(\n            get_max_sum_rec(math.floor(n/2)) +\n            get_max_sum_rec(math.floor(n/3)) +\n            get_max_sum_rec(math.floor(n/4)) +\n            get_max_sum_rec(math.floor(n/5)),\n            n\n        )\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(n/2)\n    local sum2 = get_max_sum(n/3)\n    local sum3 = get_max_sum(n/4)\n    local sum4 = get_max_sum(n/5)\n    if sum1 + sum2 + sum3 + sum4 > n then\n        sum = sum1 + sum2 + sum3 + sum4\n    end\n    return sum\nend",
    "\tif n < 0 then\n\t\treturn 0\n\telseif n == 0 then\n\t\treturn 1\n\telse\n\t\treturn math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\tend\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(math.floor(n/2))\n    local sum2 = get_max_sum(math.floor(n/3))\n    local sum3 = get_max_sum(math.floor(n/4))\n    local sum4 = get_max_sum(math.floor(n/5))\n    sum = sum + sum1 + sum2 + sum3 + sum4\n    return sum\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "  if n == 0 then\n    return 0\n  end\n  local sum = n\n  local sum1 = get_max_sum(math.floor(n/2))\n  local sum2 = get_max_sum(math.floor(n/3))\n  local sum3 = get_max_sum(math.floor(n/4))\n  local sum4 = get_max_sum(math.floor(n/5))\n  local sum5 = sum1 + sum2 + sum3 + sum4\n  if sum5 > sum then\n    sum = sum5\n  end\n  return sum\nend",
    "\tif n == 0 then\n\t\treturn 0\n\tend\n\tlocal max_sum = n\n\tlocal sum = 0\n\tfor i = 2, 5 do\n\t\tsum = get_max_sum(math.floor(n / i))\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\tend\n\treturn max_sum\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5))\n    if sum > n then\n      cache[n] = sum\n      return sum\n    else\n      cache[n] = n\n      return n\n    end\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local sum = n\n    if n % 2 == 0 then\n        sum = sum + get_max_sum(n / 2)\n    end\n    if n % 3 == 0 then\n        sum = sum + get_max_sum(n / 3)\n    end\n    if n % 4 == 0 then\n        sum = sum + get_max_sum(n / 4)\n    end\n    if n % 5 == 0 then\n        sum = sum + get_max_sum(n / 5)\n    end\n    return sum\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    elseif n == 1 then\n      return 1\n    elseif n == 2 then\n      return 2\n    elseif n == 3 then\n      return 3\n    elseif n == 4 then\n      return 4\n    elseif n == 5 then\n      return 5\n    elseif cache[n] then\n      return cache[n]\n    else\n      local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n      cache[n] = max_sum\n      return max_sum\n    end\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum < n then\n        return n\n    end\n    return sum\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(n / i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum < n then\n        return n\n    end\n    return sum\nend",
    "    if n < 12 then\n        return n\n    end\n    local max_sum = get_max_sum(math.floor(n/2)) + get_max_sum(math.floor(n/3)) + get_max_sum(math.floor(n/4)) + get_max_sum(math.floor(n/5))\n    if max_sum > n then\n        return max_sum\n    else\n        return n\n    end\nend",
    "  local memo = {}\n  local function f(n)\n    if n == 0 then\n      return 0\n    end\n    if memo[n] then\n      return memo[n]\n    end\n    local max = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    memo[n] = max\n    return max\n  end\n  return f(n)\nend",
    "    if n < 2 then\n        return n\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    if n <= 0 then\n        return 0\n    end\n    if n <= 5 then\n        return n\n    end\n    local sum = 0\n    for i = 2, 5 do\n        sum = sum + get_max_sum(math.floor(n / i))\n    end\n    return math.max(sum, n)\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "  local max_sum = {}\n  max_sum[1] = 1\n  max_sum[2] = 2\n  max_sum[3] = 3\n  max_sum[4] = 4\n  max_sum[5] = 5",
    "  local max_sum = {}\n  max_sum[1] = 1\n  max_sum[2] = 2\n  max_sum[3] = 3\n  max_sum[4] = 4\n  max_sum[5] = 5\n  for i = 6, n do\n    local max = max_sum[i/2] + max_sum[i/3] + max_sum[i/4] + max_sum[i/5]\n    if max < i then\n      max = i\n    end\n    max_sum[i] = max\n  end\n  return max_sum[n]\nend",
    "    if n <= 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n < 0 then\n      return -math.huge\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n == 0 then\n        return 0\n    end",
    "  if n == 0 then\n    return 0\n  end\n  local sum = n\n  local sum1 = get_max_sum(n / 2)\n  local sum2 = get_max_sum(n / 3)\n  local sum3 = get_max_sum(n / 4)\n  local sum4 = get_max_sum(n / 5)\n  if sum1 + sum2 + sum3 + sum4 > sum then\n    sum = sum1 + sum2 + sum3 + sum4\n  end\n  return sum\nend",
    "  if n < 12 then\n    return n\n  end\n  local a = get_max_sum(n/2)\n  local b = get_max_sum(n/3)\n  local c = get_max_sum(n/4)\n  local d = get_max_sum(n/5)\n  local e = a + b + c + d\n  if e > n then\n    return e\n  else\n    return n\n  end\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "    local cache = {}\n    local function get_max(n)\n        if n < 12 then\n            return n\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max = math.max(get_max(math.floor(n/2)) + get_max(math.floor(n/3)) + get_max(math.floor(n/4)) + get_max(math.floor(n/5)), n)\n        cache[n] = max\n        return max\n    end\n    return get_max(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "  local cache = {}\n  local function f(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = f(math.floor(n/2)) + f(math.floor(n/3)) + f(math.floor(n/4)) + f(math.floor(n/5))\n    if sum > n then\n      cache[n] = sum\n      return sum\n    else\n      cache[n] = n\n      return n\n    end\n  end\n  return f(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = 0\n    for i = 2, 5 do\n        sum = sum + get_max_sum(math.floor(n / i))\n    end\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(\n            get_max_sum_rec(math.floor(n / 2)) +\n                get_max_sum_rec(math.floor(n / 3)) +\n                    get_max_sum_rec(math.floor(n / 4)) +\n                        get_max_sum_rec(math.floor(n / 5)),\n            n\n        )\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "    local memo = {}\n    local function f(n)\n        if n == 0 then\n            return 0\n        end\n        if memo[n] then\n            return memo[n]\n        end\n        local max_sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n        memo[n] = max_sum\n        return max_sum\n    end\n    return f(n)\nend",
    "  if n == 0 then\n    return 0\n  end\n  local max_sum = n\n  local sum = 0\n  for i = 2, 5 do\n    sum = get_max_sum(math.floor(n / i))\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n <= 0 then\n        return 0\n    end\n    local max_sum = n\n    local max_sum_1 = get_max_sum(n / 2)\n    local max_sum_2 = get_max_sum(n / 3)\n    local max_sum_3 = get_max_sum(n / 4)\n    local max_sum_4 = get_max_sum(n / 5)\n    if max_sum_1 + max_sum_2 + max_sum_3 + max_sum_4 > max_sum then\n        max_sum = max_sum_1 + max_sum_2 + max_sum_3 + max_sum_4\n    end\n    return max_sum\nend",
    "  if n == 0 then\n    return 0\n  end",
    "    if n < 12 then\n        return n\n    end\n    local max_sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5)\n    if max_sum > n then\n        return max_sum\n    end\n    return n\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "  if n == 0 then\n    return 0\n  end\n  local max_sum = n\n  local max_sum_1 = get_max_sum(math.floor(n / 2))\n  local max_sum_2 = get_max_sum(math.floor(n / 3))\n  local max_sum_3 = get_max_sum(math.floor(n / 4))\n  local max_sum_4 = get_max_sum(math.floor(n / 5))\n  local max_sum_5 = get_max_sum(math.floor(n / 6))\n  if max_sum_1 + max_sum_2 + max_sum_3 + max_sum_4 + max_sum_5 > max_sum then\n    max_sum = max_sum_1 + max_sum_2 + max_sum_3 + max_sum_4 + max_sum_5\n  end\n  return max_sum\nend",
    "  local cache = {}\n  local function f(n)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    cache[n] = sum\n    return sum\n  end\n  return f(n)\nend",
    "    if n < 0 then\n        return 0\n    end\n    if n < 2 then\n        return n\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(n / i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    local cache = {}\n    local function get_max_sum_helper(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_helper(n/2) + get_max_sum_helper(n/3) + get_max_sum_helper(n/4) + get_max_sum_helper(n/5), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_helper(n)\nend",
    "\tlocal cache = {}\n\tlocal function f(n)\n\t\tif n == 0 then\n\t\t\treturn 0\n\t\tend\n\t\tif cache[n] then\n\t\t\treturn cache[n]\n\t\tend\n\t\tlocal max = math.max(f(math.floor(n/2)) + f(math.floor(n/3)) + f(math.floor(n/4)) + f(math.floor(n/5)), n)\n\t\tcache[n] = max\n\t\treturn max\n\tend\n\treturn f(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(math.floor(n / 2))\n    local sum2 = get_max_sum(math.floor(n / 3))\n    local sum3 = get_max_sum(math.floor(n / 4))\n    local sum4 = get_max_sum(math.floor(n / 5))\n    if sum1 + sum2 + sum3 + sum4 > n then\n        sum = sum1 + sum2 + sum3 + sum4\n    end\n    return sum\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(math.floor(n / 2)) + get_max_sum(math.floor(n / 3)) + get_max_sum(math.floor(n / 4)) + get_max_sum(math.floor(n / 5))\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(math.floor(n / 2)) + get_max_sum(math.floor(n / 3)) + get_max_sum(math.floor(n / 4)) + get_max_sum(math.floor(n / 5))\n    if sum > n then\n        return sum\n    end\n    return n\nend",
    "  if n <= 0 then\n    return 0\n  end\n  local max_sum = n\n  local sum = 0\n  for i = 2, 5 do\n    sum = get_max_sum(n / i)\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "  local function get_max_sum_helper(n, cache)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(\n      get_max_sum_helper(math.floor(n / 2), cache) +\n      get_max_sum_helper(math.floor(n / 3), cache) +\n      get_max_sum_helper(math.floor(n / 4), cache) +\n      get_max_sum_helper(math.floor(n / 5), cache),\n      n\n    )\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_helper(n, {})\nend",
    "  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 0\n  else\n    return math.max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n  end\nend",
    "\tlocal cache = {}\n\tlocal function max_sum(n)\n\t\tif n < 0 then\n\t\t\treturn 0\n\t\tend\n\t\tif n == 0 then\n\t\t\treturn 0\n\t\tend\n\t\tif cache[n] then\n\t\t\treturn cache[n]\n\t\tend\n\t\tlocal max = math.max(n, max_sum(n/2) + max_sum(n/3) + max_sum(n/4) + max_sum(n/5))\n\t\tcache[n] = max\n\t\treturn max\n\tend\n\treturn max_sum(n)\nend",
    "    if n == 0 then\n        return 0\n    end",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local max_sum_1 = get_max_sum(math.floor(n / 2))\n    local max_sum_2 = get_max_sum(math.floor(n / 3))\n    local max_sum_3 = get_max_sum(math.floor(n / 4))\n    local max_sum_4 = get_max_sum(math.floor(n / 5))\n    local max_sum_5 = get_max_sum(math.floor(n / 6))\n    local max_sum_6 = get_max_sum(math.floor(n / 7))\n    local max_sum_7 = get_max_sum(math.floor(n / 8))\n    local max_sum_8 = get_max_sum(math.floor(n / 9))\n    local max_sum_9 = get_max_sum(math.floor(n / 10))\n    local max_sum_10 = get_max_sum(math.floor(n / 11))\n    local max_sum_11 = get_max_sum(math.floor(n / 12))\n    local max_sum_12 = get_max_sum(math.floor(n / 13))\n    local max_sum_13 = get_max_sum(math.floor(n / 14))\n    local max_sum_14 = get_max_sum(math.floor(n / 15))\n    local max_sum_15 = get_max_sum(math.floor(n / 16))\n    local max_sum_16 = get_max_sum(math.floor(n / 17))\n    local max_sum_17 = get_max_sum(math.floor(n / 18))\n    local max_sum_18 = get_max_sum(math.floor(n / 19))\n    local max_sum_19 = get_max_sum(math.floor(n / 20))\n    local max_sum_20 = get_max_sum(math.floor(n / 21))\n    local max_sum_21 = get_max_sum(math.floor(n / 22))\n    local max_sum_",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local sum = math.max(n, get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)))\n        cache[n] = sum\n        return sum\n    end\n    return get_max_sum_rec(n)\nend",
    "\tif n < 0 then\n\t\treturn 0\n\telseif n < 2 then\n\t\treturn n\n\tend\n\tlocal sum = 0\n\tfor i = 2, 5 do\n\t\tsum = sum + get_max_sum(n / i)\n\tend\n\treturn math.max(sum, n)\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 0\n  end\n  local max_sum = n\n  local sum = 0\n  for i = 2, 5 do\n    sum = get_max_sum(n / i)\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend",
    "    local memo = {}\n    local function f(n)\n        if n == 0 then\n            return 0\n        end\n        if memo[n] then\n            return memo[n]\n        end\n        local max = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n        memo[n] = max\n        return max\n    end\n    return f(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 0\n  end\n  local max_sum = math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n  return max_sum\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5))\n    if sum < n then\n      sum = n\n    end\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    local cache = {}\n    local function f(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n        cache[n] = max\n        return max\n    end\n    return f(n)\nend",
    "    if n < 2 then\n        return n\n    end\n    local max_sum = n\n    for i = 2, 5 do\n        local sum = get_max_sum(n / i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(math.floor(n/2))\n    local sum2 = get_max_sum(math.floor(n/3))\n    local sum3 = get_max_sum(math.floor(n/4))\n    local sum4 = get_max_sum(math.floor(n/5))\n    local sum5 = sum1 + sum2 + sum3 + sum4\n    if sum5 > sum then\n        sum = sum5\n    end\n    return sum\nend",
    "    if n == 0 then\n        return 0\n    end",
    "  local t = {}\n  t[1] = 1\n  t[2] = 2\n  t[3] = 3\n  t[4] = 4\n  t[5] = 5\n  for i = 6, n do\n    t[i] = math.max(t[math.floor(i/2)] + t[math.floor(i/3)] + t[math.floor(i/4)] + t[math.floor(i/5)], i)\n  end\n  return t[n]\nend",
    "\tif n < 0 then\n\t\treturn 0\n\tend\n\tif n == 0 then\n\t\treturn 0\n\tend\n\tif n == 1 then\n\t\treturn 1\n\tend\n\tlocal sum = math.max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n\treturn sum\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(n, get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)))\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n < 0 then\n        return 0\n    elseif n == 0 then\n        return 1\n    else\n        return math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    end\nend",
    "    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    return math.max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\nend",
    "    local memo = {}\n    local function f(n)\n        if n == 0 then return 0 end\n        if memo[n] then return memo[n] end\n        local sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n        memo[n] = sum\n        return sum\n    end\n    return f(n)\nend",
    "\tif n == 0 then return 0 end\n\tlocal a = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n\treturn math.max(a, n)\nend",
    "  local function get_max_sum_rec(n, cache)\n    if n <= 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(n / 2, cache) + get_max_sum_rec(n / 3, cache) + get_max_sum_rec(n / 4, cache) + get_max_sum_rec(n / 5, cache), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n, {})\nend",
    "  if n == 0 then\n    return 0\n  end\n  local sum = get_max_sum(math.floor(n/2)) + get_max_sum(math.floor(n/3)) + get_max_sum(math.floor(n/4)) + get_max_sum(math.floor(n/5))\n  if sum > n then\n    return sum\n  else\n    return n\n  end\nend",
    "\tif n == 0 then\n\t\treturn 0\n\tend\n\tlocal a = get_max_sum(n/2)\n\tlocal b = get_max_sum(n/3)\n\tlocal c = get_max_sum(n/4)\n\tlocal d = get_max_sum(n/5)\n\tlocal e = get_max_sum(n/6)\n\tlocal f = get_max_sum(n/7)\n\tlocal g = get_max_sum(n/8)\n\tlocal h = get_max_sum(n/9)\n\tlocal i = get_max_sum(n/10)\n\tlocal j = get_max_sum(n/11)\n\tlocal k = get_max_sum(n/12)\n\tlocal l = get_max_sum(n/13)\n\tlocal m = get_max_sum(n/14)\n\tlocal o = get_max_sum(n/15)\n\tlocal p = get_max_sum(n/16)\n\tlocal q = get_max_sum(n/17)\n\tlocal r = get_max_sum(n/18)\n\tlocal s = get_max_sum(n/19)\n\tlocal t = get_max_sum(n/20)\n\tlocal u = get_max_sum(n/21)\n\tlocal v = get_max_sum(n/22)\n\tlocal w = get_max_sum(n/23)\n\tlocal x = get_max_sum(n/24)\n\tlocal y = get_max_sum(n/25)\n\tlocal z = get_max_sum(n/26)\n\tlocal aa = get_max_sum(n/27)\n\tlocal bb = get_max_sum(n/28)\n\tlocal cc = get_max_sum(n/29)\n\tlocal dd = get_max_sum(n/30)\n\tlocal ee = get_max_sum(n/31)\n\tlocal ff = get_max_sum(n/32)\n\tlocal gg = get_max_sum(n/33)\n\tlocal hh = get_max_sum(n",
    "\tif n == 0 then\n\t\treturn 0\n\tend\n\tlocal sum = n\n\tlocal sum1 = get_max_sum(n/2)\n\tlocal sum2 = get_max_sum(n/3)\n\tlocal sum3 = get_max_sum(n/4)\n\tlocal sum4 = get_max_sum(n/5)\n\tif sum1 + sum2 + sum3 + sum4 > n then\n\t\tsum = sum1 + sum2 + sum3 + sum4\n\tend\n\treturn sum\nend",
    "  local cache = {}\n  local function f(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = f(math.floor(n/2)) + f(math.floor(n/3)) + f(math.floor(n/4)) + f(math.floor(n/5))\n    if sum > n then\n      cache[n] = sum\n      return sum\n    else\n      cache[n] = n\n      return n\n    end\n  end\n  return f(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(n / 2)\n    local sum2 = get_max_sum(n / 3)\n    local sum3 = get_max_sum(n / 4)\n    local sum4 = get_max_sum(n / 5)\n    local max_sum = sum1 + sum2 + sum3 + sum4\n    if max_sum > sum then\n        sum = max_sum\n    end\n    return sum\nend",
    "    local cache = {}\n    local function f(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max = math.max(f(math.floor(n/2)) + f(math.floor(n/3)) + f(math.floor(n/4)) + f(math.floor(n/5)), n)\n        cache[n] = max\n        return max\n    end\n    return f(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "\tif n < 12 then\n\t\treturn n\n\tend\n\tlocal max_sum = 0\n\tfor i = 1, 5 do\n\t\tlocal sum = get_max_sum(n / (i + 1))\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\tend\n\treturn max_sum + n\nend",
    "    local cache = {}\n    local function f(n)\n        if n == 0 then return 0 end\n        if cache[n] then return cache[n] end\n        local max = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n        cache[n] = max\n        return max\n    end\n    return f(n)\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    local cache = {}\n    local function max_sum(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max = math.max(max_sum(math.floor(n / 2)) + max_sum(math.floor(n / 3)) + max_sum(math.floor(n / 4)) + max_sum(math.floor(n / 5)), n)\n        cache[n] = max\n        return max\n    end\n    return max_sum(n)\nend",
    "\tlocal memo = {}\n\tlocal function f(n)\n\t\tif n == 0 then\n\t\t\treturn 0\n\t\tend\n\t\tif memo[n] then\n\t\t\treturn memo[n]\n\t\tend\n\t\tlocal max_sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n\t\tmemo[n] = max_sum\n\t\treturn max_sum\n\tend\n\treturn f(n)\nend",
    "  if n == 0 then\n    return 0\n  end\n  local sum = get_max_sum(math.floor(n/2)) + get_max_sum(math.floor(n/3)) + get_max_sum(math.floor(n/4)) + get_max_sum(math.floor(n/5))\n  if sum > n then\n    return sum\n  else\n    return n\n  end\nend",
    "    if n < 0 then\n        return 0\n    end",
    "    if n < 12 then\n        return n\n    end\n    local a = get_max_sum(math.floor(n / 2))\n    local b = get_max_sum(math.floor(n / 3))\n    local c = get_max_sum(math.floor(n / 4))\n    local d = get_max_sum(math.floor(n / 5))\n    return math.max(a + b + c + d, n)\nend",
    "    if n <= 0 then\n        return 0\n    end",
    "  if n <= 0 then\n    return 0\n  end\n  local t = {}\n  t[0] = 0\n  t[1] = 1\n  for i = 2, n do\n    local sum = t[math.floor(i/2)] + t[math.floor(i/3)] + t[math.floor(i/4)] + t[math.floor(i/5)]\n    t[i] = math.max(sum, i)\n  end\n  return t[n]\nend",
    "  local memo = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    elseif n == 1 then\n      return 1\n    elseif memo[n] then\n      return memo[n]\n    else\n      local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n      memo[n] = max_sum\n      return max_sum\n    end\n  end\n  return get_max_sum_rec(n)\nend",
    "  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n  end\n  local max_sum = math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n  return max_sum\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local sum = math.max(n, get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)))\n        cache[n] = sum\n        return sum\n    end\n    return get_max_sum_rec(n)\nend",
    "  local memo = {}\n  local function f(n)\n    if n <= 0 then return 0 end\n    if memo[n] then return memo[n] end\n    memo[n] = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    return memo[n]\n  end\n  return f(n)\nend",
    "  if n <= 0 then\n    return 0\n  end\n  local max_sum = n\n  local sum = 0\n  for i = 2, 5 do\n    sum = get_max_sum(math.floor(n / i))\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend",
    "\tif n == 0 then\n\t\treturn 0\n\tend\n\tlocal max_sum = n\n\tlocal sum = 0\n\tfor i = 2, 5 do\n\t\tsum = get_max_sum(math.floor(n / i))\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\tend\n\treturn max_sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local a = get_max_sum(math.floor(n/2))\n    local b = get_max_sum(math.floor(n/3))\n    local c = get_max_sum(math.floor(n/4))\n    local d = get_max_sum(math.floor(n/5))\n    local sum = a + b + c + d\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local a = math.floor(n / 2)\n    local b = math.floor(n / 3)\n    local c = math.floor(n / 4)\n    local d = math.floor(n / 5)\n    sum = math.max(sum, get_max_sum(a) + get_max_sum(b) + get_max_sum(c) + get_max_sum(d))\n    return sum\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    local a = n/2\n    local b = n/3\n    local c = n/4\n    local d = n/5\n    if a > 0 then\n        sum = get_max_sum(a)\n    end\n    if b > 0 then\n        sum = sum + get_max_sum(b)\n    end\n    if c > 0 then\n        sum = sum + get_max_sum(c)\n    end\n    if d > 0 then\n        sum = sum + get_max_sum(d)\n    end\n    if sum > max_sum then\n        max_sum = sum\n    end\n    return max_sum\nend",
    "  local memo = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if memo[n] then\n      return memo[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    memo[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "  local max_sum = {}\n  max_sum[1] = 1\n  max_sum[2] = 2\n  max_sum[3] = 3\n  max_sum[4] = 4\n  max_sum[5] = 5\n  for i = 6, n do\n    local max = math.max(max_sum[i/2] + max_sum[i/3] + max_sum[i/4] + max_sum[i/5], i)\n    max_sum[i] = max\n  end\n  return max_sum[n]\nend",
    "  local max_sum = {}\n  max_sum[0] = 0\n  max_sum[1] = 1\n  for i = 2, n do\n    local sum = max_sum[i/2] + max_sum[i/3] + max_sum[i/4] + max_sum[i/5]\n    if sum > i then\n      max_sum[i] = sum\n    else\n      max_sum[i] = i\n    end\n  end\n  return max_sum[n]\nend",
    "    local memo = {}\n    local function get_max_sum_helper(n)\n        if n == 0 then return 0 end\n        if n == 1 then return 1 end\n        if memo[n] then return memo[n] end\n        local max_sum = math.max(get_max_sum_helper(n/2) + get_max_sum_helper(n/3) + get_max_sum_helper(n/4) + get_max_sum_helper(n/5), n)\n        memo[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_helper(n)\nend",
    "    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    local max = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(n / i)\n        if sum > max then\n            max = sum\n        end\n    end\n    return max\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n < 0 then\n      return 0\n    end\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(n, get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5))\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    local max_sum = n\n    local sum = 0\n    local i = 0\n    while i < n do\n        i = i + 1\n        sum = math.max(sum, get_max_sum(i/2) + get_max_sum(i/3) + get_max_sum(i/4) + get_max_sum(i/5))\n    end\n    return sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(n/2)\n    local sum2 = get_max_sum(n/3)\n    local sum3 = get_max_sum(n/4)\n    local sum4 = get_max_sum(n/5)\n    if sum1 + sum2 + sum3 + sum4 > sum then\n        sum = sum1 + sum2 + sum3 + sum4\n    end\n    return sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(math.floor(n/2)) + get_max_sum(math.floor(n/3)) + get_max_sum(math.floor(n/4)) + get_max_sum(math.floor(n/5))\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum < n then\n        return n\n    else\n        return sum\n    end\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(math.floor(n/2))\n    local sum2 = get_max_sum(math.floor(n/3))\n    local sum3 = get_max_sum(math.floor(n/4))\n    local sum4 = get_max_sum(math.floor(n/5))\n    local max_sum = sum1 + sum2 + sum3 + sum4\n    if max_sum > sum then\n        sum = max_sum\n    end\n    return sum\nend",
    "  local memo = {}\n  local function _get_max_sum(n)\n    if n == 0 then\n      return 0\n    elseif memo[n] then\n      return memo[n]\n    else\n      local sum = math.max(\n        _get_max_sum(math.floor(n/2)) +\n        _get_max_sum(math.floor(n/3)) +\n        _get_max_sum(math.floor(n/4)) +\n        _get_max_sum(math.floor(n/5)),\n        n\n      )\n      memo[n] = sum\n      return sum\n    end\n  end\n  return _get_max_sum(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    for i = 2, 5 do\n        local sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    local cache = {}\n    local function _get_max_sum(n)\n        if n < 0 then\n            return 0\n        end\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(n, _get_max_sum(n/2) + _get_max_sum(n/3) + _get_max_sum(n/4) + _get_max_sum(n/5))\n        cache[n] = max_sum\n        return max_sum\n    end\n    return _get_max_sum(n)\nend",
    "    if n < 0 then\n        return 0\n    end",
    "    if n == 0 then return 0 end\n    local sum = get_max_sum(math.floor(n/2)) + get_max_sum(math.floor(n/3)) + get_max_sum(math.floor(n/4)) + get_max_sum(math.floor(n/5))\n    if sum > n then return sum else return n end\nend",
    "  if n == 0 then\n    return 0\n  end\n  local a = get_max_sum(math.floor(n/2))\n  local b = get_max_sum(math.floor(n/3))\n  local c = get_max_sum(math.floor(n/4))\n  local d = get_max_sum(math.floor(n/5))\n  local e = a + b + c + d\n  if e > n then\n    return e\n  else\n    return n\n  end\nend",
    "    local memo = {}\n    local function f(n)\n        if n == 0 then\n            return 0\n        end\n        if memo[n] then\n            return memo[n]\n        end\n        local max_sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n        memo[n] = max_sum\n        return max_sum\n    end\n    return f(n)\nend",
    "    local memo = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if memo[n] then\n            return memo[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n        memo[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local sum = 0\n    for i = 2, 5 do\n        sum = sum + get_max_sum(n / i)\n    end\n    return math.max(sum, n)\nend",
    "    if n < 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(n / i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local sum = get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5))\n        if sum > n then\n            cache[n] = sum\n            return sum\n        else\n            cache[n] = n\n            return n\n        end\n    end\n    return get_max_sum_rec(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local sum = 0\n    for i = 2, 5 do\n        sum = sum + get_max_sum(math.floor(n / i))\n    end\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "\tif n < 2 then\n\t\treturn n\n\tend\n\tlocal sum = 0\n\tfor i = 2, 5 do\n\t\tlocal tmp = math.floor(n / i)\n\t\tsum = sum + get_max_sum(tmp)\n\tend\n\treturn math.max(sum, n)\nend",
    "    if n < 0 then\n        return 0\n    end\n    if n <= 1 then\n        return n\n    end\n    local sum = 0\n    for i = 2, 5 do\n        sum = sum + get_max_sum(n / i)\n    end\n    return math.max(sum, n)\nend",
    "  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n  end\n  local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n  if sum > n then\n    return sum\n  else\n    return n\n  end\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(n/2)\n    local sum2 = get_max_sum(n/3)\n    local sum3 = get_max_sum(n/4)\n    local sum4 = get_max_sum(n/5)\n    if sum1 + sum2 + sum3 + sum4 > n then\n        sum = sum1 + sum2 + sum3 + sum4\n    end\n    return sum\nend",
    "    if n <= 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "  local cache = {}\n  local function _get_max_sum(n)\n    if n < 0 then\n      return 0\n    end\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(n, _get_max_sum(n/2) + _get_max_sum(n/3) + _get_max_sum(n/4) + _get_max_sum(n/5))\n    cache[n] = max_sum\n    return max_sum\n  end\n  return _get_max_sum(n)\nend",
    "  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n  end\n  local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n  if sum > n then\n    return sum\n  else\n    return n\n  end\nend",
    "    if n <= 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(n / i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n < 12 then\n      return n\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5))\n    if max_sum < n then\n      max_sum = n\n    end\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "    if n < 0 then\n        return 0\n    end",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local sum = math.max(get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)), n)\n        cache[n] = sum\n        return sum\n    end\n    return get_max_sum_rec(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "  if n < 12 then\n    return n\n  end\n  local sum = 0\n  local sum1 = get_max_sum(n/2)\n  local sum2 = get_max_sum(n/3)\n  local sum3 = get_max_sum(n/4)\n  local sum4 = get_max_sum(n/5)\n  sum = sum1 + sum2 + sum3 + sum4\n  if sum < n then\n    sum = n\n  end\n  return sum\nend",
    "    local cache = {}\n    local function get_max_sum_helper(n)\n        if n < 0 then\n            return 0\n        end\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_helper(n/2) + get_max_sum_helper(n/3) + get_max_sum_helper(n/4) + get_max_sum_helper(n/5), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_helper(n)\nend",
    "  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n  end\n  local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n  if sum > n then\n    return sum\n  else\n    return n\n  end\nend",
    "    if n <= 0 then\n        return 0\n    end\n    if n <= 5 then\n        return n\n    end\n    local sum = 0\n    for i = 2, 5 do\n        sum = sum + get_max_sum(n / i)\n    end\n    return math.max(n, sum)\nend",
    "    local memo = {}\n    local function f(n)\n        if n == 0 then\n            return 0\n        end\n        if memo[n] then\n            return memo[n]\n        end\n        local max_sum = math.max(f(math.floor(n/2)) + f(math.floor(n/3)) + f(math.floor(n/4)) + f(math.floor(n/5)), n)\n        memo[n] = max_sum\n        return max_sum\n    end\n    return f(n)\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    local memo = {}\n    local function f(n)\n        if n == 0 then\n            return 0\n        elseif n == 1 then\n            return 1\n        elseif memo[n] then\n            return memo[n]\n        else\n            local max = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n            memo[n] = max\n            return max\n        end\n    end\n    return f(n)\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5))\n    if sum > n then\n      cache[n] = sum\n      return sum\n    else\n      cache[n] = n\n      return n\n    end\n  end\n  return get_max_sum_rec(n)\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "\tif n < 0 then\n\t\treturn 0\n\tend\n\tif n == 0 then\n\t\treturn 0\n\tend\n\tif n == 1 then\n\t\treturn 1\n\tend\n\tlocal sum = 0\n\tfor i = 2, 5 do\n\t\tsum = sum + get_max_sum(n / i)\n\tend\n\tif sum < n then\n\t\treturn n\n\tend\n\treturn sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(math.floor(n/2)) + get_max_sum(math.floor(n/3)) + get_max_sum(math.floor(n/4)) + get_max_sum(math.floor(n/5))\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n <= 0 then\n        return 0\n    end\n    if n <= 5 then\n        return n\n    end\n    local sum = 0\n    for i = 2, 5 do\n        sum = sum + get_max_sum(math.floor(n / i))\n    end\n    return math.max(sum, n)\nend",
    "  local cache = {}\n  local function get_max_sum_helper(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(get_max_sum_helper(math.floor(n/2)) + get_max_sum_helper(math.floor(n/3)) + get_max_sum_helper(math.floor(n/4)) + get_max_sum_helper(math.floor(n/5)), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_helper(n)\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5))\n    if sum > n then\n      cache[n] = sum\n      return sum\n    else\n      cache[n] = n\n      return n\n    end\n  end\n  return get_max_sum_rec(n)\nend",
    "  local cache = {}\n  local function get_max_sum_helper(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(n, get_max_sum_helper(n / 2) + get_max_sum_helper(n / 3) + get_max_sum_helper(n / 4) + get_max_sum_helper(n / 5))\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_helper(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(math.floor(n/2))\n    local sum2 = get_max_sum(math.floor(n/3))\n    local sum3 = get_max_sum(math.floor(n/4))\n    local sum4 = get_max_sum(math.floor(n/5))\n    if sum1 + sum2 + sum3 + sum4 > n then\n        sum = sum1 + sum2 + sum3 + sum4\n    end\n    return sum\nend",
    "  local memo = {}\n  local function f(n)\n    if n == 0 then return 0 end\n    if memo[n] then return memo[n] end\n    local max = n\n    for i = 2, 5 do\n      local v = f(n/i)\n      if v > max then max = v end\n    end\n    memo[n] = max\n    return max\n  end\n  return f(n)\nend"
  ]
}