{
  "name": "mbpp_392_get_max_sum",
  "language": "lua",
  "prompt": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max\n    return max\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n < 0 then\n        return 0\n    end",
    "  if n == 0 then\n    return 0\n  end\n  local sum = get_max_sum(math.floor(n/2)) + get_max_sum(math.floor(n/3)) + get_max_sum(math.floor(n/4)) + get_max_sum(math.floor(n/5))\n  if sum > n then\n    return sum\n  else\n    return n\n  end\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local max = n\n    local n2 = math.floor(n / 2)\n    local n3 = math.floor(n / 3)\n    local n4 = math.floor(n / 4)\n    local n5 = math.floor(n / 5)\n    if n2 > 0 then\n        sum = sum + get_max_sum(n2)\n    end\n    if n3 > 0 then\n        sum = sum + get_max_sum(n3)\n    end\n    if n4 > 0 then\n        sum = sum + get_max_sum(n4)\n    end\n    if n5 > 0 then\n        sum = sum + get_max_sum(n5)\n    end\n    if sum > max then\n        max = sum\n    end\n    return max\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    for i = 2, 5 do\n        local sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n < 2 then\n        return n\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "  if n < 12 then\n    return n\n  end\n  local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n  if sum > n then\n    return sum\n  else\n    return n\n  end\nend",
    "    if n == 0 then\n        return 0\n    end\n    local n2 = math.floor(n/2)\n    local n3 = math.floor(n/3)\n    local n4 = math.floor(n/4)\n    local n5 = math.floor(n/5)\n    local sum = get_max_sum(n2) + get_max_sum(n3) + get_max_sum(n4) + get_max_sum(n5)\n    if sum < n then\n        return n\n    else\n        return sum\n    end\nend",
    "    if n < 2 then\n        return n\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(n / i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n  end\n  local max_sum = math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n  return max_sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "    local max_sum = {}\n    max_sum[1] = 1\n    max_sum[2] = 2\n    max_sum[3] = 3\n    max_sum[4] = 4\n    max_sum[5] = 5\n    for i = 6, n do\n        max_sum[i] = math.max(max_sum[math.floor(i/2)] + max_sum[math.floor(i/3)] + max_sum[math.floor(i/4)] + max_sum[math.floor(i/5)], i)\n    end\n    return max_sum[n]\nend",
    "\tif n <= 0 then\n\t\treturn 0\n\tend\n\tif n <= 5 then\n\t\treturn n\n\tend",
    "    if n < 2 then\n        return n\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n < 0 then\n            return 0\n        elseif n == 0 then\n            return 0\n        elseif cache[n] then\n            return cache[n]\n        else\n            local sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n            cache[n] = sum\n            return sum\n        end\n    end\n    return get_max_sum_rec(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend"
  ]
}