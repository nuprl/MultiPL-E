{
  "name": "mbpp_119_search",
  "language": "lua",
  "prompt": "-- Write a python function to find the element that appears only once in a sorted array.\nlocal function search(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local low = 1\n    local high = #arr\n    local mid = 0\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 1 and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif mid == #arr and arr[mid] ~= arr[mid - 1] then\n            return arr[mid]\n        elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i + 1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local low = 1\n    local high = #arr\n    local mid = 0\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 1 then\n            if arr[mid] ~= arr[mid + 1] then\n                return arr[mid]\n            else\n                low = mid + 1\n            end\n        elseif mid == #arr then\n            if arr[mid] ~= arr[mid - 1] then\n                return arr[mid]\n            else\n                high = mid - 1\n            end\n        else\n            if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n                return arr[mid]\n            elseif arr[mid] == arr[mid - 1] then\n                low = mid + 1\n            elseif arr[mid] == arr[mid + 1] then\n                high = mid - 1\n            end\n        end\n    end\nend",
    "    local i = 1\n    while i < #arr do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\n    return arr[#arr]\nend",
    "\tlocal i = 1\n\twhile i <= #arr do\n\t\tif arr[i] ~= arr[i+1] then\n\t\t\treturn arr[i]\n\t\tend\n\t\ti = i + 2\n\tend\nend",
    "  local n = #arr\n  local low = 1\n  local high = n\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if mid == 1 or mid == n then\n      return arr[mid]\n    end\n    if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    end\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        high = mid - 2\n      else\n        low = mid + 1\n      end\n    else\n      if mid % 2 == 0 then\n        low = mid + 2\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i + 1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local low = 1\n    local high = #arr\n    local mid = 0\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 1 and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if mid == #arr and arr[mid] ~= arr[mid - 1] then\n            return arr[mid]\n        end\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "    local low = 1\n    local high = #arr\n    local mid = math.floor((low + high) / 2)\n    while low < high do\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        else\n            return arr[mid]\n        end\n        mid = math.floor((low + high) / 2)\n    end\n    return arr[mid]\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "    local low = 1\n    local high = #arr\n    local mid = 0\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 1 then\n            if arr[mid] ~= arr[mid + 1] then\n                return arr[mid]\n            end\n        elseif mid == #arr then\n            if arr[mid] ~= arr[mid - 1] then\n                return arr[mid]\n            end\n        elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if mid % 2 == 0 then\n            if arr[mid] == arr[mid + 1] then\n                low = mid + 2\n            else\n                high = mid - 2\n            end\n        else\n            if arr[mid] == arr[mid - 1] then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend",
    "    local i = 1\n    while i < #arr do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\n    return arr[#arr]\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] ~= arr[i-1] and arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 1\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if i == #arr then\n      return arr[i]\n    end\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend",
    "    local n = #arr\n    local i = 1\n    while i <= n do\n        if arr[i] == arr[i + 1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local lo, hi = 1, #arr\n    while lo < hi do\n        local mid = math.floor((lo + hi) / 2)\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                hi = mid - 2\n            else\n                lo = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                lo = mid + 2\n            else\n                hi = mid - 1\n            end\n        else\n            return arr[mid]\n        end\n    end\n    return arr[lo]\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local low = 1\n  local high = #arr\n  local mid = math.floor((low + high) / 2)\n  while low < high do\n    if mid % 2 == 0 then\n      if arr[mid] == arr[mid + 1] then\n        low = mid + 2\n      else\n        high = mid\n      end\n    else\n      if arr[mid] == arr[mid - 1] then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    end\n    mid = math.floor((low + high) / 2)\n  end\n  return arr[low]\nend",
    "  local low = 1\n  local high = #arr\n  local mid = 0\n  while low <= high do\n    mid = math.floor((low + high) / 2)\n    if mid == 1 then\n      if arr[mid] ~= arr[mid + 1] then\n        return arr[mid]\n      end\n    elseif mid == #arr then\n      if arr[mid] ~= arr[mid - 1] then\n        return arr[mid]\n      end\n    else\n      if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n        return arr[mid]\n      end\n    end\n    if mid % 2 == 0 then\n      if arr[mid] == arr[mid + 1] then\n        low = mid + 2\n      else\n        high = mid - 2\n      end\n    else\n      if arr[mid] == arr[mid - 1] then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "    local n = #arr\n    local i = 0\n    while i < n do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\n    return nil\nend",
    "    local i = 1\n    while i < #arr do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\n    return arr[#arr]\nend",
    "  local low = 1\n  local high = #arr\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        high = mid - 2\n      else\n        low = mid + 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        low = mid + 2\n      else\n        high = mid - 1\n      end\n    end\n  end\nend",
    "    local n = #arr\n    local i = 1\n    while i < n do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\n    return arr[n]\nend",
    "    local l = 1\n    local r = #arr\n    while l <= r do\n        local mid = math.floor((l + r) / 2)\n        if mid == 1 or mid == #arr then\n            return arr[mid]\n        end\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                r = mid - 2\n            else\n                l = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                l = mid + 2\n            else\n                r = mid - 1\n            end\n        else\n            return arr[mid]\n        end\n    end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return nil\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local low = 0\n    local high = #arr\n    local mid = 0\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 0 or mid == #arr then\n            return arr[mid]\n        end\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        else\n            if mid % 2 == 0 then\n                high = mid - 1\n            else\n                low = mid + 1\n            end\n        end\n    end\nend",
    "  local i = 1\n  local j = #arr\n  local mid\n  while i < j do\n    mid = math.floor((i + j) / 2)\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        i = mid + 1\n      else\n        j = mid - 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        j = mid - 1\n      else\n        i = mid + 1\n      end\n    else\n      return arr[mid]\n    end\n  end\n  return arr[i]\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "  local low = 1\n  local high = #arr\n  local mid = 0\n  while low <= high do\n    mid = math.floor((low + high) / 2)\n    if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    end\n    if mid % 2 == 0 then\n      if arr[mid] == arr[mid + 1] then\n        low = mid + 2\n      else\n        high = mid - 2\n      end\n    else\n      if arr[mid] == arr[mid - 1] then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local low = 1\n    local high = #arr\n    local mid = 0\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 1 and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif mid == #arr and arr[mid] ~= arr[mid - 1] then\n            return arr[mid]\n        elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                high = mid - 1\n            else\n                low = mid + 1\n            end\n        end\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i-1] and arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 1\n  end\nend",
    "    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[i]\nend",
    "    local low = 1\n    local high = #arr\n    local mid = math.floor((low + high) / 2)\n    while low < high do\n        if mid % 2 == 0 then\n            if arr[mid] == arr[mid + 1] then\n                low = mid + 2\n            else\n                high = mid\n            end\n        else\n            if arr[mid] == arr[mid - 1] then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        end\n        mid = math.floor((low + high) / 2)\n    end\n    return arr[low]\nend",
    "    local n = #arr\n    local i = 1\n    while i <= n do\n        if i == n then\n            return arr[i]\n        end\n        if arr[i] ~= arr[i + 1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\nend",
    "    local low = 1\n    local high = #arr\n    local mid = math.floor((low + high) / 2)\n    while low < high do\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if mid % 2 == 0 then\n            if arr[mid] == arr[mid + 1] then\n                low = mid + 2\n            else\n                high = mid - 2\n            end\n        else\n            if arr[mid] == arr[mid - 1] then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        end\n        mid = math.floor((low + high) / 2)\n    end\n    return arr[mid]\nend",
    "  local n = #arr\n  if n == 1 then\n    return arr[1]\n  end\n  local mid = math.floor(n / 2)\n  if mid % 2 == 0 then\n    if arr[mid] == arr[mid + 1] then\n      return search(arr, mid + 2, n)\n    else\n      return search(arr, 1, mid)\n    end\n  else\n    if arr[mid] == arr[mid + 1] then\n      return search(arr, 1, mid - 1)\n    else\n      return search(arr, mid + 1, n)\n    end\n  end\nend",
    "\tlocal i = 1\n\twhile i <= #arr do\n\t\tif arr[i] ~= arr[i+1] then\n\t\t\treturn arr[i]\n\t\tend\n\t\ti = i + 2\n\tend\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "    local i = 1\n    local j = #arr\n    local mid = math.floor((i + j) / 2)\n    while i < j do\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                j = mid - 2\n            else\n                i = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                i = mid + 2\n            else\n                j = mid - 1\n            end\n        else\n            return arr[mid]\n        end\n        mid = math.floor((i + j) / 2)\n    end\n    return arr[mid]\nend",
    "  local low = 1\n  local high = #arr\n  local mid\n  while low <= high do\n    mid = math.floor((low + high) / 2)\n    if mid == 1 then\n      if arr[mid] ~= arr[mid + 1] then\n        return arr[mid]\n      else\n        low = mid + 2\n      end\n    elseif mid == #arr then\n      if arr[mid] ~= arr[mid - 1] then\n        return arr[mid]\n      else\n        high = mid - 2\n      end\n    elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        high = mid - 1\n      else\n        low = mid + 1\n      end\n    end\n  end\n  return -1\nend",
    "    local low = 1\n    local high = #arr\n    local mid = 0\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 1 and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif mid == #arr and arr[mid] ~= arr[mid - 1] then\n            return arr[mid]\n        elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local n = #arr\n  if n == 1 then\n    return arr[1]\n  end\n  local mid = math.floor(n/2)\n  if arr[mid] == arr[mid-1] then\n    if mid % 2 == 0 then\n      return search(arr, mid+1, n)\n    else\n      return search(arr, 1, mid-1)\n    end\n  elseif arr[mid] == arr[mid+1] then\n    if mid % 2 == 0 then\n      return search(arr, 1, mid-1)\n    else\n      return search(arr, mid+1, n)\n    end\n  else\n    return arr[mid]\n  end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i + 1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "    local low = 1\n    local high = #arr\n    local mid\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "  local low = 1\n  local high = #arr\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        high = mid - 2\n      else\n        low = mid + 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        low = mid + 2\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local n = #arr\n  local i = 1\n  while i <= n do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local n = #arr\n    local low = 1\n    local high = n\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 or mid == n then\n            return arr[mid]\n        end\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        else\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "    local i = 1\n    local j = #arr\n    local mid = math.floor((i + j) / 2)\n    while i <= j do\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                i = mid + 1\n            else\n                j = mid - 2\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                j = mid - 1\n            else\n                i = mid + 2\n            end\n        else\n            return arr[mid]\n        end\n        mid = math.floor((i + j) / 2)\n    end\n    return -1\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local low = 1\n  local high = #arr\n  local mid = 0\n  while low <= high do\n    mid = math.floor((low + high) / 2)\n    if mid == 1 and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    end\n    if mid == #arr and arr[mid] ~= arr[mid - 1] then\n      return arr[mid]\n    end\n    if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    end\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        high = mid - 1\n      else\n        low = mid + 1\n      end\n    end\n  end\nend",
    "  local low = 1\n  local high = #arr\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    end\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        high = mid - 2\n      else\n        low = mid + 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        low = mid + 2\n      else\n        high = mid - 1\n      end\n    end\n  end\nend",
    "  local left = 1\n  local right = #arr\n  while left < right do\n    local mid = math.floor((left + right) / 2)\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        right = mid - 2\n      else\n        left = mid + 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        left = mid + 2\n      else\n        right = mid - 1\n      end\n    else\n      return arr[mid]\n    end\n  end\n  return arr[left]\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i + 1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend",
    "\tlocal low = 1\n\tlocal high = #arr\n\tlocal mid = math.floor((low + high) / 2)\n\twhile low < high do\n\t\tif mid % 2 == 0 then\n\t\t\tif arr[mid] == arr[mid + 1] then\n\t\t\t\tlow = mid + 2\n\t\t\telse\n\t\t\t\thigh = mid\n\t\t\tend\n\t\telse\n\t\t\tif arr[mid] == arr[mid - 1] then\n\t\t\t\tlow = mid + 1\n\t\t\telse\n\t\t\t\thigh = mid - 1\n\t\t\tend\n\t\tend\n\t\tmid = math.floor((low + high) / 2)\n\tend\n\treturn arr[low]\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local n = #arr\n    local i = 0\n    while i < n do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[n]\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local n = #arr\n  local i = 1\n  while i <= n do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return nil\nend",
    "    local n = #arr\n    local i = 0\n    while i < n do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\n    return arr[n]\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return nil\nend",
    "    local n = #arr\n    local i = 1\n    while i <= n do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i + 1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i + 1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "    local i = 1\n    while i < #arr do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\n    return arr[#arr]\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[i]\nend",
    "    local i = 0\n    while i < #arr do\n        if arr[i] ~= arr[i + 1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\nend",
    "    local low = 1\n    local high = #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local low = 1\n  local high = #arr\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if mid == 1 then\n      if arr[mid] ~= arr[mid + 1] then\n        return arr[mid]\n      else\n        low = mid + 1\n      end\n    elseif mid == #arr then\n      if arr[mid] ~= arr[mid - 1] then\n        return arr[mid]\n      else\n        high = mid - 1\n      end\n    elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        high = mid - 1\n      else\n        low = mid + 1\n      end\n    end\n  end\nend",
    "    local low = 1\n    local high = #arr\n    local mid = math.floor((low + high) / 2)",
    "    local low = 1\n    local high = #arr\n    local mid = 0\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 1 then\n            return arr[mid]\n        end\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if mid % 2 == 0 then\n            if arr[mid] == arr[mid + 1] then\n                low = mid + 2\n            else\n                high = mid - 2\n            end\n        else\n            if arr[mid] == arr[mid - 1] then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "  local low = 1\n  local high = #arr\n  local mid = 0\n  while low <= high do\n    mid = math.floor((low + high) / 2)\n    if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        high = mid - 2\n      else\n        low = mid + 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        low = mid + 2\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local low = 1\n    local high = #arr\n    local mid = math.floor((low + high) / 2)\n    while low <= high do\n        if mid == 1 then\n            if arr[mid] ~= arr[mid + 1] then\n                return arr[mid]\n            else\n                return arr[mid + 1]\n            end\n        elseif mid == #arr then\n            if arr[mid] ~= arr[mid - 1] then\n                return arr[mid]\n            else\n                return arr[mid - 1]\n            end\n        elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n        mid = math.floor((low + high) / 2)\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local n = #arr\n    local low = 0\n    local high = n - 1\n    local mid\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 0 or mid == n - 1 then\n            return arr[mid]\n        end\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if mid % 2 == 0 then\n            if arr[mid] == arr[mid + 1] then\n                low = mid + 2\n            else\n                high = mid - 2\n            end\n        else\n            if arr[mid] == arr[mid - 1] then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "\tlocal low = 1\n\tlocal high = #arr\n\tlocal mid = 0\n\twhile low <= high do\n\t\tmid = math.floor((low + high) / 2)\n\t\tif mid == 1 or mid == #arr then\n\t\t\treturn arr[mid]\n\t\tend\n\t\tif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n\t\t\treturn arr[mid]\n\t\tend\n\t\tif arr[mid] == arr[mid - 1] then\n\t\t\tif mid % 2 == 0 then\n\t\t\t\tlow = mid + 1\n\t\t\telse\n\t\t\t\thigh = mid - 1\n\t\t\tend\n\t\telse\n\t\t\tif mid % 2 == 0 then\n\t\t\t\thigh = mid - 1\n\t\t\telse\n\t\t\t\tlow = mid + 1\n\t\t\tend\n\t\tend\n\tend\nend",
    "    local low = 1\n    local high = #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if mid == #arr and arr[mid] ~= arr[mid - 1] then\n            return arr[mid]\n        end\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        else\n            if mid % 2 == 0 then\n                high = mid - 1\n            else\n                low = mid + 1\n            end\n        end\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local n = #arr\n    if n == 1 then\n        return arr[1]\n    end\n    local mid = math.floor(n / 2)\n    if mid % 2 == 0 then\n        if arr[mid] == arr[mid + 1] then\n            return search(arr, mid + 2, n)\n        else\n            return search(arr, 1, mid)\n        end\n    else\n        if arr[mid] == arr[mid + 1] then\n            return search(arr, 1, mid - 1)\n        else\n            return search(arr, mid + 1, n)\n        end\n    end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local low = 1\n  local high = #arr\n  local mid\n  while low <= high do\n    mid = math.floor((low + high) / 2)\n    if mid == 1 and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    end\n    if mid == #arr and arr[mid] ~= arr[mid - 1] then\n      return arr[mid]\n    end\n    if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    end\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    else\n      if mid % 2 == 0 then\n        high = mid - 1\n      else\n        low = mid + 1\n      end\n    end\n  end\nend",
    "    local low = 1\n    local high = #arr\n    local mid = math.floor((low + high) / 2)\n    while low < high do\n        if mid % 2 == 0 then\n            if arr[mid] == arr[mid + 1] then\n                low = mid + 2\n            else\n                high = mid\n            end\n        else\n            if arr[mid] == arr[mid - 1] then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        end\n        mid = math.floor((low + high) / 2)\n    end\n    return arr[low]\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[i]\nend",
    "    local low = 1\n    local high = #arr\n    local mid = 0\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 1 and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if mid == #arr and arr[mid] ~= arr[mid - 1] then\n            return arr[mid]\n        end\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "    local n = #arr\n    local i = 1\n    while i < n do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[n]\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i + 1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i + 1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "\tlocal low, high = 1, #arr\n\twhile low < high do\n\t\tlocal mid = math.floor((low + high) / 2)\n\t\tif mid % 2 == 0 then\n\t\t\tif arr[mid] == arr[mid + 1] then\n\t\t\t\tlow = mid + 2\n\t\t\telse\n\t\t\t\thigh = mid\n\t\t\tend\n\t\telse\n\t\t\tif arr[mid] == arr[mid - 1] then\n\t\t\t\tlow = mid + 1\n\t\t\telse\n\t\t\t\thigh = mid - 1\n\t\t\tend\n\t\tend\n\tend\n\treturn arr[low]\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i + 1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local n = #arr\n    local i = 1\n    while i <= n do\n        if i == n then\n            return arr[i]\n        end\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\nend",
    "    local low = 1\n    local high = #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 or mid == #arr then\n            return arr[mid]\n        end\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        else\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "\tlocal i = 1\n\twhile i <= #arr do\n\t\tif arr[i] == arr[i+1] then\n\t\t\ti = i + 2\n\t\telse\n\t\t\treturn arr[i]\n\t\tend\n\tend\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[i]\nend",
    "    local n = #arr\n    local i = 1\n    while i <= n do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return nil\nend",
    "    local low = 1\n    local high = #arr\n    local mid = math.floor((low + high) / 2)\n    while low < high do\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        else\n            return arr[mid]\n        end\n        mid = math.floor((low + high) / 2)\n    end\n    return arr[mid]\nend",
    "    local low = 1\n    local high = #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif mid == #arr and arr[mid] ~= arr[mid - 1] then\n            return arr[mid]\n        elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "    local n = #arr\n    local i = 0\n    while i < n do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local low = 1\n  local high = #arr\n  local mid = 0\n  while low <= high do\n    mid = math.floor((low + high) / 2)\n    if mid == 1 and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif mid == #arr and arr[mid] ~= arr[mid - 1] then\n      return arr[mid]\n    elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        high = mid - 1\n      else\n        low = mid + 1\n      end\n    end\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local low = 1\n    local high = #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if mid == #arr and arr[mid] ~= arr[mid - 1] then\n            return arr[mid]\n        end\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        else\n            if mid % 2 == 0 then\n                high = mid - 1\n            else\n                low = mid + 1\n            end\n        end\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local low = 1\n    local high = #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 then\n            if arr[mid] ~= arr[mid + 1] then\n                return arr[mid]\n            end\n        elseif mid == #arr then\n            if arr[mid] ~= arr[mid - 1] then\n                return arr[mid]\n            end\n        elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if mid % 2 == 0 then\n            if arr[mid] == arr[mid + 1] then\n                low = mid + 2\n            else\n                high = mid - 2\n            end\n        else\n            if arr[mid] == arr[mid - 1] then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "    local n = #arr\n    local i = 1\n    while i <= n do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local n = #arr\n  if n == 1 then\n    return arr[1]\n  end\n  local mid = math.floor(n/2)\n  if arr[mid] ~= arr[mid-1] and arr[mid] ~= arr[mid+1] then\n    return arr[mid]\n  end\n  if arr[mid] == arr[mid-1] then\n    if mid % 2 == 0 then\n      return search(arr, 1, mid-1)\n    else\n      return search(arr, mid+1, n)\n    end\n  else\n    if mid % 2 == 0 then\n      return search(arr, mid+1, n)\n    else\n      return search(arr, 1, mid-1)\n    end\n  end\nend",
    "  local i = 1\n  local j = #arr\n  while i < j do\n    local mid = math.floor((i + j) / 2)\n    if mid % 2 == 0 then\n      if arr[mid] == arr[mid + 1] then\n        i = mid + 2\n      else\n        j = mid\n      end\n    else\n      if arr[mid] == arr[mid - 1] then\n        i = mid + 1\n      else\n        j = mid - 1\n      end\n    end\n  end\n  return arr[i]\nend",
    "    local i = 1\n    while i < #arr do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\n    return arr[i]\nend",
    "    local low = 1\n    local high = #arr\n    local mid = 0\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 1 and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if mid == #arr and arr[mid] ~= arr[mid - 1] then\n            return arr[mid]\n        end\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                high = mid - 1\n            else\n                low = mid + 1\n            end\n        end\n    end\nend",
    "    local low = 1\n    local high = #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return nil\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] ~= arr[i-1] and arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 1\n    end\nend",
    "  local n = #arr\n  if n == 1 then\n    return arr[1]\n  end\n  local mid = math.floor(n/2)\n  if mid % 2 == 0 then\n    if arr[mid] == arr[mid+1] then\n      return search(arr, mid+2, n)\n    else\n      return search(arr, 1, mid)\n    end\n  else\n    if arr[mid] == arr[mid-1] then\n      return search(arr, mid+1, n)\n    else\n      return search(arr, 1, mid-1)\n    end\n  end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local i = 1\n    while i < #arr do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\n    return arr[#arr]\nend",
    "    local low, high = 1, #arr\n    while low < high do\n        local mid = math.floor((low + high) / 2)\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        else\n            return arr[mid]\n        end\n    end\n    return arr[low]\nend",
    "    local n = #arr\n    local i = 1\n    while i <= n do\n        if arr[i] == arr[i + 1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i + 1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local low = 1\n    local high = #arr\n    local mid = 0\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 1 and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if mid == #arr and arr[mid] ~= arr[mid - 1] then\n            return arr[mid]\n        end\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        else\n            if mid % 2 == 0 then\n                high = mid - 1\n            else\n                low = mid + 1\n            end\n        end\n    end\n    return -1\nend",
    "    local n = #arr\n    local i = 1\n    while i <= n do\n        if i == n then\n            return arr[i]\n        end\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[i]\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[i]\nend",
    "    local low = 1\n    local high = #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 then\n            if arr[mid] ~= arr[mid + 1] then\n                return arr[mid]\n            else\n                return arr[mid + 1]\n            end\n        elseif mid == #arr then\n            if arr[mid] ~= arr[mid - 1] then\n                return arr[mid]\n            else\n                return arr[mid - 1]\n            end\n        elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                high = mid - 1\n            else\n                low = mid + 1\n            end\n        end\n    end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "  local low = 1\n  local high = #arr\n  local mid = 0\n  while low <= high do\n    mid = math.floor((low + high) / 2)\n    if mid == 1 and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif mid == #arr and arr[mid] ~= arr[mid - 1] then\n      return arr[mid]\n    elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        high = mid - 2\n      else\n        low = mid + 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        low = mid + 2\n      else\n        high = mid - 1\n      end\n    end\n  end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local l = 1\n  local r = #arr\n  while l < r do\n    local m = math.floor((l + r) / 2)\n    if arr[m] == arr[m - 1] then\n      if m % 2 == 0 then\n        l = m + 1\n      else\n        r = m - 1\n      end\n    elseif arr[m] == arr[m + 1] then\n      if m % 2 == 0 then\n        r = m - 1\n      else\n        l = m + 1\n      end\n    else\n      return arr[m]\n    end\n  end\n  return arr[l]\nend",
    "    local low = 1\n    local high = #arr\n    local mid = math.floor((low + high) / 2)\n    while low < high do\n        if mid % 2 == 0 then\n            if arr[mid] == arr[mid + 1] then\n                low = mid + 2\n            elseif arr[mid] == arr[mid - 1] then\n                high = mid - 2\n            else\n                return arr[mid]\n            end\n        else\n            if arr[mid] == arr[mid + 1] then\n                high = mid - 1\n            elseif arr[mid] == arr[mid - 1] then\n                low = mid + 1\n            else\n                return arr[mid]\n            end\n        end\n        mid = math.floor((low + high) / 2)\n    end\n    return arr[low]\nend",
    "    local low = 1\n    local high = #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "\tlocal i = 1\n\twhile i <= #arr do\n\t\tif arr[i] == arr[i + 1] then\n\t\t\ti = i + 2\n\t\telse\n\t\t\treturn arr[i]\n\t\tend\n\tend\nend",
    "    local low = 1\n    local high = #arr\n    local mid\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if mid == 1 or mid == #arr then\n            return arr[mid]\n        end\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if (mid % 2 == 0 and arr[mid] == arr[mid + 1]) or (mid % 2 == 1 and arr[mid] == arr[mid - 1]) then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\nend",
    "    local low = 1\n    local high = #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif mid == #arr and arr[mid] ~= arr[mid - 1] then\n            return arr[mid]\n        elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[i]\nend",
    "    local low = 1\n    local high = #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[i]\nend",
    "  local low = 1\n  local high = #arr\n  local mid = math.floor((low + high) / 2)\n  while low < high do\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        high = mid - 2\n      else\n        low = mid + 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        low = mid + 2\n      else\n        high = mid - 1\n      end\n    else\n      return arr[mid]\n    end\n    mid = math.floor((low + high) / 2)\n  end\n  return arr[low]\nend",
    "  local low = 1\n  local high = #arr\n  local mid = 0\n  while low <= high do\n    mid = math.floor((low + high) / 2)\n    if mid == 1 and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    end\n    if mid == #arr and arr[mid] ~= arr[mid - 1] then\n      return arr[mid]\n    end\n    if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    end\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    else\n      if mid % 2 == 0 then\n        high = mid - 1\n      else\n        low = mid + 1\n      end\n    end\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local n = #arr\n  local i = 1\n  while i <= n do\n    if i == n then\n      return arr[i]\n    end\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend",
    "  local n = #arr\n  local i = 1\n  while i < n do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[n]\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return nil\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local n = #arr\n  local i = 1\n  while i <= n do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "    local low = 0\n    local high = #arr - 1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 0 or mid == #arr - 1 then\n            return arr[mid]\n        end\n        if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        end\n        if mid % 2 == 0 then\n            if arr[mid] == arr[mid + 1] then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        else\n            if arr[mid] == arr[mid - 1] then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend",
    "    local i = 1\n    while i < #arr do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\n    return arr[#arr]\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] ~= arr[i + 1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "  local low = 1\n  local high = #arr\n  local mid = math.floor((low + high) / 2)\n  while low < high do\n    if mid % 2 == 0 then\n      if arr[mid] == arr[mid + 1] then\n        low = mid + 2\n      else\n        high = mid\n      end\n    else\n      if arr[mid] == arr[mid - 1] then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    end\n    mid = math.floor((low + high) / 2)\n  end\n  return arr[mid]\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[i]\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local n = #arr\n    for i = 1, n do\n        if arr[i] ~= arr[i+1] and arr[i] ~= arr[i-1] then\n            return arr[i]\n        end\n    end\nend",
    "    local low = 1\n    local high = #arr\n    local mid = math.floor((low + high) / 2)\n    while low < high do\n        if mid % 2 == 0 then\n            if arr[mid] == arr[mid + 1] then\n                low = mid + 2\n            else\n                high = mid\n            end\n        else\n            if arr[mid] == arr[mid - 1] then\n                low = mid + 1\n            else\n                high = mid - 1\n            end\n        end\n        mid = math.floor((low + high) / 2)\n    end\n    return arr[low]\nend",
    "    local n = #arr\n    local i = 1\n    while i < n do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\n    return arr[n]\nend",
    "    local low = 1\n    local high = #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend"
  ]
}