{
  "name": "mbpp_438_count_bidirectional",
  "language": "lua",
  "prompt": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor _, test in ipairs(test_list) do\n\t\tif test.bidirectional then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhcfh7wp.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpkhcfh7wp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if v == w and i ~= j then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xl1z7k8.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp9xl1z7k8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, tup in ipairs(test_list) do\n        if tup[1] == tup[2] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2thma4b.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpc2thma4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvwy1e_o.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmptvwy1e_o.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0a7rq7y.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpg0a7rq7y.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t4u3umu.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2t4u3umu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, t in ipairs(test_list) do\n        if t.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl738zbff.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpl738zbff.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j]:reverse() then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyunct0gf.lua:6: attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpyunct0gf.lua:6: in local 'candidate'\n\t/tmp/tmpyunct0gf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n   local count = 0\n   for _, t in ipairs(test_list) do\n      local t1, t2 = t[1], t[2]\n      if t1[1] == t2[2] and t1[2] == t2[1] then\n         count = count + 1\n      end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp37tn61fr.lua:6: attempt to index a number value (local 't1')\nstack traceback:\n\t/tmp/tmp37tn61fr.lua:6: in local 'candidate'\n\t/tmp/tmp37tn61fr.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        local test_rev = {test[2], test[1]}\n        for j = 1, #test_list do\n            if test_list[j][1] == test_rev[1] and test_list[j][2] == test_rev[2] then\n                count = count + 1\n                break\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl86e_c5r.lua:20: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpl86e_c5r.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidds_er1.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpidds_er1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if i ~= j and v == w then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4blns1h.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmph4blns1h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor _, v in ipairs(test_list) do\n\t\tif v[1] == v[2] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wnrishs.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp9wnrishs.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n   local count = 0\n   for i = 1, #test_list do\n      for j = i+1, #test_list do\n         if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n            count = count + 1\n         end\n      end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpt628lc.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpnpt628lc.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzibnnjm.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwzibnnjm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if i ~= j and v == w then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4blns1h.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmph4blns1h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i, v in ipairs(test_list) do\n        if v[1] == v[2] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphewxawxz.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmphewxawxz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntjz_u4y.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpntjz_u4y.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[i] == test_list[j] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7py3dkxc.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp7py3dkxc.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkso4ljx.lua:16: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwkso4ljx.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j]:reverse() then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyunct0gf.lua:6: attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpyunct0gf.lua:6: in local 'candidate'\n\t/tmp/tmpyunct0gf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidds_er1.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpidds_er1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i=1,#test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsmdwx27.lua:16: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpzsmdwx27.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor i, v in ipairs(test_list) do\n\t\tfor j, w in ipairs(test_list) do\n\t\t\tif i ~= j and v == w then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkso4ljx.lua:16: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwkso4ljx.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    local t1 = test_list[i]\n    for j = i + 1, #test_list do\n      local t2 = test_list[j]\n      if t1[1] == t2[2] and t1[2] == t2[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpur8de21c.lua:21: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpur8de21c.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local test_tuple = test_list[i]\n        local test_tuple_rev = {test_tuple[2], test_tuple[1]}\n        for j = i + 1, #test_list do\n            if test_list[j][1] == test_tuple_rev[1] and\n               test_list[j][2] == test_tuple_rev[2] then\n                count = count + 1\n                break\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw732p6wq.lua:21: expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpw732p6wq.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if v == w and i ~= j then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjk4ty0w.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpqjk4ty0w.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    local t1 = test_list[i]\n    for j = i + 1, #test_list do\n      local t2 = test_list[j]\n      if t1[1] == t2[2] and t1[2] == t2[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpur8de21c.lua:21: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpur8de21c.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0a7rq7y.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpg0a7rq7y.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzibnnjm.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwzibnnjm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local a, b = test_list[i][1], test_list[i][2]\n        for j = 1, #test_list do\n            local c, d = test_list[j][1], test_list[j][2]\n            if a == c and b == d then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkda2p6gx.lua:19: expected: 3, actual: 8\nstack traceback:\n\t/tmp/tmpkda2p6gx.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzibnnjm.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwzibnnjm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp54w79e1.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpp54w79e1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphryd_3d3.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmphryd_3d3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzibnnjm.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwzibnnjm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t4u3umu.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2t4u3umu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvwy1e_o.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmptvwy1e_o.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxxwp6yf.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmplxxwp6yf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvwy1e_o.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmptvwy1e_o.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidds_er1.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpidds_er1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidds_er1.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpidds_er1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    local test = test_list[i]\n    local a, b = test[1], test[2]\n    if a and b and a[1] == b[2] and a[2] == b[1] then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnv5_m9ui.lua:7: attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpnv5_m9ui.lua:7: in local 'candidate'\n\t/tmp/tmpnv5_m9ui.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdi8poi_.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpwdi8poi_.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvwy1e_o.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmptvwy1e_o.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if v == w and i ~= j then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjk4ty0w.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpqjk4ty0w.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if i ~= j and v[1] == w[2] and v[2] == w[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqv0oj1e.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmppqv0oj1e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local t = test_list[i]\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpise6nzja.lua:16: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpise6nzja.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tlocal test_tuple = test_list[i]\n\t\tlocal test_tuple_rev = {test_tuple[2], test_tuple[1]}\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[j][1] == test_tuple_rev[1] and test_list[j][2] == test_tuple_rev[2] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89pffs02.lua:19: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmp89pffs02.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t4u3umu.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2t4u3umu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n   local count = 0\n   for _, test in ipairs(test_list) do\n      if test.bidirectional then\n         count = count + 1\n      end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmf7x9kl.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmprmf7x9kl.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if v[1] == w[2] and v[2] == w[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46bvpkgp.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmp46bvpkgp.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidds_er1.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpidds_er1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[3] and t[2] == t[4] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_0adg16.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp3_0adg16.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n   local count = 0\n   for i = 1, #test_list do\n      for j = i + 1, #test_list do\n         if test_list[i] == test_list[j]:reverse() then\n            count = count + 1\n         end\n      end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmuseiyoj.lua:6: attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpmuseiyoj.lua:6: in local 'candidate'\n\t/tmp/tmpmuseiyoj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdi8poi_.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpwdi8poi_.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local a = test_list[i]\n        for j = i + 1, #test_list do\n            local b = test_list[j]\n            if a[1] == b[2] and a[2] == b[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20ck88ev.lua:21: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp20ck88ev.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdi8poi_.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpwdi8poi_.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntjz_u4y.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpntjz_u4y.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidds_er1.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpidds_er1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor _, test in ipairs(test_list) do\n\t\tif test.bidirectional then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhcfh7wp.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpkhcfh7wp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzibnnjm.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwzibnnjm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j]:reverse() then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp07cvbg.lua:6: attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpbp07cvbg.lua:6: in local 'candidate'\n\t/tmp/tmpbp07cvbg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpav1uulph.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpav1uulph.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp54w79e1.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpp54w79e1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, t in ipairs(test_list) do\n    local a, b = t[1], t[2]\n    if a and b and a[1] == b[2] and a[2] == b[1] then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1qfzqzg5.lua:6: attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp1qfzqzg5.lua:6: in local 'candidate'\n\t/tmp/tmp1qfzqzg5.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    local a = test_list[i]\n    for j = i + 1, #test_list do\n      local b = test_list[j]\n      if a[1] == b[2] and a[2] == b[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25ma4h3u.lua:21: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp25ma4h3u.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t4u3umu.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2t4u3umu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzibnnjm.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwzibnnjm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvwy1e_o.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmptvwy1e_o.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkso4ljx.lua:16: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwkso4ljx.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if v[1] == w[2] and v[2] == w[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46bvpkgp.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmp46bvpkgp.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local t = test_list[i]\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpise6nzja.lua:16: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpise6nzja.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp54w79e1.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpp54w79e1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n   local count = 0\n   for i = 1, #test_list do\n      for j = i + 1, #test_list do\n         if test_list[i] == test_list[j]:reverse() then\n            count = count + 1\n         end\n      end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmuseiyoj.lua:6: attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpmuseiyoj.lua:6: in local 'candidate'\n\t/tmp/tmpmuseiyoj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i, v in ipairs(test_list) do\n        local a, b = v[1], v[2]\n        for j, w in ipairs(test_list) do\n            if i ~= j then\n                local c, d = w[1], w[2]\n                if a == d and b == c then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9au301r.lua:21: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpz9au301r.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local a = test_list[i]\n        for j = i + 1, #test_list do\n            local b = test_list[j]\n            if a[1] == b[2] and a[2] == b[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20ck88ev.lua:21: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp20ck88ev.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, t in ipairs(test_list) do\n    local a, b = t[1], t[2]\n    if a and b and a ~= b then\n      local a_b = a .. \"-\" .. b\n      local b_a = b .. \"-\" .. a\n      if not bidirectional_pairs[a_b] and not bidirectional_pairs[b_a] then\n        bidirectional_pairs[a_b] = true\n        bidirectional_pairs[b_a] = true\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxun8rnbr.lua:9: attempt to index a nil value (global 'bidirectional_pairs')\nstack traceback:\n\t/tmp/tmpxun8rnbr.lua:9: in local 'candidate'\n\t/tmp/tmpxun8rnbr.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvwy1e_o.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmptvwy1e_o.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvwy1e_o.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmptvwy1e_o.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntjz_u4y.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpntjz_u4y.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    local t = test_list[i]\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtojuarq.lua:16: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpdtojuarq.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and\n         test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjbk606a.lua:18: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpxjbk606a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0a7rq7y.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpg0a7rq7y.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpav1uulph.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpav1uulph.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp54w79e1.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpp54w79e1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidds_er1.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpidds_er1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i, t1 in ipairs(test_list) do\n        for j, t2 in ipairs(test_list) do\n            if i ~= j and t1[1] == t2[2] and t1[2] == t2[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpol2_gbez.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpol2_gbez.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntjz_u4y.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpntjz_u4y.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if v == w and i ~= j then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xl1z7k8.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp9xl1z7k8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp54w79e1.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpp54w79e1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0a7rq7y.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpg0a7rq7y.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if i ~= j and v == w then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4blns1h.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmph4blns1h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if v == w and i ~= j then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xl1z7k8.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp9xl1z7k8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if i ~= j then\n                if v == w.reverse then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5k_0jck.lua:19: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpe5k_0jck.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tlocal a = test_list[i]\n\t\tfor j = i + 1, #test_list do\n\t\t\tlocal b = test_list[j]\n\t\t\tif a[1] == b[2] and a[2] == b[1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuiqcmew5.lua:21: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpuiqcmew5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local t = test_list[i]\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpise6nzja.lua:16: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpise6nzja.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if v == w and i ~= j then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjk4ty0w.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpqjk4ty0w.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor _, test in ipairs(test_list) do\n\t\tif test.bidirectional then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhcfh7wp.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpkhcfh7wp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntjz_u4y.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpntjz_u4y.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[3] and t[2] == t[4] then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2ut3ox4.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmph2ut3ox4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local item = test_list[i]\n        if item[1] == item[2] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7n1umud.lua:16: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpf7n1umud.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    local t = test_list[i]\n    local t_rev = {t[2], t[1]}\n    for j = i + 1, #test_list do\n      if test_list[j][1] == t[2] and test_list[j][2] == t[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ul4jefk.lua:21: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp7ul4jefk.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i=1, #test_list do\n    local a, b = test_list[i][1], test_list[i][2]\n    if a ~= b then\n      for j=i+1, #test_list do\n        local c, d = test_list[j][1], test_list[j][2]\n        if a == d and b == c then\n          count = count + 1\n          break\n        end\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4yt61d5.lua:22: expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpz4yt61d5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local a = test_list[i]\n        for j = i + 1, #test_list do\n            local b = test_list[j]\n            if a[1] == b[2] and a[2] == b[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20ck88ev.lua:21: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp20ck88ev.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidds_er1.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpidds_er1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    local t1 = test_list[i]\n    for j = i + 1, #test_list do\n      local t2 = test_list[j]\n      if t1[1] == t2[2] and t1[2] == t2[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpur8de21c.lua:21: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpur8de21c.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if i ~= j and v == w then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7gt4uod.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpt7gt4uod.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j]:reverse() then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp07cvbg.lua:6: attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpbp07cvbg.lua:6: in local 'candidate'\n\t/tmp/tmpbp07cvbg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    local test = test_list[i]\n    local a, b = test[1], test[2]\n    if a ~= b and test_list[i][b] == a then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8czfvh6j.lua:17: expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp8czfvh6j.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local test_tuple = test_list[i]\n        local test_tuple_rev = {test_tuple[2], test_tuple[1]}\n        for j = 1, #test_list do\n            if test_list[j][1] == test_tuple_rev[1] and\n               test_list[j][2] == test_tuple_rev[2] then\n                count = count + 1\n                break\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09ht1gbg.lua:21: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp09ht1gbg.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkso4ljx.lua:16: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwkso4ljx.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n   local count = 0\n   for _, test in ipairs(test_list) do\n      if test.bidirectional then\n         count = count + 1\n      end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmf7x9kl.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmprmf7x9kl.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkso4ljx.lua:16: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwkso4ljx.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t4u3umu.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2t4u3umu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvwy1e_o.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmptvwy1e_o.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidds_er1.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpidds_er1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j]:reverse() then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp07cvbg.lua:6: attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpbp07cvbg.lua:6: in local 'candidate'\n\t/tmp/tmpbp07cvbg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpav1uulph.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpav1uulph.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if v == w and i ~= j then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjk4ty0w.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpqjk4ty0w.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidds_er1.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpidds_er1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntjz_u4y.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpntjz_u4y.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j]:reverse() then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp07cvbg.lua:6: attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpbp07cvbg.lua:6: in local 'candidate'\n\t/tmp/tmpbp07cvbg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0a7rq7y.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpg0a7rq7y.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, v in ipairs(test_list) do\n        if v.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp715pwp_r.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp715pwp_r.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidds_er1.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpidds_er1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdi8poi_.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpwdi8poi_.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j]:reverse() then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp07cvbg.lua:6: attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpbp07cvbg.lua:6: in local 'candidate'\n\t/tmp/tmpbp07cvbg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t4u3umu.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2t4u3umu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwftij.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2pdwftij.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor _, test in ipairs(test_list) do\n\t\tif test.bidirectional then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhcfh7wp.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpkhcfh7wp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local a = test_list[i]\n        for j = i + 1, #test_list do\n            local b = test_list[j]\n            if a[1] == b[2] and a[2] == b[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20ck88ev.lua:21: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp20ck88ev.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5pn_ikz.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpo5pn_ikz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkso4ljx.lua:16: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwkso4ljx.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if i ~= j and v == w then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7gt4uod.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpt7gt4uod.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp54w79e1.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpp54w79e1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j]:reverse() then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbp07cvbg.lua:6: attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpbp07cvbg.lua:6: in local 'candidate'\n\t/tmp/tmpbp07cvbg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j]:reverse() then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyunct0gf.lua:6: attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpyunct0gf.lua:6: in local 'candidate'\n\t/tmp/tmpyunct0gf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local test_tuple = test_list[i]\n        local test_tuple_rev = {test_tuple[2], test_tuple[1]}\n        for j = 1, #test_list do\n            if test_list[j][1] == test_tuple_rev[1] and test_list[j][2] == test_tuple_rev[2] then\n                count = count + 1\n                break\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_3vq73p.lua:20: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmph_3vq73p.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdi8poi_.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpwdi8poi_.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidds_er1.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpidds_er1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n   local count = 0\n   for i,v in ipairs(test_list) do\n      for j,w in ipairs(test_list) do\n         if i ~= j and v == w then\n            count = count + 1\n         end\n      end\n   end\n   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkyye9c7a.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpkyye9c7a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4k6zr6o.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpr4k6zr6o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if v[1] == w[2] and v[2] == w[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46bvpkgp.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmp46bvpkgp.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t4u3umu.lua:15: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp2t4u3umu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    local t1 = test_list[i]\n    for j = i + 1, #test_list do\n      local t2 = test_list[j]\n      if t1[1] == t2[2] and t1[2] == t2[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpur8de21c.lua:21: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpur8de21c.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidds_er1.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpidds_er1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkso4ljx.lua:16: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwkso4ljx.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpav1uulph.lua:17: expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpav1uulph.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0a7rq7y.lua:19: expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpg0a7rq7y.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzibnnjm.lua:17: expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpwzibnnjm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}