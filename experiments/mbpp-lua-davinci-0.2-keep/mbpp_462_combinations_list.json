{
  "name": "mbpp_462_combinations_list",
  "language": "lua",
  "prompt": "-- Write a function to find all possible combinations of the elements of a given list.\nlocal function combinations_list(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = combinations_list\n    lu.assertEquals(candidate({'orange', 'red', 'green', 'blue'}), {{}, {'orange'}, {'red'}, {'red', 'orange'}, {'green'}, {'green', 'orange'}, {'green', 'red'}, {'green', 'red', 'orange'}, {'blue'}, {'blue', 'orange'}, {'blue', 'red'}, {'blue', 'red', 'orange'}, {'blue', 'green'}, {'blue', 'green', 'orange'}, {'blue', 'green', 'red'}, {'blue', 'green', 'red', 'orange'}})\n    lu.assertEquals(candidate({'red', 'green', 'blue', 'white', 'black', 'orange'}), {{}, {'red'}, {'green'}, {'green', 'red'}, {'blue'}, {'blue', 'red'}, {'blue', 'green'}, {'blue', 'green', 'red'}, {'white'}, {'white', 'red'}, {'white', 'green'}, {'white', 'green', 'red'}, {'white', 'blue'}, {'white', 'blue', 'red'}, {'white', 'blue', 'green'}, {'white', 'blue', 'green', 'red'}, {'black'}, {'black', 'red'}, {'black', 'green'}, {'black', 'green', 'red'}, {'black', 'blue'}, {'black', 'blue', 'red'}, {'black', 'blue', 'green'}, {'black', 'blue', 'green', 'red'}, {'black', 'white'}, {'black', 'white', 'red'}, {'black', 'white', 'green'}, {'black', 'white', 'green', 'red'}, {'black', 'white', 'blue'}, {'black', 'white', 'blue', 'red'}, {'black', 'white', 'blue', 'green'}, {'black', 'white', 'blue', 'green', 'red'}, {'orange'}, {'orange', 'red'}, {'orange', 'green'}, {'orange', 'green', 'red'}, {'orange', 'blue'}, {'orange', 'blue', 'red'}, {'orange', 'blue', 'green'}, {'orange', 'blue', 'green', 'red'}, {'orange', 'white'}, {'orange', 'white', 'red'}, {'orange', 'white', 'green'}, {'orange', 'white', 'green', 'red'}, {'orange', 'white', 'blue'}, {'orange', 'white', 'blue', 'red'}, {'orange', 'white', 'blue', 'green'}, {'orange', 'white', 'blue', 'green', 'red'}, {'orange', 'black'}, {'orange', 'black', 'red'}, {'orange', 'black', 'green'}, {'orange', 'black', 'green', 'red'}, {'orange', 'black', 'blue'}, {'orange', 'black', 'blue', 'red'}, {'orange', 'black', 'blue', 'green'}, {'orange', 'black', 'blue', 'green', 'red'}, {'orange', 'black', 'white'}, {'orange', 'black', 'white', 'red'}, {'orange', 'black', 'white', 'green'}, {'orange', 'black', 'white', 'green', 'red'}, {'orange', 'black', 'white', 'blue'}, {'orange', 'black', 'white', 'blue', 'red'}, {'orange', 'black', 'white', 'blue', 'green'}, {'orange', 'black', 'white', 'blue', 'green', 'red'}})\n    lu.assertEquals(candidate({'red', 'green', 'black', 'orange'}), {{}, {'red'}, {'green'}, {'green', 'red'}, {'black'}, {'black', 'red'}, {'black', 'green'}, {'black', 'green', 'red'}, {'orange'}, {'orange', 'red'}, {'orange', 'green'}, {'orange', 'green', 'red'}, {'orange', 'black'}, {'orange', 'black', 'red'}, {'orange', 'black', 'green'}, {'orange', 'black', 'green', 'red'}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                table.insert(list2, {list1[i], list1[j]})\n            end\n        end\n    end\n    return list2\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i+1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "  local result = {}\n  local n = #list1\n  for i = 1, n do\n    for j = i+1, n do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "  local list2 = {}\n  for i=1,#list1 do\n    for j=1,#list1 do\n      if i ~= j then\n        table.insert(list2, {list1[i], list1[j]})\n      end\n    end\n  end\n  return list2\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "  local function combinations(list1, list2)\n    if #list1 == 0 then\n      return list2\n    else\n      local new_list2 = {}\n      for i = 1, #list2 do\n        for j = 1, #list1 do\n          table.insert(new_list2, list2[i] .. list1[j])\n        end\n      end\n      return combinations(table.remove(list1), new_list2)\n    end\n  end\n  return combinations(list1, {\"\"})\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        result[i] = {list1[i]}\n    end\n    for n = 2, #list1 do\n        local new_result = {}\n        for i = 1, #result do\n            for j = i + 1, #list1 do\n                new_result[#new_result + 1] = table.join(result[i], list1[j])\n            end\n        end\n        result = new_result\n    end\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n            return\n        end\n        helper(list2, i + 1)\n        helper(list2 .. list1:sub(i, i), i + 1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(list2, {list1[i], list1[j]})\n      end\n    end\n  end\n  return list2\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "  local list2 = {}\n  for i, v in ipairs(list1) do\n    for j, w in ipairs(list1) do\n      if i ~= j then\n        table.insert(list2, {v, w})\n      end\n    end\n  end\n  return list2\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                table.insert(result, {list1[i], list1[j]})\n            end\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            res[#res + 1] = {list1[i], list1[j]}\n        end\n    end\n    return res\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n            return\n        end\n        helper(list2, i + 1)\n        helper(list2 .. list1:sub(i, i), i + 1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      list2[#list2 + 1] = {list1[i], list1[j]}\n    end\n  end\n  return list2\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            result[#result + 1] = list2\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      list2[#list2 + 1] = {list1[i], list1[j]}\n    end\n  end\n  return list2\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(result, {list1[i], list1[j]})\n      end\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list1, i)\n        if i > n then\n            table.insert(result, list1)\n            return\n        end\n        helper(list1, i + 1)\n        local tmp = list1[i]\n        list1[i] = list1[1]\n        list1[1] = tmp\n        helper(list1, i + 1)\n    end\n    helper(list1, 1)\n    return result\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      list2[#list2 + 1] = {list1[i], list1[j]}\n    end\n  end\n  return list2\nend",
    "  local function combinations(list1, list2)\n    if #list1 == 0 then\n      return {list2}\n    else\n      local result = {}\n      for i = 1, #list1 do\n        local new_list1 = {}\n        local new_list2 = {}\n        for j = 1, #list1 do\n          if j ~= i then\n            table.insert(new_list1, list1[j])\n          end\n        end\n        for j = 1, #list2 do\n          table.insert(new_list2, list2[j])\n        end\n        table.insert(new_list2, list1[i])\n        for _, v in ipairs(combinations(new_list1, new_list2)) do\n          table.insert(result, v)\n        end\n      end\n      return result\n    end\n  end\n  return combinations(list1, {})\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "    local res = {}\n    local function helper(list1, list2)\n        if #list1 == 0 then\n            table.insert(res, list2)\n        else\n            for i, v in ipairs(list1) do\n                helper(table.slice(list1, i + 1), table.concat({list2, v}, ','))\n            end\n        end\n    end\n    helper(list1, '')\n    return res\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(arr, i)\n    if i > n then return end\n    -- insert combination (a copy of arr)\n    local t = {}\n    for j = 1, #arr do\n      t[j] = arr[j]\n    end\n    result[#result + 1] = t\n    for j = i, n do\n      arr[#arr + 1] = list1[j]\n      helper(arr, j + 1)\n      arr[#arr] = nil\n    end\n  end\n  helper({}, 1)\n  return result\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(list2, {list1[i], list1[j]})\n      end\n    end\n  end\n  return list2\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            list2[#list2 + 1] = {list1[i], list1[j]}\n        end\n    end\n    return list2\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(list2, {list1[i], list1[j]})\n      end\n    end\n  end\n  return list2\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                list2[#list2 + 1] = {list1[i], list1[j]}\n            end\n        end\n    end\n    return list2\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list1, list2, i)\n        if i > n then\n            table.insert(result, list2)\n            return\n        end\n        helper(list1, list2, i + 1)\n        helper(list1, list2 .. list1[i], i + 1)\n    end\n    helper(list1, \"\", 1)\n    return result\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tlocal function helper(arr, i)\n\t\tif i > n then return end\n\t\t-- insert combination (a copy of arr)\n\t\tlocal t = {}\n\t\tfor _, v in ipairs(arr) do\n\t\t\tt[#t+1] = v\n\t\tend\n\t\tresult[#result+1] = t\n\t\t-- generate combinations\n\t\tfor j = i, n do\n\t\t\tarr[#arr+1] = list1[j]\n\t\t\thelper(arr, j+1)\n\t\t\tarr[#arr] = nil\n\t\tend\n\tend\n\thelper({}, 1)\n\treturn result\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\ttable.insert(result, {list1[i], list1[j]})\n\t\tend\n\tend\n\treturn result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "    local res = {}\n    local function combinations(list1, list2)\n        if #list1 == 0 then\n            table.insert(res, list2)\n        else\n            for i, v in ipairs(list1) do\n                local new_list1 = {}\n                local new_list2 = {}\n                for j, w in ipairs(list1) do\n                    if j ~= i then\n                        table.insert(new_list1, w)\n                    end\n                end\n                for j, w in ipairs(list2) do\n                    table.insert(new_list2, w)\n                end\n                table.insert(new_list2, v)\n                combinations(new_list1, new_list2)\n            end\n        end\n    end\n    combinations(list1, {})\n    return res\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\ttable.insert(result, {list1[i], list1[j]})\n\t\tend\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1 do\n\t\t\tif i ~= j then\n\t\t\t\tlocal list3 = {}\n\t\t\t\tlist3[1] = list1[i]\n\t\t\t\tlist3[2] = list1[j]\n\t\t\t\tlist2[#list2 + 1] = list3\n\t\t\tend\n\t\tend\n\tend\n\treturn list2\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list2, i)\n    if i > n then\n      table.insert(result, list2)\n    else\n      helper(list2, i + 1)\n      helper(list.join(list2, list1[i]), i + 1)\n    end\n  end\n  helper({}, 1)\n  return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(list2, {list1[i], list1[j]})\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            list2[#list2 + 1] = {list1[i], list1[j]}\n        end\n    end\n    return list2\nend",
    "  local function combinations(list1, list2)\n    if #list1 == 0 then\n      return {list2}\n    else\n      local result = {}\n      for i = 1, #list1 do\n        local new_list1 = {}\n        local new_list2 = {}\n        for j = 1, #list1 do\n          if j ~= i then\n            table.insert(new_list1, list1[j])\n          end\n        end\n        for j = 1, #list2 do\n          table.insert(new_list2, list2[j])\n        end\n        table.insert(new_list2, list1[i])\n        local new_result = combinations(new_list1, new_list2)\n        for j = 1, #new_result do\n          table.insert(result, new_result[j])\n        end\n      end\n      return result\n    end\n  end\n  return combinations(list1, {})\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "\tlocal list2 = {}\n\tlocal list3 = {}\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1 do\n\t\t\tif list1[i] ~= list1[j] then\n\t\t\t\ttable.insert(list2, list1[i] .. list1[j])\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, #list2 do\n\t\tfor j = 1, #list2 do\n\t\t\tif list2[i] ~= list2[j] then\n\t\t\t\ttable.insert(list3, list2[i] .. list2[j])\n\t\t\tend\n\t\tend\n\tend\n\treturn list3\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(result, {list1[i], list1[j]})\n      end\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                table.insert(list2, {list1[i], list1[j]})\n            end\n        end\n    end\n    return list2\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                list2[#list2 + 1] = {list1[i], list1[j]}\n            end\n        end\n    end\n    return list2\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tfor i=1, n do\n\t\tfor j=i+1, n do\n\t\t\ttable.insert(result, {list1[i], list1[j]})\n\t\tend\n\tend\n\treturn result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i+1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tlocal function helper(list2, i)\n\t\tif i > n then\n\t\t\ttable.insert(result, list2)\n\t\telse\n\t\t\thelper(list2, i + 1)\n\t\t\thelper(list2 .. list1:sub(i, i), i + 1)\n\t\tend\n\tend\n\thelper(\"\", 1)\n\treturn result\nend",
    "  local list2 = {}\n  for i, v in ipairs(list1) do\n    for j, w in ipairs(list1) do\n      if i ~= j then\n        list2[#list2+1] = {v, w}\n      end\n    end\n  end\n  return list2\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\ttable.insert(result, {list1[i], list1[j]})\n\t\tend\n\tend\n\treturn result\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(list2, {list1[i], list1[j]})\n    end\n  end\n  return list2\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      result[#result + 1] = {list1[i], list1[j]}\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list, i)\n    if i > n then\n      table.insert(result, list)\n      return\n    end\n    helper(list, i + 1)\n    helper(list1[i] .. list, i + 1)\n  end\n  helper(\"\", 1)\n  return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list1, i)\n        if i > n then\n            table.insert(result, list1)\n        else\n            helper(list1, i + 1)\n            for j = i + 1, n do\n                list1[i], list1[j] = list1[j], list1[i]\n                helper(list1, i + 1)\n                list1[i], list1[j] = list1[j], list1[i]\n            end\n        end\n    end\n    helper(list1, 1)\n    return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(arr, start)\n        if start > n then\n            return\n        end\n        for i = start, n do\n            table.insert(arr, list1[i])\n            table.insert(result, copy(arr))\n            helper(arr, i + 1)\n            table.remove(arr)\n        end\n    end\n    helper({}, 1)\n    return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(list2, {list1[i], list1[j]})\n        end\n    end\n    return list2\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tlocal function helper(list2, i)\n\t\tif i > n then\n\t\t\ttable.insert(result, list2)\n\t\t\treturn\n\t\tend\n\t\thelper(list2, i + 1)\n\t\thelper(list2 .. list1:sub(i, i), i + 1)\n\tend\n\thelper(\"\", 1)\n\treturn result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    local function helper(list1, list2)\n        if #list1 == 0 then\n            table.insert(result, list2)\n        else\n            for i = 1, #list1 do\n                local new_list1 = {}\n                for j = 1, #list1 do\n                    if j ~= i then\n                        table.insert(new_list1, list1[j])\n                    end\n                end\n                local new_list2 = {}\n                for k = 1, #list2 do\n                    table.insert(new_list2, list2[k])\n                end\n                table.insert(new_list2, list1[i])\n                helper(new_list1, new_list2)\n            end\n        end\n    end\n    helper(list1, {})\n    return result\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list2, i)\n    if i > n then\n      table.insert(result, list2)\n    else\n      helper(list2, i + 1)\n      helper(list2 .. list1:sub(i, i), i + 1)\n    end\n  end\n  helper(\"\", 1)\n  return result\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tfor i=1, n do\n\t\tfor j=i+1, n do\n\t\t\ttable.insert(result, {list1[i], list1[j]})\n\t\tend\n\tend\n\treturn result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      result[#result + 1] = {list1[i], list1[j]}\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(result, {list1[i], list1[j]})\n      end\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i == n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n            return\n        end\n        helper(list2, i + 1)\n        helper(list2 .. list1:sub(i, i), i + 1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(list2, {list1[i], list1[j]})\n        end\n    end\n    return list2\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(list2, {list1[i], list1[j]})\n      end\n    end\n  end\n  return list2\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      list2[#list2 + 1] = {list1[i], list1[j]}\n    end\n  end\n  return list2\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tfor i = 1, n do\n\t\tfor j = i+1, n do\n\t\t\ttable.insert(result, {list1[i], list1[j]})\n\t\tend\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(list2, {list1[i], list1[j]})\n        end\n    end\n    return list2\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n            return\n        end\n        helper(list2, i + 1)\n        helper(list2 .. list1:sub(i, i), i + 1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tlocal function f(list1, i)\n\t\tif i > n then\n\t\t\ttable.insert(result, list1)\n\t\t\treturn\n\t\tend\n\t\tf(list1, i + 1)\n\t\tlocal list2 = {}\n\t\tfor j = 1, i - 1 do\n\t\t\ttable.insert(list2, list1[j])\n\t\tend\n\t\tfor j = i + 1, n do\n\t\t\ttable.insert(list2, list1[j])\n\t\tend\n\t\tf(list2, i)\n\tend\n\tf(list1, 1)\n\treturn result\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlist2[#list2 + 1] = {list1[i], list1[j]}\n\t\tend\n\tend\n\treturn list2\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local function helper(list1, list2)\n        if #list1 == 0 then\n            table.insert(result, list2)\n        else\n            for i = 1, #list1 do\n                helper(list_remove(list1, i), list_append(list2, list1[i]))\n            end\n        end\n    end\n    helper(list1, {})\n    return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            list2[#list2 + 1] = {list1[i], list1[j]}\n        end\n    end\n    return list2\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list2, i)\n    if i > n then\n      table.insert(result, list2)\n      return\n    end\n    helper(list2, i + 1)\n    helper(list2 .. list1:sub(i, i), i + 1)\n  end\n  helper(\"\", 1)\n  return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(list2, {list1[i], list1[j]})\n        end\n    end\n    return list2\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list2, i)\n    if i > n then\n      table.insert(result, list2)\n    else\n      helper(list2, i + 1)\n      helper(list2 .. list1:sub(i, i), i + 1)\n    end\n  end\n  helper(\"\", 1)\n  return result\nend",
    "    local function combinations(list1, list2)\n        local result = {}\n        for i = 1, #list1 do\n            for j = 1, #list2 do\n                table.insert(result, list1[i] .. list2[j])\n            end\n        end\n        return result\n    end\n    local result = {}\n    for i = 1, #list1 do\n        table.insert(result, list1[i])\n    end\n    for i = 2, #list1 do\n        result = combinations(result, list1)\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(result, {list1[i], list1[j]})\n      end\n    end\n  end\n  return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                table.insert(list2, {list1[i], list1[j]})\n            end\n        end\n    end\n    return list2\nend",
    "  local list2 = {}\n  for i, v in ipairs(list1) do\n    for j, w in ipairs(list1) do\n      if i ~= j then\n        table.insert(list2, {v, w})\n      end\n    end\n  end\n  return list2\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tfor i=1, n do\n\t\tfor j=i+1, n do\n\t\t\ttable.insert(result, {list1[i], list1[j]})\n\t\tend\n\tend\n\treturn result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                table.insert(list2, {list1[i], list1[j]})\n            end\n        end\n    end\n    return list2\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tlocal function helper(list2, i)\n\t\tif i > n then\n\t\t\ttable.insert(result, list2)\n\t\telse\n\t\t\thelper(list2, i + 1)\n\t\t\thelper(list2 .. list1:sub(i, i), i + 1)\n\t\tend\n\tend\n\thelper(\"\", 1)\n\treturn result\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tlocal function helper(list2, i)\n\t\tif i > n then\n\t\t\ttable.insert(result, list2)\n\t\telse\n\t\t\thelper(list2, i + 1)\n\t\t\thelper(list2 .. list1:sub(i, i), i + 1)\n\t\tend\n\tend\n\thelper(\"\", 1)\n\treturn result\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\ttable.insert(result, {list1[i], list1[j]})\n\t\tend\n\tend\n\treturn result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n            return\n        end\n        helper(list2, i + 1)\n        helper(list2 .. list1:sub(i, i), i + 1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n            return\n        end\n        helper(list2, i+1)\n        helper(list2..list1:sub(i,i), i+1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list1, i)\n    if i > n then\n      table.insert(result, list1)\n    else\n      helper(list1, i + 1)\n      for j = i + 1, n do\n        list1[i], list1[j] = list1[j], list1[i]\n        helper(list1, i + 1)\n        list1[i], list1[j] = list1[j], list1[i]\n      end\n    end\n  end\n  helper(list1, 1)\n  return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(result, {list1[i], list1[j]})\n      end\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i == n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tfor i=1, n do\n\t\tfor j=i+1, n do\n\t\t\tresult[#result+1] = {list1[i], list1[j]}\n\t\tend\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n            return\n        end\n        helper(list2, i + 1)\n        helper(list2 .. list1:sub(i, i), i + 1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\ttable.insert(list2, {list1[i], list1[j]})\n\t\tend\n\tend\n\treturn list2\nend",
    "    local function combinations(list1, list2)\n        if #list1 == 0 then\n            return list2\n        else\n            local result = {}\n            for i, v in ipairs(list2) do\n                table.insert(result, v)\n                table.insert(result, v .. list1[1])\n            end\n            return combinations(table.slice(list1, 2), result)\n        end\n    end\n    return combinations(list1, {''})\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n            return\n        end\n        helper(list2, i + 1)\n        helper(list2 .. list1:sub(i, i), i + 1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list, i)\n        if i > n then\n            table.insert(result, list)\n            return\n        end\n        helper(list, i + 1)\n        helper(list1[i] .. list, i + 1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list2, i)\n    if i > n then\n      table.insert(result, list2)\n      return\n    end\n    helper(list2, i + 1)\n    helper(list2 .. list1[i], i + 1)\n  end\n  helper(\"\", 1)\n  return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(arr, start)\n        if start == n then\n            table.insert(result, arr)\n            return\n        end\n        for i = start, n do\n            local new_arr = copy_table(arr)\n            table.insert(new_arr, list1[i])\n            helper(new_arr, i + 1)\n        end\n    end\n    helper({}, 1)\n    return result\nend",
    "  local res = {}\n  for i = 1, #list1 do\n    local list2 = combinations_list(list1, i)\n    for j = 1, #list2 do\n      res[#res + 1] = list2[j]\n    end\n  end\n  return res\nend",
    "    local result = {}\n    local function combinations(list1, list2)\n        if #list1 == 0 then\n            table.insert(result, list2)\n        else\n            for i = 1, #list1 do\n                local new_list2 = table.copy(list2)\n                table.insert(new_list2, list1[i])\n                local new_list1 = table.copy(list1)\n                table.remove(new_list1, i)\n                combinations(new_list1, new_list2)\n            end\n        end\n    end\n    combinations(list1, {})\n    return result\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list2, i)\n    if i > n then\n      table.insert(result, list2)\n      return\n    end\n    helper(list2, i + 1)\n    helper(list2 .. list1[i], i + 1)\n  end\n  helper(\"\", 1)\n  return result\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      list2[#list2 + 1] = {list1[i], list1[j]}\n    end\n  end\n  return list2\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(arr, i)\n        if i > n then return end\n        -- insert combination (a copy of arr)\n        local t = {}\n        for j = 1, #arr do\n            t[j] = arr[j]\n        end\n        table.insert(result, t)\n        for j = i, n do\n            arr[#arr+1] = list1[j]\n            helper(arr, j+1)\n            arr[#arr] = nil\n        end\n    end\n    helper({}, 1)\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(arr, start)\n        if start > n then return end\n        -- insert the sub-list\n        table.insert(result, arr)\n        for i = start, n do\n            helper(arr..list1[i], i+1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            result[#result + 1] = {list1[i], list1[j]}\n        end\n    end\n    return result\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\ttable.insert(result, {list1[i], list1[j]})\n\t\tend\n\tend\n\treturn result\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list1, list2, i)\n    if i > n then\n      table.insert(result, list2)\n    else\n      helper(list1, list2, i + 1)\n      helper(list1, list2 .. list1[i], i + 1)\n    end\n  end\n  helper(list1, \"\", 1)\n  return result\nend",
    "  local result = {}\n  for i, v in ipairs(list1) do\n    for j, w in ipairs(list1) do\n      if i ~= j then\n        table.insert(result, {v, w})\n      end\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(arr, i)\n        if i > n then\n            table.insert(result, arr)\n            return\n        end\n        helper(arr, i + 1)\n        helper(arr .. list1[i], i + 1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1 do\n\t\t\tif i ~= j then\n\t\t\t\ttable.insert(list2, {list1[i], list1[j]})\n\t\t\tend\n\t\tend\n\tend\n\treturn list2\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(arr, i)\n        if i > n then\n            table.insert(result, arr)\n            return\n        end\n        helper(arr, i + 1)\n        helper(arr .. list1[i], i + 1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "\tlocal function combinations(list1, list2)\n\t\tif #list1 == 0 then\n\t\t\treturn list2\n\t\telse\n\t\t\tlocal new_list = {}\n\t\t\tfor i = 1, #list2 do\n\t\t\t\ttable.insert(new_list, list2[i] .. list1[1])\n\t\t\tend\n\t\t\tfor i = 1, #list2 do\n\t\t\t\ttable.insert(new_list, list2[i])\n\t\t\tend\n\t\t\treturn combinations(table.slice(list1, 2), new_list)\n\t\tend\n\tend\n\treturn combinations(list1, {\"\"})\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "\tlocal result = {}\n\tlocal function combinations(list1, list2)\n\t\tif #list1 == 0 then\n\t\t\ttable.insert(result, list2)\n\t\telse\n\t\t\tfor i = 1, #list1 do\n\t\t\t\tlocal new_list2 = table.copy(list2)\n\t\t\t\ttable.insert(new_list2, list1[i])\n\t\t\t\tlocal new_list1 = table.copy(list1)\n\t\t\t\ttable.remove(new_list1, i)\n\t\t\t\tcombinations(new_list1, new_list2)\n\t\t\tend\n\t\tend\n\tend\n\tcombinations(list1, {})\n\treturn result\nend",
    "  local result = {}\n  for i, v in ipairs(list1) do\n    for j, w in ipairs(list1) do\n      if i ~= j then\n        table.insert(result, {v, w})\n      end\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                table.insert(list2, {list1[i], list1[j]})\n            end\n        end\n    end\n    return list2\nend",
    "\tlocal list2 = {}\n\tlocal list3 = {}\n\tlocal list4 = {}\n\tlocal list5 = {}\n\tlocal list6 = {}\n\tlocal list7 = {}\n\tlocal list8 = {}\n\tlocal list9 = {}\n\tlocal list10 = {}\n\tlocal list11 = {}\n\tlocal list12 = {}\n\tlocal list13 = {}\n\tlocal list14 = {}\n\tlocal list15 = {}\n\tlocal list16 = {}\n\tlocal list17 = {}\n\tlocal list18 = {}\n\tlocal list19 = {}\n\tlocal list20 = {}\n\tlocal list21 = {}\n\tlocal list22 = {}\n\tlocal list23 = {}\n\tlocal list24 = {}\n\tlocal list25 = {}\n\tlocal list26 = {}\n\tlocal list27 = {}\n\tlocal list28 = {}\n\tlocal list29 = {}\n\tlocal list30 = {}\n\tlocal list31 = {}\n\tlocal list32 = {}\n\tlocal list33 = {}\n\tlocal list34 = {}\n\tlocal list35 = {}\n\tlocal list36 = {}\n\tlocal list37 = {}\n\tlocal list38 = {}\n\tlocal list39 = {}\n\tlocal list40 = {}\n\tlocal list41 = {}\n\tlocal list42 = {}\n\tlocal list43 = {}\n\tlocal list44 = {}\n\tlocal list45 = {}\n\tlocal list46 = {}\n\tlocal list47 = {}\n\tlocal list48 = {}\n\tlocal list49 = {}\n\tlocal list50 = {}\n\tlocal list51 = {}\n\tlocal list52 = {}\n\tlocal list53 = {}\n\tlocal list54 = {}\n\tlocal list55 = {}\n\tlocal list56 = {}\n\tlocal list57 = {}\n\tlocal list58 = {}\n\tlocal list59 = {}\n\tlocal list60 = {}\n\tlocal list61 = {}\n\tlocal list62 = {}\n\tlocal list63 = {}\n\tlocal list64 = {}\n\tlocal list65 = {}\n\tlocal list66 = {}\n\tlocal list67 = {}\n\tlocal list68 = {}\n\tlocal list69 = {}\n\tlocal list70 = {}\n\tlocal list71 = {}\n\tlocal list72 = {}\n\tlocal list73 = {}\n\tlocal list74 = {}\n",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1 do\n\t\t\tif i ~= j then\n\t\t\t\ttable.insert(result, {list1[i], list1[j]})\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                list2[#list2 + 1] = {list1[i], list1[j]}\n            end\n        end\n    end\n    return list2\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(list2, {list1[i], list1[j]})\n      end\n    end\n  end\n  return list2\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list2, i)\n    if i > n then\n      table.insert(result, list2)\n      return\n    end\n    helper(list2, i + 1)\n    helper(list2 .. list1:sub(i, i), i + 1)\n  end\n  helper(\"\", 1)\n  return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local list2 = {}\n    for i=1,#list1 do\n        for j=1,#list1 do\n            if i ~= j then\n                list2[#list2+1] = {list1[i], list1[j]}\n            end\n        end\n    end\n    return list2\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(arr, start)\n        if start > n then return end\n        for i = start, n do\n            local t = copy_table(arr)\n            table.insert(t, list1[i])\n            table.insert(result, t)\n            helper(t, i + 1)\n        end\n    end\n    helper({}, 1)\n    return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list, i)\n    if i > n then\n      result[#result+1] = list\n    else\n      helper(list, i+1)\n      helper(list..list1[i], i+1)\n    end\n  end\n  helper(\"\", 1)\n  return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            list2[#list2 + 1] = {list1[i], list1[j]}\n        end\n    end\n    return list2\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        result[#result + 1] = {list1[i], list1[j]}\n      end\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      result[#result + 1] = {list1[i], list1[j]}\n    end\n  end\n  return result\nend",
    "    local function combinations(list1, list2)\n        if #list1 == 0 then\n            return {list2}\n        else\n            local result = {}\n            for i = 1, #list1 do\n                local new_list1 = {}\n                for j = 1, #list1 do\n                    if j ~= i then\n                        table.insert(new_list1, list1[j])\n                    end\n                end\n                local new_list2 = {}\n                for j = 1, #list2 do\n                    table.insert(new_list2, list2[j])\n                end\n                table.insert(new_list2, list1[i])\n                for j = 1, #combinations(new_list1, new_list2) do\n                    table.insert(result, combinations(new_list1, new_list2)[j])\n                end\n            end\n            return result\n        end\n    end\n    return combinations(list1, {})\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\ttable.insert(result, {list1[i], list1[j]})\n\t\tend\n\tend\n\treturn result\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      list2[#list2 + 1] = {list1[i], list1[j]}\n    end\n  end\n  return list2\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list2, i)\n    if i > n then\n      table.insert(result, list2)\n      return\n    end\n    helper(list2, i + 1)\n    helper(list2 .. list1[i], i + 1)\n  end\n  helper(\"\", 1)\n  return result\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list2, i)\n    if i > n then\n      table.insert(result, list2)\n    else\n      helper(list2, i + 1)\n      helper(list.join(list2, list1[i]), i + 1)\n    end\n  end\n  helper({}, 1)\n  return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(list2, {list1[i], list1[j]})\n        end\n    end\n    return list2\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(list2, {list1[i], list1[j]})\n      end\n    end\n  end\n  return list2\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(arr, i)\n    if i > n then return end\n    -- insert combination (a copy of arr)\n    table.insert(result, {table.unpack(arr)})\n    for j = i, n do\n      -- add element list1[j] to current combination\n      arr[#arr+1] = list1[j]\n      -- generate all other combinations that contain list1[j]\n      helper(arr, j+1)\n      -- remove list1[j] from combination\n      arr[#arr] = nil\n    end\n  end\n  helper({}, 1)\n  return result\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list, i)\n    if i == n then\n      result[#result + 1] = list\n    else\n      helper(list, i + 1)\n      helper(list1[i] .. list, i + 1)\n    end\n  end\n  helper(\"\", 1)\n  return result\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(list2, {list1[i], list1[j]})\n      end\n    end\n  end\n  return list2\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1 do\n\t\t\tif i ~= j then\n\t\t\t\ttable.insert(list2, {list1[i], list1[j]})\n\t\t\tend\n\t\tend\n\tend\n\treturn list2\nend",
    "  local function combinations(list1, list2)\n    if #list1 == 0 then\n      return {list2}\n    else\n      local result = {}\n      for i = 1, #list1 do\n        local new_list = {}\n        for j = 1, #list1 do\n          if j ~= i then\n            table.insert(new_list, list1[j])\n          end\n        end\n        for _, v in ipairs(combinations(new_list, list2)) do\n          table.insert(result, v)\n        end\n      end\n      return result\n    end\n  end\n  return combinations(list1, {})\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list2, i)\n    if i > n then\n      table.insert(result, list2)\n      return\n    end\n    helper(list2, i + 1)\n    helper(list2 .. list1:sub(i, i), i + 1)\n  end\n  helper(\"\", 1)\n  return result\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      list2[#list2 + 1] = {list1[i], list1[j]}\n    end\n  end\n  return list2\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(result, {list1[i], list1[j]})\n      end\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "    local function combinations(list1, list2)\n        if #list1 == 0 then\n            return list2\n        else\n            local new_list2 = {}\n            for _, v1 in ipairs(list1) do\n                for _, v2 in ipairs(list2) do\n                    new_list2[#new_list2 + 1] = v2 .. v1\n                end\n            end\n            return combinations(table.remove(list1, 1), new_list2)\n        end\n    end\n    return combinations(list1, {\"\"})\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      list2[#list2 + 1] = {list1[i], list1[j]}\n    end\n  end\n  return list2\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list2, i)\n    if i > n then\n      table.insert(result, list2)\n    else\n      helper(list2, i + 1)\n      helper(list.join(list2, list1[i]), i + 1)\n    end\n  end\n  helper({}, 1)\n  return result\nend",
    "\tlocal result = {}\n\tlocal n = #list1\n\tlocal function helper(list1, list2, i)\n\t\tif i > n then\n\t\t\ttable.insert(result, list2)\n\t\telse\n\t\t\thelper(list1, list2, i + 1)\n\t\t\thelper(list1, list2 .. list1[i], i + 1)\n\t\tend\n\tend\n\thelper(list1, \"\", 1)\n\treturn result\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tlocal a = list1[i]\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal b = list1[j]\n\t\t\tresult[#result + 1] = {a, b}\n\t\tend\n\tend\n\treturn result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n            return\n        end\n        helper(list2, i + 1)\n        helper(list2 .. list1[i], i + 1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      list2[#list2 + 1] = {list1[i], list1[j]}\n    end\n  end\n  return list2\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\ttable.insert(result, {list1[i], list1[j]})\n\t\tend\n\tend\n\treturn result\nend",
    "    local function combinations(list1, list2)\n        if #list1 == 0 then\n            return {list2}\n        else\n            local result = {}\n            for i, v in ipairs(list1) do\n                for _, w in ipairs(combinations(remove_element(list1, i), list2)) do\n                    table.insert(result, {v, unpack(w)})\n                end\n            end\n            return result\n        end\n    end\n    return combinations(list1, {})\nend",
    "  local list2 = {}\n  for i=1,#list1 do\n    for j=1,#list1 do\n      if i ~= j then\n        list2[#list2+1] = {list1[i], list1[j]}\n      end\n    end\n  end\n  return list2\nend",
    "    local result = {}\n    local n = #list1\n    for i=1,n do\n        local a = list1[i]\n        for j=i+1,n do\n            local b = list1[j]\n            result[#result+1] = {a,b}\n        end\n    end\n    return result\nend",
    "  local result = {}\n  local function combinations(list1, list2)\n    if #list1 == 0 then\n      table.insert(result, list2)\n    else\n      for i = 1, #list1 do\n        local new_list2 = {}\n        for j = 1, #list2 do\n          table.insert(new_list2, list2[j])\n        end\n        table.insert(new_list2, list1[i])\n        local new_list1 = {}\n        for j = 1, #list1 do\n          if j ~= i then\n            table.insert(new_list1, list1[j])\n          end\n        end\n        combinations(new_list1, new_list2)\n      end\n    end\n  end\n  combinations(list1, {})\n  return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i == n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list2, i)\n    if i > n then\n      table.insert(result, list2)\n    else\n      helper(list2, i + 1)\n      helper(list2 .. list1:sub(i, i), i + 1)\n    end\n  end\n  helper(\"\", 1)\n  return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(arr, i)\n        if i > n then return end\n        -- insert combination (a copy)\n        table.insert(result, table.move(arr, 1, #arr, 1, {}))\n        for j = i, n do\n            arr[#arr+1] = list1[j]\n            helper(arr, j+1)\n            arr[#arr] = nil\n        end\n    end\n    helper({}, 1)\n    return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    local a = list1[i]\n    for j = i + 1, #list1 do\n      local b = list1[j]\n      result[#result + 1] = { a, b }\n    end\n  end\n  return result\nend",
    "  local result = {}\n  local n = #list1\n  local function helper(list2, i)\n    if i > n then\n      table.insert(result, list2)\n      return\n    end\n    helper(list2, i + 1)\n    helper(list2 .. list1:sub(i, i), i + 1)\n  end\n  helper(\"\", 1)\n  return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            list2[#list2 + 1] = {list1[i], list1[j]}\n        end\n    end\n    return list2\nend"
  ]
}