{
  "name": "mbpp_462_combinations_list",
  "language": "lua",
  "prompt": "-- Write a function to find all possible combinations of the elements of a given list.\nlocal function combinations_list(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = combinations_list\n    lu.assertEquals(candidate({'orange', 'red', 'green', 'blue'}), {{}, {'orange'}, {'red'}, {'red', 'orange'}, {'green'}, {'green', 'orange'}, {'green', 'red'}, {'green', 'red', 'orange'}, {'blue'}, {'blue', 'orange'}, {'blue', 'red'}, {'blue', 'red', 'orange'}, {'blue', 'green'}, {'blue', 'green', 'orange'}, {'blue', 'green', 'red'}, {'blue', 'green', 'red', 'orange'}})\n    lu.assertEquals(candidate({'red', 'green', 'blue', 'white', 'black', 'orange'}), {{}, {'red'}, {'green'}, {'green', 'red'}, {'blue'}, {'blue', 'red'}, {'blue', 'green'}, {'blue', 'green', 'red'}, {'white'}, {'white', 'red'}, {'white', 'green'}, {'white', 'green', 'red'}, {'white', 'blue'}, {'white', 'blue', 'red'}, {'white', 'blue', 'green'}, {'white', 'blue', 'green', 'red'}, {'black'}, {'black', 'red'}, {'black', 'green'}, {'black', 'green', 'red'}, {'black', 'blue'}, {'black', 'blue', 'red'}, {'black', 'blue', 'green'}, {'black', 'blue', 'green', 'red'}, {'black', 'white'}, {'black', 'white', 'red'}, {'black', 'white', 'green'}, {'black', 'white', 'green', 'red'}, {'black', 'white', 'blue'}, {'black', 'white', 'blue', 'red'}, {'black', 'white', 'blue', 'green'}, {'black', 'white', 'blue', 'green', 'red'}, {'orange'}, {'orange', 'red'}, {'orange', 'green'}, {'orange', 'green', 'red'}, {'orange', 'blue'}, {'orange', 'blue', 'red'}, {'orange', 'blue', 'green'}, {'orange', 'blue', 'green', 'red'}, {'orange', 'white'}, {'orange', 'white', 'red'}, {'orange', 'white', 'green'}, {'orange', 'white', 'green', 'red'}, {'orange', 'white', 'blue'}, {'orange', 'white', 'blue', 'red'}, {'orange', 'white', 'blue', 'green'}, {'orange', 'white', 'blue', 'green', 'red'}, {'orange', 'black'}, {'orange', 'black', 'red'}, {'orange', 'black', 'green'}, {'orange', 'black', 'green', 'red'}, {'orange', 'black', 'blue'}, {'orange', 'black', 'blue', 'red'}, {'orange', 'black', 'blue', 'green'}, {'orange', 'black', 'blue', 'green', 'red'}, {'orange', 'black', 'white'}, {'orange', 'black', 'white', 'red'}, {'orange', 'black', 'white', 'green'}, {'orange', 'black', 'white', 'green', 'red'}, {'orange', 'black', 'white', 'blue'}, {'orange', 'black', 'white', 'blue', 'red'}, {'orange', 'black', 'white', 'blue', 'green'}, {'orange', 'black', 'white', 'blue', 'green', 'red'}})\n    lu.assertEquals(candidate({'red', 'green', 'black', 'orange'}), {{}, {'red'}, {'green'}, {'green', 'red'}, {'black'}, {'black', 'red'}, {'black', 'green'}, {'black', 'green', 'red'}, {'orange'}, {'orange', 'red'}, {'orange', 'green'}, {'orange', 'green', 'red'}, {'orange', 'black'}, {'orange', 'black', 'red'}, {'orange', 'black', 'green'}, {'orange', 'black', 'green', 'red'}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local list2 = {}\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                table.insert(list2, {list1[i], list1[j]})\n            end\n        end\n    end\n    return list2\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i+1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "  local result = {}\n  local n = #list1\n  for i = 1, n do\n    for j = i+1, n do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "  local list2 = {}\n  for i=1,#list1 do\n    for j=1,#list1 do\n      if i ~= j then\n        table.insert(list2, {list1[i], list1[j]})\n      end\n    end\n  end\n  return list2\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "  local function combinations(list1, list2)\n    if #list1 == 0 then\n      return list2\n    else\n      local new_list2 = {}\n      for i = 1, #list2 do\n        for j = 1, #list1 do\n          table.insert(new_list2, list2[i] .. list1[j])\n        end\n      end\n      return combinations(table.remove(list1), new_list2)\n    end\n  end\n  return combinations(list1, {\"\"})\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        result[i] = {list1[i]}\n    end\n    for n = 2, #list1 do\n        local new_result = {}\n        for i = 1, #result do\n            for j = i + 1, #list1 do\n                new_result[#new_result + 1] = table.join(result[i], list1[j])\n            end\n        end\n        result = new_result\n    end\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n            return\n        end\n        helper(list2, i + 1)\n        helper(list2 .. list1:sub(i, i), i + 1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            table.insert(result, {list1[i], list1[j]})\n        end\n    end\n    return result\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        table.insert(list2, {list1[i], list1[j]})\n      end\n    end\n  end\n  return list2\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "  local list2 = {}\n  for i, v in ipairs(list1) do\n    for j, w in ipairs(list1) do\n      if i ~= j then\n        table.insert(list2, {v, w})\n      end\n    end\n  end\n  return list2\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      table.insert(result, {list1[i], list1[j]})\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                table.insert(result, {list1[i], list1[j]})\n            end\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            res[#res + 1] = {list1[i], list1[j]}\n        end\n    end\n    return res\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n        else\n            helper(list2, i + 1)\n            helper(list2 .. list1:sub(i, i), i + 1)\n        end\n    end\n    helper(\"\", 1)\n    return result\nend",
    "    local result = {}\n    local n = #list1\n    local function helper(list2, i)\n        if i > n then\n            table.insert(result, list2)\n            return\n        end\n        helper(list2, i + 1)\n        helper(list2 .. list1:sub(i, i), i + 1)\n    end\n    helper(\"\", 1)\n    return result\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      list2[#list2 + 1] = {list1[i], list1[j]}\n    end\n  end\n  return list2\nend"
  ]
}