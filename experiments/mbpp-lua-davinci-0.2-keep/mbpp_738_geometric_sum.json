{
  "name": "mbpp_738_geometric_sum",
  "language": "lua",
  "prompt": "-- Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\nlocal function geometric_sum(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = geometric_sum\n    lu.assertEquals(candidate(7), 1.9921875)\n    lu.assertEquals(candidate(4), 1.9375)\n    lu.assertEquals(candidate(8), 1.99609375)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tif n == 1 then\n\t\treturn 1\n\telse\n\t\treturn 1 / (2 ^ n) + geometric_sum(n - 1)\n\tend\nend",
    "  if n == 0 then\n    return 1\n  else\n    return 1 / (2 ^ n) + geometric_sum(n - 1)\n  end\nend",
    "    if n < 0 then\n        return 0\n    elseif n == 0 then\n        return 1\n    else\n        return 1 / (2 ^ n) + geometric_sum(n - 1)\n    end\nend",
    "  if n == 0 then\n    return 1\n  else\n    return 1 / 2 ^ n + geometric_sum(n - 1)\n  end\nend",
    "  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n    return 1 / (2 ^ n) + geometric_sum(n - 1)\n  end\nend",
    "    if n == 0 then\n        return 1\n    else\n        return 1 / (2 ^ n) + geometric_sum(n - 1)\n    end\nend",
    "    if n == 0 then\n        return 1\n    else\n        return 1 / 2 ^ n + geometric_sum(n - 1)\n    end\nend",
    "  if n == 0 then\n    return 1\n  else\n    return 1 / (2 ^ n) + geometric_sum(n - 1)\n  end\nend",
    "    if n == 0 then\n        return 1\n    else\n        return 1 / (2 ^ n) + geometric_sum(n - 1)\n    end\nend",
    "  if n == 0 then\n    return 1\n  else\n    return 1 / (2 ^ n) + geometric_sum(n - 1)\n  end\nend",
    "  if n == 0 then\n    return 1\n  else\n    return 1 / (2 ^ n) + geometric_sum(n - 1)\n  end\nend",
    "  if n == 0 then\n    return 1\n  else\n    return 1 / (2 ^ n) + geometric_sum(n - 1)\n  end\nend",
    "    if n == 0 then\n        return 1\n    else\n        return 1 / (2 ^ n) + geometric_sum(n - 1)\n    end\nend",
    "  if n == 0 then\n    return 1\n  else\n    return 1 / (2 ^ n) + geometric_sum(n - 1)\n  end\nend",
    "  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n    return 1 / (2 ^ n) + geometric_sum(n - 1)\n  end\nend",
    "  if n == 0 then\n    return 1\n  else\n    return 1 / (2 ^ n) + geometric_sum(n - 1)\n  end\nend",
    "  if n == 0 then\n    return 1\n  else\n    return 1 / (2 ^ n) + geometric_sum(n - 1)\n  end\nend",
    "  if n == 0 then\n    return 1\n  else\n    return 1 / (2 ^ n) + geometric_sum(n - 1)\n  end\nend",
    "  if n == 0 then\n    return 1\n  else\n    return 1 / (2 ^ n) + geometric_sum(n - 1)\n  end\nend",
    "    if n == 0 then\n        return 1\n    end\n    return 1 / (2 ^ n) + geometric_sum(n - 1)\nend"
  ]
}