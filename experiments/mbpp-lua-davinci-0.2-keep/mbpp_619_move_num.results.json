{
  "name": "mbpp_619_move_num",
  "language": "lua",
  "prompt": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd36a7ssi.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpd36a7ssi.lua:6: in local 'candidate'\n\t/tmp/tmpd36a7ssi.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tlocal i = 1\n\twhile i <= #test_str do\n\t\tif string.find(test_str, \"%d\", i) then\n\t\t\tnum = num .. string.sub(test_str, i, i)\n\t\telse\n\t\t\tstr = str .. string.sub(test_str, i, i)\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxky3djg7.lua:20: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"thousandI1love143you55three3000\"\nstack traceback:\n\t/tmp/tmpxky3djg7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = test_str\n    local nums = {}\n    local chars = {}\n    for i = 1, #str do\n        if string.find(str[i], \"%d\") then\n            table.insert(nums, str[i])\n        else\n            table.insert(chars, str[i])\n        end\n    end\n    return table.concat(chars) .. table.concat(nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyoiya3ly.lua:7: bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpyoiya3ly.lua:7: in local 'candidate'\n\t/tmp/tmpyoiya3ly.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpno3oxy7n.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpno3oxy7n.lua:6: in local 'candidate'\n\t/tmp/tmpno3oxy7n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpno3oxy7n.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpno3oxy7n.lua:6: in local 'candidate'\n\t/tmp/tmpno3oxy7n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i,i)\n\t\tif tonumber(c) then\n\t\t\tnum = num..c\n\t\telse\n\t\t\tstr = str..c\n\t\tend\n\tend\n\treturn str..num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal num_str = \"\"\n\tlocal char_str = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i, i)) then\n\t\t\tnum_str = num_str .. test_str:sub(i, i)\n\t\telse\n\t\t\tchar_str = char_str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num = num .. char\n        else\n            str = str .. char\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_list = {}\n    local num_list = {}\n    for i = 1, #test_str do\n        local c = string.sub(test_str, i, i)\n        if tonumber(c) then\n            table.insert(num_list, c)\n        else\n            table.insert(str_list, c)\n        end\n    end\n    return table.concat(str_list) .. table.concat(num_list)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local ch = string.sub(test_str, i, i)\n        if tonumber(ch) then\n            num_str = num_str .. ch\n        else\n            char_str = char_str .. ch\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_table = {}\n    local num_table = {}\n    local str_table_index = 1\n    local num_table_index = 1\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\", i) then\n            num_table[num_table_index] = string.sub(test_str, i, i)\n            num_table_index = num_table_index + 1\n        else\n            str_table[str_table_index] = string.sub(test_str, i, i)\n            str_table_index = str_table_index + 1\n        end\n    end\n    local result_str = table.concat(str_table, \"\") .. table.concat(num_table, \"\")\n    return result_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu3rl5tw.lua:23: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"thousandI1love143you55three3000\"\nstack traceback:\n\t/tmp/tmpeu3rl5tw.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local new_str = \"\"\n    local num_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            new_str = new_str .. test_str:sub(i, i)\n        end\n    end\n    return new_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            table.insert(num_table, string.sub(test_str, i, i))\n        else\n            table.insert(str_table, string.sub(test_str, i, i))\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqp57xu2z.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmpqp57xu2z.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num_str = num_str .. string.sub(test_str, i, i)\n            test_str = string.gsub(test_str, string.sub(test_str, i, i), \"\", 1)\n        else\n            char_str = char_str .. string.sub(test_str, i, i)\n            test_str = string.gsub(test_str, string.sub(test_str, i, i), \"\", 1)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsv6g4ot.lua:20: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"Ilv13o5tre00huad\"\nstack traceback:\n\t/tmp/tmpcsv6g4ot.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_tbl = {}\n    local num_tbl = {}\n    local str_len = string.len(test_str)\n    for i = 1, str_len do\n        local cur_char = string.sub(test_str, i, i)\n        if tonumber(cur_char) then\n            table.insert(num_tbl, cur_char)\n        else\n            table.insert(str_tbl, cur_char)\n        end\n    end\n    local result_str = table.concat(str_tbl) .. table.concat(num_tbl)\n    return result_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = string.sub(test_str, i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i, i)) then\n\t\t\tnum = num .. test_str:sub(i, i)\n\t\telse\n\t\t\tstr = str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. string.sub(test_str, i, i)\n        else\n            str = str .. string.sub(test_str, i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxu_mgei.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmpoxu_mgei.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str, \"%d\") then\n            num_str = num_str .. string.match(test_str, \"%d\")\n            test_str = string.gsub(test_str, \"%d\", \"\")\n        else\n            char_str = char_str .. string.match(test_str, \"%a\")\n            test_str = string.gsub(test_str, \"%a\", \"\")\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmh6bkze2.lua:10: attempt to concatenate a nil value\nstack traceback:\n\t/tmp/tmpmh6bkze2.lua:10: in local 'candidate'\n\t/tmp/tmpmh6bkze2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal num_str = \"\"\n\tlocal other_str = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i,i)) then\n\t\t\tnum_str = num_str..test_str:sub(i,i)\n\t\telse\n\t\t\tother_str = other_str..test_str:sub(i,i)\n\t\tend\n\tend\n\treturn other_str..num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. string.sub(test_str, i, i)\n        else\n            str = str .. string.sub(test_str, i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxu_mgei.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmpoxu_mgei.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            char_str = char_str .. c\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num_str = num_str .. string.sub(test_str, i, i)\n            test_str = string.sub(test_str, 1, i - 1) .. string.sub(test_str, i + 1)\n        else\n            char_str = char_str .. string.sub(test_str, i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzz1n58aa.lua:19: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"Ilv13o5tre00huad\"\nstack traceback:\n\t/tmp/tmpzz1n58aa.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal num_str = ''\n\tlocal char_str = ''\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i, i)) then\n\t\t\tnum_str = num_str .. test_str:sub(i, i)\n\t\telse\n\t\t\tchar_str = char_str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i=1, #test_str do\n        if string.match(test_str:sub(i,i), \"%d\") then\n            num = num .. test_str:sub(i,i)\n        else\n            str = str .. test_str:sub(i,i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = test_str\n    local num = {}\n    local str_new = {}\n    local num_new = {}\n    local str_new_2 = {}\n    local num_new_2 = {}\n    local str_new_3 = {}\n    local num_new_3 = {}\n    local str_new_4 = {}\n    local num_new_4 = {}\n    local str_new_5 = {}\n    local num_new_5 = {}\n    local str_new_6 = {}\n    local num_new_6 = {}\n    local str_new_7 = {}\n    local num_new_7 = {}\n    local str_new_8 = {}\n    local num_new_8 = {}\n    local str_new_9 = {}\n    local num_new_9 = {}\n    local str_new_10 = {}\n    local num_new_10 = {}\n    local str_new_11 = {}\n    local num_new_11 = {}\n    local str_new_12 = {}\n    local num_new_12 = {}\n    local str_new_13 = {}\n    local num_new_13 = {}\n    local str_new_14 = {}\n    local num_new_14 = {}\n    local str_new_15 = {}\n    local num_new_15 = {}\n    local str_new_16 = {}\n    local num_new_16 = {}\n    local str_new_17 = {}\n    local num_new_17 = {}\n    local str_new_18 = {}\n    local num_new_18 = {}\n    local str_new_19 = {}\n    local num_new_19 = {}\n    local str_new_20 = {}\n    local num_new_20 = {}\n    local str_new_21 = {}\n    local num_new_21 = {}\n    local str_new_22 = {}\n    local num_new_22 = {}\n    local str_new_23 = {}\n    local num_new_23 = {}\n    local str_new_24 = {}\n    local num_new_24 = {}\n    local str_new_25 = {}\n    local num_new_25 = {}\n   \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnby1mrf1.lua:65: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = ''\n    local char_str = ''\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpno3oxy7n.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpno3oxy7n.lua:6: in local 'candidate'\n\t/tmp/tmpno3oxy7n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal num_str = \"\"\n\tlocal char_str = \"\"\n\tfor i = 1, #test_str do\n\t\tif string.match(test_str, \"%d\") then\n\t\t\tnum_str = num_str .. string.match(test_str, \"%d\")\n\t\t\ttest_str = string.gsub(test_str, \"%d\", \"\")\n\t\telse\n\t\t\tchar_str = char_str .. string.match(test_str, \"%a\")\n\t\t\ttest_str = string.gsub(test_str, \"%a\", \"\")\n\t\tend\n\tend\n\treturn char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9nfkjfkp.lua:10: attempt to concatenate a nil value\nstack traceback:\n\t/tmp/tmp9nfkjfkp.lua:10: in local 'candidate'\n\t/tmp/tmp9nfkjfkp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = test_str\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #str do\n        local char = string.sub(str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = test_str\n\tlocal num = {}\n\tlocal str_table = {}\n\tlocal str_table_index = 1\n\tlocal num_table_index = 1\n\tfor i = 1, #str do\n\t\tif tonumber(str:sub(i,i)) then\n\t\t\tnum[num_table_index] = str:sub(i,i)\n\t\t\tnum_table_index = num_table_index + 1\n\t\telse\n\t\t\tstr_table[str_table_index] = str:sub(i,i)\n\t\t\tstr_table_index = str_table_index + 1\n\t\tend\n\tend\n\tlocal new_str = table.concat(str_table) .. table.concat(num)\n\treturn new_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local other_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            other_str = other_str .. test_str:sub(i, i)\n        end\n    end\n    return other_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.find(\"0123456789\", string.sub(test_str, i, i)) then\n            num_str = num_str .. string.sub(test_str, i, i)\n        else\n            char_str = char_str .. string.sub(test_str, i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local other_str = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            other_str = other_str .. c\n        end\n    end\n    return other_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local nums = {}\n    local chars = {}\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            table.insert(nums, test_str:sub(i, i))\n        else\n            table.insert(chars, test_str:sub(i, i))\n        end\n    end\n    return table.concat(chars) .. table.concat(nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i, i)) then\n\t\t\tnum = num .. test_str:sub(i, i)\n\t\telse\n\t\t\tstr = str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            char_str = char_str .. c\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_tb = {}\n    local num_tb = {}\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            table.insert(num_tb, test_str[i])\n        else\n            table.insert(str_tb, test_str[i])\n        end\n    end\n    return table.concat(str_tb) .. table.concat(num_tb)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcr9p0xvg.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpcr9p0xvg.lua:6: in local 'candidate'\n\t/tmp/tmpcr9p0xvg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_tbl = {}\n    local num_tbl = {}\n    local str_len = string.len(test_str)\n    for i = 1, str_len do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            table.insert(num_tbl, char)\n        else\n            table.insert(str_tbl, char)\n        end\n    end\n    return table.concat(str_tbl) .. table.concat(num_tbl)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i, i)) then\n\t\t\tnum = num .. test_str:sub(i, i)\n\t\telse\n\t\t\tstr = str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local new_str = \"\"\n    local num_str = \"\"\n    for i = 1, string.len(test_str) do\n        local c = string.sub(test_str, i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            new_str = new_str .. c\n        end\n    end\n    return new_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = ''\n    local num = ''\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_tbl = {}\n    local num_tbl = {}\n    for i = 1, #test_str do\n        if string.match(test_str, \"%d\") then\n            table.insert(num_tbl, string.sub(test_str, i, i))\n        else\n            table.insert(str_tbl, string.sub(test_str, i, i))\n        end\n    end\n    return table.concat(str_tbl) .. table.concat(num_tbl)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptgub7m2.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmpptgub7m2.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str_len = string.len(test_str)\n\tlocal str_table = {}\n\tlocal num_table = {}\n\tlocal num_len = 0\n\tfor i = 1, str_len do\n\t\tlocal char = string.sub(test_str, i, i)\n\t\tif tonumber(char) then\n\t\t\tnum_len = num_len + 1\n\t\t\tnum_table[num_len] = char\n\t\telse\n\t\t\tstr_table[i - num_len] = char\n\t\tend\n\tend\n\tfor i = 1, num_len do\n\t\tstr_table[str_len - num_len + i] = num_table[i]\n\tend\n\treturn table.concat(str_table)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal num_str = \"\"\n\tlocal char_str = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = string.sub(test_str, i, i)\n\t\tif tonumber(c) then\n\t\t\tnum_str = num_str .. c\n\t\telse\n\t\t\tchar_str = char_str .. c\n\t\tend\n\tend\n\treturn char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = string.sub(test_str, i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_list = {}\n    local num_list = {}\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            table.insert(num_list, test_str:sub(i, i))\n        else\n            table.insert(str_list, test_str:sub(i, i))\n        end\n    end\n    return table.concat(str_list) .. table.concat(num_list)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpno3oxy7n.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpno3oxy7n.lua:6: in local 'candidate'\n\t/tmp/tmpno3oxy7n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal num_str = ''\n\tlocal char_str = ''\n\tfor i = 1, #test_str do\n\t\tif string.match(test_str, '%d') then\n\t\t\tnum_str = num_str .. string.match(test_str, '%d')\n\t\t\ttest_str = string.gsub(test_str, '%d', '', 1)\n\t\telse\n\t\t\tchar_str = char_str .. string.match(test_str, '%a')\n\t\t\ttest_str = string.gsub(test_str, '%a', '', 1)\n\t\tend\n\tend\n\treturn char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            table.insert(num_table, char)\n        else\n            table.insert(str_table, char)\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local alpha_str = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            alpha_str = alpha_str .. c\n        end\n    end\n    return alpha_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = test_str\n    local num = ''\n    local i = 1\n    while i <= #str do\n        if tonumber(str:sub(i, i)) then\n            num = num .. str:sub(i, i)\n            str = str:sub(1, i - 1) .. str:sub(i + 1)\n        else\n            i = i + 1\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydgixd3h.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmpydgixd3h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str_table = {}\n\tlocal num_table = {}\n\tlocal new_str = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tif tonumber(char) then\n\t\t\ttable.insert(num_table, char)\n\t\telse\n\t\t\ttable.insert(str_table, char)\n\t\tend\n\tend\n\tfor i = 1, #str_table do\n\t\tnew_str = new_str .. str_table[i]\n\tend\n\tfor i = 1, #num_table do\n\t\tnew_str = new_str .. num_table[i]\n\tend\n\treturn new_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = test_str\n    local num = {}\n    local str_num = {}\n    for i = 1, #str do\n        if tonumber(str:sub(i,i)) then\n            table.insert(num, str:sub(i,i))\n        else\n            table.insert(str_num, str:sub(i,i))\n        end\n    end\n    return table.concat(str_num) .. table.concat(num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8u76zy22.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmp8u76zy22.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num = num .. char\n        else\n            str = str .. char\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n  local nums = {}\n  local letters = {}\n  for i = 1, #test_str do\n    if tonumber(test_str:sub(i,i)) then\n      table.insert(nums, test_str:sub(i,i))\n    else\n      table.insert(letters, test_str:sub(i,i))\n    end\n  end\n  return table.concat(letters) .. table.concat(nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = ''\n    local char_str = ''\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            char_str = char_str .. c\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. string.sub(test_str, i, i)\n            test_str = string.sub(test_str, 1, i - 1) .. string.sub(test_str, i + 1)\n        else\n            str = str .. string.sub(test_str, i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe006dm8_.lua:19: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"Ilv13o5tre00huad\"\nstack traceback:\n\t/tmp/tmpe006dm8_.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            char_str = char_str .. c\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. string.sub(test_str, i, i)\n        else\n            str = str .. string.sub(test_str, i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxu_mgei.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmpoxu_mgei.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = string.sub(test_str, i, i)\n\t\tif tonumber(c) then\n\t\t\tnum = num .. c\n\t\telse\n\t\t\tstr = str .. c\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal num_str = \"\"\n\tlocal char_str = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i, i)) then\n\t\t\tnum_str = num_str .. test_str:sub(i, i)\n\t\telse\n\t\t\tchar_str = char_str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n  local str_len = string.len(test_str)\n  local num_str = \"\"\n  local char_str = \"\"\n  for i = 1, str_len do\n    local char = string.sub(test_str, i, i)\n    if tonumber(char) then\n      num_str = num_str .. char\n    else\n      char_str = char_str .. char\n    end\n  end\n  return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = string.gsub(test_str, \"%d\", \"\")\n\tlocal num = string.gsub(test_str, \"%D\", \"\")\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num..string.sub(test_str, i, i)\n            test_str = string.gsub(test_str, string.sub(test_str, i, i), \"\", 1)\n        else\n            str = str..string.sub(test_str, i, i)\n            test_str = string.gsub(test_str, string.sub(test_str, i, i), \"\", 1)\n        end\n    end\n    return str..num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y2c0npo.lua:20: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"Ilv13o5tre00huad\"\nstack traceback:\n\t/tmp/tmp2y2c0npo.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num = num .. char\n        else\n            str = str .. char\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = ''\n    local num = ''\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. string.sub(test_str, i, i)\n        else\n            str = str .. string.sub(test_str, i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxu_mgei.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmpoxu_mgei.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num = num .. char\n        else\n            str = str .. char\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i, i)) then\n\t\t\tnum = num .. test_str:sub(i, i)\n\t\telse\n\t\t\tstr = str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal num_str = \"\"\n\tlocal char_str = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tif tonumber(char) then\n\t\t\tnum_str = num_str .. char\n\t\telse\n\t\t\tchar_str = char_str .. char\n\t\tend\n\tend\n\treturn char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd36a7ssi.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpd36a7ssi.lua:6: in local 'candidate'\n\t/tmp/tmpd36a7ssi.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tif string.match(test_str:sub(i, i), \"%d\") then\n\t\t\tnum = num .. test_str:sub(i, i)\n\t\telse\n\t\t\tstr = str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd36a7ssi.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpd36a7ssi.lua:6: in local 'candidate'\n\t/tmp/tmpd36a7ssi.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. string.sub(test_str, i, i)\n        else\n            str = str .. string.sub(test_str, i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxu_mgei.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmpoxu_mgei.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif tonumber(c) then\n\t\t\tnum = num .. c\n\t\telse\n\t\t\tstr = str .. c\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal new_str = \"\"\n\tlocal num_str = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tif tonumber(char) then\n\t\t\tnum_str = num_str .. char\n\t\telse\n\t\t\tnew_str = new_str .. char\n\t\tend\n\tend\n\treturn new_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local new_str = \"\"\n    local num_str = \"\"\n    for i = 1, #test_str do\n        local ch = test_str:sub(i, i)\n        if ch:match(\"%d\") then\n            num_str = num_str .. ch\n        else\n            new_str = new_str .. ch\n        end\n    end\n    return new_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = string.sub(test_str, i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n  local num_str = \"\"\n  local char_str = \"\"\n  for i = 1, #test_str do\n    if string.match(test_str:sub(i, i), \"%d\") then\n      num_str = num_str .. test_str:sub(i, i)\n    else\n      char_str = char_str .. test_str:sub(i, i)\n    end\n  end\n  return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local other_str = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            other_str = other_str .. c\n        end\n    end\n    return other_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i,i)\n\t\tif tonumber(c) then\n\t\t\tnum = num .. c\n\t\telse\n\t\t\tstr = str .. c\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. string.sub(test_str, i, i)\n        else\n            str = str .. string.sub(test_str, i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxu_mgei.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmpoxu_mgei.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal nums = {}\n\tlocal chars = {}\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tif tonumber(char) then\n\t\t\ttable.insert(nums, char)\n\t\telse\n\t\t\ttable.insert(chars, char)\n\t\tend\n\tend\n\treturn table.concat(chars) .. table.concat(nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            char_str = char_str .. c\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal num_str = ''\n\tlocal char_str = ''\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i, i)) then\n\t\t\tnum_str = num_str .. test_str:sub(i, i)\n\t\telse\n\t\t\tchar_str = char_str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif tonumber(c) then\n\t\t\tnum = num .. c\n\t\telse\n\t\t\tstr = str .. c\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            table.insert(num_table, test_str:sub(i, i))\n        else\n            table.insert(str_table, test_str:sub(i, i))\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpno3oxy7n.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpno3oxy7n.lua:6: in local 'candidate'\n\t/tmp/tmpno3oxy7n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = ''\n    local char_str = ''\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_tbl = {}\n    local num_tbl = {}\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            table.insert(num_tbl, test_str:sub(i, i))\n        else\n            table.insert(str_tbl, test_str:sub(i, i))\n        end\n    end\n    return table.concat(str_tbl) .. table.concat(num_tbl)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = test_str\n    local num = ''\n    local res = ''\n    for i = 1, #str do\n        if tonumber(str:sub(i, i)) then\n            num = num .. str:sub(i, i)\n        else\n            res = res .. str:sub(i, i)\n        end\n    end\n    return res .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str, \"%d\") then\n            num_str = num_str .. string.match(test_str, \"%d\")\n            test_str = string.gsub(test_str, \"%d\", \"\")\n        else\n            char_str = char_str .. string.sub(test_str, 1, 1)\n            test_str = string.sub(test_str, 2)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd03a4s2_.lua:20: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"Iloveyouthreethousand1\"\nstack traceback:\n\t/tmp/tmpd03a4s2_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_len = string.len(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, str_len do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i,i)) then\n            num_str = num_str .. test_str:sub(i,i)\n        else\n            char_str = char_str .. test_str:sub(i,i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tif string.find(test_str, \"%d\") then\n\t\t\tnum = num .. string.sub(test_str, i, i)\n\t\telse\n\t\t\tstr = str .. string.sub(test_str, i, i)\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptw9mf_xs.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmptw9mf_xs.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. string.sub(test_str, i, i)\n        else\n            str = str .. string.sub(test_str, i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxu_mgei.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmpoxu_mgei.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_tbl = {}\n    local num_tbl = {}\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            table.insert(num_tbl, test_str:sub(i, i))\n        else\n            table.insert(str_tbl, test_str:sub(i, i))\n        end\n    end\n    return table.concat(str_tbl) .. table.concat(num_tbl)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local new_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            new_str = new_str .. test_str[i]\n        end\n    end\n    return new_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuouxe8rl.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpuouxe8rl.lua:6: in local 'candidate'\n\t/tmp/tmpuouxe8rl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = test_str\n    local num = \"\"\n    local new_str = \"\"\n    for i = 1, #str do\n        if string.match(str:sub(i, i), \"%d\") then\n            num = num .. str:sub(i, i)\n        else\n            new_str = new_str .. str:sub(i, i)\n        end\n    end\n    return new_str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpno3oxy7n.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpno3oxy7n.lua:6: in local 'candidate'\n\t/tmp/tmpno3oxy7n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = test_str\n\tlocal num = \"\"\n\tlocal str_len = string.len(str)\n\tlocal i = 1\n\twhile i <= str_len do\n\t\tlocal ch = string.sub(str, i, i)\n\t\tif string.match(ch, \"%d\") then\n\t\t\tnum = num .. ch\n\t\t\tstr = string.gsub(str, ch, \"\", 1)\n\t\t\tstr_len = str_len - 1\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local ch = test_str:sub(i, i)\n        if ch:match(\"%d\") then\n            num = num .. ch\n        else\n            str = str .. ch\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        if string.match(test_str, \"%d\") then\n            table.insert(num_table, string.sub(test_str, i, i))\n        else\n            table.insert(str_table, string.sub(test_str, i, i))\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4dcttb8.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmpj4dcttb8.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i,i)) then\n\t\t\tnum = num .. test_str:sub(i,i)\n\t\telse\n\t\t\tstr = str .. test_str:sub(i,i)\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i,i)) then\n\t\t\tnum = num .. test_str:sub(i,i)\n\t\telse\n\t\t\tstr = str .. test_str:sub(i,i)\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = ''\n\tlocal num = ''\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif tonumber(c) then\n\t\t\tnum = num .. c\n\t\telse\n\t\t\tstr = str .. c\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = ''\n    local num = ''\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = string.gsub(test_str, \"%d+\", \"\")\n\tlocal num = string.gsub(test_str, \"%D+\", \"\")\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = string.sub(test_str, i, i)\n\t\tif tonumber(c) then\n\t\t\tnum = num .. c\n\t\telse\n\t\t\tstr = str .. c\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = test_str\n\tlocal num = \"\"\n\tlocal result = \"\"\n\tfor i = 1, #str do\n\t\tif tonumber(str:sub(i, i)) then\n\t\t\tnum = num .. str:sub(i, i)\n\t\telse\n\t\t\tresult = result .. str:sub(i, i)\n\t\tend\n\tend\n\treturn result .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local cur_char = string.sub(test_str, i, i)\n        if tonumber(cur_char) then\n            num_str = num_str .. cur_char\n        else\n            char_str = char_str .. cur_char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. string.sub(test_str, i, i)\n            test_str = string.sub(test_str, 1, i - 1) .. string.sub(test_str, i + 1)\n        else\n            str = str .. string.sub(test_str, i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe006dm8_.lua:19: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"Ilv13o5tre00huad\"\nstack traceback:\n\t/tmp/tmpe006dm8_.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd36a7ssi.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpd36a7ssi.lua:6: in local 'candidate'\n\t/tmp/tmpd36a7ssi.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = test_str\n    local num = {}\n    local alpha = {}\n    for i = 1, #str do\n        if string.find(str, \"%d\") then\n            local n = string.match(str, \"%d\")\n            table.insert(num, n)\n            str = string.gsub(str, \"%d\", \"\")\n        else\n            table.insert(alpha, string.sub(str, 1, 1))\n            str = string.sub(str, 2)\n        end\n    end\n    return table.concat(alpha) .. table.concat(num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgot7f38z.lua:22: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"Iloveyouthreethousand1\"\nstack traceback:\n\t/tmp/tmpgot7f38z.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            table.insert(num_table, char)\n        else\n            table.insert(str_table, char)\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_table = {}\n    local num_table = {}\n    for i = 1, string.len(test_str) do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            table.insert(num_table, char)\n        else\n            table.insert(str_table, char)\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8u76zy22.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmp8u76zy22.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str_tbl = {}\n\tlocal num_tbl = {}\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tif tonumber(char) then\n\t\t\ttable.insert(num_tbl, char)\n\t\telse\n\t\t\ttable.insert(str_tbl, char)\n\t\tend\n\tend\n\treturn table.concat(str_tbl) .. table.concat(num_tbl)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n  local str_arr = {}\n  local num_arr = {}\n  local str_out = \"\"\n  local num_out = \"\"\n  for i = 1, #test_str do\n    if tonumber(test_str:sub(i, i)) then\n      table.insert(num_arr, test_str:sub(i, i))\n    else\n      table.insert(str_arr, test_str:sub(i, i))\n    end\n  end\n  for i = 1, #str_arr do\n    str_out = str_out .. str_arr[i]\n  end\n  for i = 1, #num_arr do\n    num_out = num_out .. num_arr[i]\n  end\n  return str_out .. num_out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local ch = string.sub(test_str, i, i)\n        if string.match(ch, \"%d\") then\n            num = num .. ch\n        else\n            str = str .. ch\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i,i)) then\n            num = num .. test_str:sub(i,i)\n        else\n            str = str .. test_str:sub(i,i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_tbl = {}\n    local num_tbl = {}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            table.insert(num_tbl, char)\n        else\n            table.insert(str_tbl, char)\n        end\n    end\n    return table.concat(str_tbl) .. table.concat(num_tbl)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n  local str = test_str\n  local num = {}\n  local char = {}\n  for i = 1, #str do\n    if tonumber(str:sub(i, i)) then\n      table.insert(num, str:sub(i, i))\n    else\n      table.insert(char, str:sub(i, i))\n    end\n  end\n  return table.concat(char) .. table.concat(num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.byte(test_str, i) >= 48 and string.byte(test_str, i) <= 57 then\n            num_str = num_str .. string.sub(test_str, i, i)\n        else\n            char_str = char_str .. string.sub(test_str, i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n  local new_str = \"\"\n  for i = 1, #test_str do\n    if tonumber(test_str:sub(i, i)) then\n      new_str = new_str .. test_str:sub(i, i)\n    end\n  end\n  return new_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35m_v0d3.lua:15: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"1143553000\"\nstack traceback:\n\t/tmp/tmp35m_v0d3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num = {}\n    local str = {}\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            table.insert(num, test_str:sub(i, i))\n        else\n            table.insert(str, test_str:sub(i, i))\n        end\n    end\n    return table.concat(str) .. table.concat(num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local new_str = \"\"\n    local num_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            new_str = new_str .. char\n        end\n    end\n    return new_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num = num .. char\n        else\n            str = str .. char\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_list = {}\n    local num_list = {}\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            table.insert(num_list, test_str[i])\n        else\n            table.insert(str_list, test_str[i])\n        end\n    end\n    return table.concat(str_list) .. table.concat(num_list)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpupcfe3n6.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpupcfe3n6.lua:6: in local 'candidate'\n\t/tmp/tmpupcfe3n6.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local other_str = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            other_str = other_str .. c\n        end\n    end\n    return other_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif tonumber(c) then\n\t\t\tnum = num .. c\n\t\telse\n\t\t\tstr = str .. c\n\t\tend\n\tend\n\treturn str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num_str = num_str .. string.sub(test_str, i, i)\n            test_str = string.gsub(test_str, \"%d\", \"\", 1)\n        else\n            char_str = char_str .. string.sub(test_str, i, i)\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdt5wj3gg.lua:19: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"reethousandIloveyouth\"\nstack traceback:\n\t/tmp/tmpdt5wj3gg.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num = {}\n    local str = {}\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            table.insert(num, test_str[i])\n        else\n            table.insert(str, test_str[i])\n        end\n    end\n    return table.concat(str) .. table.concat(num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdqyr1be4.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpdqyr1be4.lua:6: in local 'candidate'\n\t/tmp/tmpdqyr1be4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local letter_str = \"\"\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            letter_str = letter_str .. test_str:sub(i, i)\n        end\n    end\n    return letter_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n  local str = \"\"\n  local num = \"\"\n  for i = 1, #test_str do\n    if tonumber(test_str:sub(i, i)) then\n      num = num..test_str:sub(i, i)\n    else\n      str = str..test_str:sub(i, i)\n    end\n  end\n  return str..num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local result = {}\n    local num = {}\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            table.insert(num, test_str[i])\n        else\n            table.insert(result, test_str[i])\n        end\n    end\n    for i = 1, #num do\n        table.insert(result, num[i])\n    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt8z_nuee.lua:6: bad argument #1 to 'match' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpt8z_nuee.lua:6: in local 'candidate'\n\t/tmp/tmpt8z_nuee.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%d\") then\n            table.insert(num_table, test_str:sub(i, i))\n        else\n            table.insert(str_table, test_str:sub(i, i))\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122837,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i,i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local new_str = \"\"\n    local num_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            new_str = new_str .. test_str:sub(i, i)\n        end\n    end\n    return new_str .. num_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. string.sub(test_str, i, i)\n        else\n            str = str .. string.sub(test_str, i, i)\n        end\n    end\n    return str .. num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxu_mgei.lua:18: expected: \"Iloveyouthreethousand1143553000\"\nactual: \"I1love143you55three3000thousand\"\nstack traceback:\n\t/tmp/tmpoxu_mgei.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}