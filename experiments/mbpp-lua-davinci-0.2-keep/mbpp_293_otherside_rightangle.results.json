{
  "name": "mbpp_293_otherside_rightangle",
  "language": "lua",
  "prompt": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  local c = math.sqrt(w^2 + h^2)\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123505,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n  return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w * w + h * h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w^2 + h^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n\treturn math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n    return math.sqrt(w*w + h*h)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509981,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}