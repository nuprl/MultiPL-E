{
  "name": "mbpp_604_reverse_words",
  "language": "lua",
  "prompt": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, 1, word)\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in string.gmatch(s, \"%S+\") do\n    words[#words + 1] = w\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e5huf9d.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1e5huf9d.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e5huf9d.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1e5huf9d.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n    end\n    for i = 1, #words / 2 do\n        words[i], words[#words - i + 1] = words[#words - i + 1], words[i]\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  table.reverse(words)\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadoocq3i.lua:7: attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpadoocq3i.lua:7: in local 'candidate'\n\t/tmp/tmpadoocq3i.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in string.gmatch(s, \"%S+\") do\n        table.insert(words, w)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local result = {}\n    for word in string.gmatch(s, \"%S+\") do\n        table.insert(result, 1, word)\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jsr6gt2.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp8jsr6gt2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e5huf9d.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1e5huf9d.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        words[#words + 1] = w\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        reversed[#reversed + 1] = words[i]\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  for i = #words, 1, -1 do\n    words[i] = words[i]:reverse()\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsh3w7b8a.lua:16: expected: \"program python\"\nactual: \"nohtyp margorp\"\nstack traceback:\n\t/tmp/tmpsh3w7b8a.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words+1] = word\n  end\n  local reversed = {}\n  for i=#words,1,-1 do\n    reversed[#reversed+1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jsr6gt2.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp8jsr6gt2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  for i = #words, 1, -1 do\n    words[i] = words[i]:reverse()\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppje7m3hd.lua:16: expected: \"program python\"\nactual: \"nohtyp margorp\"\nstack traceback:\n\t/tmp/tmppje7m3hd.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words+1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed+1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words+1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed+1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n    end\n    return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkd43_p2.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmplkd43_p2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        words[#words + 1] = word\n    end\n    local i = 1\n    local j = #words\n    while i < j do\n        words[i], words[j] = words[j], words[i]\n        i = i + 1\n        j = j - 1\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words + 1] = w\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words + 1] = w\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, 1, word)\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch('%S+') do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed+1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027767,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    table.reverse(words)\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpamx3j0c8.lua:7: attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpamx3j0c8.lua:7: in local 'candidate'\n\t/tmp/tmpamx3j0c8.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, 1, w)\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n\tlocal words = {}\n\tfor w in s:gmatch(\"%S+\") do\n\t\ttable.insert(words, w)\n\tend\n\tlocal reversed = {}\n\tfor i = #words, 1, -1 do\n\t\ttable.insert(reversed, words[i])\n\tend\n\treturn table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in string.gmatch(s, \"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed+1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027767,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n\tlocal words = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\ttable.insert(words, word)\n\tend\n\ttable.reverse(words)\n\treturn table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptlde92z7.lua:7: attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmptlde92z7.lua:7: in local 'candidate'\n\t/tmp/tmptlde92z7.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words + 1] = w\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        words[#words+1] = w\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        reversed[#reversed+1] = words[i]\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local t = {}\n  for w in s:gmatch(\"%S+\") do\n    t[#t+1] = w\n  end\n  for i = 1, #t/2 do\n    t[i], t[#t-i+1] = t[#t-i+1], t[i]\n  end\n  return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        words[#words + 1] = word\n    end\n    for i = 1, #words / 2 do\n        words[i], words[#words - i + 1] = words[#words - i + 1], words[i]\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    for i = 1, #words / 2 do\n        words[i], words[#words - i + 1] = words[#words - i + 1], words[i]\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local i = 1\n  local j = #words\n  while i < j do\n    words[i], words[j] = words[j], words[i]\n    i = i + 1\n    j = j - 1\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local result = {}\n    for i = #words, 1, -1 do\n        table.insert(result, words[i])\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n\tlocal words = {}\n\tfor w in s:gmatch(\"%S+\") do\n\t\twords[#words+1] = w\n\tend\n\tfor i=1,#words/2 do\n\t\twords[i], words[#words-i+1] = words[#words-i+1], words[i]\n\tend\n\treturn table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n\tlocal words = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\ttable.insert(words, word)\n\tend\n\treturn table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjn_45hc.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpdjn_45hc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, 1, w)\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        words[#words + 1] = word\n    end\n    for i = 1, #words / 2 do\n        words[i], words[#words - i + 1] = words[#words - i + 1], words[i]\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, 1, word)\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed+1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027767,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, 1, word)\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n    end\n    local rev = {}\n    for i = #words, 1, -1 do\n        table.insert(rev, words[i])\n    end\n    return table.concat(rev, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n\tlocal words = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\ttable.insert(words, word)\n\tend\n\treturn table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjn_45hc.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpdjn_45hc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words+1] = word\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6jwialur.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp6jwialur.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, 1, word)\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words+1] = word\n  end\n  for i = 1, #words/2 do\n    words[i], words[#words-i+1] = words[#words-i+1], words[i]\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n\tlocal words = {}\n\tfor w in s:gmatch(\"%S+\") do\n\t\twords[#words+1] = w\n\tend\n\tfor i = 1, #words/2 do\n\t\twords[i], words[#words-i+1] = words[#words-i+1], words[i]\n\tend\n\treturn table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdyapyvj.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxdyapyvj.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in string.gmatch(s, \"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027767,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n\tlocal words = {}\n\tfor w in s:gmatch(\"%S+\") do\n\t\twords[#words + 1] = w\n\tend\n\tlocal reversed = {}\n\tfor i = #words, 1, -1 do\n\t\treversed[#reversed + 1] = words[i]\n\tend\n\treturn table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        words[#words + 1] = w\n    end\n    local rev = {}\n    for i = #words, 1, -1 do\n        rev[#rev + 1] = words[i]\n    end\n    return table.concat(rev, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n\tlocal words = {}\n\tfor w in s:gmatch(\"%S+\") do\n\t\twords[#words+1] = w\n\tend\n\tlocal rev = {}\n\tfor i = #words, 1, -1 do\n\t\trev[#rev+1] = words[i]\n\tend\n\treturn table.concat(rev, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n\tlocal words = {}\n\tfor w in s:gmatch(\"%S+\") do\n\t\ttable.insert(words, w)\n\tend\n\tlocal result = \"\"\n\tfor i = #words, 1, -1 do\n\t\tresult = result .. words[i] .. \" \"\n\tend\n\treturn result:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words+1] = word\n  end\n  for i = 1, #words/2 do\n    words[i], words[#words-i+1] = words[#words-i+1], words[i]\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words+1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed+1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  for i = 1, #words/2 do\n    words[i], words[#words-i+1] = words[#words-i+1], words[i]\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        words[#words+1] = w\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        reversed[#reversed+1] = words[i]\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed+1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027767,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in string.gmatch(s, \"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027767,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, 1, word)\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  for i = 1, #words / 2 do\n    words[i], words[#words - i + 1] = words[#words - i + 1], words[i]\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu44hgwot.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpu44hgwot.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in string.gmatch(s, \"%S+\") do\n    table.insert(words, 1, word)\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in string.gmatch(s, \"%S+\") do\n    table.insert(words, 1, word)\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        words[#words+1] = w\n    end\n    local i, j = 1, #words\n    while i < j do\n        words[i], words[j] = words[j], words[i]\n        i = i + 1\n        j = j - 1\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  for i=1,#words/2 do\n    words[i], words[#words-i+1] = words[#words-i+1], words[i]\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jsr6gt2.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp8jsr6gt2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in string.gmatch(s, \"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027767,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, 1, word)\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words + 1] = w\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e5huf9d.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1e5huf9d.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdyapyvj.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxdyapyvj.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n    end\n    local i, j = 1, #words\n    while i < j do\n        words[i], words[j] = words[j], words[i]\n        i = i + 1\n        j = j - 1\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdyapyvj.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxdyapyvj.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n\tlocal words = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\ttable.insert(words, word)\n\tend\n\tlocal reversed = {}\n\tfor i = #words, 1, -1 do\n\t\ttable.insert(reversed, words[i])\n\tend\n\treturn table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdyapyvj.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxdyapyvj.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words + 1] = w\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, 1, word)\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, 1, word)\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words+1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed+1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words + 1] = w\n  end\n  for i = 1, #words / 2 do\n    words[i], words[#words - i + 1] = words[#words - i + 1], words[i]\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdyapyvj.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxdyapyvj.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7kwf659.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmph7kwf659.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdyapyvj.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxdyapyvj.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words+1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed+1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n\tlocal words = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\ttable.insert(words, word)\n\tend\n\treturn table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjn_45hc.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpdjn_45hc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, 1, word)\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e5huf9d.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1e5huf9d.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in string.gmatch(s, \"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in string.gmatch(s, \"%S+\") do\n        table.insert(words, w)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e5huf9d.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1e5huf9d.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e5huf9d.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1e5huf9d.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdyapyvj.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxdyapyvj.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        words[#words+1] = w\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        reversed[#reversed+1] = words[i]\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed+1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027767,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    table.reverse(words)\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpamx3j0c8.lua:7: attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpamx3j0c8.lua:7: in local 'candidate'\n\t/tmp/tmpamx3j0c8.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jsr6gt2.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp8jsr6gt2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words+1] = word\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6jwialur.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp6jwialur.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, 1, word)\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, 1, w)\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, 1, w)\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdyapyvj.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxdyapyvj.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  for i = 1, #words/2 do\n    words[i], words[#words-i+1] = words[#words-i+1], words[i]\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, 1, word)\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words + 1] = w\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9jy66ba.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpo9jy66ba.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  for i = 1, #words/2 do\n    words[i], words[#words-i+1] = words[#words-i+1], words[i]\n  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e5huf9d.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1e5huf9d.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, w)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        words[#words + 1] = word\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        reversed[#reversed + 1] = words[i]\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jsr6gt2.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp8jsr6gt2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in string.gmatch(s, \"%S+\") do\n    words[#words + 1] = word\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    reversed[#reversed + 1] = words[i]\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  return table.concat(words, \" \", #words, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e5huf9d.lua:13: expected: \"program python\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1e5huf9d.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, 1, word)\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n  local reversed = {}\n  for i = #words, 1, -1 do\n    table.insert(reversed, words[i])\n  end\n  return table.concat(reversed, \" \")\nend\nassert(reverse_words(\"hello world\") == \"world hello\")\nassert(reverse_words(\"hello world, how are you?\") == \"you? are how world, hello\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124102,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        words[#words+1] = word\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        reversed[#reversed+1] = words[i]\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124101,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n    local reversed = {}\n    for i = #words, 1, -1 do\n        table.insert(reversed, words[i])\n    end\n    return table.concat(reversed, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509728,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        words[#words+1] = word\n    end\n    for i = 1, #words/2 do\n        words[i], words[#words-i+1] = words[#words-i+1], words[i]\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027767,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}