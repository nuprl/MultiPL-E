{
  "name": "mbpp_743_rotate_right",
  "language": "lua",
  "prompt": "-- Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nlocal function rotate_right(list, m)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rotate_right\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), {8, 9, 10, 1, 2, 3, 4, 5, 6, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), {9, 10, 1, 2, 3, 4, 5, 6, 7, 8})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), {6, 7, 8, 9, 10, 1, 2, 3, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local n = #list\n    local m = m % n\n    local res = {}\n    for i = 1, n do\n        res[i] = list[(i + m - 1) % n + 1]\n    end\n    return res\nend",
    "    local n = #list\n    local m = m % n\n    local new_list = {}\n    for i = 1, n do\n        new_list[i] = list[(i + m - 1) % n + 1]\n    end\n    return new_list\nend",
    "  local n = #list\n  m = m % n\n  local result = {}\n  for i = 1, n do\n    result[i] = list[(i + m - 1) % n + 1]\n  end\n  return result\nend",
    "    local n = #list\n    local r = m % n\n    local res = {}\n    for i = 1, n do\n        res[i] = list[(i + r - 1) % n + 1]\n    end\n    return res\nend",
    "    local n = #list\n    local m = m % n\n    local result = {}\n    for i = 1, n do\n        result[i] = list[(i + m - 1) % n + 1]\n    end\n    return result\nend",
    "  local n = #list\n  m = m % n\n  local new_list = {}\n  for i = 1, n do\n    new_list[i] = list[(i + m - 1) % n + 1]\n  end\n  return new_list\nend",
    "  local n = #list\n  if m > n then m = m % n end\n  return concat(slice(list, n - m + 1, n), slice(list, 1, n - m))\nend",
    "    local n = #list\n    local m = m % n\n    local result = {}\n    for i = 1, n do\n        local j = (i + m - 1) % n + 1\n        result[i] = list[j]\n    end\n    return result\nend",
    "    local n = #list\n    local m = m % n\n    local result = {}\n    for i = 1, n do\n        result[i] = list[(i + m - 1) % n + 1]\n    end\n    return result\nend",
    "    local new_list = {}\n    for i = 1, #list do\n        new_list[i] = list[(i + m - 1) % #list + 1]\n    end\n    return new_list\nend",
    "  local n = #list\n  local r = m % n\n  local new_list = {}\n  for i=1,n do\n    new_list[i] = list[(i+r-1)%n+1]\n  end\n  return new_list\nend",
    "  local n = #list\n  local r = m % n\n  local res = {}\n  for i = 1, n do\n    res[i] = list[(i + r - 1) % n + 1]\n  end\n  return res\nend",
    "    local n = #list\n    m = m % n\n    local result = {}\n    for i = 1, n do\n        result[i] = list[(i + m - 1) % n + 1]\n    end\n    return result\nend",
    "    local n = #list\n    local rotated = {}\n    for i = 1, n do\n        rotated[i] = list[(i + m - 1) % n + 1]\n    end\n    return rotated\nend",
    "    local n = #list\n    local r = m % n\n    local result = {}\n    for i = 1, n do\n        result[i] = list[(i + r - 1) % n + 1]\n    end\n    return result\nend",
    "\tlocal n = #list\n\tif m > n then\n\t\tm = m % n\n\tend\n\tlocal res = {}\n\tfor i = 1, n do\n\t\tres[i] = list[(i + m - 1) % n + 1]\n\tend\n\treturn res\nend",
    "    local res = {}\n    for i = 1, #list do\n        res[i] = list[(i - m - 1) % #list + 1]\n    end\n    return res\nend",
    "    local n = #list\n    m = m % n\n    local rotated = {}\n    for i = 1, n do\n        rotated[i] = list[(i + m - 1) % n + 1]\n    end\n    return rotated\nend",
    "    local n = #list\n    local new_list = {}\n    for i = 1, n do\n        new_list[i] = list[(i + m - 1) % n + 1]\n    end\n    return new_list\nend",
    "    local n = #list\n    m = m % n\n    if m == 0 then\n        return list\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = list[(i + m - 1) % n + 1]\n    end\n    return result\nend"
  ]
}