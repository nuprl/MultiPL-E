{
  "name": "mbpp_558_digit_distance_nums",
  "language": "lua",
  "prompt": "-- Write a python function to find the sum of the per-digit difference between two integers.\nlocal function digit_distance_nums(n1, n2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digit_distance_nums\n    lu.assertEquals(candidate(1, 2), 1)\n    lu.assertEquals(candidate(23, 56), 6)\n    lu.assertEquals(candidate(123, 256), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = #n1_str\n    local n2_len = #n2_str\n    local n1_pos = 1\n    local n2_pos = 1\n    while n1_pos <= n1_len and n2_pos <= n2_len do\n        local n1_digit = tonumber(n1_str:sub(n1_pos, n1_pos))\n        local n2_digit = tonumber(n2_str:sub(n2_pos, n2_pos))\n        sum = sum + math.abs(n1_digit - n2_digit)\n        n1_pos = n1_pos + 1\n        n2_pos = n2_pos + 1\n    end\n    return sum\nend",
    "\tlocal sum = 0\n\tlocal n1, n2 = tostring(n1), tostring(n2)\n\tlocal len = math.max(#n1, #n2)\n\tfor i = 1, len do\n\t\tlocal d1 = tonumber(n1:sub(i, i)) or 0\n\t\tlocal d2 = tonumber(n2:sub(i, i)) or 0\n\t\tsum = sum + math.abs(d1 - d2)\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = #n1_str\n  local n2_len = #n2_str\n  local n1_idx = 1\n  local n2_idx = 1\n  while n1_idx <= n1_len and n2_idx <= n2_len do\n    local n1_digit = tonumber(n1_str:sub(n1_idx, n1_idx))\n    local n2_digit = tonumber(n2_str:sub(n2_idx, n2_idx))\n    sum = sum + math.abs(n1_digit - n2_digit)\n    n1_idx = n1_idx + 1\n    n2_idx = n2_idx + 1\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  for i = 1, math.max(#n1_str, #n2_str) do\n    local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n    local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(tostring(n1):sub(i, i))\n    local d2 = tonumber(tostring(n2):sub(i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(string.sub(tostring(n1), i, i))\n    local d2 = tonumber(string.sub(tostring(n2), i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "\tlocal sum = 0\n\tlocal n1, n2 = tostring(n1), tostring(n2)\n\tlocal len1, len2 = #n1, #n2\n\tlocal max_len = math.max(len1, len2)\n\tfor i = 1, max_len do\n\t\tlocal d1 = tonumber(n1:sub(i, i)) or 0\n\t\tlocal d2 = tonumber(n2:sub(i, i)) or 0\n\t\tsum = sum + math.abs(d1 - d2)\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = #n1_str\n  local n2_len = #n2_str\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n    local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #tostring(n1) do\n        local d1 = tonumber(tostring(n1):sub(i, i))\n        local d2 = tonumber(tostring(n2):sub(i, i))\n        sum = sum + math.abs(d1 - d2)\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #tostring(n1) do\n        local d1 = tonumber(tostring(n1):sub(i, i))\n        local d2 = tonumber(tostring(n2):sub(i, i))\n        sum = sum + math.abs(d1 - d2)\n    end\n    return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    for i = 1, #n1_str do\n        sum = sum + math.abs(tonumber(n1_str:sub(i, i)) - tonumber(n2_str:sub(i, i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "\tlocal sum = 0\n\tfor i = 1, #n1 do\n\t\tsum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = #n1_str\n  local n2_len = #n2_str\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n    local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1, n2 = tostring(n1), tostring(n2)\n\tfor i = 1, math.max(#n1, #n2) do\n\t\tlocal d1, d2 = tonumber(n1:sub(i, i)) or 0, tonumber(n2:sub(i, i)) or 0\n\t\tsum = sum + math.abs(d1 - d2)\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(string.sub(tostring(n1), i, i))\n    local d2 = tonumber(string.sub(tostring(n2), i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(tostring(n1):sub(i, i))\n    local d2 = tonumber(tostring(n2):sub(i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(tostring(n1):sub(i, i))\n    local d2 = tonumber(tostring(n2):sub(i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1, n2 = math.abs(n1), math.abs(n2)\n\twhile n1 > 0 or n2 > 0 do\n\t\tlocal d1 = n1 % 10\n\t\tlocal d2 = n2 % 10\n\t\tsum = sum + math.abs(d1 - d2)\n\t\tn1 = math.floor(n1 / 10)\n\t\tn2 = math.floor(n2 / 10)\n\tend\n\treturn sum\nend",
    "\tlocal sum = 0\n\tfor i = 1, #n1 do\n\t\tsum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(tostring(n1):sub(i, i))\n    local d2 = tonumber(tostring(n2):sub(i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal max_len = math.max(n1_len, n2_len)\n\tfor i = 1, max_len do\n\t\tlocal n1_digit = tonumber(n1_str:sub(i, i)) or 0\n\t\tlocal n2_digit = tonumber(n2_str:sub(i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "\tlocal sum = 0\n\tfor i = 1, #n1 do\n\t\tsum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = string.len(n1_str)\n    local n2_len = string.len(n2_str)\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n        local n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = string.len(n1_str)\n    local n2_len = string.len(n2_str)\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n        local n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "\tlocal sum = 0\n\tfor i = 1, #n1 do\n\t\tsum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #tostring(n1) do\n        local d1 = tonumber(tostring(n1):sub(i, i))\n        local d2 = tonumber(tostring(n2):sub(i, i))\n        sum = sum + math.abs(d1 - d2)\n    end\n    return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal max_len = math.max(n1_len, n2_len)\n\tfor i = 1, max_len do\n\t\tlocal n1_digit = tonumber(n1_str:sub(i, i)) or 0\n\t\tlocal n2_digit = tonumber(n2_str:sub(i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n    end\n    return sum\nend",
    "\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal max_len = math.max(n1_len, n2_len)\n\tlocal sum = 0\n\tfor i = 1, max_len do\n\t\tlocal n1_digit = tonumber(n1_str:sub(i, i)) or 0\n\t\tlocal n2_digit = tonumber(n2_str:sub(i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i,i)) - tonumber(n2:sub(i,i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = #n1_str\n    local n2_len = #n2_str\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n        local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = #n1_str\n  local n2_len = #n2_str\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n    local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal n1_rev = string.reverse(n1_str)\n\tlocal n2_rev = string.reverse(n2_str)\n\tlocal sum = 0\n\tlocal i = 1\n\twhile i <= n1_len or i <= n2_len do\n\t\tlocal n1_digit = tonumber(string.sub(n1_rev, i, i)) or 0\n\t\tlocal n2_digit = tonumber(string.sub(n2_rev, i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\t\ti = i + 1\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i,i)) - tonumber(n2:sub(i,i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  for i = 1, #n1_str do\n    local n1_digit = tonumber(n1_str:sub(i, i))\n    local n2_digit = tonumber(n2_str:sub(i, i))\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #tostring(n1) do\n        sum = sum + math.abs(tonumber(tostring(n1):sub(i, i)) - tonumber(tostring(n2):sub(i, i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = string.len(n1_str)\n    local n2_len = string.len(n2_str)\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n        local n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal max_len = math.max(n1_len, n2_len)\n\tfor i = 1, max_len do\n\t\tlocal n1_digit = tonumber(n1_str:sub(i, i)) or 0\n\t\tlocal n2_digit = tonumber(n2_str:sub(i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal max_len = math.max(n1_len, n2_len)\n\tfor i = 1, max_len do\n\t\tlocal n1_digit = tonumber(n1_str:sub(i, i)) or 0\n\t\tlocal n2_digit = tonumber(n2_str:sub(i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n    end\n    return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = #n1_str\n    local n2_len = #n2_str\n    local n1_idx = 1\n    local n2_idx = 1\n    while n1_idx <= n1_len or n2_idx <= n2_len do\n        local n1_digit = tonumber(n1_str:sub(n1_idx, n1_idx)) or 0\n        local n2_digit = tonumber(n2_str:sub(n2_idx, n2_idx)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n        n1_idx = n1_idx + 1\n        n2_idx = n2_idx + 1\n    end\n    return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = string.len(n1_str)\n  local n2_len = string.len(n2_str)\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n    local n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1, n2 = tostring(n1), tostring(n2)\n\tlocal len = math.max(#n1, #n2)\n\tfor i = 1, len do\n\t\tlocal d1 = tonumber(n1:sub(i, i)) or 0\n\t\tlocal d2 = tonumber(n2:sub(i, i)) or 0\n\t\tsum = sum + math.abs(d1 - d2)\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(tostring(n1):sub(i, i))\n    local d2 = tonumber(tostring(n2):sub(i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal n1_pos = 1\n\tlocal n2_pos = 1\n\twhile n1_pos <= n1_len and n2_pos <= n2_len do\n\t\tlocal n1_digit = tonumber(n1_str:sub(n1_pos, n1_pos))\n\t\tlocal n2_digit = tonumber(n2_str:sub(n2_pos, n2_pos))\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\t\tn1_pos = n1_pos + 1\n\t\tn2_pos = n2_pos + 1\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = #n1_str\n  local n2_len = #n2_str\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n    local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1, n2 = tostring(n1), tostring(n2)\n  for i = 1, math.max(#n1, #n2) do\n    local d1, d2 = tonumber(n1:sub(i, i)) or 0, tonumber(n2:sub(i, i)) or 0\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = string.len(n1_str)\n\tlocal n2_len = string.len(n2_str)\n\tlocal len = math.max(n1_len, n2_len)\n\tfor i = 1, len do\n\t\tlocal n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n\t\tlocal n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    local n1, n2 = tostring(n1), tostring(n2)\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tfor i = 1, #n1_str do\n\t\tsum = sum + math.abs(tonumber(n1_str:sub(i, i)) - tonumber(n2_str:sub(i, i)))\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = #n1_str\n    local n2_len = #n2_str\n    local n1_idx = 1\n    local n2_idx = 1\n    while n1_idx <= n1_len or n2_idx <= n2_len do\n        local n1_digit = tonumber(n1_str:sub(n1_idx, n1_idx)) or 0\n        local n2_digit = tonumber(n2_str:sub(n2_idx, n2_idx)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n        n1_idx = n1_idx + 1\n        n2_idx = n2_idx + 1\n    end\n    return sum\nend",
    "    local sum = 0\n    while n1 > 0 or n2 > 0 do\n        local d1 = n1 % 10\n        local d2 = n2 % 10\n        sum = sum + math.abs(d1 - d2)\n        n1 = math.floor(n1 / 10)\n        n2 = math.floor(n2 / 10)\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = #n1_str\n    local n2_len = #n2_str\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n        local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = #n1_str\n    local n2_len = #n2_str\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n        local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    for i = 1, #n1_str do\n        local n1_digit = tonumber(n1_str:sub(i, i))\n        local n2_digit = tonumber(n2_str:sub(i, i))\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = #n1_str\n    local n2_len = #n2_str\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local d1 = tonumber(n1_str:sub(i, i)) or 0\n        local d2 = tonumber(n2_str:sub(i, i)) or 0\n        sum = sum + math.abs(d1 - d2)\n    end\n    return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = #n1_str\n  local n2_len = #n2_str\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n    local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    for i = 1, math.max(#n1_str, #n2_str) do\n        local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n        local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n    end\n    return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal n1_index = 1\n\tlocal n2_index = 1\n\twhile n1_index <= n1_len and n2_index <= n2_len do\n\t\tlocal n1_digit = tonumber(n1_str:sub(n1_index, n1_index))\n\t\tlocal n2_digit = tonumber(n2_str:sub(n2_index, n2_index))\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\t\tn1_index = n1_index + 1\n\t\tn2_index = n2_index + 1\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal max_len = math.max(n1_len, n2_len)\n\tfor i = 1, max_len do\n\t\tlocal n1_digit = tonumber(n1_str:sub(i, i)) or 0\n\t\tlocal n2_digit = tonumber(n2_str:sub(i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #tostring(n1) do\n        local d1 = tonumber(tostring(n1):sub(i, i))\n        local d2 = tonumber(tostring(n2):sub(i, i))\n        sum = sum + math.abs(d1 - d2)\n    end\n    return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = #n1_str\n  local n2_len = #n2_str\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n    local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1, n2 = tostring(n1), tostring(n2)\n\tfor i = 1, math.max(#n1, #n2) do\n\t\tlocal d1, d2 = tonumber(n1:sub(i, i)) or 0, tonumber(n2:sub(i, i)) or 0\n\t\tsum = sum + math.abs(d1 - d2)\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = #n1_str\n    local n2_len = #n2_str\n    local diff = math.abs(n1_len - n2_len)\n    if n1_len > n2_len then\n        n2_str = string.rep('0', diff) .. n2_str\n    elseif n2_len > n1_len then\n        n1_str = string.rep('0', diff) .. n1_str\n    end\n    for i = 1, #n1_str do\n        sum = sum + math.abs(tonumber(n1_str:sub(i, i)) - tonumber(n2_str:sub(i, i)))\n    end\n    return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = #n1_str\n    local n2_len = #n2_str\n    local n1_idx = 1\n    local n2_idx = 1\n    while n1_idx <= n1_len and n2_idx <= n2_len do\n        local n1_digit = tonumber(n1_str:sub(n1_idx, n1_idx))\n        local n2_digit = tonumber(n2_str:sub(n2_idx, n2_idx))\n        sum = sum + math.abs(n1_digit - n2_digit)\n        n1_idx = n1_idx + 1\n        n2_idx = n2_idx + 1\n    end\n    return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = string.len(n1_str)\n    local n2_len = string.len(n2_str)\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local d1 = tonumber(string.sub(n1_str, i, i)) or 0\n        local d2 = tonumber(string.sub(n2_str, i, i)) or 0\n        sum = sum + math.abs(d1 - d2)\n    end\n    return sum\nend",
    "  local sum = 0\n  local n1, n2 = tostring(n1), tostring(n2)\n  for i = 1, math.max(#n1, #n2) do\n    local d1, d2 = tonumber(n1:sub(i, i)) or 0, tonumber(n2:sub(i, i)) or 0\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = #n1_str\n    local n2_len = #n2_str\n    local n1_idx = 1\n    local n2_idx = 1\n    local sum = 0\n    while n1_idx <= n1_len and n2_idx <= n2_len do\n        local n1_digit = tonumber(n1_str:sub(n1_idx, n1_idx))\n        local n2_digit = tonumber(n2_str:sub(n2_idx, n2_idx))\n        sum = sum + math.abs(n1_digit - n2_digit)\n        n1_idx = n1_idx + 1\n        n2_idx = n2_idx + 1\n    end\n    return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tfor i = 1, #n1_str do\n\t\tsum = sum + math.abs(tonumber(n1_str:sub(i, i)) - tonumber(n2_str:sub(i, i)))\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    local d1 = tonumber(n1:sub(i, i))\n    local d2 = tonumber(n2:sub(i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(tostring(n1):sub(i, i))\n    local d2 = tonumber(tostring(n2):sub(i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i,i)) - tonumber(n2:sub(i,i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = string.len(n1_str)\n  local n2_len = string.len(n2_str)\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n    local n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "    local sum = 0\n    n1, n2 = tostring(n1), tostring(n2)\n    for i = 1, math.max(#n1, #n2) do\n        local d1 = tonumber(n1:sub(i, i)) or 0\n        local d2 = tonumber(n2:sub(i, i)) or 0\n        sum = sum + math.abs(d1 - d2)\n    end\n    return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = string.len(n1_str)\n  local n2_len = string.len(n2_str)\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n    local n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal max_len = math.max(n1_len, n2_len)\n\tfor i = 1, max_len do\n\t\tlocal n1_digit = tonumber(n1_str:sub(i, i)) or 0\n\t\tlocal n2_digit = tonumber(n2_str:sub(i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "\tlocal sum = 0\n\tn1, n2 = tostring(n1), tostring(n2)\n\tfor i = 1, math.max(#n1, #n2) do\n\t\tlocal d1, d2 = tonumber(n1:sub(i, i)) or 0, tonumber(n2:sub(i, i)) or 0\n\t\tsum = sum + math.abs(d1 - d2)\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  for i = 1, #n1_str do\n    sum = sum + math.abs(tonumber(n1_str:sub(i, i)) - tonumber(n2_str:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  n1, n2 = tostring(n1), tostring(n2)\n  local sum = 0\n  for i = 1, math.max(#n1, #n2) do\n    local d1, d2 = tonumber(n1:sub(i, i)) or 0, tonumber(n2:sub(i, i)) or 0\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = #n1_str\n    local n2_len = #n2_str\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n        local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, math.max(#tostring(n1), #tostring(n2)) do\n        local d1 = tonumber(tostring(n1):sub(-i, -i)) or 0\n        local d2 = tonumber(tostring(n2):sub(-i, -i)) or 0\n        sum = sum + math.abs(d1 - d2)\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = #n1_str\n    local n2_len = #n2_str\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n        local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "  local sum = 0\n  for d1, d2 in tostring(n1):gmatch('(%d)(%d)') do\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = string.len(n1_str)\n    local n2_len = string.len(n2_str)\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n        local n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tfor i = 1, #n1_str do\n\t\tlocal n1_digit = tonumber(n1_str:sub(i, i))\n\t\tlocal n2_digit = tonumber(n2_str:sub(i, i))\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = #n1_str\n  local n2_len = #n2_str\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n    local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(tostring(n1):sub(i, i))\n    local d2 = tonumber(tostring(n2):sub(i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  for i = 1, #n1_str do\n    local n1_digit = tonumber(n1_str:sub(i, i))\n    local n2_digit = tonumber(n2_str:sub(i, i))\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal max_len = math.max(n1_len, n2_len)\n\tfor i = 1, max_len do\n\t\tlocal n1_digit = tonumber(n1_str:sub(i, i)) or 0\n\t\tlocal n2_digit = tonumber(n2_str:sub(i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i,i)) - tonumber(n2:sub(i,i)))\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal max_len = math.max(n1_len, n2_len)\n\tfor i = 1, max_len do\n\t\tlocal n1_digit = tonumber(n1_str:sub(i, i)) or 0\n\t\tlocal n2_digit = tonumber(n2_str:sub(i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal max_len = math.max(n1_len, n2_len)\n\tfor i = 1, max_len do\n\t\tlocal n1_digit = tonumber(n1_str:sub(i, i)) or 0\n\t\tlocal n2_digit = tonumber(n2_str:sub(i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = n1_str:len()\n    local n2_len = n2_str:len()\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n        local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(tostring(n1):sub(i, i))\n    local d2 = tonumber(tostring(n2):sub(i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1, n2 = tostring(n1), tostring(n2)\n\tlocal len = math.max(#n1, #n2)\n\tfor i = 1, len do\n\t\tlocal d1 = tonumber(n1:sub(i, i)) or 0\n\t\tlocal d2 = tonumber(n2:sub(i, i)) or 0\n\t\tsum = sum + math.abs(d1 - d2)\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = #n1_str\n    local n2_len = #n2_str\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n        local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = string.len(n1_str)\n  local n2_len = string.len(n2_str)\n  local len = math.max(n1_len, n2_len)\n  for i = 1, len do\n    local n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n    local n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(tostring(n1):sub(i, i))\n    local d2 = tonumber(tostring(n2):sub(i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = #n1_str\n  local n2_len = #n2_str\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n    local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = #n1_str\n\tlocal n2_len = #n2_str\n\tlocal max_len = math.max(n1_len, n2_len)\n\tfor i = 1, max_len do\n\t\tlocal n1_digit = tonumber(n1_str:sub(i, i)) or 0\n\t\tlocal n2_digit = tonumber(n2_str:sub(i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "\tlocal sum = 0\n\tlocal n1, n2 = tostring(n1), tostring(n2)\n\tlocal len = math.max(#n1, #n2)\n\tfor i = 1, len do\n\t\tlocal d1, d2 = tonumber(n1:sub(i, i)) or 0, tonumber(n2:sub(i, i)) or 0\n\t\tsum = sum + math.abs(d1 - d2)\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = string.len(n1_str)\n  local n2_len = string.len(n2_str)\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n    local n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    sum = sum + math.abs(tonumber(tostring(n1):sub(i, i)) - tonumber(tostring(n2):sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tlocal n1_str = tostring(n1)\n\tlocal n2_str = tostring(n2)\n\tlocal n1_len = string.len(n1_str)\n\tlocal n2_len = string.len(n2_str)\n\tlocal max_len = math.max(n1_len, n2_len)\n\tfor i = 1, max_len do\n\t\tlocal n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n\t\tlocal n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n\t\tsum = sum + math.abs(n1_digit - n2_digit)\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(tostring(n1):sub(i, i))\n    local d2 = tonumber(tostring(n2):sub(i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = string.len(n1_str)\n    local n2_len = string.len(n2_str)\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n        local n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "  local sum = 0\n  for d1, d2 in n1:gmatch('.'), n2:gmatch('.') do\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "\tlocal sum = 0\n\tfor i = 1, #n1 do\n\t\tsum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n\tend\n\treturn sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  for i = 1, #n1_str do\n    sum = sum + math.abs(tonumber(n1_str:sub(i, i)) - tonumber(n2_str:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = #n1_str\n  local n2_len = #n2_str\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n    local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = #n1_str\n  local n2_len = #n2_str\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n    local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "    local sum = 0\n    local n1_str = tostring(n1)\n    local n2_str = tostring(n2)\n    local n1_len = string.len(n1_str)\n    local n2_len = string.len(n2_str)\n    local max_len = math.max(n1_len, n2_len)\n    for i = 1, max_len do\n        local n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n        local n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n        sum = sum + math.abs(n1_digit - n2_digit)\n    end\n    return sum\nend",
    "    local sum = 0\n    for i = 1, #n1 do\n        sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n    end\n    return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = string.len(n1_str)\n  local n2_len = string.len(n2_str)\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(string.sub(n1_str, i, i)) or 0\n    local n2_digit = tonumber(string.sub(n2_str, i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, #tostring(n1) do\n        sum = sum + math.abs(tonumber(tostring(n1):sub(i, i)) - tonumber(tostring(n2):sub(i, i)))\n    end\n    return sum\nend",
    "\tlocal sum = 0\n\twhile n1 > 0 or n2 > 0 do\n\t\tlocal d1 = n1 % 10\n\t\tlocal d2 = n2 % 10\n\t\tsum = sum + math.abs(d1 - d2)\n\t\tn1 = math.floor(n1 / 10)\n\t\tn2 = math.floor(n2 / 10)\n\tend\n\treturn sum\nend"
  ]
}