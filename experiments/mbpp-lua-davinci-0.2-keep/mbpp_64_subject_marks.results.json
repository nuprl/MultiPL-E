{
  "name": "mbpp_64_subject_marks",
  "language": "lua",
  "prompt": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks,sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks,sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2]>b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanpvebc_.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpanpvebc_.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function compare(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,compare)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxnvc7id.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpkxnvc7id.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeiavc1k.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpkeiavc1k.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a,b) return a[2] < b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeiavc1k.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpkeiavc1k.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptaaq1dbp.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmptaaq1dbp.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function compare(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeiavc1k.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpkeiavc1k.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeiavc1k.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpkeiavc1k.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptaaq1dbp.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmptaaq1dbp.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3do9jagq.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp3do9jagq.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks,sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks,sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeiavc1k.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpkeiavc1k.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a,b) return a[2] < b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks,sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3do9jagq.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp3do9jagq.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function cmp(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, cmp)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_second(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_second)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeiavc1k.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpkeiavc1k.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks,sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeiavc1k.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpkeiavc1k.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3do9jagq.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp3do9jagq.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks,sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a,b) return a[2] < b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    for i = 1, #subjectmarks do\n        print(subjectmarks[i][1], subjectmarks[i][2])\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "Social sciences\t82\nEnglish\t88\nScience\t90\nMaths\t97\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kqdoe0c.lua:15: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: nil\nstack traceback:\n\t/tmp/tmp8kqdoe0c.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptaaq1dbp.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmptaaq1dbp.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3do9jagq.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp3do9jagq.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function compare(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks,compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks,sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptaaq1dbp.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmptaaq1dbp.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3do9jagq.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp3do9jagq.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function compare(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ts9nq3u.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp1ts9nq3u.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function compare(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks,compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_subject_marks(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_subject_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeiavc1k.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpkeiavc1k.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_second(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_second)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function compare(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3do9jagq.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp3do9jagq.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function compare(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptaaq1dbp.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmptaaq1dbp.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_subject_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_subject_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ts9nq3u.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp1ts9nq3u.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] > b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz772ewfe.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpz772ewfe.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpry76wgbq.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpry76wgbq.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ts9nq3u.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp1ts9nq3u.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3do9jagq.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp3do9jagq.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123811,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqntah44.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpnqntah44.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  table.sort(subjectmarks, function(a,b) return a[2] < b[2] end)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123811,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function compare(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(t1, t2)\n        return t1[2] < t2[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123811,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptaaq1dbp.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmptaaq1dbp.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(t1, t2)\n\t\treturn t1[2] < t2[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123811,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpry76wgbq.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpry76wgbq.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3do9jagq.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp3do9jagq.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function compare(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks,compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxnvc7id.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpkxnvc7id.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks,sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local sorted = {}\n    for i = 1, #subjectmarks do\n        local min = subjectmarks[i]\n        for j = i + 1, #subjectmarks do\n            if subjectmarks[j][2] < min[2] then\n                min = subjectmarks[j]\n                subjectmarks[j] = subjectmarks[i]\n                subjectmarks[i] = min\n            end\n        end\n        sorted[i] = subjectmarks[i]\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123811,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123810,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkeiavc1k.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpkeiavc1k.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509977,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}