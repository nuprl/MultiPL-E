{
  "name": "mbpp_463_max_subarray_product",
  "language": "lua",
  "prompt": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnkfuuk9.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmppnkfuuk9.lua:9: in local 'candidate'\n\t/tmp/tmppnkfuuk9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  local n = #arr\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmphepnpttp.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local max_product = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdv_t80lt.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = tmp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = 1\n  local min_product = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product = max_product * arr[i]\n      min_product = math.min(min_product * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product = 1\n      min_product = 1\n    else\n      local temp = max_product\n      max_product = math.max(min_product * arr[i], 1)\n      min_product = temp * arr[i]\n    end\n    if max_so_far < max_product then\n      max_so_far = max_product\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = math.min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = math.max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_product < max_so_far then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = arr[1]\n  local min_product = arr[1]\n  local max_so_far = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmx13fl_e.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = arr[1]\n  local min_so_far = arr[1]\n  local max_ending_here = arr[1]\n  local min_ending_here = arr[1]\n  local max_product = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqp6e3xri.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnkfuuk9.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmppnkfuuk9.lua:9: in local 'candidate'\n\t/tmp/tmppnkfuuk9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnkfuuk9.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmppnkfuuk9.lua:9: in local 'candidate'\n\t/tmp/tmppnkfuuk9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local max_product = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdv_t80lt.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_so_far > max_product then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy_rrkcfe.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpy_rrkcfe.lua:9: in local 'candidate'\n\t/tmp/tmpy_rrkcfe.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnkfuuk9.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmppnkfuuk9.lua:9: in local 'candidate'\n\t/tmp/tmppnkfuuk9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = 1\n  local min_product = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product = max_product * arr[i]\n      min_product = min(min_product * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product = 1\n      min_product = 1\n    else\n      local temp = max_product\n      max_product = max(min_product * arr[i], 1)\n      min_product = temp * arr[i]\n    end\n    if max_so_far < max_product then\n      max_so_far = max_product\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeaoljaq_.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpeaoljaq_.lua:9: in local 'candidate'\n\t/tmp/tmpeaoljaq_.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_product < max_so_far then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_50y9t3e.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp_50y9t3e.lua:10: in local 'candidate'\n\t/tmp/tmp_50y9t3e.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = arr[1]\n  local min_product = arr[1]\n  local max_so_far = arr[1]\n  for i = 2, #arr do\n    local curr = arr[i]\n    local temp_max = max_product\n    max_product = math.max(curr, max_product * curr, min_product * curr)\n    min_product = math.min(curr, temp_max * curr, min_product * curr)\n    max_so_far = math.max(max_so_far, max_product)\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = math.min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = math.max(min_ending_here * v, 1)\n            min_ending_here = tmp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local max_product = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdv_t80lt.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = arr[1]\n  local min_product = arr[1]\n  local max_so_far = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmx13fl_e.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = max(min_ending_here * v, 1)\n            min_ending_here = temp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0dyjsm0_.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp0dyjsm0_.lua:9: in local 'candidate'\n\t/tmp/tmp0dyjsm0_.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  local size = #arr\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6asqakyk.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local max_product = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdv_t80lt.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn9_s1r79.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpn9_s1r79.lua:9: in local 'candidate'\n\t/tmp/tmpn9_s1r79.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local max_product = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdv_t80lt.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = arr[1]\n  local min_so_far = arr[1]\n  local max_product = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "lua: /tmp/tmp04u70nut.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  local size = #arr\n  for i = 1, size do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_product < max_so_far then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpccaqrygs.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpccaqrygs.lua:10: in local 'candidate'\n\t/tmp/tmpccaqrygs.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn9_s1r79.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpn9_s1r79.lua:9: in local 'candidate'\n\t/tmp/tmpn9_s1r79.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product, min_product, max_so_far = 1, 1, 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product = max_product * arr[i]\n      min_product = math.min(min_product * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product = 1\n      min_product = 1\n    else\n      local temp = max_product\n      max_product = math.max(min_product * arr[i], 1)\n      min_product = temp * arr[i]\n    end\n    if max_so_far < max_product then\n      max_so_far = max_product\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl1dgefra.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpl1dgefra.lua:9: in local 'candidate'\n\t/tmp/tmpl1dgefra.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8na5lvjb.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp8na5lvjb.lua:9: in local 'candidate'\n\t/tmp/tmp8na5lvjb.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = math.min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = math.max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_so_far > max_product then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0f3tr9uk.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnkfuuk9.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmppnkfuuk9.lua:9: in local 'candidate'\n\t/tmp/tmppnkfuuk9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp46rf_8oa.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp46rf_8oa.lua:9: in local 'candidate'\n\t/tmp/tmp46rf_8oa.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = arr[1]\n  local min_product = arr[1]\n  local max_so_far = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmx13fl_e.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = math.min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = math.max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_so_far > max_product then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_so_far = 1\n    local min_so_far = 1\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_product = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "lua: /tmp/tmp88b0g31w.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = arr[1]\n  local min_product = arr[1]\n  local result = arr[1]\n  for i = 2, #arr do\n    local tmp = max_product\n    max_product = math.max(math.max(max_product * arr[i], min_product * arr[i]), arr[i])\n    min_product = math.min(math.min(tmp * arr[i], min_product * arr[i]), arr[i])\n    result = math.max(max_product, result)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = arr[1]\n  local min_product = arr[1]\n  local max_so_far = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmx13fl_e.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_so_far = max_so_far * v\n      min_so_far = math.min(min_so_far * v, 1)\n    elseif v == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local tmp = max_so_far\n      max_so_far = math.max(min_so_far * v, 1)\n      min_so_far = tmp * v\n    end\n    max_product = math.max(max_product, max_so_far)\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local result = -math.huge\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    if min_so_far > min_ending_here then\n      min_so_far = min_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl1dgefra.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpl1dgefra.lua:9: in local 'candidate'\n\t/tmp/tmpl1dgefra.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = arr[1]\n  local min_product = arr[1]\n  local max_so_far = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmx13fl_e.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local max_product = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_so_far = math.min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_so_far = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_product < max_ending_here then\n      max_product = max_ending_here\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = arr[1]\n  local min_product = arr[1]\n  local max_so_far = arr[1]\n  for i = 2, #arr do\n    local temp = max_product\n    max_product = math.max(math.max(max_product * arr[i], min_product * arr[i]), arr[i])\n    min_product = math.min(math.min(temp * arr[i], min_product * arr[i]), arr[i])\n    max_so_far = math.max(max_so_far, max_product)\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = arr[1]\n  local min_so_far = arr[1]\n  local max_ending_here = arr[1]\n  local min_ending_here = arr[1]\n  local max_product = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqp6e3xri.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local max_product = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_so_far = math.min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_so_far = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = arr[1]\n  local min_so_far = arr[1]\n  local max_product = arr[1]\n  for i = 2, #arr do\n    local curr = arr[i]\n    local prev_max = max_so_far\n    local prev_min = min_so_far\n    max_so_far = math.max(curr, prev_max * curr, prev_min * curr)\n    min_so_far = math.min(curr, prev_max * curr, prev_min * curr)\n    max_product = math.max(max_product, max_so_far)\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = 1\n  local min_product = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_product = max_product * arr[i]\n      min_product = min(min_product * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product = 1\n      min_product = 1\n    else\n      local temp = max_product\n      max_product = max(min_product * arr[i], 1)\n      min_product = temp * arr[i]\n    end\n    if max_so_far < max_product then\n      max_so_far = max_product\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwxb4a9bh.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpwxb4a9bh.lua:10: in local 'candidate'\n\t/tmp/tmpwxb4a9bh.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8na5lvjb.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp8na5lvjb.lua:9: in local 'candidate'\n\t/tmp/tmp8na5lvjb.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local max_product = -math.huge\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_so_far = math.min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_so_far = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_ending_here > max_product then\n      max_product = max_ending_here\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnkfuuk9.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmppnkfuuk9.lua:9: in local 'candidate'\n\t/tmp/tmppnkfuuk9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = arr[1]\n  local min_product = arr[1]\n  local max_so_far = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmx13fl_e.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp46rf_8oa.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp46rf_8oa.lua:9: in local 'candidate'\n\t/tmp/tmp46rf_8oa.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local max_product = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_so_far = min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_so_far = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_product < max_ending_here then\n      max_product = max_ending_here\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr0k2372i.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpr0k2372i.lua:10: in local 'candidate'\n\t/tmp/tmpr0k2372i.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = arr[1]\n  local min_so_far = arr[1]\n  local max_ending_here = arr[1]\n  local min_ending_here = arr[1]\n  local max_product = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqp6e3xri.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = math.min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * v, 1)\n            min_ending_here = temp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzfsbntup.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpzfsbntup.lua:10: in local 'candidate'\n\t/tmp/tmpzfsbntup.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnkfuuk9.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmppnkfuuk9.lua:9: in local 'candidate'\n\t/tmp/tmppnkfuuk9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n\tlocal max_ending_here = 1\n\tlocal min_ending_here = 1\n\tlocal max_so_far = 1\n\tfor _, v in ipairs(arr) do\n\t\tif v > 0 then\n\t\t\tmax_ending_here = max_ending_here * v\n\t\t\tmin_ending_here = min(min_ending_here * v, 1)\n\t\telseif v == 0 then\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse\n\t\t\tlocal temp = max_ending_here\n\t\t\tmax_ending_here = max(min_ending_here * v, 1)\n\t\t\tmin_ending_here = temp * v\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0i65f48z.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp0i65f48z.lua:9: in local 'candidate'\n\t/tmp/tmp0i65f48z.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min_ending_here * arr[i]\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  local size = #arr\n  for i = 1, size do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_so_far > max_product then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsngttr43.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpsngttr43.lua:10: in local 'candidate'\n\t/tmp/tmpsngttr43.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_product = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe0pzd1lv.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  local size = #arr\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6asqakyk.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnkfuuk9.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmppnkfuuk9.lua:9: in local 'candidate'\n\t/tmp/tmppnkfuuk9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = 1\n  local min_product = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product = max_product * arr[i]\n      min_product = min(min_product * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product = 1\n      min_product = 1\n    else\n      local temp = max_product\n      max_product = max(min_product * arr[i], 1)\n      min_product = temp * arr[i]\n    end\n    if max_so_far < max_product then\n      max_so_far = max_product\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeaoljaq_.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpeaoljaq_.lua:9: in local 'candidate'\n\t/tmp/tmpeaoljaq_.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = math.min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = math.max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_product < max_so_far then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = max(min_ending_here * v, 1)\n            min_ending_here = temp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0dyjsm0_.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp0dyjsm0_.lua:9: in local 'candidate'\n\t/tmp/tmp0dyjsm0_.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzfsbntup.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpzfsbntup.lua:10: in local 'candidate'\n\t/tmp/tmpzfsbntup.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_product < max_so_far then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_50y9t3e.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp_50y9t3e.lua:10: in local 'candidate'\n\t/tmp/tmp_50y9t3e.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  local size = #arr\n  for i = 1, size do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_product < max_so_far then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpccaqrygs.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpccaqrygs.lua:10: in local 'candidate'\n\t/tmp/tmpccaqrygs.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_prod = 1\n  local min_prod = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_prod = max_prod * arr[i]\n      min_prod = math.min(min_prod * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_prod = 1\n      min_prod = 1\n    else\n      local temp = max_prod\n      max_prod = math.max(min_prod * arr[i], 1)\n      min_prod = temp * arr[i]\n    end\n    if max_so_far < max_prod then\n      max_so_far = max_prod\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = arr[1]\n  local min_so_far = arr[1]\n  local max_ending_here = arr[1]\n  local min_ending_here = arr[1]\n  local max_product = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqp6e3xri.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl1dgefra.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpl1dgefra.lua:9: in local 'candidate'\n\t/tmp/tmpl1dgefra.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn9_s1r79.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpn9_s1r79.lua:9: in local 'candidate'\n\t/tmp/tmpn9_s1r79.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_product = arr[1]\n  local min_product = arr[1]\n  local max_so_far = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmx13fl_e.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnkfuuk9.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmppnkfuuk9.lua:9: in local 'candidate'\n\t/tmp/tmppnkfuuk9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  local size = #arr\n  for i = 1, size do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = math.min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = math.max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_product < max_so_far then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = max(min_ending_here * v, 1)\n            min_ending_here = temp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0dyjsm0_.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp0dyjsm0_.lua:9: in local 'candidate'\n\t/tmp/tmp0dyjsm0_.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0f3tr9uk.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnkfuuk9.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmppnkfuuk9.lua:9: in local 'candidate'\n\t/tmp/tmppnkfuuk9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl1dgefra.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpl1dgefra.lua:9: in local 'candidate'\n\t/tmp/tmpl1dgefra.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl1dgefra.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpl1dgefra.lua:9: in local 'candidate'\n\t/tmp/tmpl1dgefra.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0f3tr9uk.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl1dgefra.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpl1dgefra.lua:9: in local 'candidate'\n\t/tmp/tmpl1dgefra.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnkfuuk9.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmppnkfuuk9.lua:9: in local 'candidate'\n\t/tmp/tmppnkfuuk9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn9_s1r79.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpn9_s1r79.lua:9: in local 'candidate'\n\t/tmp/tmpn9_s1r79.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_so_far > max_product then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy_rrkcfe.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpy_rrkcfe.lua:9: in local 'candidate'\n\t/tmp/tmpy_rrkcfe.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnkfuuk9.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmppnkfuuk9.lua:9: in local 'candidate'\n\t/tmp/tmppnkfuuk9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local max_product = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_so_far = math.min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_so_far = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_ending_here > max_product then\n      max_product = max_ending_here\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0f3tr9uk.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_so_far > max_product then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy_rrkcfe.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpy_rrkcfe.lua:9: in local 'candidate'\n\t/tmp/tmpy_rrkcfe.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    local n = #arr\n    for i = 1, n do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  local size = #arr\n  for i = 1, size do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_product < max_so_far then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpccaqrygs.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpccaqrygs.lua:10: in local 'candidate'\n\t/tmp/tmpccaqrygs.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local max_product = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdv_t80lt.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  local size = #arr\n  for i = 1, size do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_product < max_so_far then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpccaqrygs.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpccaqrygs.lua:10: in local 'candidate'\n\t/tmp/tmpccaqrygs.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  local n = #arr\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmphepnpttp.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = math.min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = math.max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_product < max_so_far then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = arr[1]\n  local min_so_far = arr[1]\n  local max_ending_here = arr[1]\n  local min_ending_here = arr[1]\n  local result = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvwn3eyhs.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzfsbntup.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpzfsbntup.lua:10: in local 'candidate'\n\t/tmp/tmpzfsbntup.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_product = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_ending_here > max_so_far then\n      max_so_far = max_ending_here\n    end\n    if min_ending_here < min_so_far then\n      min_so_far = min_ending_here\n    end\n  end\n  return max_so_far, min_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123142,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7f3n8x71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_product = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = math.min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = math.max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_product < max_so_far then\n      max_product = max_so_far\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}