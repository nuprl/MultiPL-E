{
  "name": "mbpp_412_remove_odd",
  "language": "lua",
  "prompt": "-- Write a python function to remove odd numbers from a given list.\nlocal function remove_odd(l)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_odd\n    lu.assertEquals(candidate({1, 2, 3}), {2})\n    lu.assertEquals(candidate({2, 4, 6}), {2, 4, 6})\n    lu.assertEquals(candidate({10, 20, 3}), {10, 20})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local result = {}\n  for i, v in ipairs(l) do\n    if v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend",
    "  local new_list = {}\n  for i, v in ipairs(l) do\n    if v % 2 == 0 then\n      table.insert(new_list, v)\n    end\n  end\n  return new_list\nend",
    "  local new_list = {}\n  for i, v in ipairs(l) do\n    if v % 2 == 0 then\n      new_list[#new_list+1] = v\n    end\n  end\n  return new_list\nend",
    "    local new_list = {}\n    for i, v in ipairs(l) do\n        if v % 2 == 0 then\n            table.insert(new_list, v)\n        end\n    end\n    return new_list\nend",
    "    local res = {}\n    for _, v in ipairs(l) do\n        if v % 2 == 0 then\n            table.insert(res, v)\n        end\n    end\n    return res\nend",
    "  local ret = {}\n  for i, v in ipairs(l) do\n    if v % 2 == 0 then\n      table.insert(ret, v)\n    end\n  end\n  return ret\nend",
    "  local result = {}\n  for i, v in ipairs(l) do\n    if v % 2 == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
    "    local new_list = {}\n    for i, v in ipairs(l) do\n        if v % 2 == 0 then\n            table.insert(new_list, v)\n        end\n    end\n    return new_list\nend",
    "  local result = {}\n  for i, v in ipairs(l) do\n    if v % 2 == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
    "    local ret = {}\n    for i, v in ipairs(l) do\n        if v % 2 == 0 then\n            table.insert(ret, v)\n        end\n    end\n    return ret\nend",
    "  local res = {}\n  for i, v in ipairs(l) do\n    if v % 2 == 0 then\n      table.insert(res, v)\n    end\n  end\n  return res\nend",
    "  local r = {}\n  for i = 1, #l do\n    if l[i] % 2 == 0 then\n      r[#r + 1] = l[i]\n    end\n  end\n  return r\nend",
    "  local nl = {}\n  for i,v in ipairs(l) do\n    if v % 2 == 0 then\n      nl[#nl+1] = v\n    end\n  end\n  return nl\nend",
    "    local res = {}\n    for _, v in ipairs(l) do\n        if v % 2 == 0 then\n            table.insert(res, v)\n        end\n    end\n    return res\nend",
    "\tlocal result = {}\n\tfor i,v in ipairs(l) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend",
    "    local result = {}\n    for _, v in ipairs(l) do\n        if v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local l2 = {}\n    for i, v in ipairs(l) do\n        if v % 2 == 0 then\n            l2[#l2 + 1] = v\n        end\n    end\n    return l2\nend",
    "    local res = {}\n    for i, v in ipairs(l) do\n        if v % 2 == 0 then\n            res[#res + 1] = v\n        end\n    end\n    return res\nend",
    "  local res = {}\n  for i, v in ipairs(l) do\n    if v % 2 == 0 then\n      res[#res + 1] = v\n    end\n  end\n  return res\nend",
    "  local res = {}\n  for i = 1, #l do\n    if l[i] % 2 == 0 then\n      res[#res + 1] = l[i]\n    end\n  end\n  return res\nend"
  ]
}