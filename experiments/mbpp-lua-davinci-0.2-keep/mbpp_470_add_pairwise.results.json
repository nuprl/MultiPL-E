{
  "name": "mbpp_470_add_pairwise",
  "language": "lua",
  "prompt": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal tup_len = #test_tup\n\tlocal new_tup = {}\n\tfor i = 1, tup_len - 1 do\n\t\tnew_tup[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n  local result = {}\n  for i = 1, #test_tup - 1 do\n    result[i] = test_tup[i] + test_tup[i + 1]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup do\n        if i == #test_tup then\n            sum = sum + test_tup[i]\n        else\n            sum = sum + test_tup[i] + test_tup[i+1]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvr6ip1gp.lua:17: expected: {6, 12, 15, 18}\nactual: 61\nstack traceback:\n\t/tmp/tmpvr6ip1gp.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    local new_tup = {}\n    for i = 1, tup_len - 1 do\n        table.insert(new_tup, test_tup[i] + test_tup[i + 1])\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup do\n\t\tif i == #test_tup then\n\t\t\tresult[i] = test_tup[i] + test_tup[1]\n\t\telse\n\t\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9tmlogo.lua:17: expected: {6, 12, 15, 18}\nactual: {6, 12, 15, 18, 11}\nstack traceback:\n\t/tmp/tmpw9tmlogo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n  local tup_len = #test_tup\n  local result = {}\n  for i = 1, tup_len - 1 do\n    result[i] = test_tup[i] + test_tup[i + 1]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    local new_tup = {}\n    for i = 1, tup_len - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal new_tup = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tnew_tup[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    local result = {}\n    for i = 1, tup_len - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        table.insert(result, test_tup[i] + test_tup[i + 1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup do\n        if i == #test_tup then\n            table.insert(result, test_tup[i] + test_tup[1])\n        else\n            table.insert(result, test_tup[i] + test_tup[i + 1])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jipos4y.lua:17: expected: {6, 12, 15, 18}\nactual: {6, 12, 15, 18, 11}\nstack traceback:\n\t/tmp/tmp2jipos4y.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\ttable.insert(result, test_tup[i] + test_tup[i + 1])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal new_tup = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tnew_tup[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        table.insert(result, test_tup[i] + test_tup[i + 1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    local new_tup = {}\n    for i = 1, tup_len - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    local result = {}\n    for i = 1, tup_len - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    local result = {}\n    for i = 1, tup_len - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        table.insert(result, test_tup[i] + test_tup[i + 1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal tup_len = #test_tup\n\tlocal sum_tup = {}\n\tfor i = 1, tup_len - 1 do\n\t\tsum_tup[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn sum_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        table.insert(result, test_tup[i] + test_tup[i + 1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup do\n\t\tif i == #test_tup then\n\t\t\tresult[i] = test_tup[i] + test_tup[1]\n\t\telse\n\t\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9tmlogo.lua:17: expected: {6, 12, 15, 18}\nactual: {6, 12, 15, 18, 11}\nstack traceback:\n\t/tmp/tmpw9tmlogo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal tup_len = #test_tup\n\tlocal new_tup = {}\n\tfor i = 1, tup_len - 1 do\n\t\tnew_tup[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n  local result = {}\n  for i = 1, #test_tup - 1 do\n    result[i] = test_tup[i] + test_tup[i + 1]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    local new_tup = {}\n    for i = 1, tup_len - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i=1,#test_tup-1 do\n        result[i] = test_tup[i] + test_tup[i+1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\ttable.insert(result, test_tup[i] + test_tup[i + 1])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n  local new_tup = {}\n  for i = 1, #test_tup - 1 do\n    new_tup[i] = test_tup[i] + test_tup[i + 1]\n  end\n  return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n  local result = {}\n  for i = 1, #test_tup - 1 do\n    result[i] = test_tup[i] + test_tup[i + 1]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal tup_len = #test_tup\n\tlocal new_tup = {}\n\tfor i = 1, tup_len - 1 do\n\t\tnew_tup[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        table.insert(result, test_tup[i] + test_tup[i + 1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n  local result = {}\n  for i = 1, #test_tup - 1 do\n    result[i] = test_tup[i] + test_tup[i + 1]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        table.insert(result, test_tup[i] + test_tup[i + 1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n  local sum = 0\n  for i = 1, #test_tup - 1 do\n    sum = sum + test_tup[i] + test_tup[i + 1]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc40senj2.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpc40senj2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    local sum_tup = {}\n    for i = 1, tup_len - 1 do\n        sum_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return sum_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal new_tup = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tnew_tup[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal new_tup = {}\n\tfor i = 1, #test_tup-1 do\n\t\tnew_tup[i] = test_tup[i] + test_tup[i+1]\n\tend\n\treturn new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    if tup_len == 0 then\n        return {}\n    elseif tup_len == 1 then\n        return {test_tup[1]}\n    else\n        local result = {}\n        for i = 1, tup_len - 1 do\n            result[i] = test_tup[i] + test_tup[i + 1]\n        end\n        return result\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    local new_tup = {}\n    for i = 1, tup_len - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    local new_tup = {}\n    for i = 1, tup_len - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup = {}\n    for i = 1, #test_tup - 1 do\n        tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local res = {}\n    for i = 1, #test_tup - 1 do\n        res[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        table.insert(result, test_tup[i] + test_tup[i + 1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    local new_tup = {}\n    for i = 1, tup_len-1 do\n        new_tup[i] = test_tup[i] + test_tup[i+1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal sum = 0\n\tfor i = 1, #test_tup - 1 do\n\t\tsum = sum + test_tup[i] + test_tup[i + 1]\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprt_mnj_i.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmprt_mnj_i.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n  local result = {}\n  for i = 1, #test_tup - 1 do\n    result[i] = test_tup[i] + test_tup[i + 1]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n  local sum = 0\n  for i = 1, #test_tup - 1 do\n    sum = sum + test_tup[i] + test_tup[i + 1]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc40senj2.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpc40senj2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal sum = 0\n\tfor i = 1, #test_tup - 1 do\n\t\tsum = sum + test_tup[i] + test_tup[i + 1]\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprt_mnj_i.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmprt_mnj_i.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup do\n        if i == #test_tup then\n            new_tup[i] = test_tup[i] + test_tup[1]\n        else\n            new_tup[i] = test_tup[i] + test_tup[i+1]\n        end\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_odhfsp.lua:17: expected: {6, 12, 15, 18}\nactual: {6, 12, 15, 18, 11}\nstack traceback:\n\t/tmp/tmpg_odhfsp.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n  local result = {}\n  for i = 1, #test_tup - 1 do\n    result[i] = test_tup[i] + test_tup[i + 1]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup do\n        if i == 1 then\n            result[i] = test_tup[i] + test_tup[i + 1]\n        elseif i == #test_tup then\n            result[i] = test_tup[i] + test_tup[i - 1]\n        else\n            result[i] = test_tup[i - 1] + test_tup[i] + test_tup[i + 1]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnza7gn1p.lua:19: expected: {6, 12, 15, 18}\nactual: {6, 13, 20, 25, 18}\nstack traceback:\n\t/tmp/tmpnza7gn1p.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal tup_len = #test_tup\n\tlocal new_tup = {}\n\tfor i = 1, tup_len - 1 do\n\t\tnew_tup[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup do\n        if i == #test_tup then\n            result[i] = test_tup[i] + test_tup[1]\n        else\n            result[i] = test_tup[i] + test_tup[i + 1]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm1xnuwb.lua:17: expected: {6, 12, 15, 18}\nactual: {6, 12, 15, 18, 11}\nstack traceback:\n\t/tmp/tmpgm1xnuwb.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal new_tup = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tnew_tup[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup do\n        if i == #test_tup then\n            result[i] = test_tup[i] + test_tup[1]\n        else\n            result[i] = test_tup[i] + test_tup[i + 1]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm1xnuwb.lua:17: expected: {6, 12, 15, 18}\nactual: {6, 12, 15, 18, 11}\nstack traceback:\n\t/tmp/tmpgm1xnuwb.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        table.insert(result, test_tup[i] + test_tup[i + 1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        table.insert(result, test_tup[i] + test_tup[i + 1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal sum = 0\n\tfor i = 1, #test_tup - 1 do\n\t\tsum = sum + test_tup[i] + test_tup[i + 1]\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprt_mnj_i.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmprt_mnj_i.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n  local sum = 0\n  for i = 1, #test_tup - 1 do\n    sum = sum + test_tup[i] + test_tup[i + 1]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc40senj2.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpc40senj2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_size = #test_tup\n    local result = {}\n    for i = 1, tup_size - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i=1, #test_tup-1 do\n        new_tup[i] = test_tup[i] + test_tup[i+1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        table.insert(new_tup, test_tup[i] + test_tup[i + 1])\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    local result = {}\n    for i = 1, tup_len - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i+1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local new_tup = {}\n    for i = 1, #test_tup - 1 do\n        new_tup[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return new_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\ttable.insert(result, test_tup[i] + test_tup[i + 1])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local tup_len = #test_tup\n    local result = {}\n    for i = 1, tup_len - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n  local sum = 0\n  for i = 1, #test_tup - 1 do\n    sum = sum + test_tup[i] + test_tup[i + 1]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc40senj2.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpc40senj2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i+1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwq0fvk_.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpkwq0fvk_.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup do\n        if i == #test_tup then\n            table.insert(result, test_tup[i])\n        else\n            table.insert(result, test_tup[i] + test_tup[i + 1])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3ki0ujy.lua:17: expected: {6, 12, 15, 18}\nactual: {6, 12, 15, 18, 10}\nstack traceback:\n\t/tmp/tmpy3ki0ujy.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i=1, #test_tup-1 do\n        sum = sum + test_tup[i] + test_tup[i+1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nyo56m2.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmp_nyo56m2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i=1, #test_tup-1 do\n        result[i] = test_tup[i] + test_tup[i+1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        table.insert(result, test_tup[i] + test_tup[i + 1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124238,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n\tlocal result = {}\n\tfor i = 1, #test_tup - 1 do\n\t\tresult[i] = test_tup[i] + test_tup[i + 1]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n    local sum = 0\n    for i = 1, #test_tup - 1 do\n        sum = sum + test_tup[i] + test_tup[i + 1]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx82akq5.lua:13: expected: {6, 12, 15, 18}\nactual: 51\nstack traceback:\n\t/tmp/tmpnx82akq5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}