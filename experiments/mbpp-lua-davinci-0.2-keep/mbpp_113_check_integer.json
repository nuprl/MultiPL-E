{
  "name": "mbpp_113_check_integer",
  "language": "lua",
  "prompt": "-- Write a function to check if a string represents an integer or not.\nlocal function check_integer(text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_integer\n    lu.assertEquals(candidate('python'), false)\n    lu.assertEquals(candidate('1'), true)\n    lu.assertEquals(candidate('12345'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local num = tonumber(text)\n    if num == nil then\n        return false\n    else\n        return math.floor(num) == num\n    end\nend",
    "    local num = tonumber(text)\n    if num then\n        return num\n    else\n        return nil\n    end\nend",
    "    local n = tonumber(text)\n    if n == nil then\n        return false\n    else\n        return math.floor(n) == n\n    end\nend",
    "    local num = tonumber(text)\n    if num == nil then\n        return false\n    else\n        return math.floor(num) == num\n    end\nend",
    "  local n = tonumber(text)\n  if n == nil then\n    return false\n  else\n    return math.floor(n) == n\n  end\nend",
    "    if text:match(\"%d+\") then\n        return true\n    else\n        return false\n    end\nend",
    "    local n = tonumber(text)\n    if n then\n        return n % 1 == 0\n    else\n        return false\n    end\nend",
    "    local n = tonumber(text)\n    return n ~= nil and math.floor(n) == n\nend",
    "    if text:match(\"^[+-]?%d+$\") then\n        return true\n    else\n        return false\n    end\nend",
    "    return tonumber(text) ~= nil\nend",
    "\tif text:match(\"^[%d]+$\") then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    return text:match(\"^%d+$\") ~= nil\nend",
    "    local num = tonumber(text)\n    if num then\n        return math.floor(num) == num\n    end\n    return false\nend",
    "    local result = true\n    if text == nil or text == \"\" then\n        result = false\n    else\n        for i = 1, #text do\n            local c = text:sub(i, i)\n            if c < \"0\" or c > \"9\" then\n                result = false\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local num = tonumber(text)\n    if num == nil then\n        return false\n    else\n        return math.floor(num) == num\n    end\nend",
    "    return text:match(\"^%d+$\")\nend",
    "    local result = tonumber(text)\n    if result then\n        return true\n    else\n        return false\n    end\nend",
    "    local num = tonumber(text)\n    if not num then\n        return false\n    else\n        return math.floor(num) == num\n    end\nend",
    "    local num = tonumber(text)\n    if num then\n        return num % 1 == 0\n    else\n        return false\n    end\nend",
    "    local num = tonumber(text)\n    if not num then\n        return false\n    else\n        return math.floor(num) == num\n    end\nend"
  ]
}