{
  "name": "mbpp_160_find_solution",
  "language": "lua",
  "prompt": "-- Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nlocal function find_solution(a, b, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_solution\n    lu.assertEquals(candidate(2, 3, 7), {2, 1})\n    lu.assertEquals(candidate(4, 2, 7), None)\n    lu.assertEquals(candidate(1, 13, 17), {4, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local x = 0\n    local y = 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return x, y\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x, y = 0, 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return x, y\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x = 0\n    local y = 0\n    while x <= n do\n        y = (n - a * x) / b\n        if y % 1 == 0 then\n            return x, y\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "\tlocal x, y = 0, 0\n\twhile x <= n do\n\t\ty = (n - a * x) / b\n\t\tif y % 1 == 0 then\n\t\t\treturn x, y\n\t\tend\n\t\tx = x + 1\n\tend\n\treturn nil\nend",
    "\tlocal x = 0\n\tlocal y = 0\n\twhile a * x <= n do\n\t\ty = (n - a * x) / b\n\t\tif y == math.floor(y) then\n\t\t\treturn x, y\n\t\tend\n\t\tx = x + 1\n\tend\n\treturn nil\nend",
    "    local x, y = 0, 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return x, y\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x = 0\n    local y = 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return x, y\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x = 0\n    local y = 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return x, y\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x, y = 0, 1\n    while a * x + b * y ~= n do\n        if a * x + b * y > n then\n            x = x - 1\n        else\n            y = y + 1\n        end\n    end\n    return x, y\nend",
    "  local x = 0\n  local y = 0\n  while x * a <= n do\n    y = (n - x * a) / b\n    if y == math.floor(y) then\n      return x, y\n    end\n    x = x + 1\n  end\n  return nil\nend",
    "    local x = 0\n    local y = 0\n    while x * a <= n do\n        if (n - x * a) % b == 0 then\n            y = (n - x * a) / b\n            return x, y\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x, y = 0, 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return x, y\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    -- TODO: Implement this function.\n    -- Hint: You can use the Euclidean algorithm to find the greatest common divisor of a and b.\n    -- Hint: You can use the extended Euclidean algorithm to find integers x and y that satisfy ax + by = gcd(a, b).\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use the Chinese remainder theorem to find integers x and y that satisfy ax + by = n.\n    -- Hint: You can use",
    "  local x = 0\n  local y = 0\n  while true do\n    if a * x + b * y == n then\n      return x, y\n    end\n    if a * x + b * y > n then\n      return nil\n    end\n    x = x + 1\n  end\nend",
    "  local x = 0\n  local y = 0\n  while x * a <= n do\n    if (n - x * a) % b == 0 then\n      y = (n - x * a) / b\n      return x, y\n    end\n    x = x + 1\n  end\n  return nil\nend",
    "\tlocal x = 0\n\tlocal y = 0\n\tlocal d = gcd(a, b)\n\tif n % d ~= 0 then\n\t\treturn nil\n\tend\n\tlocal a1 = a / d\n\tlocal b1 = b / d\n\tlocal n1 = n / d\n\tlocal x1, y1 = find_solution(b1, a1 % b1, n1)\n\tif x1 == nil then\n\t\treturn nil\n\tend\n\tx = y1\n\ty = x1 - (a1 / b1) * y1\n\treturn x, y\nend",
    "  local x = 0\n  local y = 0\n  while a * x <= n do\n    y = (n - a * x) / b\n    if y % 1 == 0 then\n      return x, y\n    end\n    x = x + 1\n  end\n  return nil\nend",
    "    local x, y = 0, 0\n    while x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return x, y\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "  local x, y = 0, 0\n  while a * x <= n do\n    y = (n - a * x) / b\n    if math.floor(y) == y then\n      return x, y\n    end\n    x = x + 1\n  end\n  return nil\nend",
    "  local x = 0\n  local y = 0\n  while a * x <= n do\n    if (n - a * x) % b == 0 then\n      y = (n - a * x) / b\n      return x, y\n    end\n    x = x + 1\n  end\n  return nil\nend"
  ]
}