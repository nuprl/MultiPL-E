{
  "name": "mbpp_101_kth_element",
  "language": "lua",
  "prompt": "-- Write a function to find the kth element in the given array using 1-based indexing.\nlocal function kth_element(arr, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local function partition(arr, lo, hi)\n    local pivot = arr[hi]\n    local i = lo\n    for j = lo, hi - 1 do\n      if arr[j] < pivot then\n        arr[i], arr[j] = arr[j], arr[i]\n        i = i + 1\n      end\n    end\n    arr[i], arr[hi] = arr[hi], arr[i]\n    return i\n  end",
    "  -- TODO\nend",
    "    if k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  -- TODO: Implement me!\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = 2\n  local right = n\n  while left <= right do\n    while left <= n and arr[left] < pivot do\n      left = left + 1\n    end\n    while right >= 1 and arr[right] > pivot do\n      right = right - 1\n    end\n    if left <= right then\n      arr[left], arr[right] = arr[right], arr[left]\n      left = left + 1\n      right = right - 1\n    end\n  end\n  arr[1], arr[right] = arr[right], arr[1]\n  if right == k then\n    return arr[right]\n  elseif right > k then\n    return kth_element(arr, k)\n  else\n    return kth_element(arr, k - right)\n  end\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend",
    "  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i <= j do\n    while arr[i] < kth do\n      i = i + 1\n    end\n    while arr[j] > kth do\n      j = j - 1\n    end\n    if i <= j then\n      arr[i], arr[j] = arr[j], arr[i]\n      i = i + 1\n      j = j - 1\n    end\n  end\n  return arr[k]\nend",
    "    local function partition(arr, left, right)\n        local pivot = arr[right]\n        local i = left\n        for j = left, right - 1 do\n            if arr[j] < pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n        arr[i], arr[right] = arr[right], arr[i]\n        return i\n    end",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local function partition(arr, l, r)\n    local i = l\n    local j = r\n    local pivot = arr[l]\n    while i < j do\n      while i < j and arr[j] >= pivot do\n        j = j - 1\n      end\n      arr[i] = arr[j]\n      while i < j and arr[i] <= pivot do\n        i = i + 1\n      end\n      arr[j] = arr[i]\n    end\n    arr[i] = pivot\n    return i\n  end\n  local function quick_select(arr, l, r, k)\n    if l == r then\n      return arr[l]\n    end\n    local pivot_index = partition(arr, l, r)\n    if pivot_index == k then\n      return arr[pivot_index]\n    elseif pivot_index > k then\n      return quick_select(arr, l, pivot_index - 1, k)\n    else\n      return quick_select(arr, pivot_index + 1, r, k)\n    end\n  end\n  return quick_select(arr, 1, n, k)\nend",
    "    local kth = arr[k]\n    local i = 1\n    local j = #arr\n    while i < j do\n        while arr[i] < kth do\n            i = i + 1\n        end\n        while arr[j] > kth do\n            j = j - 1\n        end\n        if i < j then\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n    end\n    return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr, \"k must be in range [1, #arr]\")\n  return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "\tlocal function partition(arr, l, r)\n\t\tlocal pivot = arr[r]\n\t\tlocal i = l - 1\n\t\tfor j = l, r - 1 do\n\t\t\tif arr[j] < pivot then\n\t\t\t\ti = i + 1\n\t\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\t\tend\n\t\tend\n\t\tarr[i + 1], arr[r] = arr[r], arr[i + 1]\n\t\treturn i + 1\n\tend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  local len = #arr\n  if k > len then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, len do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  assert(k > 0 and k <= #arr)\n  local pivot = arr[1]\n  local left, right = {}, {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "    local kth = arr[k]\n    local i = k - 1\n    local j = #arr\n    while i < j do\n        while arr[i] <= kth and i < j do\n            i = i + 1\n        end\n        while arr[j] >= kth and i < j do\n            j = j - 1\n        end\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n    arr[k], arr[j] = arr[j], arr[k]\n    return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr, \"k is out of range\")\n  return arr[k]\nend",
    "  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "    local n = #arr\n    if k > n then\n        return nil\n    end\n    local pivot = arr[1]\n    local left = {}\n    local right = {}\n    for i = 2, n do\n        if arr[i] < pivot then\n            left[#left + 1] = arr[i]\n        else\n            right[#right + 1] = arr[i]\n        end\n    end\n    if k <= #left then\n        return kth_element(left, k)\n    elseif k == #left + 1 then\n        return pivot\n    else\n        return kth_element(right, k - #left - 1)\n    end\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i < j do\n    while i < j and arr[i] <= kth do\n      i = i + 1\n    end\n    while i < j and arr[j] >= kth do\n      j = j - 1\n    end\n    if i < j then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n  arr[k], arr[i] = arr[i], arr[k]\n  return arr[k]\nend",
    "  local len = #arr\n  if k > len then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, len do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "\tlocal function partition(arr, l, r)\n\t\tlocal pivot = arr[r]\n\t\tlocal i = l - 1\n\t\tfor j = l, r - 1 do\n\t\t\tif arr[j] <= pivot then\n\t\t\t\ti = i + 1\n\t\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\t\tend\n\t\tend\n\t\tarr[i + 1], arr[r] = arr[r], arr[i + 1]\n\t\treturn i + 1\n\tend",
    "  local function partition(arr, l, r)\n    local pivot = arr[r]\n    local i = l\n    for j = l, r - 1 do\n      if arr[j] < pivot then\n        arr[i], arr[j] = arr[j], arr[i]\n        i = i + 1\n      end\n    end\n    arr[i], arr[r] = arr[r], arr[i]\n    return i\n  end",
    "  assert(k > 0 and k <= #arr, \"k must be in range [1, #arr]\")\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "    local n = #arr\n    if k < 1 or k > n then\n        return nil\n    end\n    local pivot = arr[1]\n    local left = {}\n    local right = {}\n    for i = 2, n do\n        if arr[i] < pivot then\n            left[#left + 1] = arr[i]\n        else\n            right[#right + 1] = arr[i]\n        end\n    end\n    if k <= #left then\n        return kth_element(left, k)\n    elseif k == #left + 1 then\n        return pivot\n    else\n        return kth_element(right, k - #left - 1)\n    end\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  local n = #arr\n  if k > n then\n    return nil\n  end\n  local function partition(arr, l, r)\n    local pivot = arr[r]\n    local i = l\n    for j = l, r - 1 do\n      if arr[j] < pivot then\n        arr[i], arr[j] = arr[j], arr[i]\n        i = i + 1\n      end\n    end\n    arr[i], arr[r] = arr[r], arr[i]\n    return i\n  end\n  local function quick_select(arr, l, r, k)\n    if l == r then\n      return arr[l]\n    end\n    local pivot_index = partition(arr, l, r)\n    if pivot_index == k - 1 then\n      return arr[pivot_index]\n    elseif pivot_index > k - 1 then\n      return quick_select(arr, l, pivot_index - 1, k)\n    else\n      return quick_select(arr, pivot_index + 1, r, k)\n    end\n  end\n  return quick_select(arr, 1, n, k)\nend",
    "    -- TODO: Implement this function.\nend",
    "    if k < 1 or k > #arr then\n        error(\"k is out of range\")\n    end\n    return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  local function partition(arr, l, r)\n    local pivot = arr[l]\n    local i = l\n    local j = r + 1\n    while true do\n      repeat i = i + 1 until arr[i] >= pivot or i >= r\n      repeat j = j - 1 until arr[j] <= pivot or j <= l\n      if i >= j then break end\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n    arr[l], arr[j] = arr[j], arr[l]\n    return j\n  end",
    "  local n = #arr\n  if k > n then return nil end\n  return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local i = 1\n  local j = n\n  while i < j do\n    while i < j and arr[j] >= pivot do\n      j = j - 1\n    end\n    arr[i] = arr[j]\n    while i < j and arr[i] <= pivot do\n      i = i + 1\n    end\n    arr[j] = arr[i]\n  end\n  arr[i] = pivot\n  if i == k then\n    return pivot\n  elseif i > k then\n    return kth_element(arr, k)\n  else\n    return kth_element(arr, k - i)\n  end\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end",
    "    assert(k > 0 and k <= #arr, \"k must be in range [1, #arr]\")\n    local pivot = arr[1]\n    local left, right = {}, {}\n    for i = 2, #arr do\n        if arr[i] < pivot then\n            left[#left + 1] = arr[i]\n        else\n            right[#right + 1] = arr[i]\n        end\n    end\n    if k <= #left then\n        return kth_element(left, k)\n    elseif k == #left + 1 then\n        return pivot\n    else\n        return kth_element(right, k - #left - 1)\n    end\nend",
    "  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end",
    "  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end",
    "  assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend",
    "    if k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  local n = #arr\n  local function partition(arr, l, r)\n    local pivot = arr[r]\n    local i = l\n    for j = l, r-1 do\n      if arr[j] <= pivot then\n        arr[i], arr[j] = arr[j], arr[i]\n        i = i + 1\n      end\n    end\n    arr[i], arr[r] = arr[r], arr[i]\n    return i\n  end\n  local function random_partition(arr, l, r)\n    local i = math.random(l, r)\n    arr[i], arr[r] = arr[r], arr[i]\n    return partition(arr, l, r)\n  end\n  local function random_select(arr, l, r, i)\n    if l == r then\n      return arr[l]\n    end\n    local q = random_partition(arr, l, r)\n    local k = q - l + 1\n    if i == k then\n      return arr[q]\n    elseif i < k then\n      return random_select(arr, l, q-1, i)\n    else\n      return random_select(arr, q+1, r, i-k)\n    end\n  end\n  return random_select(arr, 1, n, k)\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "    assert(k > 0 and k <= #arr)\n    return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  local function partition(arr, l, r)\n    local pivot = arr[r]\n    local i = l\n    for j = l, r - 1 do\n      if arr[j] < pivot then\n        arr[i], arr[j] = arr[j], arr[i]\n        i = i + 1\n      end\n    end\n    arr[i], arr[r] = arr[r], arr[i]\n    return i\n  end",
    "  return arr[k]\nend",
    "  assert(k > 0 and k <= #arr)\n  local left, right = 1, #arr\n  while left < right do\n    local pivot = math.random(left, right)\n    local i, j = left, right\n    while i < j do\n      while i < j and arr[i] < arr[pivot] do\n        i = i + 1\n      end\n      while i < j and arr[j] >= arr[pivot] do\n        j = j - 1\n      end\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n    arr[i], arr[pivot] = arr[pivot], arr[i]\n    if i == k then\n      return arr[i]\n    elseif i < k then\n      left = i + 1\n    else\n      right = i - 1\n    end\n  end\n  return arr[left]\nend",
    "  local n = #arr\n  assert(k >= 1 and k <= n)\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend",
    "    local n = #arr\n    if k < 1 or k > n then\n        return nil\n    end\n    local pivot = arr[1]\n    local left = {}\n    local right = {}\n    for i = 2, n do\n        if arr[i] < pivot then\n            left[#left+1] = arr[i]\n        else\n            right[#right+1] = arr[i]\n        end\n    end\n    if k <= #left then\n        return kth_element(left, k)\n    elseif k == #left + 1 then\n        return pivot\n    else\n        return kth_element(right, k - #left - 1)\n    end\nend",
    "  -- TODO: Implement this function.\nend",
    "  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "    local n = #arr\n    if k < 1 or k > n then\n        return nil\n    end\n    local pivot = arr[1]\n    local left = {}\n    local right = {}\n    for i = 2, n do\n        if arr[i] < pivot then\n            left[#left + 1] = arr[i]\n        else\n            right[#right + 1] = arr[i]\n        end\n    end\n    if k <= #left then\n        return kth_element(left, k)\n    elseif k == #left + 1 then\n        return pivot\n    else\n        return kth_element(right, k - #left - 1)\n    end\nend",
    "  -- TODO: implement\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  local k = k - 1\n  local lo = 1\n  local hi = #arr\n  while lo <= hi do\n    local i = lo\n    local j = hi\n    local pivot = arr[k]\n    while i <= j do\n      while arr[i] < pivot do\n        i = i + 1\n      end\n      while arr[j] > pivot do\n        j = j - 1\n      end\n      if i <= j then\n        arr[i], arr[j] = arr[j], arr[i]\n        i = i + 1\n        j = j - 1\n      end\n    end\n    if k < j then\n      hi = j\n    elseif k > i then\n      lo = i\n    else\n      return arr[k]\n    end\n  end\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i < j do\n    while arr[i] < kth do\n      i = i + 1\n    end\n    while arr[j] > kth do\n      j = j - 1\n    end\n    if i <= j then\n      arr[i], arr[j] = arr[j], arr[i]\n      i = i + 1\n      j = j - 1\n    end\n  end\n  return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end",
    "    local n = #arr\n    if k < 1 or k > n then\n        return nil\n    end\n    local pivot = arr[1]\n    local left = {}\n    local right = {}\n    for i = 2, n do\n        if arr[i] < pivot then\n            left[#left + 1] = arr[i]\n        else\n            right[#right + 1] = arr[i]\n        end\n    end\n    if k <= #left then\n        return kth_element(left, k)\n    elseif k == #left + 1 then\n        return pivot\n    else\n        return kth_element(right, k - #left - 1)\n    end\nend",
    "  if k < 1 or k > #arr then\n    error(\"k must be between 1 and \" .. #arr)\n  end\n  return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  -- TODO: Implement this function.\n  return nil\nend",
    "  return arr[k]\nend",
    "  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end",
    "  local function partition(arr, l, r)\n    local pivot = arr[r]\n    local i = l - 1\n    for j = l, r - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[r] = arr[r], arr[i + 1]\n    return i + 1\n  end",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend",
    "  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local i = 1\n  local j = n\n  while i < j do\n    while i < j and arr[j] >= pivot do\n      j = j - 1\n    end\n    arr[i] = arr[j]\n    while i < j and arr[i] <= pivot do\n      i = i + 1\n    end\n    arr[j] = arr[i]\n  end\n  arr[i] = pivot\n  if i == k then\n    return pivot\n  elseif i < k then\n    return kth_element(arr, k - i)\n  else\n    return kth_element(arr, k)\n  end\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i <= j do\n    while arr[i] < kth do\n      i = i + 1\n    end\n    while arr[j] > kth do\n      j = j - 1\n    end\n    if i <= j then\n      arr[i], arr[j] = arr[j], arr[i]\n      i = i + 1\n      j = j - 1\n    end\n  end\n  return arr[k]\nend",
    "  local function partition(arr, l, r)\n    local pivot = arr[r]\n    local i = l - 1\n    for j = l, r - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[r] = arr[r], arr[i + 1]\n    return i + 1\n  end",
    "  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end",
    "  local n = #arr\n  local k = k - 1\n  local left = 0\n  local right = n - 1\n  while left <= right do\n    local pivot = left\n    for i = left + 1, right do\n      if arr[i] < arr[left] then\n        pivot = pivot + 1\n        arr[i], arr[pivot] = arr[pivot], arr[i]\n      end\n    end\n    arr[left], arr[pivot] = arr[pivot], arr[left]\n    if pivot == k then\n      return arr[pivot]\n    elseif pivot > k then\n      right = pivot - 1\n    else\n      left = pivot + 1\n    end\n  end\nend",
    "    local n = #arr\n    if k < 1 or k > n then\n        return nil\n    end\n    local i = 1\n    local j = n\n    while i < j do\n        local pivot = arr[i]\n        local l = i\n        local r = j\n        while l < r do\n            while l < r and arr[r] >= pivot do\n                r = r - 1\n            end\n            arr[l] = arr[r]\n            while l < r and arr[l] <= pivot do\n                l = l + 1\n            end\n            arr[r] = arr[l]\n        end\n        arr[l] = pivot\n        if l == k then\n            return pivot\n        elseif l > k then\n            j = l - 1\n        else\n            i = l + 1\n        end\n    end\n    return arr[i]\nend",
    "    assert(k > 0 and k <= #arr, \"k must be in range [1, #arr]\")\n    return arr[k]\nend",
    "  local k = k - 1\n  local lo = 1\n  local hi = #arr\n  while lo < hi do\n    local i = lo\n    local j = hi\n    local pivot = arr[k]\n    while i <= j do\n      while arr[i] < pivot do\n        i = i + 1\n      end\n      while arr[j] > pivot do\n        j = j - 1\n      end\n      if i <= j then\n        arr[i], arr[j] = arr[j], arr[i]\n        i = i + 1\n        j = j - 1\n      end\n    end\n    if k < j then\n      hi = j\n    elseif k >= i then\n      lo = i\n    else\n      break\n    end\n  end\n  return arr[k]\nend",
    "  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local i = 1\n  local j = n\n  while i < j do\n    local pivot = arr[j]\n    local l = i\n    local r = j - 1\n    while l <= r do\n      if arr[l] <= pivot then\n        l = l + 1\n      else\n        arr[l], arr[r] = arr[r], arr[l]\n        r = r - 1\n      end\n    end\n    arr[l], arr[j] = arr[j], arr[l]\n    if l == k then\n      return arr[l]\n    elseif l < k then\n      i = l + 1\n    else\n      j = l - 1\n    end\n  end\n  return arr[i]\nend",
    "    local n = #arr\n    local function partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n            if arr[j] <= pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n    local function quick_select(arr, l, r, k)\n        if l == r then\n            return arr[l]\n        end\n        local pivot_index = partition(arr, l, r)\n        if pivot_index == k then\n            return arr[pivot_index]\n        elseif pivot_index < k then\n            return quick_select(arr, pivot_index + 1, r, k)\n        else\n            return quick_select(arr, l, pivot_index - 1, k)\n        end\n    end\n    return quick_select(arr, 1, n, k)\nend",
    "  local n = #arr\n  if n < k then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend",
    "    local function partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n            if arr[j] <= pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end",
    "  local function partition(arr, l, r)\n    local pivot = arr[r]\n    local i = l - 1\n    for j = l, r - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[r] = arr[r], arr[i + 1]\n    return i + 1\n  end\n  local function _kth_element(arr, l, r, k)\n    if l <= r then\n      local p = partition(arr, l, r)\n      if p == k - 1 then\n        return arr[p]\n      elseif p > k - 1 then\n        return _kth_element(arr, l, p - 1, k)\n      else\n        return _kth_element(arr, p + 1, r, k)\n      end\n    end\n  end\n  return _kth_element(arr, 1, #arr, k)\nend",
    "  assert(k > 0)\n  assert(k <= #arr)\n  return arr[k]\nend",
    "  local len = #arr\n  if k < 1 or k > len then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, len do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  assert(k > 0 and k <= #arr, \"k must be in the range [1, #arr]\")\n  return arr[k]\nend",
    "    local kth = arr[k]\n    local i = 1\n    local j = #arr\n    while i <= j do\n        if arr[i] < kth then\n            i = i + 1\n        elseif arr[j] >= kth then\n            j = j - 1\n        else\n            arr[i], arr[j] = arr[j], arr[i]\n            i = i + 1\n            j = j - 1\n        end\n    end\n    return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local i = 1\n  local j = n\n  while i < j do\n    local pivot = arr[j]\n    local l = i\n    for r = i, j - 1 do\n      if arr[r] < pivot then\n        arr[l], arr[r] = arr[r], arr[l]\n        l = l + 1\n      end\n    end\n    arr[l], arr[j] = arr[j], arr[l]\n    if l == k then\n      return arr[l]\n    elseif l < k then\n      i = l + 1\n    else\n      j = l - 1\n    end\n  end\n  return arr[i]\nend",
    "  local function partition(arr, l, r)\n    local pivot = arr[r]\n    local i = l\n    for j = l, r - 1 do\n      if arr[j] < pivot then\n        arr[i], arr[j] = arr[j], arr[i]\n        i = i + 1\n      end\n    end\n    arr[i], arr[r] = arr[r], arr[i]\n    return i\n  end",
    "    return arr[k]\nend",
    "  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] < pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end",
    "  local n = #arr\n  local function partition(arr, left, right, pivot_index)\n    local pivot_value = arr[pivot_index]\n    arr[pivot_index], arr[right] = arr[right], arr[pivot_index]\n    local store_index = left\n    for i = left, right - 1 do\n      if arr[i] < pivot_value then\n        arr[i], arr[store_index] = arr[store_index], arr[i]\n        store_index = store_index + 1\n      end\n    end\n    arr[store_index], arr[right] = arr[right], arr[store_index]\n    return store_index\n  end\n  local function select(arr, left, right, k)\n    if left == right then return arr[left] end\n    local pivot_index = left + math.random(right - left)\n    pivot_index = partition(arr, left, right, pivot_index)\n    if k == pivot_index then\n      return arr[k]\n    elseif k < pivot_index then\n      return select(arr, left, pivot_index - 1, k)\n    else\n      return select(arr, pivot_index + 1, right, k)\n    end\n  end\n  return select(arr, 1, n, k)\nend",
    "  local kth = arr[k]\n  local i = k\n  while i > 1 and arr[i - 1] > kth do\n    arr[i] = arr[i - 1]\n    i = i - 1\n  end\n  arr[i] = kth\n  return arr\nend",
    "    -- TODO: Implement this function.\n    return nil\nend",
    "    local n = #arr\n    local k = k - 1\n    local l = 0\n    local r = n - 1\n    while l < r do\n        local i = l\n        local j = r\n        local pivot = arr[k]\n        while i <= j do\n            while arr[i] < pivot do\n                i = i + 1\n            end\n            while arr[j] > pivot do\n                j = j - 1\n            end\n            if i <= j then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n                j = j - 1\n            end\n        end\n        if k <= j then\n            r = j\n        end\n        if k >= i then\n            l = i\n        end\n    end\n    return arr[k]\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr, \"k must be in range [1, #arr]\")\n  return arr[k]\nend",
    "  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i < j do\n    while i < j and arr[i] <= kth do\n      i = i + 1\n    end\n    while i < j and arr[j] >= kth do\n      j = j - 1\n    end\n    if i < j then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n  return arr[i]\nend",
    "  assert(k > 0 and k <= #arr, \"k must be in range [1, #arr]\")\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  -- TODO: Implement this function.\n  -- Hint: Use the partition function you implemented in the previous exercise.\n  return arr\nend",
    "    local n = #arr\n    if k < 1 or k > n then\n        return nil\n    end\n    local pivot = arr[math.random(n)]\n    local left, right = {}, {}\n    for i = 1, n do\n        if arr[i] < pivot then\n            left[#left + 1] = arr[i]\n        elseif arr[i] > pivot then\n            right[#right + 1] = arr[i]\n        end\n    end\n    if k <= #left then\n        return kth_element(left, k)\n    elseif k > n - #right then\n        return kth_element(right, k - (n - #right))\n    else\n        return pivot\n    end\nend",
    "  return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend",
    "    assert(k > 0 and k <= #arr, \"k is out of range\")\n    return arr[k]\nend",
    "  if k > #arr then return nil end\n  return arr[k]\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    error(\"k is out of range\")\n  end\n  return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    error(\"k must be between 1 and \" .. #arr)\n  end\n  return arr[k]\nend",
    "  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr, \"k is out of bounds\")\n  return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  assert(k > 0 and k <= #arr, \"k must be in the range [1, #arr]\")\n  return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "    local function partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n            if arr[j] <= pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end",
    "\tlocal function partition(arr, l, r)\n\t\tlocal pivot = arr[r]\n\t\tlocal i = l\n\t\tfor j = l, r - 1 do\n\t\t\tif arr[j] < pivot then\n\t\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\t\tarr[i], arr[r] = arr[r], arr[i]\n\t\treturn i\n\tend\n\tlocal function _kth_element(arr, l, r, k)\n\t\tif l == r then\n\t\t\treturn arr[l]\n\t\tend\n\t\tlocal p = partition(arr, l, r)\n\t\tif p == k - 1 then\n\t\t\treturn arr[p]\n\t\telseif p < k - 1 then\n\t\t\treturn _kth_element(arr, p + 1, r, k)\n\t\telse\n\t\t\treturn _kth_element(arr, l, p - 1, k)\n\t\tend\n\tend\n\treturn _kth_element(arr, 1, #arr, k)\nend",
    "  local function partition(arr, l, r)\n    local pivot = arr[r]\n    local i = l - 1\n    for j = l, r - 1 do\n      if arr[j] < pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[r] = arr[r], arr[i + 1]\n    return i + 1\n  end",
    "  assert(k > 0)\n  assert(k <= #arr)\n  return arr[k]\nend",
    "  assert(k > 0 and k <= #arr)\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] < pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end",
    "  k = k - 1\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k < #left then\n    return kth_element(left, k + 1)\n  elseif k == #left then\n    return pivot\n  else\n    return kth_element(right, k - #left + 1)\n  end\nend",
    "  -- TODO: Implement me!\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  local i = 1\n  local j = #arr\n  while i <= j do\n    local pivot = math.random(i, j)\n    arr[i], arr[pivot] = arr[pivot], arr[i]\n    local m = i\n    for l = i + 1, j do\n      if arr[l] < arr[i] then\n        m = m + 1\n        arr[m], arr[l] = arr[l], arr[m]\n      end\n    end\n    arr[i], arr[m] = arr[m], arr[i]\n    if m == k then\n      return arr[m]\n    elseif m < k then\n      i = m + 1\n    else\n      j = m - 1\n    end\n  end\nend",
    "  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end",
    "  local n = #arr\n  if k < 1 or k > n then\n    error(\"k is out of range\")\n  end\n  local i = 1\n  local j = n\n  while i < j do\n    local pivot = arr[i]\n    local l = i + 1\n    local r = j\n    while l <= r do\n      while l <= r and arr[l] < pivot do\n        l = l + 1\n      end\n      while l <= r and arr[r] >= pivot do\n        r = r - 1\n      end\n      if l < r then\n        arr[l], arr[r] = arr[r], arr[l]\n      end\n    end\n    arr[i], arr[r] = arr[r], arr[i]\n    if r == k then\n      return arr[r]\n    elseif r < k then\n      i = r + 1\n    else\n      j = r - 1\n    end\n  end\n  return arr[i]\nend",
    "    local kth = arr[k]\n    local i = 1\n    local j = #arr\n    while i <= j do\n        while arr[i] < kth do\n            i = i + 1\n        end\n        while arr[j] > kth do\n            j = j - 1\n        end\n        if i <= j then\n            arr[i], arr[j] = arr[j], arr[i]\n            i = i + 1\n            j = j - 1\n        end\n    end\n    return arr[k]\nend",
    "  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i <= j do\n    while arr[i] < kth do\n      i = i + 1\n    end\n    while arr[j] > kth do\n      j = j - 1\n    end\n    if i <= j then\n      arr[i], arr[j] = arr[j], arr[i]\n      i = i + 1\n      j = j - 1\n    end\n  end\n  return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend",
    "  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i < j do\n    while arr[i] < kth do\n      i = i + 1\n    end\n    while arr[j] > kth do\n      j = j - 1\n    end\n    if i <= j then\n      arr[i], arr[j] = arr[j], arr[i]\n      i = i + 1\n      j = j - 1\n    end\n  end\n  return arr[k]\nend",
    "    return arr[k]\nend",
    "  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] < pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end",
    "  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend",
    "    local n = #arr\n    local k = k - 1\n    local lo, hi = 0, n - 1\n    while lo <= hi do\n        local i = lo\n        local j = hi\n        local pivot = arr[lo + math.random(hi - lo)]\n        while i <= j do\n            while arr[i] < pivot do i = i + 1 end\n            while arr[j] > pivot do j = j - 1 end\n            if i <= j then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n                j = j - 1\n            end\n        end\n        if k <= j then\n            hi = j\n        elseif k >= i then\n            lo = i\n        else\n            return arr[k]\n        end\n    end\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local i = 1\n  local j = n\n  while i < j do\n    while arr[j] > pivot do\n      j = j - 1\n    end\n    while arr[i] < pivot do\n      i = i + 1\n    end\n    if i < j then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n  if k == i then\n    return pivot\n  elseif k < i then\n    return kth_element(arr, k)\n  else\n    return kth_element(arr, k - i)\n  end\nend",
    "  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i < j do\n    while arr[i] < kth do\n      i = i + 1\n    end\n    while arr[j] > kth do\n      j = j - 1\n    end\n    if i <= j then\n      arr[i], arr[j] = arr[j], arr[i]\n      i = i + 1\n      j = j - 1\n    end\n  end\n  return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    error(\"k must be between 1 and \" .. #arr)\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i < j do\n    while arr[i] < kth do\n      i = i + 1\n    end\n    while arr[j] > kth do\n      j = j - 1\n    end\n    if i <= j then\n      arr[i], arr[j] = arr[j], arr[i]\n      i = i + 1\n      j = j - 1\n    end\n  end\n  return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    error(\"invalid k\")\n  end\n  local i = 1\n  local j = n\n  while i < j do\n    local pivot = arr[i]\n    local l = i + 1\n    local r = j\n    while l <= r do\n      if arr[l] <= pivot then\n        l = l + 1\n      elseif arr[r] >= pivot then\n        r = r - 1\n      else\n        arr[l], arr[r] = arr[r], arr[l]\n      end\n    end\n    arr[i], arr[r] = arr[r], arr[i]\n    if k == r then\n      return arr[r]\n    elseif k < r then\n      j = r - 1\n    else\n      i = r + 1\n    end\n  end\n  return arr[i]\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "    if k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend",
    "  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i < j do\n    while arr[i] < kth do\n      i = i + 1\n    end\n    while arr[j] > kth do\n      j = j - 1\n    end\n    if i <= j then\n      arr[i], arr[j] = arr[j], arr[i]\n      i = i + 1\n      j = j - 1\n    end\n  end\n  return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local i = 1\n  local j = n\n  while i < j do\n    while i < j and arr[j] >= pivot do\n      j = j - 1\n    end\n    arr[i] = arr[j]\n    while i < j and arr[i] <= pivot do\n      i = i + 1\n    end\n    arr[j] = arr[i]\n  end\n  arr[i] = pivot\n  if i == k then\n    return pivot\n  elseif i < k then\n    return kth_element(arr, k, i + 1, n)\n  else\n    return kth_element(arr, k, 1, i - 1)\n  end\nend",
    "    local n = #arr\n    local k = k - 1\n    local l, r = 0, n - 1\n    while l <= r do\n        local i = l\n        for j = l + 1, r do\n            if arr[j] < arr[l] then\n                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i], arr[l] = arr[l], arr[i]\n        if i == k then\n            return arr[i]\n        elseif i < k then\n            l = i + 1\n        else\n            r = i - 1\n        end\n    end\n    return arr[l]\nend",
    "  local n = #arr\n  local i = 1\n  local j = n\n  local p = arr[math.random(1, n)]\n  while i <= j do\n    while arr[i] < p do\n      i = i + 1\n    end\n    while arr[j] > p do\n      j = j - 1\n    end\n    if i <= j then\n      arr[i], arr[j] = arr[j], arr[i]\n      i = i + 1\n      j = j - 1\n    end\n  end\n  if k <= j then\n    return kth_element(arr, k)\n  elseif k > i then\n    return kth_element(arr, k - i)\n  else\n    return p\n  end\nend",
    "  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i < j do\n    while arr[i] < kth do\n      i = i + 1\n    end\n    while arr[j] > kth do\n      j = j - 1\n    end\n    if i < j then\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n  end\n  return arr[k]\nend",
    "    local n = #arr\n    if k < 1 or k > n then\n        return nil\n    end\n    local pivot = arr[1]\n    local left = {}\n    local right = {}\n    for i = 2, n do\n        if arr[i] < pivot then\n            left[#left + 1] = arr[i]\n        else\n            right[#right + 1] = arr[i]\n        end\n    end\n    if k <= #left then\n        return kth_element(left, k)\n    elseif k == #left + 1 then\n        return pivot\n    else\n        return kth_element(right, k - #left - 1)\n    end\nend",
    "  local n = #arr\n  local k = k - 1\n  local l = 0\n  local r = n - 1\n  while l < r do\n    local i = l\n    local j = r\n    local x = arr[k]\n    while i <= j do\n      while arr[i] < x do\n        i = i + 1\n      end\n      while arr[j] > x do\n        j = j - 1\n      end\n      if i <= j then\n        arr[i], arr[j] = arr[j], arr[i]\n        i = i + 1\n        j = j - 1\n      end\n    end\n    if k <= j then\n      r = j\n    end\n    if k >= i then\n      l = i\n    end\n  end\n  return arr[k]\nend",
    "    -- TODO\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend",
    "  local function partition(arr, l, r)\n    local pivot = arr[r]\n    local i = l - 1\n    for j = l, r - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[r] = arr[r], arr[i + 1]\n    return i + 1\n  end",
    "  assert(k > 0)\n  assert(k <= #arr)\n  return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend",
    "    local kth = arr[k]\n    local i = 1\n    local j = #arr\n    while i <= j do\n        while arr[i] < kth do\n            i = i + 1\n        end\n        while arr[j] > kth do\n            j = j - 1\n        end\n        if i <= j then\n            arr[i], arr[j] = arr[j], arr[i]\n            i = i + 1\n            j = j - 1\n        end\n    end\n    return arr[k]\nend",
    "  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i <= j do\n    while arr[i] < kth do\n      i = i + 1\n    end\n    while arr[j] > kth do\n      j = j - 1\n    end\n    if i <= j then\n      arr[i], arr[j] = arr[j], arr[i]\n      i = i + 1\n      j = j - 1\n    end\n  end\n  return arr[k]\nend",
    "  assert(k > 0 and k <= #arr, \"invalid k\")\n  return arr[k]\nend",
    "  assert(k > 0 and k <= #arr, \"k is out of range\")\n  return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr)\n  local pivot = arr[1]\n  local left, right = {}, {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "    local function partition(arr, left, right)\n        local pivot = arr[right]\n        local i = left - 1\n        for j = left, right - 1 do\n            if arr[j] <= pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[right] = arr[right], arr[i + 1]\n        return i + 1\n    end",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  return arr[k]\nend",
    "  assert(k > 0 and k <= #arr, \"invalid k\")\n  return arr[k]\nend",
    "  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend"
  ]
}