{
  "name": "mbpp_101_kth_element",
  "language": "lua",
  "prompt": "-- Write a function to find the kth element in the given array using 1-based indexing.\nlocal function kth_element(arr, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local function partition(arr, lo, hi)\n    local pivot = arr[hi]\n    local i = lo\n    for j = lo, hi - 1 do\n      if arr[j] < pivot then\n        arr[i], arr[j] = arr[j], arr[i]\n        i = i + 1\n      end\n    end\n    arr[i], arr[hi] = arr[hi], arr[i]\n    return i\n  end",
    "  -- TODO\nend",
    "    if k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  -- TODO: Implement me!\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = 2\n  local right = n\n  while left <= right do\n    while left <= n and arr[left] < pivot do\n      left = left + 1\n    end\n    while right >= 1 and arr[right] > pivot do\n      right = right - 1\n    end\n    if left <= right then\n      arr[left], arr[right] = arr[right], arr[left]\n      left = left + 1\n      right = right - 1\n    end\n  end\n  arr[1], arr[right] = arr[right], arr[1]\n  if right == k then\n    return arr[right]\n  elseif right > k then\n    return kth_element(arr, k)\n  else\n    return kth_element(arr, k - right)\n  end\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend",
    "  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i <= j do\n    while arr[i] < kth do\n      i = i + 1\n    end\n    while arr[j] > kth do\n      j = j - 1\n    end\n    if i <= j then\n      arr[i], arr[j] = arr[j], arr[i]\n      i = i + 1\n      j = j - 1\n    end\n  end\n  return arr[k]\nend",
    "    local function partition(arr, left, right)\n        local pivot = arr[right]\n        local i = left\n        for j = left, right - 1 do\n            if arr[j] < pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n        arr[i], arr[right] = arr[right], arr[i]\n        return i\n    end",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local function partition(arr, l, r)\n    local i = l\n    local j = r\n    local pivot = arr[l]\n    while i < j do\n      while i < j and arr[j] >= pivot do\n        j = j - 1\n      end\n      arr[i] = arr[j]\n      while i < j and arr[i] <= pivot do\n        i = i + 1\n      end\n      arr[j] = arr[i]\n    end\n    arr[i] = pivot\n    return i\n  end\n  local function quick_select(arr, l, r, k)\n    if l == r then\n      return arr[l]\n    end\n    local pivot_index = partition(arr, l, r)\n    if pivot_index == k then\n      return arr[pivot_index]\n    elseif pivot_index > k then\n      return quick_select(arr, l, pivot_index - 1, k)\n    else\n      return quick_select(arr, pivot_index + 1, r, k)\n    end\n  end\n  return quick_select(arr, 1, n, k)\nend",
    "    local kth = arr[k]\n    local i = 1\n    local j = #arr\n    while i < j do\n        while arr[i] < kth do\n            i = i + 1\n        end\n        while arr[j] > kth do\n            j = j - 1\n        end\n        if i < j then\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n    end\n    return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr, \"k must be in range [1, #arr]\")\n  return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "\tlocal function partition(arr, l, r)\n\t\tlocal pivot = arr[r]\n\t\tlocal i = l - 1\n\t\tfor j = l, r - 1 do\n\t\t\tif arr[j] < pivot then\n\t\t\t\ti = i + 1\n\t\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\t\tend\n\t\tend\n\t\tarr[i + 1], arr[r] = arr[r], arr[i + 1]\n\t\treturn i + 1\n\tend",
    "  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  local len = #arr\n  if k > len then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, len do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "  assert(k > 0 and k <= #arr)\n  local pivot = arr[1]\n  local left, right = {}, {}\n  for i = 2, #arr do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend",
    "    local kth = arr[k]\n    local i = k - 1\n    local j = #arr\n    while i < j do\n        while arr[i] <= kth and i < j do\n            i = i + 1\n        end\n        while arr[j] >= kth and i < j do\n            j = j - 1\n        end\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n    arr[k], arr[j] = arr[j], arr[k]\n    return arr[k]\nend"
  ]
}