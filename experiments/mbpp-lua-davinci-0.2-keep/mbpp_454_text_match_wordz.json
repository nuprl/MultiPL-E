{
  "name": "mbpp_454_text_match_wordz",
  "language": "lua",
  "prompt": "-- Write a function that matches a word containing 'z'.\nlocal function text_match_wordz(text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_wordz\n    lu.assertEquals(candidate('pythonz.'), true)\n    lu.assertEquals(candidate('xyz.'), true)\n    lu.assertEquals(candidate('  lang  .'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local pattern = '%f[%w]z%f[^%w]'\n    return text:match(pattern)\nend",
    "    return text:match(\"%w+z%w*\")\nend",
    "  return text:match(\"%w+z%w+\")\nend",
    "  return text:match(\"%w*z%w*\")\nend",
    "  return text:match(\"%w+z%w+\")\nend",
    "  return text:match(\"%w+z%w+\")\nend",
    "  local match = text:match('%w*z%w*')\n  if match then\n    return match\n  else\n    return nil\n  end\nend",
    "    return text:match(\"%w*z%w*\")\nend",
    "    local pattern = '%w+z%w*'\n    return text:match(pattern)\nend",
    "  return text:match(\"%w+z%w+\")\nend",
    "    return text:match(\"%w*z%w*\")\nend",
    "  return text:match(\"%w+z%w+\")\nend",
    "    return text:match(\"%w+z%w+\")\nend",
    "    return text:match(\"%w*z%w*\")\nend",
    "    return text:match(\"%w*z%w*\")\nend",
    "    return text:match(\"%w*z%w*\")\nend",
    "    return text:match(\"%w*z%w*\")\nend",
    "  local pattern = '%w+z%w*'\n  local matches = {}\n  for match in text:gmatch(pattern) do\n    table.insert(matches, match)\n  end\n  return matches\nend",
    "  local pattern = '%w+z%w*'\n  return text:match(pattern)\nend",
    "    return text:match(\"%w+z%w+\")\nend"
  ]
}