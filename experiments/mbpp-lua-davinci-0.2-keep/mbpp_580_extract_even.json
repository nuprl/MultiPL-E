{
  "name": "mbpp_580_extract_even",
  "language": "lua",
  "prompt": "-- Write a function to remove uneven elements in the nested mixed tuple.\nlocal function extract_even(test_tuple)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == 'table' then\n            result[i] = extract_even(test_tuple[i])\n        elseif test_tuple[i] % 2 == 0 then\n            result[i] = test_tuple[i]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            local sub_result = extract_even(v)\n            for _, sub_v in ipairs(sub_result) do\n                table.insert(result, sub_v)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            for _, sub_v in ipairs(sub_result) do\n                table.insert(result, sub_v)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        elseif type(test_tuple[i]) == \"table\" then\n            result[#result + 1] = extract_even(test_tuple[i])\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tuple do\n    if type(test_tuple[i]) == 'table' then\n      result[i] = extract_even(test_tuple[i])\n    elseif type(test_tuple[i]) == 'number' and test_tuple[i] % 2 == 0 then\n      result[i] = test_tuple[i]\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            if #sub_result > 0 then\n                table.insert(result, sub_result)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"table\" then\n            result[i] = extract_even(test_tuple[i])\n        elseif type(test_tuple[i]) == \"number\" then\n            if test_tuple[i] % 2 == 0 then\n                result[i] = test_tuple[i]\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local even_tuple = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local even_sub_tuple = extract_even(v)\n            if #even_sub_tuple > 0 then\n                table.insert(even_tuple, even_sub_tuple)\n            end\n        elseif v % 2 == 0 then\n            table.insert(even_tuple, v)\n        end\n    end\n    return even_tuple\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            if #sub_result > 0 then\n                table.insert(result, sub_result)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            for j, w in ipairs(sub_result) do\n                table.insert(result, w)\n            end\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      local sub_result = extract_even(v)\n      if #sub_result > 0 then\n        table.insert(result, sub_result)\n      end\n    elseif v % 2 == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local temp = extract_even(v)\n            if #temp > 0 then\n                table.insert(result, temp)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[i] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        elseif type(test_tuple[i]) == \"table\" then\n            result[#result + 1] = extract_even(test_tuple[i])\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            if #sub_result > 0 then\n                result[#result + 1] = sub_result\n            end\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    else\n      if v % 2 == 0 then\n        result[i] = v\n      end\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            for _, sub_v in ipairs(sub_result) do\n                table.insert(result, sub_v)\n            end\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            table.insert(result, test_tuple[i])\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            for _, sub_v in ipairs(sub_result) do\n                table.insert(result, sub_v)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local tmp = extract_even(v)\n            if #tmp > 0 then\n                table.insert(result, tmp)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" then\n            if v % 2 == 0 then\n                table.insert(result, v)\n            end\n        elseif type(v) == \"table\" then\n            table.insert(result, extract_even(v))\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            for _, sub_v in ipairs(sub_result) do\n                table.insert(result, sub_v)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for _, v in pairs(test_tuple) do\n    if type(v) == \"number\" and v % 2 == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[i] = v\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[#result + 1] = v\n            end\n        end\n    end\n    return result\nend",
    "    local even_tuple = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            even_tuple[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            even_tuple[i] = v\n        end\n    end\n    return even_tuple\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" then\n            if v % 2 == 0 then\n                table.insert(result, v)\n            end\n        else\n            local sub_result = extract_even(v)\n            if #sub_result > 0 then\n                table.insert(result, sub_result)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        local value = test_tuple[i]\n        if type(value) == \"number\" and value % 2 == 0 then\n            table.insert(result, value)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tuple do\n    local value = test_tuple[i]\n    if type(value) == \"number\" and value % 2 == 0 then\n      result[#result + 1] = value\n    elseif type(value) == \"table\" then\n      result[#result + 1] = extract_even(value)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[#result + 1] = v\n            end\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[i] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            for _, sub_v in ipairs(sub_result) do\n                table.insert(result, sub_v)\n            end\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[i] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == \"table\" then\n            for j, w in ipairs(v) do\n                if type(w) == \"number\" and w % 2 == 0 then\n                    table.insert(result, w)\n                end\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "  local new_tuple = {}\n  for i,v in ipairs(test_tuple) do\n    if type(v) == \"number\" and v % 2 == 0 then\n      table.insert(new_tuple, v)\n    elseif type(v) == \"table\" then\n      local new_sub_tuple = extract_even(v)\n      if #new_sub_tuple > 0 then\n        table.insert(new_tuple, new_sub_tuple)\n      end\n    end\n  end\n  return new_tuple\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        elseif type(test_tuple[i]) == \"table\" then\n            result[#result + 1] = extract_even(test_tuple[i])\n        end\n    end\n    return result\nend",
    "    local new_tuple = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            new_tuple[#new_tuple + 1] = v\n        elseif type(v) == \"table\" then\n            new_tuple[#new_tuple + 1] = extract_even(v)\n        end\n    end\n    return new_tuple\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        elseif type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      local sub_result = extract_even(v)\n      if #sub_result > 0 then\n        result[#result + 1] = sub_result\n      end\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local extracted = extract_even(v)\n            if #extracted > 0 then\n                result[#result + 1] = extracted\n            end\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            for j, w in ipairs(sub_result) do\n                table.insert(result, w)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local temp = extract_even(v)\n            for _, v1 in ipairs(temp) do\n                table.insert(result, v1)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            if #sub_result > 0 then\n                table.insert(result, sub_result)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" then\n            if v % 2 == 0 then\n                table.insert(result, v)\n            end\n        elseif type(v) == \"table\" then\n            table.insert(result, extract_even(v))\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            if #sub_result > 0 then\n                table.insert(result, sub_result)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local new_tuple = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'number' then\n            if v % 2 == 0 then\n                table.insert(new_tuple, v)\n            end\n        elseif type(v) == 'table' then\n            local new_sub_tuple = extract_even(v)\n            if #new_sub_tuple > 0 then\n                table.insert(new_tuple, new_sub_tuple)\n            end\n        end\n    end\n    return new_tuple\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'number' and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == 'table' then\n            local sub_result = extract_even(v)\n            for _, sub_v in ipairs(sub_result) do\n                table.insert(result, sub_v)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result+1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result+1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == 'number' and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        elseif type(test_tuple[i]) == 'table' then\n            result[#result + 1] = extract_even(test_tuple[i])\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        elseif type(test_tuple[i]) == \"table\" then\n            result[#result + 1] = extract_even(test_tuple[i])\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            table.insert(result, test_tuple[i])\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"table\" then\n            result[i] = extract_even(test_tuple[i])\n        elseif test_tuple[i] % 2 == 0 then\n            result[i] = test_tuple[i]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"table\" then\n            result[i] = extract_even(test_tuple[i])\n        elseif type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[i] = test_tuple[i]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"number\" and v % 2 == 0 then\n      table.insert(result, v)\n    elseif type(v) == \"table\" then\n      local temp = extract_even(v)\n      for j, w in ipairs(temp) do\n        table.insert(result, w)\n      end\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        elseif type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            table.insert(result, test_tuple[i])\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            local temp = {}\n            for _, v2 in ipairs(v) do\n                if type(v2) == 'number' and v2 % 2 == 0 then\n                    table.insert(temp, v2)\n                end\n            end\n            table.insert(result, temp)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            if #sub_result > 0 then\n                table.insert(result, sub_result)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            table.insert(result, test_tuple[i])\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            local temp = extract_even(v)\n            for _, v in ipairs(temp) do\n                table.insert(result, v)\n            end\n        elseif type(v) == 'number' and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" then\n            if v % 2 == 0 then\n                table.insert(result, v)\n            end\n        elseif type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            if #sub_result > 0 then\n                table.insert(result, sub_result)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'number' and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" then\n            if v % 2 == 0 then\n                table.insert(result, v)\n            end\n        elseif type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            for j, w in ipairs(sub_result) do\n                table.insert(result, w)\n            end\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[i] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            table.insert(result, test_tuple[i])\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[i] = v\n            end\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tuple do\n    if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n      result[#result + 1] = test_tuple[i]\n    elseif type(test_tuple[i]) == \"table\" then\n      local sub_result = extract_even(test_tuple[i])\n      for j = 1, #sub_result do\n        result[#result + 1] = sub_result[j]\n      end\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #test_tuple do\n    if type(test_tuple[i]) == \"table\" then\n      result[i] = extract_even(test_tuple[i])\n    elseif type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n      result[i] = test_tuple[i]\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            for _, sub_v in ipairs(sub_result) do\n                table.insert(result, sub_v)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"table\" then\n            local temp = extract_even(test_tuple[i])\n            for j = 1, #temp do\n                table.insert(result, temp[j])\n            end\n        else\n            if test_tuple[i] % 2 == 0 then\n                table.insert(result, test_tuple[i])\n            end\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[i] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"number\" and v % 2 == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'number' and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == 'table' then\n            local sub_result = extract_even(v)\n            for j, w in ipairs(sub_result) do\n                table.insert(result, w)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for k, v in pairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" then\n            if v % 2 == 0 then\n                table.insert(result, v)\n            end\n        else\n            local extracted = extract_even(v)\n            if #extracted > 0 then\n                table.insert(result, extracted)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            for _, sub_v in ipairs(sub_result) do\n                table.insert(result, sub_v)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == \"table\" then\n            table.insert(result, extract_even(v))\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" then\n            if v % 2 == 0 then\n                table.insert(result, v)\n            end\n        else\n            local temp = extract_even(v)\n            for j, w in ipairs(temp) do\n                table.insert(result, w)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        elseif type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local even_tuple = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            even_tuple[#even_tuple + 1] = v\n        elseif type(v) == \"table\" then\n            even_tuple[#even_tuple + 1] = extract_even(v)\n        end\n    end\n    return even_tuple\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            if #sub_result > 0 then\n                table.insert(result, sub_result)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        elseif type(test_tuple[i]) == \"table\" then\n            local extracted = extract_even(test_tuple[i])\n            for j = 1, #extracted do\n                result[#result + 1] = extracted[j]\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" then\n            if v % 2 == 0 then\n                table.insert(result, v)\n            end\n        elseif type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            for j, w in ipairs(sub_result) do\n                table.insert(result, w)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'number' then\n            if v % 2 == 0 then\n                table.insert(result, v)\n            end\n        else\n            table.insert(result, extract_even(v))\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            table.insert(result, test_tuple[i])\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[i] = v\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == \"table\" then\n            table.insert(result, extract_even(v))\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            if #sub_result > 0 then\n                result[#result + 1] = sub_result\n            end\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[#result + 1] = v\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[i] = v\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        elseif type(test_tuple[i]) == \"table\" then\n            local sub_result = extract_even(test_tuple[i])\n            for j = 1, #sub_result do\n                result[#result + 1] = sub_result[j]\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        elseif type(test_tuple[i]) == \"table\" then\n            result[#result + 1] = extract_even(test_tuple[i])\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tuple do\n    local element = test_tuple[i]\n    if type(element) == \"number\" and element % 2 == 0 then\n      result[#result + 1] = element\n    elseif type(element) == \"table\" then\n      local sub_result = extract_even(element)\n      for j = 1, #sub_result do\n        result[#result + 1] = sub_result[j]\n      end\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'number' and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[i] = v\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tuple do\n    local item = test_tuple[i]\n    if type(item) == \"table\" then\n      result[i] = extract_even(item)\n    elseif type(item) == \"number\" and item % 2 == 0 then\n      result[i] = item\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[#result + 1] = v\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            table.insert(result, test_tuple[i])\n        elseif type(test_tuple[i]) == \"table\" then\n            table.insert(result, extract_even(test_tuple[i]))\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i,v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            local sub_result = extract_even(v)\n            for _, sub_v in ipairs(sub_result) do\n                table.insert(result, sub_v)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[i] = v\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for k, v in pairs(test_tuple) do\n        if type(v) == 'table' then\n            result[k] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[k] = v\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[i] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        elseif type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for k, v in pairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[k] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[k] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == \"table\" then\n            table.insert(result, extract_even(v))\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"table\" then\n            result[i] = extract_even(test_tuple[i])\n        elseif test_tuple[i] % 2 == 0 then\n            result[i] = test_tuple[i]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            for _, v in ipairs(sub_result) do\n                table.insert(result, v)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[i] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[i] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend",
    "  local new_tuple = {}\n  for i = 1, #test_tuple do\n    local item = test_tuple[i]\n    if type(item) == 'number' and item % 2 == 0 then\n      new_tuple[#new_tuple + 1] = item\n    elseif type(item) == 'table' then\n      new_tuple[#new_tuple + 1] = extract_even(item)\n    end\n  end\n  return new_tuple\nend"
  ]
}