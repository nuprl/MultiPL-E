{
  "name": "mbpp_580_extract_even",
  "language": "lua",
  "prompt": "-- Write a function to remove uneven elements in the nested mixed tuple.\nlocal function extract_even(test_tuple)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == 'table' then\n            result[i] = extract_even(test_tuple[i])\n        elseif test_tuple[i] % 2 == 0 then\n            result[i] = test_tuple[i]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            local sub_result = extract_even(v)\n            for _, sub_v in ipairs(sub_result) do\n                table.insert(result, sub_v)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            for _, sub_v in ipairs(sub_result) do\n                table.insert(result, sub_v)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        elseif type(test_tuple[i]) == \"table\" then\n            result[#result + 1] = extract_even(test_tuple[i])\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tuple do\n    if type(test_tuple[i]) == 'table' then\n      result[i] = extract_even(test_tuple[i])\n    elseif type(test_tuple[i]) == 'number' and test_tuple[i] % 2 == 0 then\n      result[i] = test_tuple[i]\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            if #sub_result > 0 then\n                table.insert(result, sub_result)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"table\" then\n            result[i] = extract_even(test_tuple[i])\n        elseif type(test_tuple[i]) == \"number\" then\n            if test_tuple[i] % 2 == 0 then\n                result[i] = test_tuple[i]\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend",
    "    local even_tuple = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local even_sub_tuple = extract_even(v)\n            if #even_sub_tuple > 0 then\n                table.insert(even_tuple, even_sub_tuple)\n            end\n        elseif v % 2 == 0 then\n            table.insert(even_tuple, v)\n        end\n    end\n    return even_tuple\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            local sub_result = extract_even(v)\n            if #sub_result > 0 then\n                table.insert(result, sub_result)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend"
  ]
}