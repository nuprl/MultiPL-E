{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "lua",
  "prompt": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n\treturn text:find(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n\treturn text:find(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:find(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[_%l]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:find(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match('^[a-z]+_[a-z]+$') ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^%l+_%l+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:find(\"[a-z]+_[a-z]+\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ov2icuk.lua:11: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_ov2icuk.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n\treturn text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^%l+_%l+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[%l_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123414,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match('^[a-z_]+$') ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[_%l]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123414,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n   return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123414,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^%l+_%l+$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123414,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdday9nw7.lua:9: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmpdday9nw7.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  local pattern = \"^[a-z]+_[a-z]+$\"\n  return string.match(text, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpainuq2ut.lua:10: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmpainuq2ut.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n\treturn text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[%l_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123414,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  local pattern = \"^[a-z]+_[a-z]+$\"\n  return string.match(text, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpainuq2ut.lua:10: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmpainuq2ut.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:find(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfsvgps3.lua:9: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmprfsvgps3.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^%l+_%l+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    local pattern = \"^[a-z]+_[a-z]+$\"\n    return text:match(pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123414,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgt0lwvdr.lua:10: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmpgt0lwvdr.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^%l+_%l+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:find(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:find(\"[a-z]+_[a-z]+\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ov2icuk.lua:11: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_ov2icuk.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf895_nfc.lua:9: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmpf895_nfc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") and true or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return string.match(text, \"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^%l+_%l+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return string.find(text, \"%l_%l\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123414,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xpwkfip.lua:9: expected: true, actual: 3\nstack traceback:\n\t/tmp/tmp7xpwkfip.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return string.match(text, \"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123414,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf895_nfc.lua:9: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmpf895_nfc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^%l+_%l+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"[a-z]+_[a-z]+\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dwl7908.lua:11: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1dwl7908.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    local pattern = \"^[a-z_]+$\"\n    return string.match(text, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123414,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbonia7q.lua:10: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmpcbonia7q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfsvgps3.lua:9: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmprfsvgps3.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:find(\"[a-z]+_[a-z]+\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ov2icuk.lua:11: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_ov2icuk.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n\treturn text:match(\"^%l+_%l+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123414,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf895_nfc.lua:9: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmpf895_nfc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:find(\"[a-z]+_[a-z]+\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ov2icuk.lua:11: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_ov2icuk.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    local pattern = \"^[a-z]+_[a-z]+$\"\n    return string.match(text, pattern) ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^%l+_%l+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n\treturn text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    local pattern = '^[a-z]+_[a-z]+$'\n    return string.match(text, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123414,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgx5sn8v0.lua:10: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmpgx5sn8v0.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  if text:match(\"^[a-z]+_[a-z]+$\") then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123414,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n\treturn text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf895_nfc.lua:9: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmpf895_nfc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:find(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n\treturn text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123414,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf895_nfc.lua:9: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmpf895_nfc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n\treturn text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^%l+_%l+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfsvgps3.lua:9: expected: true, actual: \"aab_cbbbc\"\nstack traceback:\n\t/tmp/tmprfsvgps3.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^%l+_%l+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^[a-z_]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^%l+_%l+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027861,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n  return text:match(\"^[a-z]+_[a-z]+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509669,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n    return text:match(\"^%l+_%l+$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123413,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}