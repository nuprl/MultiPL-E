{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "lua",
  "prompt": "-- Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlocal function next_smallest_palindrome(num)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest_palindrome\n    lu.assertEquals(candidate(99), 101)\n    lu.assertEquals(candidate(1221), 1331)\n    lu.assertEquals(candidate(120), 121)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local num_str = tostring(num)\n  local len = #num_str\n  local is_even = len % 2 == 0\n  local mid = math.floor(len / 2)\n  local left = is_even and mid or mid + 1\n  local right = is_even and mid + 1 or mid\n  local left_str = string.sub(num_str, 1, left)\n  local right_str = string.sub(num_str, right, len)\n  local left_num = tonumber(left_str)\n  local right_num = tonumber(right_str)\n  if left_num < right_num then\n    left_str = tostring(left_num + 1)\n    right_str = string.reverse(left_str)\n  elseif left_num > right_num then\n    right_str = string.reverse(left_str)\n  else\n    left_str, right_str = next_smallest_palindrome_helper(left_str, right_str)\n  end\n  return tonumber(left_str .. right_str)\nend",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local num_half_len = math.floor(num_len / 2)\n  local num_half_str = num_str:sub(1, num_half_len)\n  local num_half_str_rev = num_half_str:reverse()\n  local num_half_str_rev_len = #num_half_str_rev\n  local num_half_str_rev_len_diff = num_half_str_rev_len - num_half_str_len\n  local num_half_str_rev_len_diff_abs = math.abs(num_half_str_rev_len_diff)\n  local num_half_str_rev_len_diff_abs_half = math.floor(num_half_str_rev_len_diff_abs / 2)\n  local num_half_str_rev_len_diff_abs_half_str = num_half_str_rev:sub(1, num_half_str_rev_len_diff_abs_half)\n  local num_half_str_rev_len_diff_abs_half_str_rev = num_half_str_rev_len_diff_abs_half_str:reverse()\n  local num_half_str_rev_len_diff_abs_half_str_rev_len = #num_half_str_rev_len_diff_abs_half_str_rev\n  local num_half_str_rev_len_diff_abs_half_str_rev_len_diff = num_half_str_rev_len_diff_abs_half_str_rev_len - num_half_str_rev_len_diff_abs_half_str_len\n  local num_half_str_rev_len_diff_abs_half_str_rev_len_diff_abs = math.abs(num_half_str_rev_len_diff_abs_half_str_rev_len_diff)\n  local num_half_str_rev_len_diff_abs_half_str_rev_len_diff_abs_half = math.floor(num_half_str_",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local half_len = math.floor(num_len / 2)\n  local left_half = num_str:sub(1, half_len)\n  local right_half = num_str:sub(num_len - half_len + 1, num_len)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  local left_half_num_next = left_half_num + 1\n  local left_half_num_next_str = tostring(left_half_num_next)\n  local left_half_num_next_str_rev = left_half_num_next_str:reverse()\n  local left_half_num_next_str_rev_len = #left_half_num_next_str_rev\n  local left_half_num_next_str_rev_len_diff = half_len - left_half_num_next_str_rev_len\n  local left_half_num_next_str_rev_len_diff_str = string.rep('0', left_half_num_next_str_rev_len_diff)\n  local left_half_num_next_str_rev_len_diff_str_rev = left_half_num_next_str_rev_len_diff_str:reverse()\n  local left_half_num_next_str_rev_len_diff_str_rev_len = #left_half_num_next_str_rev_len_diff_str_rev\n  local left_half_num_next_str_rev_len_diff_str_rev_len_diff = half_len - left_half_num_next_str_rev_len_diff_str_rev_len\n  local left_half_num_next_str_rev_len_diff_str_rev_len_diff_str = string.rep('0', left_half_num_next_str_rev_len_diff_str_rev_len_diff)\n  local left_half_num_next_str_rev_len_diff",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local num_len_half = math.floor(num_len / 2)\n  local num_len_half_ceil = math.ceil(num_len / 2)\n  local num_len_half_ceil_minus_one = num_len_half_ceil - 1\n  local num_len_half_ceil_plus_one = num_len_half_ceil + 1\n  local num_len_half_ceil_plus_two = num_len_half_ceil + 2\n  local num_len_half_ceil_plus_three = num_len_half_ceil + 3\n  local num_len_half_ceil_plus_four = num_len_half_ceil + 4\n  local num_len_half_ceil_plus_five = num_len_half_ceil + 5\n  local num_len_half_ceil_plus_six = num_len_half_ceil + 6\n  local num_len_half_ceil_plus_seven = num_len_half_ceil + 7\n  local num_len_half_ceil_plus_eight = num_len_half_ceil + 8\n  local num_len_half_ceil_plus_nine = num_len_half_ceil + 9\n  local num_len_half_ceil_plus_ten = num_len_half_ceil + 10\n  local num_len_half_ceil_plus_eleven = num_len_half_ceil + 11\n  local num_len_half_ceil_plus_twelve = num_len_half_ceil + 12\n  local num_len_half_ceil_plus_thirteen = num_len_half_ceil + 13\n  local num_len_half_ceil_plus_fourteen = num_len_half_ceil + 14\n  local num_len_half_ceil_plus_fifteen = num_len_half_ceil + 15\n  local num_len_half_ceil_plus_sixteen = num_len_half_ceil +",
    "  local s = tostring(num)\n  local len = #s\n  local left = math.floor(len / 2)\n  local right = math.ceil(len / 2)\n  local left_str = s:sub(1, left)\n  local right_str = s:sub(right)\n  local left_num = tonumber(left_str)\n  local right_num = tonumber(right_str)\n  local left_num_rev = tonumber(left_str:reverse())\n  if left_num_rev < right_num then\n    left_num = left_num + 1\n    left_num_rev = tonumber(tostring(left_num):reverse())\n  end\n  local result = left_num .. tostring(left_num_rev):sub(1, right)\n  return tonumber(result)\nend",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local left_half = num_str:sub(1, math.floor(num_len/2))\n  local right_half = num_str:sub(math.ceil(num_len/2)+1)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  local left_half_num_next = left_half_num + 1\n  local right_half_num_next = left_half_num_next\n  if num_len % 2 == 0 then\n    right_half_num_next = right_half_num_next * 10\n  end\n  local left_half_num_next_str = tostring(left_half_num_next)\n  local right_half_num_next_str = tostring(right_half_num_next)\n  local right_half_num_next_str_rev = right_half_num_next_str:reverse()\n  local next_palindrome = left_half_num_next_str .. right_half_num_next_str_rev\n  return tonumber(next_palindrome)\nend",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local half_len = math.floor(len / 2)\n  local left_half = num_str:sub(1, half_len)\n  local right_half = num_str:sub(len - half_len + 1, len)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  local next_left_half_num = left_half_num + 1\n  local next_right_half_num = next_left_half_num\n  if right_half_num < left_half_num then\n    next_right_half_num = left_half_num\n  end\n  local next_left_half = tostring(next_left_half_num)\n  local next_right_half = tostring(next_right_half_num)\n  local next_palindrome = next_left_half\n  if len % 2 == 0 then\n    next_palindrome = next_palindrome .. next_right_half\n  else\n    next_palindrome = next_palindrome .. num_str:sub(half_len + 1, half_len + 1) .. next_right_half\n  end\n  return tonumber(next_palindrome)\nend",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local half_len = math.floor(num_len / 2)\n  local left_half = num_str:sub(1, half_len)\n  local right_half = num_str:sub(num_len - half_len + 1, num_len)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  local left_half_num_next = left_half_num + 1\n  local left_half_num_next_str = tostring(left_half_num_next)\n  local left_half_num_next_str_len = #left_half_num_next_str\n  local left_half_num_next_str_half_len = math.floor(left_half_num_next_str_len / 2)\n  local left_half_num_next_str_left_half = left_half_num_next_str:sub(1, left_half_num_next_str_half_len)\n  local left_half_num_next_str_right_half = left_half_num_next_str:sub(left_half_num_next_str_len - left_half_num_next_str_half_len + 1, left_half_num_next_str_len)\n  local left_half_num_next_str_right_half_rev = left_half_num_next_str_right_half:reverse()\n  local left_half_num_next_str_right_half_rev_num = tonumber(left_half_num_next_str_right_half_rev)\n  local left_half_num_next_str_right_half_rev_num_next = left_half_num_next_str_right_half_rev_num + 1\n  local left_half_num_next_str_right_half_rev_num_next_str = tostring(left_half_num_next_str_right_half_rev_num_next)\n  local left_half_num_next_str_",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local half_len = math.floor(len / 2)\n  local left = tonumber(string.sub(num_str, 1, half_len))\n  local right = tonumber(string.sub(num_str, len - half_len + 1, len))\n  local left_str = tostring(left)\n  local right_str = tostring(right)\n  local left_len = #left_str\n  local right_len = #right_str\n  local left_half_len = math.floor(left_len / 2)\n  local right_half_len = math.floor(right_len / 2)\n  local left_half = tonumber(string.sub(left_str, 1, left_half_len))\n  local right_half = tonumber(string.sub(right_str, right_len - right_half_len + 1, right_len))\n  local left_half_str = tostring(left_half)\n  local right_half_str = tostring(right_half)\n  local left_half_len = #left_half_str\n  local right_half_len = #right_half_str\n  local left_half_half_len = math.floor(left_half_len / 2)\n  local right_half_half_len = math.floor(right_half_len / 2)\n  local left_half_half = tonumber(string.sub(left_half_str, 1, left_half_half_len))\n  local right_half_half = tonumber(string.sub(right_half_str, right_half_len - right_half_half_len + 1, right_half_len))\n  local left_half_half_str = tostring(left_half_half)\n  local right_half_half_str = tostring(right_half_half)\n  local left_half_half_len = #left_half_half_str\n  local right_half_half_len = #right_half_half_str\n  local left_half_half_half_len = math.floor(left_half_half",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local half_len = math.floor(num_len / 2)\n  local left_half = num_str:sub(1, half_len)\n  local right_half = num_str:sub(num_len - half_len + 1, num_len)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  local left_half_num_next = left_half_num + 1\n  local left_half_num_next_str = tostring(left_half_num_next)\n  local left_half_num_next_str_len = #left_half_num_next_str\n  local left_half_num_next_str_half_len = math.floor(left_half_num_next_str_len / 2)\n  local left_half_num_next_str_left_half = left_half_num_next_str:sub(1, left_half_num_next_str_half_len)\n  local left_half_num_next_str_right_half = left_half_num_next_str:sub(left_half_num_next_str_len - left_half_num_next_str_half_len + 1, left_half_num_next_str_len)\n  local left_half_num_next_str_right_half_reversed = left_half_num_next_str_right_half:reverse()\n  local left_half_num_next_str_right_half_reversed_num = tonumber(left_half_num_next_str_right_half_reversed)\n  local left_half_num_next_str_right_half_reversed_num_next = left_half_num_next_str_right_half_reversed_num + 1\n  local left_half_num_next_str_right_half_reversed_num_next_str = tostring(left_half_num_next_str_right_half_reversed_num_next",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local first_half = num_str:sub(1, math.floor(len / 2))\n  local second_half = num_str:sub(math.ceil(len / 2) + 1)\n  local first_half_num = tonumber(first_half)\n  local second_half_num = tonumber(second_half)\n  local next_palindrome = nil\n  if len % 2 == 0 then\n    if first_half_num > second_half_num then\n      next_palindrome = first_half .. first_half:reverse()\n    else\n      next_palindrome = tostring(first_half_num + 1) .. tostring(first_half_num + 1):reverse()\n    end\n  else\n    if first_half_num > second_half_num then\n      next_palindrome = first_half .. num_str:sub(math.floor(len / 2) + 1, math.floor(len / 2) + 1) .. first_half:reverse()\n    else\n      next_palindrome = tostring(first_half_num + 1) .. num_str:sub(math.floor(len / 2) + 1, math.floor(len / 2) + 1) .. tostring(first_half_num + 1):reverse()\n    end\n  end\n  return tonumber(next_palindrome)\nend",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local half_len = math.floor(len / 2)\n  local left = tonumber(num_str:sub(1, half_len))\n  local right = tonumber(num_str:sub(len - half_len + 1, len))\n  local left_str = tostring(left)\n  local right_str = tostring(right)\n  local left_len = #left_str\n  local right_len = #right_str\n  local left_half_len = math.floor(left_len / 2)\n  local right_half_len = math.floor(right_len / 2)\n  local left_left = tonumber(left_str:sub(1, left_half_len))\n  local left_right = tonumber(left_str:sub(left_len - left_half_len + 1, left_len))\n  local right_left = tonumber(right_str:sub(1, right_half_len))\n  local right_right = tonumber(right_str:sub(right_len - right_half_len + 1, right_len))\n  local left_left_str = tostring(left_left)\n  local left_right_str = tostring(left_right)\n  local right_left_str = tostring(right_left)\n  local right_right_str = tostring(right_right)\n  local left_left_len = #left_left_str\n  local left_right_len = #left_right_str\n  local right_left_len = #right_left_str\n  local right_right_len = #right_right_str\n  local left_left_half_len = math.floor(left_left_len / 2)\n  local left_right_half_len = math.floor(left_right_len / 2)\n  local right_left_half_len = math.floor(right_left_len / 2)\n  local right_right_half_len = math.floor(right_right_len / 2)\n  local left_left_left = tonumber(left_left_str:sub(",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local num_half_len = math.floor(num_len / 2)\n  local num_half_str = string.sub(num_str, 1, num_half_len)\n  local num_half_rev_str = string.reverse(num_half_str)\n  local num_half_rev_num = tonumber(num_half_rev_str)\n  local num_half_num = tonumber(num_half_str)\n  local num_half_rev_num_str = tostring(num_half_rev_num)\n  local num_half_rev_num_len = #num_half_rev_num_str\n  local num_half_rev_num_len_diff = num_half_len - num_half_rev_num_len\n  local num_half_rev_num_str_padded = string.rep('0', num_half_rev_num_len_diff) .. num_half_rev_num_str\n  local num_half_rev_num_padded = tonumber(num_half_rev_num_str_padded)",
    "    local str = tostring(num)\n    local len = #str\n    local left = math.floor(len / 2)\n    local right = math.ceil(len / 2)\n    local left_str = str:sub(1, left)\n    local right_str = str:sub(right, len)\n    local left_num = tonumber(left_str)\n    local right_num = tonumber(right_str)\n    if left_num < right_num then\n        left_num = left_num + 1\n        left_str = tostring(left_num)\n        right_str = left_str:reverse()\n    elseif left_num > right_num then\n        right_str = left_str:reverse()\n    else\n        local carry = 1\n        local i = left\n        while i > 0 do\n            local c = str:sub(i, i)\n            local n = tonumber(c) + carry\n            if n > 9 then\n                carry = 1\n                n = 0\n            else\n                carry = 0\n            end\n            str = str:sub(1, i - 1) .. tostring(n) .. str:sub(i + 1, len)\n            i = i - 1\n        end\n        if carry > 0 then\n            str = \"1\" .. str\n        end\n        return tonumber(str)\n    end\n    return tonumber(left_str .. right_str)\nend",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local left_half = num_str:sub(1, num_len / 2)\n  local right_half = num_str:sub(num_len / 2 + 1)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  if left_half_num < right_half_num then\n    left_half_num = left_half_num + 1\n  elseif left_half_num > right_half_num then\n    left_half_num = left_half_num - 1\n  end\n  left_half = tostring(left_half_num)\n  right_half = left_half:reverse()\n  return tonumber(left_half .. right_half)\nend",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local half_len = math.floor(len / 2)\n  local left_half = num_str:sub(1, half_len)\n  local right_half = num_str:sub(len - half_len + 1, len)\n  local left_half_int = tonumber(left_half)\n  local right_half_int = tonumber(right_half)\n  if left_half_int > right_half_int then\n    return tonumber(left_half .. left_half:reverse())\n  end\n  local next_left_half_int = left_half_int + 1\n  local next_left_half = tostring(next_left_half_int)\n  return tonumber(next_left_half .. next_left_half:reverse())\nend",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local half_len = math.floor(len / 2)\n  local left_half = num_str:sub(1, half_len)\n  local right_half = num_str:sub(len - half_len + 1)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  if left_half_num == right_half_num then\n    return num\n  elseif left_half_num < right_half_num then\n    left_half_num = left_half_num + 1\n  end\n  return tonumber(left_half .. string.reverse(left_half))\nend",
    "    local num_str = tostring(num)\n    local num_len = #num_str\n    local half_len = math.ceil(num_len / 2)\n    local left_half = num_str:sub(1, half_len)\n    local right_half = num_str:sub(num_len - half_len + 1)\n    local left_half_num = tonumber(left_half)\n    local right_half_num = tonumber(right_half)\n    if left_half_num > right_half_num then\n        return tonumber(left_half .. left_half:reverse())\n    end\n    local next_left_half_num = left_half_num + 1\n    local next_left_half = tostring(next_left_half_num)\n    local next_right_half = next_left_half:reverse()\n    if #next_left_half > half_len then\n        next_left_half = next_left_half:sub(1, half_len)\n        next_right_half = next_left_half:reverse()\n    end\n    return tonumber(next_left_half .. next_right_half)\nend",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local left_half = string.sub(num_str, 1, math.floor(len / 2))\n  local right_half = string.sub(num_str, math.ceil(len / 2) + 1)\n  local left_half_int = tonumber(left_half)\n  local right_half_int = tonumber(right_half)\n  local left_half_next = left_half_int + 1\n  local left_half_next_str = tostring(left_half_next)\n  local left_half_next_len = #left_half_next_str\n  local right_half_next_str = string.sub(left_half_next_str, left_half_next_len - len / 2 + 1)\n  local right_half_next_int = tonumber(right_half_next_str)\n  local right_half_next_int_rev = tonumber(string.reverse(right_half_next_str))\n  local next_palindrome = 0\n  if right_half_next_int > right_half_int then\n    next_palindrome = tonumber(left_half_next_str .. string.reverse(left_half_next_str))\n  elseif right_half_next_int_rev > right_half_int then\n    next_palindrome = tonumber(left_half_next_str .. string.reverse(left_half_next_str))\n  else\n    next_palindrome = tonumber(left_half_next_str .. string.reverse(left_half_next_str))\n  end\n  return next_palindrome\nend",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local num_half_len = math.floor(num_len / 2)\n  local num_half_str = string.sub(num_str, 1, num_half_len)\n  local num_half_num = tonumber(num_half_str)\n  local num_half_num_next = num_half_num + 1\n  local num_half_num_next_str = tostring(num_half_num_next)\n  local num_half_num_next_str_rev = string.reverse(num_half_num_next_str)\n  local num_half_num_next_str_rev_len = #num_half_num_next_str_rev\n  local num_half_num_next_str_rev_len_diff = num_half_len - num_half_num_next_str_rev_len\n  local num_half_num_next_str_rev_len_diff_str = string.rep('0', num_half_num_next_str_rev_len_diff)\n  local num_half_num_next_str_rev_len_diff_str_rev = string.reverse(num_half_num_next_str_rev_len_diff_str)\n  local num_half_num_next_str_rev_len_diff_str_rev_len = #num_half_num_next_str_rev_len_diff_str_rev\n  local num_half_num_next_str_rev_len_diff_str_rev_len_diff = num_half_len - num_half_num_next_str_rev_len_diff_str_rev_len\n  local num_half_num_next_str_rev_len_diff_str_rev_len_diff_str = string.rep('0', num_half_num_next_str_rev_len_diff_str_rev_len_diff)\n  local num_half_num_next_str_rev_len_diff_str_rev_len_diff_str_rev = string.reverse(num_half_num_next_"
  ]
}