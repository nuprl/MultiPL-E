{
  "name": "mbpp_619_move_num",
  "language": "lua",
  "prompt": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend",
    "\tlocal str = \"\"\n\tlocal num = \"\"\n\tlocal i = 1\n\twhile i <= #test_str do\n\t\tif string.find(test_str, \"%d\", i) then\n\t\t\tnum = num .. string.sub(test_str, i, i)\n\t\telse\n\t\t\tstr = str .. string.sub(test_str, i, i)\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn str .. num\nend",
    "    local str = test_str\n    local nums = {}\n    local chars = {}\n    for i = 1, #str do\n        if string.find(str[i], \"%d\") then\n            table.insert(nums, str[i])\n        else\n            table.insert(chars, str[i])\n        end\n    end\n    return table.concat(chars) .. table.concat(nums)\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i,i)\n\t\tif tonumber(c) then\n\t\t\tnum = num..c\n\t\telse\n\t\t\tstr = str..c\n\t\tend\n\tend\n\treturn str..num\nend",
    "\tlocal num_str = \"\"\n\tlocal char_str = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i, i)) then\n\t\t\tnum_str = num_str .. test_str:sub(i, i)\n\t\telse\n\t\t\tchar_str = char_str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num = num .. char\n        else\n            str = str .. char\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str_list = {}\n    local num_list = {}\n    for i = 1, #test_str do\n        local c = string.sub(test_str, i, i)\n        if tonumber(c) then\n            table.insert(num_list, c)\n        else\n            table.insert(str_list, c)\n        end\n    end\n    return table.concat(str_list) .. table.concat(num_list)\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local ch = string.sub(test_str, i, i)\n        if tonumber(ch) then\n            num_str = num_str .. ch\n        else\n            char_str = char_str .. ch\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str_table = {}\n    local num_table = {}\n    local str_table_index = 1\n    local num_table_index = 1\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\", i) then\n            num_table[num_table_index] = string.sub(test_str, i, i)\n            num_table_index = num_table_index + 1\n        else\n            str_table[str_table_index] = string.sub(test_str, i, i)\n            str_table_index = str_table_index + 1\n        end\n    end\n    local result_str = table.concat(str_table, \"\") .. table.concat(num_table, \"\")\n    return result_str\nend",
    "    local new_str = \"\"\n    local num_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            new_str = new_str .. test_str:sub(i, i)\n        end\n    end\n    return new_str .. num_str\nend",
    "    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            table.insert(num_table, string.sub(test_str, i, i))\n        else\n            table.insert(str_table, string.sub(test_str, i, i))\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend"
  ]
}