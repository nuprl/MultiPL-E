{
  "name": "mbpp_65_recursive_list_sum",
  "language": "lua",
  "prompt": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == 'table' then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    if #data_list == 0 then\n        return 0\n    end\n    local head = data_list[1]\n    local tail = data_list[2]\n    if type(head) == \"table\" then\n        return recursive_list_sum(head) + recursive_list_sum(tail)\n    else\n        return head + recursive_list_sum(tail)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpunxog3sr.lua:3: attempt to get length of a number value (local 'data_list')\nstack traceback:\n\t/tmp/tmpunxog3sr.lua:3: in upvalue 'recursive_list_sum'\n\t/tmp/tmpunxog3sr.lua:11: in local 'candidate'\n\t/tmp/tmpunxog3sr.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for k, v in pairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    if type(data_list) ~= 'table' then\n        return data_list\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "lua: /tmp/tmpso6_ffbk.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for i, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == 'table' then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, data in ipairs(data_list) do\n    if type(data) == \"table\" then\n      sum = sum + recursive_list_sum(data)\n    else\n      sum = sum + data\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in pairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for i, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local total = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      total = total + recursive_list_sum(v)\n    else\n      total = total + v\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  if type(data_list) ~= \"table\" then\n    return data_list\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "lua: /tmp/tmp57kqwbd7.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in pairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    if #data_list == 0 then\n        return 0\n    else\n        return data_list[1] + recursive_list_sum(table.slice(data_list, 2))\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1hu8uvwk.lua:6: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp1hu8uvwk.lua:6: in local 'candidate'\n\t/tmp/tmp1hu8uvwk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, data in ipairs(data_list) do\n        if type(data) == \"table\" then\n            sum = sum + recursive_list_sum(data)\n        else\n            sum = sum + data\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, value in ipairs(data_list) do\n    if type(value) == \"table\" then\n      sum = sum + recursive_list_sum(value)\n    else\n      sum = sum + value\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"number\" then\n            sum = sum + v\n        elseif type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for k, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, value in ipairs(data_list) do\n        if type(value) == \"table\" then\n            sum = sum + recursive_list_sum(value)\n        else\n            sum = sum + value\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for i, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local total = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      total = total + recursive_list_sum(v)\n    else\n      total = total + v\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"number\" then\n            sum = sum + v\n        elseif type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509707,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, value in ipairs(data_list) do\n    if type(value) == \"table\" then\n      sum = sum + recursive_list_sum(value)\n    else\n      sum = sum + value\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123419,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}