{
  "name": "mbpp_4_heap_queue_largest",
  "language": "lua",
  "prompt": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      table.insert(heap, num)\n      heap_sift_up(heap, #heap)\n    elseif num > heap[1] then\n      heap[1] = num\n      heap_sift_down(heap, 1)\n    end\n  end\n  table.sort(heap, function(a, b) return a > b end)\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9scf8pt.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpx9scf8pt.lua:7: in local 'candidate'\n\t/tmp/tmpx9scf8pt.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function push(x)\n    table.insert(heap, x)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local x = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return x\n  end\n  for _, x in ipairs(nums) do\n    push(x)\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "lua: /tmp/tmphl3v30w3.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoko0ryrl.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpoko0ryrl.lua:5: in local 'candidate'\n\t/tmp/tmpoko0ryrl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function push(x)\n    table.insert(heap, x)\n    local i = #heap\n    while i > 1 do\n      local p = math.floor(i / 2)\n      if heap[p] >= heap[i] then\n        break\n      end\n      heap[i], heap[p] = heap[p], heap[i]\n      i = p\n    end\n  end\n  local function pop()\n    local x = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i * 2 <= #heap do\n      local l = i * 2\n      if l + 1 <= #heap and heap[l + 1] > heap[l] then\n        l = l + 1\n      end\n      if heap[i] >= heap[l] then\n        break\n      end\n      heap[i], heap[l] = heap[l], heap[i]\n      i = l\n    end\n    return x\n  end\n  for i = 1, n do\n    push(nums[i])\n  end\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      pop()\n      push(nums[i])\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, 1, pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs9dq9ng.lua:53: expected: {85, 75, 65}\nactual: {22, 25, 85}\nstack traceback:\n\t/tmp/tmpqs9dq9ng.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiadnhgmb.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpiadnhgmb.lua:3: in local 'candidate'\n\t/tmp/tmpiadnhgmb.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = HeapQueue.new(nums)\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7wo4nu9p.lua:3: attempt to index a nil value (global 'HeapQueue')\nstack traceback:\n\t/tmp/tmp7wo4nu9p.lua:3: in local 'candidate'\n\t/tmp/tmp7wo4nu9p.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, num)\n        elseif num > heap[1] then\n            heap_replace(heap, num)\n        end\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxmnnhj5v.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpxmnnhj5v.lua:6: in local 'candidate'\n\t/tmp/tmpxmnnhj5v.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function sift_up(i)\n    local p = math.floor(i / 2)\n    while p > 0 and heap[p] < heap[i] do\n      heap[p], heap[i] = heap[i], heap[p]\n      i = p\n      p = math.floor(i / 2)\n    end\n  end\n  local function sift_down(i)\n    local c = i * 2\n    while c <= #heap do\n      if c + 1 <= #heap and heap[c + 1] > heap[c] then\n        c = c + 1\n      end\n      if heap[i] >= heap[c] then\n        break\n      end\n      heap[i], heap[c] = heap[c], heap[i]\n      i = c\n      c = i * 2\n    end\n  end\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      heap[#heap + 1] = num\n      sift_up(#heap)\n    elseif num > heap[1] then\n      heap[1] = num\n      sift_down(1)\n    end\n  end\n  local res = {}\n  while #heap > 0 do\n    res[#res + 1] = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    sift_down(1)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnqfzx6j.lua:48: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpnnqfzx6j.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function sift_up(heap, index)\n        local parent = math.floor(index / 2)\n        if parent > 0 and heap[index] > heap[parent] then\n            heap[index], heap[parent] = heap[parent], heap[index]\n            sift_up(heap, parent)\n        end\n    end\n    local function sift_down(heap, index)\n        local left = index * 2\n        local right = left + 1\n        local largest = index\n        if left <= #heap and heap[left] > heap[largest] then\n            largest = left\n        end\n        if right <= #heap and heap[right] > heap[largest] then\n            largest = right\n        end\n        if largest ~= index then\n            heap[index], heap[largest] = heap[largest], heap[index]\n            sift_down(heap, largest)\n        end\n    end\n    local function insert(heap, num)\n        heap[#heap + 1] = num\n        sift_up(heap, #heap)\n    end\n    local function remove(heap)\n        heap[1], heap[#heap] = heap[#heap], heap[1]\n        local num = table.remove(heap)\n        sift_down(heap, 1)\n        return num\n    end\n    for _, num in ipairs(nums) do\n        insert(heap, num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = remove(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap()\n    for _, num in ipairs(nums) do\n        heap:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg4ovns_x.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpg4ovns_x.lua:3: in local 'candidate'\n\t/tmp/tmpg4ovns_x.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function push(x)\n    table.insert(heap, x)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local x = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return x\n  end\n  for _, x in ipairs(nums) do\n    push(x)\n  end\n  local result = {}\n  for _ = 1, n do\n    table.insert(result, pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    result[#result + 1] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2b6bl66b.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp2b6bl66b.lua:5: in local 'candidate'\n\t/tmp/tmp2b6bl66b.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  return heap_to_list(heap)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphfqnx698.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmphfqnx698.lua:5: in local 'candidate'\n\t/tmp/tmphfqnx698.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6e4qpgu.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpa6e4qpgu.lua:5: in local 'candidate'\n\t/tmp/tmpa6e4qpgu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      table.insert(heap, num)\n      heap_sift_up(heap, #heap)\n    elseif num > heap[1] then\n      heap[1] = num\n      heap_sift_down(heap, 1)\n    end\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjcnx24fj.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpjcnx24fj.lua:7: in local 'candidate'\n\t/tmp/tmpjcnx24fj.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(nums)\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvuhk8lse.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvuhk8lse.lua:3: in local 'candidate'\n\t/tmp/tmpvuhk8lse.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, num)\n        local i = #heap + 1\n        heap[i] = num\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = left + 1\n            if left > #heap then\n                break\n            end\n            local max = left\n            if right <= #heap and heap[right] > heap[left] then\n                max = right\n            end\n            if heap[i] < heap[max] then\n                heap[i], heap[max] = heap[max], heap[i]\n                i = max\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heapq.heappush(heap, num)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, heapq.heappop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3fc0frt9.lua:5: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmp3fc0frt9.lua:5: in local 'candidate'\n\t/tmp/tmp3fc0frt9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j] < heap[i] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local val = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return val\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local res = {}\n    for i = 1, n do\n        table.insert(res, heap_pop(heap))\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgzyvp5c.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfgzyvp5c.lua:3: in local 'candidate'\n\t/tmp/tmpfgzyvp5c.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqy7qkb4b.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpqy7qkb4b.lua:5: in local 'candidate'\n\t/tmp/tmpqy7qkb4b.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i, num in ipairs(nums) do\n    if i <= n then\n      heap[i] = num\n    else\n      local min = heap[1]\n      if num > min then\n        heap[1] = num\n        heap_sift_down(heap, 1, n)\n      end\n    end\n  end\n  heap_sort(heap)\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp25v5gjc6.lua:11: attempt to call a nil value (global 'heap_sift_down')\nstack traceback:\n\t/tmp/tmp25v5gjc6.lua:11: in local 'candidate'\n\t/tmp/tmp25v5gjc6.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local result = {}\n    for i = 1, n do\n        local num = heap_pop(heap)\n        if num then\n            table.insert(result, num)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplu6lox6s.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmplu6lox6s.lua:5: in local 'candidate'\n\t/tmp/tmplu6lox6s.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local size = 0\n    local function push(x)\n        size = size + 1\n        heap[size] = x\n        local i = size\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j] < heap[i] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local x = heap[1]\n        heap[1] = heap[size]\n        heap[size] = nil\n        size = size - 1\n        local i = 1\n        while i * 2 <= size do\n            local j = i * 2\n            if j < size and heap[j] < heap[j + 1] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return x\n    end\n    for _, x in ipairs(nums) do\n        push(x)\n        if size > n then\n            pop()\n        end\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdid89rrh.lua:55: expected: {85, 75, 65}\nactual: {22, 22, 14}\nstack traceback:\n\t/tmp/tmpdid89rrh.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local count = 0\n    local function push(num)\n        count = count + 1\n        heap[count] = num\n        local i = count\n        while i > 1 do\n            local p = math.floor(i / 2)\n            if heap[p] < heap[i] then\n                heap[p], heap[i] = heap[i], heap[p]\n                i = p\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local ret = heap[1]\n        heap[1] = heap[count]\n        heap[count] = nil\n        count = count - 1\n        local i = 1\n        while i * 2 <= count do\n            local l = i * 2\n            local r = l + 1\n            local j = l\n            if r <= count and heap[r] > heap[l] then\n                j = r\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        push(num)\n    end\n    local ret = {}\n    for i = 1, n do\n        ret[i] = pop()\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j] < heap[i] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local val = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return val\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function insert(num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent] < heap[i] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function remove()\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      local max = left\n      if right <= #heap and heap[right] > heap[left] then\n        max = right\n      end\n      if heap[max] > heap[i] then\n        heap[max], heap[i] = heap[i], heap[max]\n        i = max\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for i = 1, n do\n    insert(nums[i])\n  end\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      remove()\n      insert(nums[i])\n    end\n  end\n  local ret = {}\n  for i = 1, n do\n    table.insert(ret, 1, remove())\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiav9mmhv.lua:57: expected: {85, 75, 65}\nactual: {22, 25, 85}\nstack traceback:\n\t/tmp/tmpiav9mmhv.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap:new()\n    for _, num in ipairs(nums) do\n        heap:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwfgunw93.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpwfgunw93.lua:3: in local 'candidate'\n\t/tmp/tmpwfgunw93.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i] > heap[parent] then\n                heap[i], heap[parent] = heap[parent], heap[i]\n            else\n                break\n            end\n            i = parent\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            local max = left\n            if right <= #heap and heap[right] > heap[left] then\n                max = right\n            end\n            if heap[max] > heap[i] then\n                heap[max], heap[i] = heap[i], heap[max]\n            else\n                break\n            end\n            i = max\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8bgw9mpo.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp8bgw9mpo.lua:5: in local 'candidate'\n\t/tmp/tmp8bgw9mpo.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function push(x)\n    table.insert(heap, x)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[i] > heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local x = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return x\n  end\n  for _, x in ipairs(nums) do\n    push(x)\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap.new(function(a, b) return a > b end)\n    for _, num in ipairs(nums) do\n        heap:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcxf5pex9.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpcxf5pex9.lua:3: in local 'candidate'\n\t/tmp/tmpcxf5pex9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(nums, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgeg3soi2.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpgeg3soi2.lua:3: in local 'candidate'\n\t/tmp/tmpgeg3soi2.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i, num in ipairs(nums) do\n        if i <= n then\n            heap[i] = num\n        else\n            heap_insert(heap, num)\n        end\n    end\n    heap_build(heap)\n    for i = n + 1, #nums do\n        heap_insert(heap, nums[i])\n    end\n    return heap_sort(heap)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_inebv5n.lua:8: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp_inebv5n.lua:8: in local 'candidate'\n\t/tmp/tmp_inebv5n.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    result[#result + 1] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4imdlanl.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp4imdlanl.lua:5: in local 'candidate'\n\t/tmp/tmp4imdlanl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_insert(heap, num)\n        elseif num > heap[1] then\n            heap_replace(heap, num)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm0087so4.lua:6: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpm0087so4.lua:6: in local 'candidate'\n\t/tmp/tmpm0087so4.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, val)\n        local i = #heap + 1\n        heap[i] = val\n        while i > 1 do\n            local p = math.floor(i / 2)\n            if heap[p] >= heap[i] then\n                break\n            end\n            heap[p], heap[i] = heap[i], heap[p]\n            i = p\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        local n = #heap\n        heap[1] = heap[n]\n        heap[n] = nil\n        n = n - 1\n        local i = 1\n        while i * 2 <= n do\n            local j = i * 2\n            if j < n and heap[j] < heap[j + 1] then\n                j = j + 1\n            end\n            if heap[i] >= heap[j] then\n                break\n            end\n            heap[i], heap[j] = heap[j], heap[i]\n            i = j\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        ret[i] = heap_pop(heap)\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap()\n    for _, num in ipairs(nums) do\n        heap:push(num)\n        if heap:size() > n then\n            heap:pop()\n        end\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz9c6iyv.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpcz9c6iyv.lua:3: in local 'candidate'\n\t/tmp/tmpcz9c6iyv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function push(x)\n    table.insert(heap, x)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[i] > heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local x = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return x\n  end\n  for _, x in ipairs(nums) do\n    push(x)\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(heap, num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i] > heap[parent] then\n        heap[i], heap[parent] = heap[parent], heap[i]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i * 2 <= #heap do\n      local child = i * 2\n      if child + 1 <= #heap and heap[child + 1] > heap[child] then\n        child = child + 1\n      end\n      if heap[i] < heap[child] then\n        heap[i], heap[child] = heap[child], heap[i]\n        i = child\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local ret = {}\n  for i = 1, n do\n    table.insert(ret, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkflhftzz.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpkflhftzz.lua:5: in local 'candidate'\n\t/tmp/tmpkflhftzz.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1zm49y_c.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp1zm49y_c.lua:5: in local 'candidate'\n\t/tmp/tmp1zm49y_c.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function push(x)\n    table.insert(heap, x)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i] > heap[parent] then\n        heap[i], heap[parent] = heap[parent], heap[i]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i < #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      if left > #heap then\n        break\n      elseif right > #heap then\n        if heap[left] > heap[i] then\n          heap[left], heap[i] = heap[i], heap[left]\n        end\n        break\n      else\n        if heap[left] > heap[right] then\n          if heap[left] > heap[i] then\n            heap[left], heap[i] = heap[i], heap[left]\n            i = left\n          else\n            break\n          end\n        else\n          if heap[right] > heap[i] then\n            heap[right], heap[i] = heap[i], heap[right]\n            i = right\n          else\n            break\n          end\n        end\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    push(num)\n  end\n  local ret = {}\n  for i = 1, n do\n    table.insert(ret, pop())\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function push(x)\n        table.insert(heap, x)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i] > heap[parent] then\n                heap[i], heap[parent] = heap[parent], heap[i]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local child = i * 2\n            if child + 1 <= #heap and heap[child + 1] > heap[child] then\n                child = child + 1\n            end\n            if heap[i] < heap[child] then\n                heap[i], heap[child] = heap[child], heap[i]\n                i = child\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, x in ipairs(nums) do\n        push(x)\n    end\n    local ret = {}\n    for _ = 1, n do\n        table.insert(ret, pop())\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i, num in ipairs(nums) do\n    if #heap < n then\n      heap_push(heap, num)\n    elseif num > heap[1] then\n      heap_replace(heap, num)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfpv6hx7m.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpfpv6hx7m.lua:6: in local 'candidate'\n\t/tmp/tmpfpv6hx7m.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local result = {}\n    for _ = 1, n do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdgka2z8y.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpdgka2z8y.lua:5: in local 'candidate'\n\t/tmp/tmpdgka2z8y.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap()\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuznrkj5i.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpuznrkj5i.lua:3: in local 'candidate'\n\t/tmp/tmpuznrkj5i.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      table.insert(heap, num)\n      heap_sift_up(heap, #heap)\n    else\n      if num > heap[1] then\n        heap[1] = num\n        heap_sift_down(heap, 1, #heap)\n      end\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, heap[1])\n    heap[1] = heap[#heap]\n    heap_sift_down(heap, 1, #heap - 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpny6abekn.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpny6abekn.lua:7: in local 'candidate'\n\t/tmp/tmpny6abekn.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgzyvp5c.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfgzyvp5c.lua:3: in local 'candidate'\n\t/tmp/tmpfgzyvp5c.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_insert(heap, num)\n        elseif num > heap[1] then\n            heap_replace(heap, num)\n        end\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_extract_max(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9ze4g1n.lua:6: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpt9ze4g1n.lua:6: in local 'candidate'\n\t/tmp/tmpt9ze4g1n.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_insert(heap, num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i] > heap[parent] then\n        heap[i], heap[parent] = heap[parent], heap[i]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i * 2 <= #heap do\n      local child = i * 2\n      if child + 1 <= #heap and heap[child + 1] > heap[child] then\n        child = child + 1\n      end\n      if heap[i] < heap[child] then\n        heap[i], heap[child] = heap[child], heap[i]\n        i = child\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      heap_insert(heap, num)\n    elseif num > heap[1] then\n      heap_pop(heap)\n      heap_insert(heap, num)\n    end\n  end\n  local ret = {}\n  while #heap > 0 do\n    table.insert(ret, 1, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwf_4t5oc.lua:54: expected: {85, 75, 65}\nactual: {22, 25, 85}\nstack traceback:\n\t/tmp/tmpwf_4t5oc.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = HeapQueue:new()\n    for _, num in ipairs(nums) do\n        heap:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6k_nh1m.lua:3: attempt to index a nil value (global 'HeapQueue')\nstack traceback:\n\t/tmp/tmpx6k_nh1m.lua:3: in local 'candidate'\n\t/tmp/tmpx6k_nh1m.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function sift_down(i)\n        local left = i * 2\n        local right = i * 2 + 1\n        local largest = i\n        if left <= #heap and heap[left] > heap[largest] then\n            largest = left\n        end\n        if right <= #heap and heap[right] > heap[largest] then\n            largest = right\n        end\n        if largest ~= i then\n            heap[i], heap[largest] = heap[largest], heap[i]\n            sift_down(largest)\n        end\n    end\n    local function sift_up(i)\n        local parent = math.floor(i / 2)\n        if parent > 0 and heap[parent] < heap[i] then\n            heap[parent], heap[i] = heap[i], heap[parent]\n            sift_up(parent)\n        end\n    end\n    for i = 1, n do\n        heap[i] = nums[i]\n        sift_up(i)\n    end\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            sift_down(1)\n        end\n    end\n    for i = #heap, 2, -1 do\n        heap[1], heap[i] = heap[i], heap[1]\n        sift_down(1)\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg11gtdvw.lua:46: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpg11gtdvw.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function push(x)\n        table.insert(heap, x)\n        local i = #heap\n        while i > 1 and heap[i] > heap[i // 2] do\n            heap[i], heap[i // 2] = heap[i // 2], heap[i]\n            i = i // 2\n        end\n    end\n    local function pop()\n        local x = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] >= heap[j] then\n                break\n            end\n            heap[i], heap[j] = heap[j], heap[i]\n            i = j\n        end\n        return x\n    end\n    for _, x in ipairs(nums) do\n        push(x)\n    end\n    for i = 1, n do\n        nums[i] = pop()\n    end\n    for i = 1, n // 2 do\n        nums[i], nums[n - i + 1] = nums[n - i + 1], nums[i]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpblezk1rx.lua:45: expected: {85, 75, 65}\nactual: {65, 75, 85, 85, 14, 65, 75, 22, 58}\nstack traceback:\n\t/tmp/tmpblezk1rx.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      heap_insert(heap, num)\n    else\n      if num > heap[1] then\n        heap_replace(heap, num)\n      end\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwzynzg8.lua:6: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmppwzynzg8.lua:6: in local 'candidate'\n\t/tmp/tmppwzynzg8.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(heap, num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent] < heap[i] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local num = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap, #heap)\n    local i = 1\n    while i * 2 <= #heap do\n      local child = i * 2\n      if child + 1 <= #heap and heap[child] < heap[child + 1] then\n        child = child + 1\n      end\n      if heap[i] < heap[child] then\n        heap[i], heap[child] = heap[child], heap[i]\n        i = child\n      else\n        break\n      end\n    end\n    return num\n  end\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      heap_push(heap, num)\n    elseif num > heap[1] then\n      heap_pop(heap)\n      heap_push(heap, num)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, 1, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgwm4o4m.lua:54: expected: {85, 75, 65}\nactual: {22, 25, 85}\nstack traceback:\n\t/tmp/tmplgwm4o4m.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local res = {}\n  while #heap > 0 do\n    table.insert(res, heap_pop(heap))\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp02eq45pw.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp02eq45pw.lua:5: in local 'candidate'\n\t/tmp/tmp02eq45pw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, n do\n        heap[i] = nums[i]\n    end\n    heap_queue_heapify(heap, n)\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            heap_queue_sift_down(heap, 1, n)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm684ctsi.lua:7: attempt to call a nil value (global 'heap_queue_heapify')\nstack traceback:\n\t/tmp/tmpm684ctsi.lua:7: in local 'candidate'\n\t/tmp/tmpm684ctsi.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[i] > heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i < #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local ret = {}\n    while #heap > 0 do\n        table.insert(ret, 1, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg6ld165v.lua:27: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpg6ld165v.lua:27: in local 'heap_pop'\n\t/tmp/tmpg6ld165v.lua:39: in local 'candidate'\n\t/tmp/tmpg6ld165v.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            if left > #heap then\n                break\n            elseif right > #heap then\n                if heap[i] < heap[left] then\n                    heap[i], heap[left] = heap[left], heap[i]\n                end\n                break\n            else\n                if heap[left] > heap[right] then\n                    if heap[i] < heap[left] then\n                        heap[i], heap[left] = heap[left], heap[i]\n                        i = left\n                    else\n                        break\n                    end\n                else\n                    if heap[i] < heap[right] then\n                        heap[i], heap[right] = heap[right], heap[i]\n                        i = right\n                    else\n                        break\n                    end\n                end\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local ret = {}\n    while #heap > 0 do\n        table.insert(ret, 1, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99dscmab.lua:68: expected: {85, 75, 65}\nactual: {14, 22, 22}\nstack traceback:\n\t/tmp/tmp99dscmab.lua:68: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    table.insert(heap, num)\n    heap_bubble_up(heap, #heap)\n  end\n  local result = {}\n  for i = 1, n do\n    local max = heap_pop(heap)\n    table.insert(result, max)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkdy0jhwz.lua:6: attempt to call a nil value (global 'heap_bubble_up')\nstack traceback:\n\t/tmp/tmpkdy0jhwz.lua:6: in local 'candidate'\n\t/tmp/tmpkdy0jhwz.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(heap, item)\n    heap[#heap + 1] = item\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent] < heap[i] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local item = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local child = i * 2\n      if child + 1 <= #heap and heap[child + 1] > heap[child] then\n        child = child + 1\n      end\n      if heap[i] < heap[child] then\n        heap[i], heap[child] = heap[child], heap[i]\n        i = child\n      else\n        break\n      end\n    end\n    return item\n  end\n  for i = 1, #nums do\n    if #heap < n then\n      heap_push(heap, nums[i])\n    elseif nums[i] > heap[1] then\n      heap_pop(heap)\n      heap_push(heap, nums[i])\n    end\n  end\n  local result = {}\n  for i = 1, #heap do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkksc5kfp.lua:54: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpkksc5kfp.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function push(x)\n        table.insert(heap, x)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j] < heap[i] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, x in ipairs(nums) do\n        push(x)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, pop())\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, 1, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqndp300x.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpqndp300x.lua:5: in local 'candidate'\n\t/tmp/tmpqndp300x.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new()\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfd1jvcq7.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfd1jvcq7.lua:3: in local 'candidate'\n\t/tmp/tmpfd1jvcq7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_insert(x)\n    table.insert(heap, x)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[j], heap[i] = heap[i], heap[j]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop()\n    local x = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return x\n  end\n  for _, x in ipairs(nums) do\n    heap_insert(x)\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, heap_pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local heap_size = 0\n    local function heap_push(num)\n        heap_size = heap_size + 1\n        heap[heap_size] = num\n        local i = heap_size\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop()\n        local ret = heap[1]\n        heap[1] = heap[heap_size]\n        heap[heap_size] = nil\n        heap_size = heap_size - 1\n        local i = 1\n        while i * 2 <= heap_size do\n            local j = i * 2\n            if j + 1 <= heap_size and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(num)\n    end\n    local ret = {}\n    for i = 1, n do\n        ret[i] = heap_pop()\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap.new()\n    for _, num in ipairs(nums) do\n        heap:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3enudcxh.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp3enudcxh.lua:3: in local 'candidate'\n\t/tmp/tmp3enudcxh.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {};\n    for _, num in ipairs(nums) do\n        heap_push(heap, num);\n    end\n    local result = {};\n    for i = 1, n do\n        result[i] = heap_pop(heap);\n    end\n    return result;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptyuep1iq.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmptyuep1iq.lua:5: in local 'candidate'\n\t/tmp/tmptyuep1iq.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function sift_up(i)\n    local parent = math.floor(i / 2)\n    if parent > 0 and heap[parent] < heap[i] then\n      heap[parent], heap[i] = heap[i], heap[parent]\n      sift_up(parent)\n    end\n  end\n  local function sift_down(i)\n    local left = i * 2\n    local right = left + 1\n    local largest = i\n    if left <= #heap and heap[left] > heap[largest] then\n      largest = left\n    end\n    if right <= #heap and heap[right] > heap[largest] then\n      largest = right\n    end\n    if largest ~= i then\n      heap[largest], heap[i] = heap[i], heap[largest]\n      sift_down(largest)\n    end\n  end\n  for i, num in ipairs(nums) do\n    heap[i] = num\n    sift_up(i)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    sift_down(1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp79ai7rwt.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp79ai7rwt.lua:5: in local 'candidate'\n\t/tmp/tmp79ai7rwt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, num)\n        elseif num > heap[1] then\n            heap_replace(heap, num)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_284lq73.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp_284lq73.lua:6: in local 'candidate'\n\t/tmp/tmp_284lq73.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function push(x)\n    heap[#heap+1] = x\n    local i = #heap\n    while i > 1 do\n      local p = math.floor(i/2)\n      if heap[p] < heap[i] then\n        heap[p], heap[i] = heap[i], heap[p]\n        i = p\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local x = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i < #heap do\n      local l = i*2\n      local r = l+1\n      if r <= #heap then\n        if heap[l] > heap[r] then\n          if heap[i] < heap[l] then\n            heap[i], heap[l] = heap[l], heap[i]\n            i = l\n          else\n            break\n          end\n        else\n          if heap[i] < heap[r] then\n            heap[i], heap[r] = heap[r], heap[i]\n            i = r\n          else\n            break\n          end\n        end\n      elseif l <= #heap then\n        if heap[i] < heap[l] then\n          heap[i], heap[l] = heap[l], heap[i]\n          i = l\n        else\n          break\n        end\n      else\n        break\n      end\n    end\n    return x\n  end\n  for _, x in ipairs(nums) do\n    push(x)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoko0ryrl.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpoko0ryrl.lua:5: in local 'candidate'\n\t/tmp/tmpoko0ryrl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function sift_up(i)\n    local parent = math.floor(i / 2)\n    if parent > 0 and heap[i] > heap[parent] then\n      heap[i], heap[parent] = heap[parent], heap[i]\n      sift_up(parent)\n    end\n  end\n  local function sift_down(i)\n    local left = i * 2\n    local right = i * 2 + 1\n    if left <= #heap and heap[left] > heap[i] then\n      heap[left], heap[i] = heap[i], heap[left]\n      sift_down(left)\n    end\n    if right <= #heap and heap[right] > heap[i] then\n      heap[right], heap[i] = heap[i], heap[right]\n      sift_down(right)\n    end\n  end\n  for i = 1, n do\n    heap[i] = nums[i]\n    sift_up(i)\n  end\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap[1] = nums[i]\n      sift_down(1)\n    end\n  end\n  for i = #heap, 2, -1 do\n    heap[i], heap[1] = heap[1], heap[i]\n    sift_down(1)\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqiatjz9.lua:43: expected: {85, 75, 65}\nactual: {85, 22, 25}\nstack traceback:\n\t/tmp/tmpxqiatjz9.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0txw_ek1.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp0txw_ek1.lua:5: in local 'candidate'\n\t/tmp/tmp0txw_ek1.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n    if heap:size() > n then\n      heap:pop()\n    end\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbcbupp7e.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpbcbupp7e.lua:3: in local 'candidate'\n\t/tmp/tmpbcbupp7e.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heapq.heappush(heap, -num)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, -heapq.heappop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmnd_eyxo.lua:5: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmpmnd_eyxo.lua:5: in local 'candidate'\n\t/tmp/tmpmnd_eyxo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function push(x)\n        table.insert(heap, x)\n        local i = #heap\n        while i > 1 do\n            local p = math.floor(i / 2)\n            if heap[p] < heap[i] then\n                heap[p], heap[i] = heap[i], heap[p]\n                i = p\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local x = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i < #heap do\n            local l = i * 2\n            local r = l + 1\n            if r <= #heap then\n                if heap[l] > heap[r] then\n                    if heap[l] > heap[i] then\n                        heap[l], heap[i] = heap[i], heap[l]\n                        i = l\n                    else\n                        break\n                    end\n                else\n                    if heap[r] > heap[i] then\n                        heap[r], heap[i] = heap[i], heap[r]\n                        i = r\n                    else\n                        break\n                    end\n                end\n            elseif l <= #heap then\n                if heap[l] > heap[i] then\n                    heap[l], heap[i] = heap[i], heap[l]\n                    i = l\n                else\n                    break\n                end\n            else\n                break\n            end\n        end\n        return x\n    end\n    for _, x in ipairs(nums) do\n        push(x)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, pop())\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(h, num)\n        table.insert(h, num)\n        local i = #h\n        while i > 1 do\n            local p = math.floor(i / 2)\n            if h[p] < h[i] then\n                h[p], h[i] = h[i], h[p]\n                i = p\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(h)\n        local r = h[1]\n        h[1] = h[#h]\n        table.remove(h)\n        local i = 1\n        while i * 2 <= #h do\n            local l = i * 2\n            local r = i * 2 + 1\n            local j = l\n            if r <= #h and h[r] > h[l] then\n                j = r\n            end\n            if h[i] < h[j] then\n                h[i], h[j] = h[j], h[i]\n                i = j\n            else\n                break\n            end\n        end\n        return r\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local r = {}\n    while #heap > 0 do\n        table.insert(r, 1, heap_pop(heap))\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc42upum6.lua:54: expected: {85, 75, 65}\nactual: {14, 22, 22}\nstack traceback:\n\t/tmp/tmpc42upum6.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[i] > heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_uqyhr9.lua:52: expected: {85, 75, 65}\nactual: {22, 22, 14}\nstack traceback:\n\t/tmp/tmp8_uqyhr9.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i = 1, #nums do\n    heap_push(heap, nums[i])\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    result[#result + 1] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2zw3iebv.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp2zw3iebv.lua:5: in local 'candidate'\n\t/tmp/tmp2zw3iebv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[i] > heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local val = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i < #heap do\n            local j = i * 2\n            if j < #heap and heap[j] < heap[j + 1] then\n                j = j + 1\n            end\n            if j <= #heap and heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return val\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function push(x)\n    table.insert(heap, x)\n    local i = #heap\n    while i > 1 do\n      local p = math.floor(i / 2)\n      if heap[p] < heap[i] then\n        heap[p], heap[i] = heap[i], heap[p]\n        i = p\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i * 2 <= #heap do\n      local l = i * 2\n      local r = i * 2 + 1\n      if r <= #heap and heap[r] > heap[l] then\n        l = r\n      end\n      if heap[i] < heap[l] then\n        heap[i], heap[l] = heap[l], heap[i]\n        i = l\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for i = 1, n do\n    push(nums[i])\n  end\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      pop()\n      push(nums[i])\n    end\n  end\n  local ret = {}\n  for i = 1, n do\n    table.insert(ret, 1, pop())\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6o_rr7r.lua:56: expected: {85, 75, 65}\nactual: {22, 25, 85}\nstack traceback:\n\t/tmp/tmpt6o_rr7r.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap:new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1tcs997t.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp1tcs997t.lua:3: in local 'candidate'\n\t/tmp/tmp1tcs997t.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function push(x)\n        table.insert(heap, x)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[i] > heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, x in ipairs(nums) do\n        push(x)\n    end\n    local ret = {}\n    for i = 1, n do\n        ret[i] = pop()\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local ret = {}\n  while #heap > 0 do\n    ret[#ret + 1] = heap_pop(heap)\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkqt1g_ew.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpkqt1g_ew.lua:5: in local 'candidate'\n\t/tmp/tmpkqt1g_ew.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, num)\n        elseif num > heap[1] then\n            heap_pop(heap)\n            heap_push(heap, num)\n        end\n    end\n    return heap_sort(heap)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptbj1ws7b.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmptbj1ws7b.lua:6: in local 'candidate'\n\t/tmp/tmptbj1ws7b.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(heap, num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[i] > heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for i = 1, #nums do\n    if i <= n then\n      heap_push(heap, nums[i])\n    else\n      if nums[i] > heap[1] then\n        heap_pop(heap)\n        heap_push(heap, nums[i])\n      end\n    end\n  end\n  local ret = {}\n  while #heap > 0 do\n    table.insert(ret, 1, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa59rc9c_.lua:56: expected: {85, 75, 65}\nactual: {22, 25, 85}\nstack traceback:\n\t/tmp/tmpa59rc9c_.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      table.insert(heap, num)\n      heap_sift_up(heap, #heap)\n    elseif num > heap[1] then\n      heap[1] = num\n      heap_sift_down(heap, 1)\n    end\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjcnx24fj.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpjcnx24fj.lua:7: in local 'candidate'\n\t/tmp/tmpjcnx24fj.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "",
      "stderr": "lua: /tmp/tmpelbwvuuo.lua:26: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heapq.heappush(heap, -num)\n    end\n    local result = {}\n    for _ = 1, n do\n        table.insert(result, -heapq.heappop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7fjemj49.lua:5: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmp7fjemj49.lua:5: in local 'candidate'\n\t/tmp/tmp7fjemj49.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function push(x)\n    table.insert(heap, x)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent] < heap[i] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i * 2 <= #heap do\n      local child = i * 2\n      if child + 1 <= #heap and heap[child + 1] > heap[child] then\n        child = child + 1\n      end\n      if heap[i] < heap[child] then\n        heap[i], heap[child] = heap[child], heap[i]\n        i = child\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    push(num)\n  end\n  local ret = {}\n  for i = 1, n do\n    table.insert(ret, 1, pop())\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o8a1bj7.lua:49: expected: {85, 75, 65}\nactual: {65, 75, 85}\nstack traceback:\n\t/tmp/tmp3o8a1bj7.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[i] > heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv85t06x6.lua:52: expected: {85, 75, 65}\nactual: {22, 22, 14}\nstack traceback:\n\t/tmp/tmpv85t06x6.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function push(x)\n        table.insert(heap, x)\n        local i = #heap\n        while i > 1 do\n            local p = math.floor(i / 2)\n            if heap[p] < heap[i] then\n                heap[p], heap[i] = heap[i], heap[p]\n                i = p\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local x = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local l = i * 2\n            local r = i * 2 + 1\n            local j = l\n            if r <= #heap and heap[r] > heap[l] then\n                j = r\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return x\n    end\n    for _, x in ipairs(nums) do\n        push(x)\n    end\n    local ret = {}\n    for _ = 1, n do\n        table.insert(ret, pop())\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8bgw9mpo.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp8bgw9mpo.lua:5: in local 'candidate'\n\t/tmp/tmp8bgw9mpo.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[i] > heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop()\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_insert(num)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop())\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i = 1, n do\n    heap[i] = nums[i]\n  end\n  heapify(heap, n)\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap[1] = nums[i]\n      heapify(heap, n, 1)\n    end\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qo62x3c.lua:7: attempt to call a nil value (global 'heapify')\nstack traceback:\n\t/tmp/tmp9qo62x3c.lua:7: in local 'candidate'\n\t/tmp/tmp9qo62x3c.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, n do\n        heap[i] = nums[i]\n    end\n    heap_make(heap, n)\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            heap_sift_down(heap, 1, n)\n        end\n    end\n    heap_sort(heap, n)\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmcwtlc1.lua:7: attempt to call a nil value (global 'heap_make')\nstack traceback:\n\t/tmp/tmpvmcwtlc1.lua:7: in local 'candidate'\n\t/tmp/tmpvmcwtlc1.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgzyvp5c.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfgzyvp5c.lua:3: in local 'candidate'\n\t/tmp/tmpfgzyvp5c.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      table.insert(heap, num)\n      heap_sift_up(heap, #heap)\n    elseif num > heap[1] then\n      heap[1] = num\n      heap_sift_down(heap, 1)\n    end\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjcnx24fj.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpjcnx24fj.lua:7: in local 'candidate'\n\t/tmp/tmpjcnx24fj.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i = 1, n do\n    heap[i] = nums[i]\n  end\n  heap_queue_heapify(heap, n)\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap[1] = nums[i]\n      heap_queue_sift_down(heap, 1, n)\n    end\n  end\n  heap_queue_sort(heap, n)\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpycl06q4t.lua:7: attempt to call a nil value (global 'heap_queue_heapify')\nstack traceback:\n\t/tmp/tmpycl06q4t.lua:7: in local 'candidate'\n\t/tmp/tmpycl06q4t.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1zm49y_c.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp1zm49y_c.lua:5: in local 'candidate'\n\t/tmp/tmp1zm49y_c.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i, v in ipairs(nums) do\n    heap_insert(heap, v)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx1ft2hk8.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpx1ft2hk8.lua:5: in local 'candidate'\n\t/tmp/tmpx1ft2hk8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function push(x)\n    table.insert(heap, x)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for _, x in ipairs(nums) do\n    push(x)\n  end\n  local ret = {}\n  for _ = 1, n do\n    table.insert(ret, pop())\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, x)\n        heap[#heap + 1] = x\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j] >= heap[i] then\n                break\n            end\n            heap[i], heap[j] = heap[j], heap[i]\n            i = j\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] >= heap[j] then\n                break\n            end\n            heap[i], heap[j] = heap[j], heap[i]\n            i = j\n        end\n        return ret\n    end\n    for _, x in ipairs(nums) do\n        heap_push(heap, x)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local ret = {}\n    for i = 1, n do\n        ret[i] = heap_pop(heap)\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokrym8b9.lua:50: expected: {85, 75, 65}\nactual: {22, 22, 14}\nstack traceback:\n\t/tmp/tmpokrym8b9.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_insert(heap, num)\n        elseif num > heap[1] then\n            heap_replace(heap, num)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm0087so4.lua:6: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpm0087so4.lua:6: in local 'candidate'\n\t/tmp/tmpm0087so4.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i] <= heap[parent] then\n                break\n            end\n            heap[i], heap[parent] = heap[parent], heap[i]\n            i = parent\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local left = i * 2\n            local right = left + 1\n            local max = left\n            if right <= #heap and heap[right] > heap[left] then\n                max = right\n            end\n            if heap[i] >= heap[max] then\n                break\n            end\n            heap[i], heap[max] = heap[max], heap[i]\n            i = max\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  return heap_sort(heap)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzz17vf15.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpzz17vf15.lua:5: in local 'candidate'\n\t/tmp/tmpzz17vf15.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[i] > heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heapq.heappush(heap, num)\n        if #heap > n then\n            heapq.heappop(heap)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_e6qujlp.lua:5: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmp_e6qujlp.lua:5: in local 'candidate'\n\t/tmp/tmp_e6qujlp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heapq.heappush(heap, -num)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, -heapq.heappop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmnd_eyxo.lua:5: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmpmnd_eyxo.lua:5: in local 'candidate'\n\t/tmp/tmpmnd_eyxo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, num)\n        heap[#heap + 1] = num\n        local i = #heap\n        while i > 1 do\n            local p = math.floor(i / 2)\n            if heap[p] < heap[i] then\n                heap[p], heap[i] = heap[i], heap[p]\n                i = p\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local l = i * 2\n            local r = i * 2 + 1\n            local j = l\n            if r <= #heap and heap[r] > heap[l] then\n                j = r\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        ret[i] = heap_pop(heap)\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heapq.heappush(heap, num)\n        if #heap > n then\n            heapq.heappop(heap)\n        end\n    end\n    return heapq.nlargest(n, heap)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqbxlrhxl.lua:5: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmpqbxlrhxl.lua:5: in local 'candidate'\n\t/tmp/tmpqbxlrhxl.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function sift_down(i)\n        local left = 2 * i\n        local right = 2 * i + 1\n        local largest = i\n        if left <= #heap and heap[left] > heap[largest] then\n            largest = left\n        end\n        if right <= #heap and heap[right] > heap[largest] then\n            largest = right\n        end\n        if largest ~= i then\n            heap[largest], heap[i] = heap[i], heap[largest]\n            sift_down(largest)\n        end\n    end\n    local function sift_up(i)\n        local parent = math.floor(i / 2)\n        if parent > 0 and heap[i] > heap[parent] then\n            heap[i], heap[parent] = heap[parent], heap[i]\n            sift_up(parent)\n        end\n    end\n    for i, num in ipairs(nums) do\n        heap[i] = num\n        sift_up(i)\n    end\n    for i = #heap, #heap - n + 1, -1 do\n        heap[1], heap[i] = heap[i], heap[1]\n        sift_down(1)\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdqglvld.lua:40: expected: {85, 75, 65}\nactual: {58, 35, 25, 85, 14, 22, 65, 75, 22}\nstack traceback:\n\t/tmp/tmprdqglvld.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    result[#result + 1] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4imdlanl.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp4imdlanl.lua:5: in local 'candidate'\n\t/tmp/tmp4imdlanl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = HeapQueue()\n    for i, num in ipairs(nums) do\n        heap:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_s7x1qxl.lua:3: attempt to call a nil value (global 'HeapQueue')\nstack traceback:\n\t/tmp/tmp_s7x1qxl.lua:3: in local 'candidate'\n\t/tmp/tmp_s7x1qxl.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6e4qpgu.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpa6e4qpgu.lua:5: in local 'candidate'\n\t/tmp/tmpa6e4qpgu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heapq.heappush(heap, -num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = -heapq.heappop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3xu7g9f3.lua:5: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmp3xu7g9f3.lua:5: in local 'candidate'\n\t/tmp/tmp3xu7g9f3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgzyvp5c.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfgzyvp5c.lua:3: in local 'candidate'\n\t/tmp/tmpfgzyvp5c.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            local max = left\n            if right <= #heap and heap[right] > heap[left] then\n                max = right\n            end\n            if heap[i] < heap[max] then\n                heap[i], heap[max] = heap[max], heap[i]\n                i = max\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local ret = {}\n    while #heap > 0 do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqiwf9.lua:54: expected: {85, 75, 65}\nactual: {22, 22, 14}\nstack traceback:\n\t/tmp/tmpawkqiwf9.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i = 1, n do\n    heap[i] = nums[i]\n  end\n  heap_queue_build(heap)\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap[1] = nums[i]\n      heap_queue_heapify(heap, 1)\n    end\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9zlkqcl.lua:7: attempt to call a nil value (global 'heap_queue_build')\nstack traceback:\n\t/tmp/tmpx9zlkqcl.lua:7: in local 'candidate'\n\t/tmp/tmpx9zlkqcl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = HeapQueue:new()\n    for _, num in ipairs(nums) do\n        heap:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6k_nh1m.lua:3: attempt to index a nil value (global 'HeapQueue')\nstack traceback:\n\t/tmp/tmpx6k_nh1m.lua:3: in local 'candidate'\n\t/tmp/tmpx6k_nh1m.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            table.insert(heap, num)\n            heap_sift_up(heap, #heap)\n        elseif num > heap[1] then\n            heap[1] = num\n            heap_sift_down(heap, 1)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdugv_vx5.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpdugv_vx5.lua:7: in local 'candidate'\n\t/tmp/tmpdugv_vx5.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            if left > #heap then\n                break\n            elseif right > #heap then\n                if heap[i] < heap[left] then\n                    heap[i], heap[left] = heap[left], heap[i]\n                end\n                break\n            else\n                if heap[left] > heap[right] then\n                    if heap[i] < heap[left] then\n                        heap[i], heap[left] = heap[left], heap[i]\n                        i = left\n                    else\n                        break\n                    end\n                else\n                    if heap[i] < heap[right] then\n                        heap[i], heap[right] = heap[right], heap[i]\n                        i = right\n                    else\n                        break\n                    end\n                end\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_insert(heap, num)\n        else\n            if num > heap[1] then\n                heap_pop(heap)\n                heap_insert(heap, num)\n            end\n        end\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ecotvi5.lua:72: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmp2ecotvi5.lua:72: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i] > heap[parent] then\n                heap[i], heap[parent] = heap[parent], heap[i]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            local max = left\n            if right <= #heap and heap[right] > heap[left] then\n                max = right\n            end\n            if heap[max] > heap[i] then\n                heap[max], heap[i] = heap[i], heap[max]\n                i = max\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, num)\n        else\n            if num > heap[1] then\n                heap_pop(heap)\n                heap_push(heap, num)\n            end\n        end\n    end\n    local ret = {}\n    while #heap > 0 do\n        table.insert(ret, 1, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrpdvs84.lua:58: expected: {85, 75, 65}\nactual: {22, 25, 85}\nstack traceback:\n\t/tmp/tmpjrpdvs84.lua:58: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      table.insert(heap, num)\n      heap_sift_up(heap, #heap)\n    elseif num > heap[1] then\n      heap[1] = num\n      heap_sift_down(heap, 1, #heap)\n    end\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpif1ogz10.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpif1ogz10.lua:7: in local 'candidate'\n\t/tmp/tmpif1ogz10.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(heap, num)\n    local i = #heap + 1\n    heap[i] = num\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent] < heap[i] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local i = 1\n    local num = heap[i]\n    heap[i] = heap[#heap]\n    heap[#heap] = nil\n    while i < #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      if left > #heap then\n        break\n      elseif right > #heap then\n        if heap[left] > heap[i] then\n          heap[left], heap[i] = heap[i], heap[left]\n        end\n        break\n      else\n        local max = heap[left]\n        local max_i = left\n        if heap[right] > max then\n          max = heap[right]\n          max_i = right\n        end\n        if max > heap[i] then\n          heap[max_i], heap[i] = heap[i], heap[max_i]\n          i = max_i\n        else\n          break\n        end\n      end\n    end\n    return num\n  end\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, n do\n        heap[i] = nums[i]\n    end\n    heapify(heap, n)\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            heapify(heap, n, 1)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc14b8k9p.lua:7: attempt to call a nil value (global 'heapify')\nstack traceback:\n\t/tmp/tmpc14b8k9p.lua:7: in local 'candidate'\n\t/tmp/tmpc14b8k9p.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    result[#result + 1] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4imdlanl.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp4imdlanl.lua:5: in local 'candidate'\n\t/tmp/tmp4imdlanl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function push(x)\n        table.insert(heap, x)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local child = i * 2\n            if child + 1 <= #heap and heap[child + 1] > heap[child] then\n                child = child + 1\n            end\n            if heap[i] < heap[child] then\n                heap[i], heap[child] = heap[child], heap[i]\n                i = child\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, v in ipairs(nums) do\n        push(v)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, pop())\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tfor _, num in ipairs(nums) do\n\t\theap_push(heap, num)\n\t\tif #heap > n then\n\t\t\theap_pop(heap)\n\t\tend\n\tend\n\tlocal result = {}\n\twhile #heap > 0 do\n\t\tresult[#result + 1] = heap_pop(heap)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjimwi8th.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpjimwi8th.lua:5: in local 'candidate'\n\t/tmp/tmpjimwi8th.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local hq = HeapQueue.new(nums)\n  local result = {}\n  for i = 1, n do\n    local max = hq:pop()\n    if max == nil then break end\n    result[i] = max\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx7gpkqs6.lua:3: attempt to index a nil value (global 'HeapQueue')\nstack traceback:\n\t/tmp/tmpx7gpkqs6.lua:3: in local 'candidate'\n\t/tmp/tmpx7gpkqs6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i, v in ipairs(nums) do\n        heapq.heappush(heap, -v)\n    end\n    local res = {}\n    for i = 1, n do\n        res[i] = -heapq.heappop(heap)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuxmxmld_.lua:5: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmpuxmxmld_.lua:5: in local 'candidate'\n\t/tmp/tmpuxmxmld_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, n do\n        heap[i] = nums[i]\n    end\n    heap_build_max(heap, n)\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            heap_max_heapify(heap, 1, n)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd6s4bmhz.lua:7: attempt to call a nil value (global 'heap_build_max')\nstack traceback:\n\t/tmp/tmpd6s4bmhz.lua:7: in local 'candidate'\n\t/tmp/tmpd6s4bmhz.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, n do\n        heap[i] = nums[i]\n    end\n    heapify(heap)\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            heapify(heap, 1)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3szjjluv.lua:7: attempt to call a nil value (global 'heapify')\nstack traceback:\n\t/tmp/tmp3szjjluv.lua:7: in local 'candidate'\n\t/tmp/tmp3szjjluv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i, num in ipairs(nums) do\n        if i <= n then\n            heap[i] = num\n        else\n            heap_push(heap, num)\n        end\n    end\n    heap_make(heap)\n    for i = n + 1, #nums do\n        heap_push(heap, nums[i])\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx8mewzms.lua:8: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpx8mewzms.lua:8: in local 'candidate'\n\t/tmp/tmpx8mewzms.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i] > heap[parent] then\n                heap[i], heap[parent] = heap[parent], heap[i]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            if left > #heap then\n                break\n            elseif right > #heap then\n                if heap[i] < heap[left] then\n                    heap[i], heap[left] = heap[left], heap[i]\n                end\n                break\n            else\n                if heap[left] > heap[right] then\n                    if heap[i] < heap[left] then\n                        heap[i], heap[left] = heap[left], heap[i]\n                        i = left\n                    else\n                        break\n                    end\n                else\n                    if heap[i] < heap[right] then\n                        heap[i], heap[right] = heap[right], heap[i]\n                        i = right\n                    else\n                        break\n                    end\n                end\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_insert(heap, num)\n        else\n            if num > heap[1] then\n                heap_pop(heap)\n                heap_insert(heap, num)\n            end\n        end\n    end\n    local ret = {}\n    while #heap > 0 do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_giapgt.lua:72: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmp1_giapgt.lua:72: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap:new(nums)\n  heap:heapify()\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvlsmm99k.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvlsmm99k.lua:3: in local 'candidate'\n\t/tmp/tmpvlsmm99k.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      table.insert(heap, num)\n      heap_sift_up(heap, #heap)\n    elseif num > heap[1] then\n      heap[1] = num\n      heap_sift_down(heap, 1)\n    end\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjcnx24fj.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpjcnx24fj.lua:7: in local 'candidate'\n\t/tmp/tmpjcnx24fj.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8bgw9mpo.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp8bgw9mpo.lua:5: in local 'candidate'\n\t/tmp/tmp8bgw9mpo.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tlocal function heap_push(heap, num)\n\t\ttable.insert(heap, num)\n\t\tlocal i = #heap\n\t\twhile i > 1 do\n\t\t\tlocal j = math.floor(i / 2)\n\t\t\tif heap[i] > heap[j] then\n\t\t\t\theap[i], heap[j] = heap[j], heap[i]\n\t\t\t\ti = j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tlocal function heap_pop(heap)\n\t\tlocal ret = heap[1]\n\t\theap[1] = heap[#heap]\n\t\ttable.remove(heap)\n\t\tlocal i = 1\n\t\twhile i < #heap do\n\t\t\tlocal j = i * 2\n\t\t\tif j < #heap and heap[j + 1] > heap[j] then\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\t\tif heap[i] < heap[j] then\n\t\t\t\theap[i], heap[j] = heap[j], heap[i]\n\t\t\t\ti = j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\treturn ret\n\tend\n\tfor _, num in ipairs(nums) do\n\t\theap_push(heap, num)\n\tend\n\tlocal ret = {}\n\tfor i = 1, n do\n\t\ttable.insert(ret, heap_pop(heap))\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppk5vrjww.lua:27: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmppk5vrjww.lua:27: in local 'heap_pop'\n\t/tmp/tmppk5vrjww.lua:41: in local 'candidate'\n\t/tmp/tmppk5vrjww.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function push(x)\n    table.insert(heap, x)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local x = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return x\n  end\n  for _, x in ipairs(nums) do\n    push(x)\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap()\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg1j6hwpj.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpg1j6hwpj.lua:3: in local 'candidate'\n\t/tmp/tmpg1j6hwpj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local heap_size = 0\n    local function heap_push(num)\n        heap_size = heap_size + 1\n        heap[heap_size] = num\n        local i = heap_size\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i] > heap[parent] then\n                heap[i], heap[parent] = heap[parent], heap[i]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop()\n        local ret = heap[1]\n        heap[1] = heap[heap_size]\n        heap_size = heap_size - 1\n        local i = 1\n        while i * 2 <= heap_size do\n            local child = i * 2\n            if child + 1 <= heap_size and heap[child + 1] > heap[child] then\n                child = child + 1\n            end\n            if heap[i] < heap[child] then\n                heap[i], heap[child] = heap[child], heap[i]\n                i = child\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        if heap_size < n then\n            heap_push(num)\n        elseif num > heap[1] then\n            heap_pop()\n            heap_push(num)\n        end\n    end\n    local ret = {}\n    while heap_size > 0 do\n        table.insert(ret, 1, heap_pop())\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34j30uul.lua:56: expected: {85, 75, 65}\nactual: {22, 25, 85}\nstack traceback:\n\t/tmp/tmp34j30uul.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_insert(heap, num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i] > heap[parent] then\n        heap[i], heap[parent] = heap[parent], heap[i]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    local i = 1\n    while i < #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      local largest = i\n      if left <= #heap and heap[left] > heap[largest] then\n        largest = left\n      end\n      if right <= #heap and heap[right] > heap[largest] then\n        largest = right\n      end\n      if largest ~= i then\n        heap[i], heap[largest] = heap[largest], heap[i]\n        i = largest\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for i = 1, n do\n    heap_insert(heap, nums[i])\n  end\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap_pop(heap)\n      heap_insert(heap, nums[i])\n    end\n  end\n  local ret = {}\n  while #heap > 0 do\n    table.insert(ret, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpge58ujhl.lua:60: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpge58ujhl.lua:60: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local num = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            local max = i\n            if left <= #heap and heap[left] > heap[max] then\n                max = left\n            end\n            if right <= #heap and heap[right] > heap[max] then\n                max = right\n            end\n            if max ~= i then\n                heap[i], heap[max] = heap[max], heap[i]\n                i = max\n            else\n                break\n            end\n        end\n        return num\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, 1, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe2qk9o2g.lua:57: expected: {85, 75, 65}\nactual: {14, 22, 22}\nstack traceback:\n\t/tmp/tmpe2qk9o2g.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = HeapQueue.new()\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty0jhx2n.lua:3: attempt to index a nil value (global 'HeapQueue')\nstack traceback:\n\t/tmp/tmpty0jhx2n.lua:3: in local 'candidate'\n\t/tmp/tmpty0jhx2n.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[i] > heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local ret = {}\n    for _ = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heapq.heappush(heap, num)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, heapq.heappop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3fc0frt9.lua:5: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmp3fc0frt9.lua:5: in local 'candidate'\n\t/tmp/tmp3fc0frt9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i, v in ipairs(nums) do\n        heapq.heappush(heap, -v)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, -heapq.heappop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkf5j6248.lua:5: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmpkf5j6248.lua:5: in local 'candidate'\n\t/tmp/tmpkf5j6248.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(nums, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, n do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwisoha2d.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpwisoha2d.lua:3: in local 'candidate'\n\t/tmp/tmpwisoha2d.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap:new(nums)\n    local result = {}\n    for i = 1, n do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb680k3nh.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpb680k3nh.lua:3: in local 'candidate'\n\t/tmp/tmpb680k3nh.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local hq = HeapQueue.new()\n    for _, num in ipairs(nums) do\n        hq:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, hq:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixc5l4yp.lua:3: attempt to index a nil value (global 'HeapQueue')\nstack traceback:\n\t/tmp/tmpixc5l4yp.lua:3: in local 'candidate'\n\t/tmp/tmpixc5l4yp.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap()\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuznrkj5i.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpuznrkj5i.lua:3: in local 'candidate'\n\t/tmp/tmpuznrkj5i.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap()\n    for _, num in ipairs(nums) do\n        heap:insert(num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwypyjrot.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpwypyjrot.lua:3: in local 'candidate'\n\t/tmp/tmpwypyjrot.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_insert(heap, num)\n    heap[#heap + 1] = num\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i] > heap[parent] then\n        heap[i], heap[parent] = heap[parent], heap[i]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local result = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i < #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      if left > #heap then\n        break\n      elseif right > #heap then\n        if heap[i] < heap[left] then\n          heap[i], heap[left] = heap[left], heap[i]\n        end\n        break\n      else\n        if heap[left] > heap[right] then\n          if heap[i] < heap[left] then\n            heap[i], heap[left] = heap[left], heap[i]\n            i = left\n          else\n            break\n          end\n        else\n          if heap[i] < heap[right] then\n            heap[i], heap[right] = heap[right], heap[i]\n            i = right\n          else\n            break\n          end\n        end\n      end\n    end\n    return result\n  end\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    result[#result + 1] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nvrz2pq.lua:68: expected: {85, 75, 65}\nactual: {22, 22, 14}\nstack traceback:\n\t/tmp/tmp4nvrz2pq.lua:68: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heapq.heappush(heap, num)\n        if #heap > n then\n            heapq.heappop(heap)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_e6qujlp.lua:5: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmp_e6qujlp.lua:5: in local 'candidate'\n\t/tmp/tmp_e6qujlp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, num)\n        else\n            if num > heap[1] then\n                heap_replace(heap, num)\n            end\n        end\n    end\n    local result = {}\n    for _ = 1, n do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhamcyag.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpwhamcyag.lua:6: in local 'candidate'\n\t/tmp/tmpwhamcyag.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_insert(heap, num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[i] > heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      heap_insert(heap, num)\n    elseif num > heap[1] then\n      heap_pop(heap)\n      heap_insert(heap, num)\n    end\n  end\n  local ret = {}\n  while #heap > 0 do\n    table.insert(ret, 1, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qaix_bo.lua:54: expected: {85, 75, 65}\nactual: {22, 25, 85}\nstack traceback:\n\t/tmp/tmp9qaix_bo.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] > heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            local min = left\n            if right <= #heap and heap[right] < heap[left] then\n                min = right\n            end\n            if heap[i] > heap[min] then\n                heap[i], heap[min] = heap[min], heap[i]\n                i = min\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rs57u65.lua:51: expected: {85, 75, 65}\nactual: {14, 22, 22}\nstack traceback:\n\t/tmp/tmp7rs57u65.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function push(x)\n        local i = #heap + 1\n        heap[i] = x\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j] < heap[i] then\n                heap[j], heap[i] = heap[i], heap[j]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local x = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return x\n    end\n    for i = 1, #nums do\n        if i <= n then\n            push(nums[i])\n        else\n            if nums[i] > heap[1] then\n                pop()\n                push(nums[i])\n            end\n        end\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz31zfbsx.lua:56: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpz31zfbsx.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(x)\n    table.insert(heap, x)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop()\n    local x = heap[1]\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[j] > heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    heap[i] = heap[#heap]\n    heap[#heap] = nil\n    return x\n  end\n  for _, x in ipairs(nums) do\n    heap_push(x)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ijqonj5.lua:49: expected: {85, 75, 65}\nactual: {85, 25, 75}\nstack traceback:\n\t/tmp/tmp6ijqonj5.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            if left > #heap then\n                break\n            elseif right > #heap then\n                if heap[i] < heap[left] then\n                    heap[i], heap[left] = heap[left], heap[i]\n                end\n                break\n            else\n                if heap[i] < heap[left] or heap[i] < heap[right] then\n                    if heap[left] > heap[right] then\n                        heap[i], heap[left] = heap[left], heap[i]\n                        i = left\n                    else\n                        heap[i], heap[right] = heap[right], heap[i]\n                        i = right\n                    end\n                else\n                    break\n                end\n            end\n        end\n        return ret\n    end\n    for i = 1, n do\n        heap_insert(heap, nums[i])\n    end\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap_pop(heap)\n            heap_insert(heap, nums[i])\n        end\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61xrymtx.lua:67: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmp61xrymtx.lua:67: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoko0ryrl.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpoko0ryrl.lua:5: in local 'candidate'\n\t/tmp/tmpoko0ryrl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      heap_insert(heap, num)\n    elseif num > heap[1] then\n      heap_replace(heap, num)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm_tngoax.lua:6: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpm_tngoax.lua:6: in local 'candidate'\n\t/tmp/tmpm_tngoax.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgzyvp5c.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfgzyvp5c.lua:3: in local 'candidate'\n\t/tmp/tmpfgzyvp5c.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    table.insert(heap, num)\n    heap_sift_up(heap, #heap)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf4ys0_eu.lua:6: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpf4ys0_eu.lua:6: in local 'candidate'\n\t/tmp/tmpf4ys0_eu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heapq.heappush(heap, num)\n        if #heap > n then\n            heapq.heappop(heap)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_e6qujlp.lua:5: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmp_e6qujlp.lua:5: in local 'candidate'\n\t/tmp/tmp_e6qujlp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] > heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            if left > #heap then\n                break\n            elseif right > #heap then\n                if heap[i] > heap[left] then\n                    heap[i], heap[left] = heap[left], heap[i]\n                end\n                break\n            else\n                if heap[left] < heap[right] and heap[i] > heap[left] then\n                    heap[i], heap[left] = heap[left], heap[i]\n                    i = left\n                elseif heap[left] >= heap[right] and heap[i] > heap[right] then\n                    heap[i], heap[right] = heap[right], heap[i]\n                    i = right\n                else\n                    break\n                end\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpce6yi8f4.lua:59: expected: {85, 75, 65}\nactual: {14, 22, 22}\nstack traceback:\n\t/tmp/tmpce6yi8f4.lua:59: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1zm49y_c.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp1zm49y_c.lua:5: in local 'candidate'\n\t/tmp/tmp1zm49y_c.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdgsmzz76.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpdgsmzz76.lua:5: in local 'candidate'\n\t/tmp/tmpdgsmzz76.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, num)\n        elseif num > heap[1] then\n            heap_replace(heap, num)\n        end\n    end\n    return heap_sort(heap)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpprvb37vd.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpprvb37vd.lua:6: in local 'candidate'\n\t/tmp/tmpprvb37vd.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, num)\n        elseif num > heap[1] then\n            heap_replace(heap, num)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyzboj77t.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpyzboj77t.lua:6: in local 'candidate'\n\t/tmp/tmpyzboj77t.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function sift_up(i)\n        local parent = math.floor(i/2)\n        if parent > 0 and heap[i] > heap[parent] then\n            heap[i], heap[parent] = heap[parent], heap[i]\n            sift_up(parent)\n        end\n    end\n    local function sift_down(i)\n        local child = i*2\n        if child <= #heap then\n            if child < #heap and heap[child] < heap[child+1] then\n                child = child + 1\n            end\n            if heap[i] < heap[child] then\n                heap[i], heap[child] = heap[child], heap[i]\n                sift_down(child)\n            end\n        end\n    end\n    for i, v in ipairs(nums) do\n        heap[i] = v\n        sift_up(i)\n    end\n    for i = #nums+1, n do\n        heap[i] = -math.huge\n        sift_up(i)\n    end\n    for i = n+1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            sift_down(1)\n        end\n    end\n    for i = 1, n-1 do\n        heap[1], heap[#heap] = heap[#heap], heap[1]\n        table.remove(heap)\n        sift_down(1)\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6krnd5_u.lua:48: expected: {85, 75, 65}\nactual: {65, 58, 25, 35, 14, 22, 22}\nstack traceback:\n\t/tmp/tmp6krnd5_u.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8bgw9mpo.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp8bgw9mpo.lua:5: in local 'candidate'\n\t/tmp/tmp8bgw9mpo.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(nums, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, n do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwisoha2d.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpwisoha2d.lua:3: in local 'candidate'\n\t/tmp/tmpwisoha2d.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgzyvp5c.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfgzyvp5c.lua:3: in local 'candidate'\n\t/tmp/tmpfgzyvp5c.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heapq.heappush(heap, num)\n        if #heap > n then\n            heapq.heappop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heapq.heappop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpack6amv4.lua:5: attempt to index a nil value (global 'heapq')\nstack traceback:\n\t/tmp/tmpack6amv4.lua:5: in local 'candidate'\n\t/tmp/tmpack6amv4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i] > heap[parent] then\n                heap[i], heap[parent] = heap[parent], heap[i]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local child = i * 2\n            if child + 1 <= #heap and heap[child + 1] > heap[child] then\n                child = child + 1\n            end\n            if heap[child] > heap[i] then\n                heap[i], heap[child] = heap[child], heap[i]\n                i = child\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkflhftzz.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpkflhftzz.lua:5: in local 'candidate'\n\t/tmp/tmpkflhftzz.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptott6pwf.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmptott6pwf.lua:5: in local 'candidate'\n\t/tmp/tmptott6pwf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tfor _, num in ipairs(nums) do\n\t\tif #heap < n then\n\t\t\theap_push(heap, num)\n\t\telseif heap[1] < num then\n\t\t\theap_replace(heap, num)\n\t\tend\n\tend\n\treturn heap_sort(heap)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdu4zkq16.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpdu4zkq16.lua:6: in local 'candidate'\n\t/tmp/tmpdu4zkq16.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509854,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiadnhgmb.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpiadnhgmb.lua:3: in local 'candidate'\n\t/tmp/tmpiadnhgmb.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, val)\n        table.insert(heap, val)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j] < heap[i] then\n                heap[j], heap[i] = heap[i], heap[j]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for i, v in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, v)\n        elseif v > heap[1] then\n            heap_pop(heap)\n            heap_push(heap, v)\n        end\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppx0i1p_0.lua:54: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmppx0i1p_0.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, num)\n        elseif num > heap[1] then\n            heap_replace(heap, num)\n        end\n    end\n    local result = {}\n    for i = n, 1, -1 do\n        result[i] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl5sbxeuk.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpl5sbxeuk.lua:6: in local 'candidate'\n\t/tmp/tmpl5sbxeuk.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function sift_up(heap, i)\n        local parent = math.floor(i / 2)\n        if parent > 0 and heap[parent] < heap[i] then\n            heap[parent], heap[i] = heap[i], heap[parent]\n            sift_up(heap, parent)\n        end\n    end\n    local function sift_down(heap, i)\n        local left = i * 2\n        local right = i * 2 + 1\n        local largest = i\n        if left <= #heap and heap[left] > heap[largest] then\n            largest = left\n        end\n        if right <= #heap and heap[right] > heap[largest] then\n            largest = right\n        end\n        if largest ~= i then\n            heap[largest], heap[i] = heap[i], heap[largest]\n            sift_down(heap, largest)\n        end\n    end\n    local function insert(heap, num)\n        heap[#heap + 1] = num\n        sift_up(heap, #heap)\n    end\n    local function extract_max(heap)\n        local max = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        sift_down(heap, 1)\n        return max\n    end\n    for _, num in ipairs(nums) do\n        insert(heap, num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = extract_max(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgzyvp5c.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfgzyvp5c.lua:3: in local 'candidate'\n\t/tmp/tmpfgzyvp5c.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function push(x)\n        table.insert(heap, x)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j] < heap[i] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local x = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return x\n    end\n    for _, x in ipairs(nums) do\n        push(x)\n    end\n    local result = {}\n    for _ = 1, n do\n        table.insert(result, pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function push(x)\n    table.insert(heap, x)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent] < heap[i] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local x = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local child = i * 2\n      if child + 1 <= #heap and heap[child + 1] > heap[child] then\n        child = child + 1\n      end\n      if heap[i] < heap[child] then\n        heap[i], heap[child] = heap[child], heap[i]\n        i = child\n      else\n        break\n      end\n    end\n    return x\n  end\n  for _, x in ipairs(nums) do\n    push(x)\n  end\n  local result = {}\n  for _ = 1, n do\n    table.insert(result, pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfgzyvp5c.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfgzyvp5c.lua:3: in local 'candidate'\n\t/tmp/tmpfgzyvp5c.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new()\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp67rryhxw.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp67rryhxw.lua:3: in local 'candidate'\n\t/tmp/tmp67rryhxw.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function sift_up(i)\n    local parent = math.floor(i / 2)\n    if parent > 0 and heap[parent] < heap[i] then\n      heap[parent], heap[i] = heap[i], heap[parent]\n      sift_up(parent)\n    end\n  end\n  local function sift_down(i)\n    local left = i * 2\n    local right = i * 2 + 1\n    local largest = i\n    if left <= #heap and heap[left] > heap[largest] then\n      largest = left\n    end\n    if right <= #heap and heap[right] > heap[largest] then\n      largest = right\n    end\n    if largest ~= i then\n      heap[i], heap[largest] = heap[largest], heap[i]\n      sift_down(largest)\n    end\n  end\n  local function insert(num)\n    heap[#heap + 1] = num\n    sift_up(#heap)\n  end\n  local function pop()\n    local max = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    sift_down(1)\n    return max\n  end\n  for _, num in ipairs(nums) do\n    insert(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap:new()\n    for _, num in ipairs(nums) do\n        heap:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwfgunw93.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpwfgunw93.lua:3: in local 'candidate'\n\t/tmp/tmpwfgunw93.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, num)\n        elseif num > heap[1] then\n            heap_replace(heap, num)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyzboj77t.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpyzboj77t.lua:6: in local 'candidate'\n\t/tmp/tmpyzboj77t.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgpz79byr.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, item)\n        table.insert(heap, item)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local item = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local child = i * 2\n            if child + 1 <= #heap and heap[child + 1] > heap[child] then\n                child = child + 1\n            end\n            if heap[i] < heap[child] then\n                heap[i], heap[child] = heap[child], heap[i]\n                i = child\n            else\n                break\n            end\n        end\n        return item\n    end\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, num)\n        elseif num > heap[1] then\n            heap_pop(heap)\n            heap_push(heap, num)\n        end\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123562,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvy3va1c.lua:54: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpbvy3va1c.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}