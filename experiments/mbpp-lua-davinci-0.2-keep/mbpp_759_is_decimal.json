{
  "name": "mbpp_759_is_decimal",
  "language": "lua",
  "prompt": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    if string.match(num, pattern) then\n        return true\n    else\n        return false\n    end\nend",
    "    return string.match(num, \"^[0-9]+[.][0-9]{2}$\")\nend",
    "    if not num then return false end\n    local n = tonumber(num)\n    if not n then return false end\n    return n == tonumber(string.format(\"%.2f\", n))\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%+%-]?%d+%.?%d*$\")\n    if i == 1 and j == #num then\n        return true\n    end\n    return false\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find('%.')\n    if i == nil then\n        return true\n    end\n    return #s - j <= 2\nend",
    "  return string.match(num, '^[0-9]+[.][0-9]{2}$')\nend",
    "    if not num then return false end\n    local _, _, int, dec = string.find(num, \"(%d+)%.(%d+)\")\n    if int and dec and #dec == 2 then\n        return true\n    end\n    return false\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "  local function is_decimal_helper(num, count)\n    if #num == 0 then\n      return count == 2\n    end\n    if num:sub(1,1) == '.' then\n      return is_decimal_helper(num:sub(2), count + 1)\n    end\n    if tonumber(num:sub(1,1)) == nil then\n      return false\n    end\n    return is_decimal_helper(num:sub(2), count)\n  end\n  return is_decimal_helper(num, 0)\nend",
    "    return string.match(num, '^%d+%.%d%d$') ~= nil\nend",
    "    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    if num == nil then\n        return false\n    end\n    local s = string.format(\"%s\", num)\n    local i, j = string.find(s, \"^[+-]?%d+%.?%d*$\")\n    if i == 1 and j == string.len(s) then\n        return true\n    end\n    return false\nend",
    "\treturn num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return num:match(\"^%d+%.%d%d$\")\nend",
    "    local function is_decimal_helper(num, i)\n        if i == nil then\n            i = 1\n        end\n        if i > #num then\n            return true\n        end\n        if num:sub(i, i) == \".\" then\n            return is_decimal_helper(num, i + 1)\n        elseif tonumber(num:sub(i, i)) ~= nil then\n            return is_decimal_helper(num, i + 1)\n        else\n            return false\n        end\n    end\n    return is_decimal_helper(num)\nend",
    "  return num:match(\"^[%d]+%.?[%d]?[%d]?$\") ~= nil\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local dot_count = 0\n    for i = 1, #num do\n        local c = num:sub(i, i)\n        if c == \".\" then\n            dot_count = dot_count + 1\n        elseif not tonumber(c) then\n            return false\n        end\n    end\n    if dot_count > 1 then\n        return false\n    end\n    local dot_index = num:find(\"%.\")\n    if dot_index then\n        if #num - dot_index > 3 then\n            return false\n        end\n    end\n    return true\nend"
  ]
}