{
  "name": "mbpp_759_is_decimal",
  "language": "lua",
  "prompt": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    if string.match(num, pattern) then\n        return true\n    else\n        return false\n    end\nend",
    "    return string.match(num, \"^[0-9]+[.][0-9]{2}$\")\nend",
    "    if not num then return false end\n    local n = tonumber(num)\n    if not n then return false end\n    return n == tonumber(string.format(\"%.2f\", n))\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%+%-]?%d+%.?%d*$\")\n    if i == 1 and j == #num then\n        return true\n    end\n    return false\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find('%.')\n    if i == nil then\n        return true\n    end\n    return #s - j <= 2\nend",
    "  return string.match(num, '^[0-9]+[.][0-9]{2}$')\nend",
    "    if not num then return false end\n    local _, _, int, dec = string.find(num, \"(%d+)%.(%d+)\")\n    if int and dec and #dec == 2 then\n        return true\n    end\n    return false\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "  local function is_decimal_helper(num, count)\n    if #num == 0 then\n      return count == 2\n    end\n    if num:sub(1,1) == '.' then\n      return is_decimal_helper(num:sub(2), count + 1)\n    end\n    if tonumber(num:sub(1,1)) == nil then\n      return false\n    end\n    return is_decimal_helper(num:sub(2), count)\n  end\n  return is_decimal_helper(num, 0)\nend",
    "    return string.match(num, '^%d+%.%d%d$') ~= nil\nend",
    "    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    if num == nil then\n        return false\n    end\n    local s = string.format(\"%s\", num)\n    local i, j = string.find(s, \"^[+-]?%d+%.?%d*$\")\n    if i == 1 and j == string.len(s) then\n        return true\n    end\n    return false\nend",
    "\treturn num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return num:match(\"^%d+%.%d%d$\")\nend",
    "    local function is_decimal_helper(num, i)\n        if i == nil then\n            i = 1\n        end\n        if i > #num then\n            return true\n        end\n        if num:sub(i, i) == \".\" then\n            return is_decimal_helper(num, i + 1)\n        elseif tonumber(num:sub(i, i)) ~= nil then\n            return is_decimal_helper(num, i + 1)\n        else\n            return false\n        end\n    end\n    return is_decimal_helper(num)\nend",
    "  return num:match(\"^[%d]+%.?[%d]?[%d]?$\") ~= nil\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local dot_count = 0\n    for i = 1, #num do\n        local c = num:sub(i, i)\n        if c == \".\" then\n            dot_count = dot_count + 1\n        elseif not tonumber(c) then\n            return false\n        end\n    end\n    if dot_count > 1 then\n        return false\n    end\n    local dot_index = num:find(\"%.\")\n    if dot_index then\n        if #num - dot_index > 3 then\n            return false\n        end\n    end\n    return true\nend",
    "\tlocal num = tonumber(num)\n\tif num then\n\t\treturn num % 1 ~= 0\n\tend\n\treturn false\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local str = string.format(\"%.2f\", num)\n    return str == num\nend",
    "  return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\") ~= nil\nend",
    "  return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local n = tonumber(num)\n    if not n then return false end\n    return n == math.floor(n * 100) / 100\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, '^%d+%.%d%d$')\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "  return string.match(num, \"^[0-9]*%.?[0-9]*$\")\nend",
    "    return string.match(num, '^[0-9]+[.][0-9]{2}$')\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local function is_decimal_helper(num, count)\n        if count > 2 then\n            return false\n        end\n        if num == nil or num == \"\" then\n            return true\n        end\n        local first = string.sub(num, 1, 1)\n        if first == \".\" then\n            return is_decimal_helper(string.sub(num, 2), count + 1)\n        elseif first == \"0\" or first == \"1\" or first == \"2\" or first == \"3\" or first == \"4\" or first == \"5\" or first == \"6\" or first == \"7\" or first == \"8\" or first == \"9\" then\n            return is_decimal_helper(string.sub(num, 2), count)\n        else\n            return false\n        end\n    end\n    return is_decimal_helper(num, 0)\nend",
    "  local match = string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\n  return match ~= nil\nend",
    "  local num = tonumber(num)\n  if num and num >= 0 and num <= 1 then\n    return true\n  else\n    return false\n  end\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%d]+%.?[%d]?[%d]?$\")\n    return i == 1 and j == #num\nend",
    "    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = string.format(\"%.2f\", n)\n    return s == num\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local num_str = tostring(num)\n    local dot_index = string.find(num_str, \".\")\n    if dot_index == nil then\n        return false\n    end\n    local decimal_str = string.sub(num_str, dot_index + 1)\n    if #decimal_str > 2 then\n        return false\n    end\n    return true\nend",
    "    if num == nil then\n        return false\n    end\n    local str = tostring(num)\n    local dot = string.find(str, '.')\n    if dot == nil then\n        return true\n    end\n    local len = string.len(str)\n    local dot_pos = len - dot\n    if dot_pos > 3 then\n        return false\n    end\n    return true\nend",
    "    local str = tostring(num)\n    local dot_index = string.find(str, '.')\n    if not dot_index then\n        return false\n    end\n    local decimal = string.sub(str, dot_index + 1)\n    if #decimal ~= 2 then\n        return false\n    end\n    return true\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local num_pattern = \"^%d*%.?%d{0,2}$\"\n    return string.match(num, num_pattern)\nend",
    "  if type(num) ~= \"string\" then\n    return false\n  end\n  local i, j = num:find(\"^[%+%-]?%d+%.?%d*$\")\n  if i == 1 and j == #num then\n    return true\n  end\n  return false\nend",
    "  if type(num) ~= 'string' then\n    return false\n  end\n  local i, j = string.find(num, '^[%d]+%.?[%d]?[%d]?$')\n  return i ~= nil and i == 1 and j == string.len(num)\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\") ~= nil\nend",
    "    return string.match(num, \"^[0-9]+[.][0-9]{2}$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  local num = tonumber(num)\n  if num == nil then\n    return false\n  end\n  local num_str = tostring(num)\n  local dot_index = string.find(num_str, \"%.\")\n  if dot_index == nil then\n    return false\n  end\n  local len = string.len(num_str)\n  if len - dot_index > 3 then\n    return false\n  end\n  return true\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "  return string.match(num, '^%d+%.%d%d$') ~= nil\nend",
    "  return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  return num:match(\"^[%d]+%.?[%d]?[%d]?$\")\nend",
    "    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find('%.')\n    if i == nil then\n        return true\n    end\n    return #s - j <= 2\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "  local function is_decimal_helper(num, len)\n    if len == 0 then\n      return true\n    elseif string.sub(num, len, len) == \".\" then\n      return is_decimal_helper(num, len - 1)\n    elseif tonumber(string.sub(num, len, len)) == nil then\n      return false\n    else\n      return is_decimal_helper(num, len - 1)\n    end\n  end\n  return is_decimal_helper(num, string.len(num))\nend",
    "    if not num then return false end\n    local n = tonumber(num)\n    if not n then return false end\n    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    return n == math.floor(n)\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "\treturn string.match(num, \"^[0-9]+%.[0-9][0-9]$\")\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local num_str = tostring(num)\n    local dot_index = string.find(num_str, '.')\n    if dot_index == nil then\n        return true\n    end\n    local dot_index = string.find(num_str, '.')\n    local decimal_len = string.len(num_str) - dot_index\n    if decimal_len > 3 then\n        return false\n    end\n    return true\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  if type(num) ~= \"string\" then\n    return false\n  end",
    "    local pattern = \"^[0-9]+[.][0-9]{2}$\"\n    local match = string.match(num, pattern)\n    return match ~= nil\nend",
    "    if not num then return false end\n    return num:match(\"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^[0-9]+[.][0-9]{2}$\") ~= nil\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end",
    "  return num:match(\"^%d*%.?%d*$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, '^%d+%.%d%d$')\nend",
    "    local num_pattern = \"^[0-9]+[.][0-9]{2}$\"\n    return string.match(num, num_pattern)\nend",
    "    local _, _, integer, decimal = string.find(num, \"^(%d+)%.?(%d*)$\")\n    if integer and decimal then\n        if #decimal == 0 then\n            return true\n        elseif #decimal == 2 then\n            return true\n        end\n    end\n    return false\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "\treturn num:match(\"^[%d]+[%.][%d]%d$\")\nend",
    "    if not num then return false end\n    local n = tonumber(num)\n    if not n then return false end\n    local s = tostring(n)\n    if not s:find('%.') then return false end\n    local _, count = s:gsub('%.', '')\n    if count > 1 then return false end\n    return true\nend",
    "    local decimal = num:match(\"^%d+%.%d%d$\")\n    return decimal ~= nil\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\") ~= nil\nend",
    "    if type(num) ~= 'string' then\n        return false\n    end\n    local n = tonumber(num)\n    if not n then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find('%.')\n    if i then\n        return #s - j <= 2\n    end\n    return true\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return num:match(\"^%d+%.%d%d$\")\nend",
    "  return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\") ~= nil\nend",
    "  return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "\tlocal n = tonumber(num)\n\tif n == nil then\n\t\treturn false\n\tend\n\tlocal s = tostring(n)\n\tif s:find(\"%.\") then\n\t\tlocal decimal = s:match(\"%.(%d+)\")\n\t\tif #decimal == 2 then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "    local result = false\n    if type(num) == \"string\" then\n        local n = tonumber(num)\n        if n then\n            local s = string.format(\"%.2f\", n)\n            if s == num then\n                result = true\n            end\n        end\n    end\n    return result\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%+%-]?%d+%.?%d*$\")\n    if i == 1 and j == #num then\n        return true\n    end\n    i, j = string.find(num, \"^[%+%-]?%d*%.?%d+$\")\n    if i == 1 and j == #num then\n        return true\n    end\n    i, j = string.find(num, \"^[%+%-]?%d+%.%d%d$\")\n    if i == 1 and j == #num then\n        return true\n    end\n    return false\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%d]+%.?[%d]?[%d]?$\")\n    return i == 1 and j == string.len(num)\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^[0-9]+[.][0-9]{2}$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]{0,2}$\")\nend",
    "    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = string.find(s, \"%.\")\n    if i == nil then\n        return false\n    end\n    local len = string.len(s)\n    if len - j > 2 then\n        return false\n    end\n    return true\nend",
    "    local i, j = string.find(num, '^%d+%.%d%d$')\n    return i ~= nil and j == string.len(num)\nend",
    "  local s = string.format(\"%%.%df\", 2)\n  local n = tonumber(string.format(s, num))\n  return n and n == num\nend",
    "  return num:match(\"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "  return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "\treturn num:match(\"^[0-9]+[.][0-9]{2}$\") ~= nil\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  return string.match(num, \"^[0-9]+%.[0-9][0-9]$\") ~= nil\nend",
    "    local n = tonumber(num)\n    if n then\n        local s = tostring(n)\n        return s:match('^%d+%.%d%d$')\n    end\n    return false\nend",
    "    return num:match(\"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^[0-9]*[.][0-9]{2}$\")\nend",
    "    return string.match(num, \"^[0-9]+[.][0-9]{1,2}$\")\nend",
    "    return string.match(num, \"^[0-9]+%.[0-9][0-9]$\") ~= nil\nend",
    "    return num:match(\"^[0-9]*%.?[0-9]{0,2}$\")\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local str = tostring(num)\n    local dot_index = string.find(str, '.')\n    if dot_index == nil then\n        return true\n    end\n    local len = string.len(str)\n    local precision = len - dot_index\n    if precision > 3 then\n        return false\n    end\n    return true\nend",
    "    return tonumber(num) and string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, '^%d+%.%d%d$')\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  local pattern = \"^%d+%.%d%d$\"\n  return string.match(num, pattern)\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  return string.match(num, '^[0-9]+[.][0-9]{2}$')\nend",
    "  if num == nil then\n    return false\n  end\n  local n = tonumber(num)\n  if n == nil then\n    return false\n  end\n  local s = tostring(n)\n  if s == num then\n    return true\n  end\n  local i, j = string.find(s, \"%.\")\n  if i == nil then\n    return false\n  end\n  local decimal = string.sub(s, j+1)\n  if #decimal == 2 then\n    return true\n  end\n  return false\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local str = tostring(num)\n    local dot = string.find(str, \"%.\")\n    if dot == nil then\n        return true\n    end\n    local len = string.len(str)\n    if len - dot > 3 then\n        return false\n    end\n    return true\nend",
    "\tif type(num) ~= \"string\" then\n\t\treturn false\n\tend\n\tlocal dot = num:find(\"%.\")\n\tif not dot then\n\t\treturn false\n\tend\n\tlocal before = num:sub(1, dot - 1)\n\tlocal after = num:sub(dot + 1)\n\tif #before == 0 or #after > 2 then\n\t\treturn false\n\tend\n\treturn true\nend",
    "    local num_str = tostring(num)\n    local dot_pos = string.find(num_str, '.')\n    if not dot_pos then\n        return false\n    end\n    local decimal_part = string.sub(num_str, dot_pos + 1)\n    if #decimal_part > 2 then\n        return false\n    end\n    return true\nend",
    "  local num_str = tostring(num)\n  local dot_index = num_str:find(\"%.\")\n  if not dot_index then\n    return false\n  end\n  local decimal_part = num_str:sub(dot_index + 1)\n  return #decimal_part == 2\nend",
    "  if type(num) ~= \"string\" then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d*$\")\n  if i ~= 1 or j ~= #num then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d*%.?%d+$\")\n  if i ~= 1 or j ~= #num then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d+$\")\n  if i ~= 1 or j ~= #num then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d+$\")\n  if i ~= 1 or j ~= #num then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d+$\")\n  if i ~= 1 or j ~= #num then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d+$\")\n  if i ~= 1 or j ~= #num then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d+$\")\n  if i ~= 1 or j ~= #num then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d+$\")\n  if i ~= 1 or j ~= #num then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d+$\")\n  if i ~= 1 or j ~= #num then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+",
    "    if num == nil then\n        return false\n    end\n    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    return string.match(tostring(n), \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "\treturn string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  local pattern = \"^%d+%.%d%d$\"\n  return string.match(num, pattern)\nend",
    "    if type(num) == \"string\" then\n        local n = tonumber(num)\n        if n and n >= 0 and n <= 1 then\n            return true\n        end\n    end\n    return false\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find('%.')\n    if i == nil then\n        return true\n    end\n    return j - i == 3\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local dot_count = 0\n    for i = 1, #num do\n        local c = num:sub(i, i)\n        if c == \".\" then\n            dot_count = dot_count + 1\n        elseif not tonumber(c) then\n            return false\n        end\n    end\n    return dot_count <= 1\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local n = tonumber(num)\n    if not n then\n        return false\n    end\n    local s = tostring(n)\n    if s == num then\n        return true\n    end\n    local i, j = string.find(num, \"%.\")\n    if not i then\n        return false\n    end\n    local decimal = string.sub(num, j + 1)\n    if #decimal > 2 then\n        return false\n    end\n    return true\nend",
    "  local n = tonumber(num)\n  if n == nil then\n    return false\n  end\n  local n_str = tostring(n)\n  local n_str_len = string.len(n_str)\n  local n_str_dot_pos = string.find(n_str, \"%.\")\n  if n_str_dot_pos == nil then\n    return false\n  end\n  local n_str_dot_pos_after = n_str_dot_pos + 1\n  local n_str_dot_pos_after_len = n_str_len - n_str_dot_pos_after + 1\n  if n_str_dot_pos_after_len ~= 3 then\n    return false\n  end\n  return true\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "\treturn string.match(num, \"^[0-9]+.[0-9][0-9]$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%+%-]?%d+%.?%d*$\")\n    if i == 1 and j == #num then\n        return true\n    end\n    return false\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "\treturn string.match(num, \"^%d+%.%d%d$\")\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[-+]?[0-9]*%.?[0-9]+$\")\n    if i == 1 and j == #num then\n        local i, j = string.find(num, \"%.\")\n        if i then\n            local len = #num - j\n            if len == 2 then\n                return true\n            end\n        else\n            return true\n        end\n    end\n    return false\nend",
    "    local pattern = \"^[0-9]+[.][0-9]{2}$\"\n    local m = ngx.re.match(num, pattern, \"jo\")\n    if m then\n        return true\n    else\n        return false\n    end\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    local num = tonumber(num)\n    if num == nil then return false end\n    local num_str = tostring(num)\n    local dot_pos = string.find(num_str, '.')\n    if dot_pos == nil then return true end\n    local len = string.len(num_str)\n    if len - dot_pos > 3 then return false end\n    return true\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%d]+%.?[%d]?[%d]?$\")\n    if i and j then\n        return true\n    end\n    return false\nend",
    "  return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    if num == nil then\n        return false\n    end\n    local len = string.len(num)\n    if len == 0 then\n        return false\n    end\n    local i = 1\n    local point = 0\n    while i <= len do\n        local c = string.sub(num, i, i)\n        if c == '.' then\n            point = point + 1\n            if point > 1 then\n                return false\n            end\n        elseif c < '0' or c > '9' then\n            return false\n        end\n        i = i + 1\n    end\n    if point == 0 then\n        return false\n    end\n    local dot = string.find(num, '.')\n    if dot == nil then\n        return false\n    end\n    local len_after_dot = len - dot\n    if len_after_dot > 3 then\n        return false\n    end\n    return true\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    if not num then return false end\n    local i, j = string.find(num, '^[%+%-]?%d+%.%d%d$')\n    if i and j then return true end\n    return false\nend",
    "    local match = string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\n    if match then\n        return true\n    else\n        return false\n    end\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local num_str = tostring(num)\n    local dot_index = string.find(num_str, '.')\n    if dot_index == nil then\n        return false\n    end\n    local decimal_str = string.sub(num_str, dot_index + 1)\n    if #decimal_str > 2 then\n        return false\n    end\n    return true\nend",
    "    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find('%.')\n    if i == nil then\n        return false\n    end\n    local len = s:len()\n    if len - j > 2 then\n        return false\n    end\n    return true\nend",
    "    return string.match(num, '^[0-9]+[.][0-9]{2}$')\nend",
    "    return string.match(num, \"^%d+%.?%d?%d?$\")\nend",
    "  return num:match(\"^[0-9]+[.][0-9][0-9]$\")\nend",
    "  if type(num) ~= \"string\" then return false end\n  local i, j = string.find(num, \"^[%d]+%.?[%d]?[%d]?$\")\n  return i == 1 and j == string.len(num)\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local int, frac = math.modf(num)\n    if frac == 0 then\n        return true\n    end\n    local str = tostring(frac)\n    return #str == 3\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local num = tostring(num)\n    local len = string.len(num)\n    local dot_pos = string.find(num, \"%.\")\n    if dot_pos then\n        local decimal_len = len - dot_pos\n        if decimal_len > 3 then\n            return false\n        end\n    end\n    return true\nend",
    "    return string.match(num, \"^[0-9]*%.?[0-9]*$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "\treturn string.match(num, \"^[0-9]+%.[0-9][0-9]$\") ~= nil\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    return string.format(\"%.2f\", n) == num\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    local dec = string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\n    return dec ~= nil\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%+%-]?%d+%.%d%d$\")\n    return i ~= nil and i == 1 and j == string.len(num)\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]{0,2}$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend"
  ]
}