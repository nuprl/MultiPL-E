{
  "name": "mbpp_99_decimal_to_binary",
  "language": "lua",
  "prompt": "-- Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nlocal function decimal_to_binary(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(8), '1000')\n    lu.assertEquals(candidate(18), '10010')\n    lu.assertEquals(candidate(7), '111')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local binary = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    binary = remainder .. binary\n    n = math.floor(n / 2)\n  end\n  return binary\nend",
    "  local function recurse(n)\n    if n == 0 then return \"\" end\n    return recurse(math.floor(n / 2)) .. tostring(n % 2)\n  end",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local t = {}\n    while n > 0 do\n        table.insert(t, n % 2)\n        n = math.floor(n / 2)\n    end\n    return table.concat(t)\nend",
    "  local function recurse(n, s)\n    if n == 0 then return s end\n    return recurse(math.floor(n / 2), tostring(n % 2) .. s)\n  end\n  return recurse(n, \"\")\nend",
    "    local t = {}\n    while n > 0 do\n        table.insert(t, n % 2)\n        n = math.floor(n / 2)\n    end\n    return table.concat(t):reverse()\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local b = \"\"\n  while n > 0 do\n    b = (n % 2) .. b\n    n = math.floor(n / 2)\n  end\n  return b\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local s = ''\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n    end\n  end\n  return helper(n, \"\")\nend",
    "    local bin = \"\"\n    while n > 0 do\n        local r = n % 2\n        bin = r .. bin\n        n = (n - r) / 2\n    end\n    return bin\nend",
    "  local bin = \"\"\n  while n ~= 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "    local bin = \"\"\n    while n > 0 do\n        bin = tostring(n % 2) .. bin\n        n = math.floor(n / 2)\n    end\n    return bin\nend",
    "  local binary = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    binary = remainder .. binary\n    n = math.floor(n / 2)\n  end\n  return binary\nend",
    "\tlocal result = \"\"\n\twhile n > 0 do\n\t\tresult = tostring(n % 2) .. result\n\t\tn = math.floor(n / 2)\n\tend\n\treturn result\nend",
    "  local function helper(n, acc)\n    if n == 0 then return acc end\n    return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n  end\n  return helper(n, '')\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "\tlocal bin = \"\"\n\twhile n > 0 do\n\t\tbin = tostring(n % 2) .. bin\n\t\tn = math.floor(n / 2)\n\tend\n\treturn bin\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "\tlocal t = {}\n\twhile n > 0 do\n\t\ttable.insert(t, n % 2)\n\t\tn = math.floor(n / 2)\n\tend\n\treturn table.concat(t)\nend",
    "  local binary = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    binary = remainder .. binary\n    n = (n - remainder) / 2\n  end\n  return binary\nend",
    "    local bin = \"\"\n    while n > 0 do\n        bin = tostring(n % 2) .. bin\n        n = math.floor(n / 2)\n    end\n    return bin\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local function helper(n, acc)\n    if n == 0 then return acc end\n    return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n  end\n  return helper(n, \"\")\nend",
    "\tlocal t = {}\n\twhile n > 0 do\n\t\tlocal r = n % 2\n\t\tt[#t+1] = r\n\t\tn = (n - r) / 2\n\tend\n\treturn table.concat(t):reverse()\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n    end\n  end\n  return helper(n, '')\nend",
    "  local function decimal_to_binary_helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return decimal_to_binary_helper(math.floor(n / 2), tostring(n % 2) .. acc)\n    end\n  end",
    "  local s = \"\"\n  while n ~= 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local bin = \"\"\n    while n > 0 do\n        bin = tostring(n % 2) .. bin\n        n = math.floor(n / 2)\n    end\n    return bin\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = (n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "\tlocal t = {}\n\twhile n > 0 do\n\t\tt[#t+1] = n % 2\n\t\tn = math.floor(n / 2)\n\tend\n\treturn table.concat(t):reverse()\nend",
    "\tlocal result = ''\n\twhile n > 0 do\n\t\tresult = tostring(n % 2) .. result\n\t\tn = math.floor(n / 2)\n\tend\n\treturn result\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return helper(math.floor(n / 2), (n % 2) .. acc)\n    end\n  end\n  return helper(n, \"\")\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "\tlocal result = \"\"\n\twhile n > 0 do\n\t\tresult = tostring(n % 2) .. result\n\t\tn = math.floor(n / 2)\n\tend\n\treturn result\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local t = {}\n  while n > 0 do\n    local r = n % 2\n    n = math.floor(n / 2)\n    table.insert(t, r)\n  end\n  return table.concat(t):reverse()\nend",
    "  local result = ''\n  while n > 0 do\n    result = result .. tostring(n % 2)\n    n = math.floor(n / 2)\n  end\n  return string.reverse(result)\nend",
    "\tlocal result = \"\"\n\twhile n > 0 do\n\t\tresult = tostring(n % 2) .. result\n\t\tn = math.floor(n / 2)\n\tend\n\treturn result\nend",
    "  local s = \"\"\n  while n > 0 do\n    local r = n % 2\n    s = r .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local result = \"\"\n    while n > 0 do\n        local remainder = n % 2\n        result = remainder .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "    local t = {}\n    while n > 0 do\n        table.insert(t, n % 2)\n        n = math.floor(n / 2)\n    end\n    return table.concat(t)\nend",
    "\tlocal bin = \"\"\n\twhile n > 0 do\n\t\tbin = tostring(n % 2) .. bin\n\t\tn = math.floor(n / 2)\n\tend\n\treturn bin\nend",
    "\tlocal t = {}\n\twhile n > 0 do\n\t\tt[#t+1] = n % 2\n\t\tn = math.floor(n / 2)\n\tend\n\treturn table.concat(t):reverse()\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "    local binary = \"\"\n    while n > 0 do\n        local remainder = n % 2\n        binary = remainder .. binary\n        n = (n - remainder) / 2\n    end\n    return binary\nend",
    "  local t = {}\n  while n > 0 do\n    local r = n % 2\n    table.insert(t, r)\n    n = (n - r) / 2\n  end\n  return table.concat(t):reverse()\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "\tlocal result = \"\"\n\twhile n > 0 do\n\t\tresult = tostring(n % 2) .. result\n\t\tn = math.floor(n / 2)\n\tend\n\treturn result\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local t = {}\n  while n > 0 do\n    table.insert(t, n % 2)\n    n = math.floor(n / 2)\n  end\n  return table.concat(t):reverse()\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = ''\n    while n > 0 do\n        local remainder = n % 2\n        result = remainder .. result\n        n = (n - remainder) / 2\n    end\n    return result\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local t = {}\n    while n > 0 do\n        table.insert(t, n % 2)\n        n = math.floor(n / 2)\n    end\n    return table.concat(t):reverse()\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local t = {}\n  while n > 0 do\n    local r = n % 2\n    table.insert(t, r)\n    n = (n - r) / 2\n  end\n  return table.concat(t):reverse()\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = (n % 2 == 0 and \"0\" or \"1\") .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = (n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "\tlocal bin = \"\"\n\twhile n > 0 do\n\t\tbin = bin .. tostring(n % 2)\n\t\tn = math.floor(n / 2)\n\tend\n\treturn bin:reverse()\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = (n % 2 == 0 and \"0\" or \"1\") .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = tostring(remainder) .. result\n    n = (n - remainder) / 2\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    end\n    return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n  end\n  return helper(n, \"\")\nend",
    "  local s = ''\n  while n > 0 do\n    s = s .. tostring(n % 2)\n    n = math.floor(n / 2)\n  end\n  return s:reverse()\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = ''\n  while n > 0 do\n    result = result .. tostring(n % 2)\n    n = math.floor(n / 2)\n  end\n  return string.reverse(result)\nend",
    "\tlocal s = ''\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "    local result = \"\"\n    while n > 0 do\n        local remainder = n % 2\n        result = remainder .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "    local function helper(n, acc)\n        if n == 0 then\n            return acc\n        else\n            return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n        end\n    end\n    return helper(n, \"\")\nend",
    "    local bin = ''\n    while n > 0 do\n        bin = tostring(n % 2) .. bin\n        n = math.floor(n / 2)\n    end\n    return bin\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "\tlocal result = \"\"\n\twhile n > 0 do\n\t\tresult = tostring(n % 2) .. result\n\t\tn = math.floor(n / 2)\n\tend\n\treturn result\nend",
    "    local t = {}\n    while n > 0 do\n        table.insert(t, n % 2)\n        n = math.floor(n / 2)\n    end\n    return table.concat(t)\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local t = {}\n    while n > 0 do\n        table.insert(t, 1, n % 2)\n        n = math.floor(n / 2)\n    end\n    return table.concat(t)\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local binary = \"\"\n  while n > 0 do\n    binary = tostring(n % 2) .. binary\n    n = math.floor(n / 2)\n  end\n  return binary\nend",
    "  local t = {}\n  local i = 0\n  while n > 0 do\n    i = i + 1\n    t[i] = n % 2\n    n = math.floor(n / 2)\n  end\n  return table.concat(t)\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = (n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = (n - remainder) / 2\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = \"\"\n    while n > 0 do\n        local remainder = n % 2\n        result = remainder .. result\n        n = (n - remainder) / 2\n    end\n    return result\nend",
    "  local t = {}\n  while n > 0 do\n    table.insert(t, n % 2)\n    n = math.floor(n / 2)\n  end\n  return table.concat(t):reverse()\nend",
    "\tlocal bin = \"\"\n\twhile n > 0 do\n\t\tbin = tostring(n % 2) .. bin\n\t\tn = math.floor(n / 2)\n\tend\n\treturn bin\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = (n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n    end\n  end\n  return helper(n, \"\")\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n    end\n  end\n  return helper(n, \"\")\nend",
    "  local t = {}\n  while n > 0 do\n    table.insert(t, n % 2)\n    n = math.floor(n / 2)\n  end\n  return table.concat(t)\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local function recurse(n)\n    if n == 0 then return '' end\n    return recurse(math.floor(n / 2)) .. tostring(n % 2)\n  end\n  return recurse(n)\nend",
    "  local result = ''\n  while n > 0 do\n    local r = n % 2\n    result = tostring(r) .. result\n    n = (n - r) / 2\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    local r = n % 2\n    s = r .. s\n    n = (n - r) / 2\n  end\n  return s\nend",
    "  local t = {}\n  while n > 0 do\n    local r = n % 2\n    n = math.floor(n / 2)\n    table.insert(t, 1, r)\n  end\n  return table.concat(t)\nend",
    "\tlocal t = {}\n\twhile n > 0 do\n\t\ttable.insert(t, n % 2)\n\t\tn = math.floor(n / 2)\n\tend\n\treturn table.concat(t)\nend",
    "    local result = \"\"\n    local i = 0\n    while n > 0 do\n        local digit = n % 2\n        result = tostring(digit) .. result\n        n = math.floor(n / 2)\n        i = i + 1\n    end\n    return result\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "  local bin = \"\"\n  while n > 0 do\n    local r = n % 2\n    bin = r .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n    end\n  end\n  return helper(n, \"\")\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = (n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local t = {}\n    while n > 0 do\n        table.insert(t, n % 2)\n        n = math.floor(n / 2)\n    end\n    return table.concat(t):reverse()\nend",
    "    local result = ''\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    local r = n % 2\n    result = tostring(r) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "\tlocal r = \"\"\n\twhile n > 0 do\n\t\tr = (n % 2) .. r\n\t\tn = math.floor(n / 2)\n\tend\n\treturn r\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "  local function helper(n, acc)\n    if n == 0 then return acc end\n    return helper(math.floor(n/2), tostring(n%2)..acc)\n  end\n  return helper(n, \"\")\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "    local bin = \"\"\n    while n > 0 do\n        bin = tostring(n % 2) .. bin\n        n = math.floor(n / 2)\n    end\n    return bin\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n    end\n  end\n  return helper(n, '')\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local function _decimal_to_binary(n, s)\n    if n == 0 then\n      return s\n    else\n      return _decimal_to_binary(math.floor(n / 2), tostring(n % 2) .. s)\n    end\n  end\n  return _decimal_to_binary(n, \"\")\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = (n - remainder) / 2\n  end\n  return result\nend",
    "  local s = ''\n  while n > 0 do\n    s = s .. tostring(n % 2)\n    n = math.floor(n / 2)\n  end\n  return string.reverse(s)\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = (n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "\tlocal function recurse(n, acc)\n\t\tif n == 0 then\n\t\t\treturn acc\n\t\telse\n\t\t\treturn recurse(math.floor(n / 2), tostring(n % 2) .. acc)\n\t\tend\n\tend\n\treturn recurse(n, \"\")\nend",
    "  local function binary_helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return binary_helper(math.floor(n / 2), (n % 2) .. acc)\n    end\n  end\n  return binary_helper(n, \"\")\nend",
    "  local t = {}\n  while n > 0 do\n    local r = n % 2\n    t[#t+1] = r\n    n = (n - r) / 2\n  end\n  return table.concat(t):reverse()\nend",
    "    local b = ''\n    while n > 0 do\n        b = tostring(n % 2) .. b\n        n = math.floor(n / 2)\n    end\n    return b\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = s .. tostring(n % 2)\n        n = math.floor(n / 2)\n    end\n    return string.reverse(s)\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local function helper(n, s)\n    if n == 0 then return s end\n    return helper(math.floor(n / 2), tostring(n % 2) .. s)\n  end\n  return helper(n, \"\")\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = (n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local result = ''\n  while n > 0 do\n    result = (n % 2 == 0 and '0' or '1') .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    local r = n % 2\n    s = r .. s\n    n = (n - r) / 2\n  end\n  return s\nend",
    "\tlocal r = \"\"\n\twhile n > 0 do\n\t\tr = tostring(n % 2) .. r\n\t\tn = math.floor(n / 2)\n\tend\n\treturn r\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      local d = n % 2\n      return helper(math.floor(n / 2), d .. acc)\n    end\n  end\n  return helper(n, \"\")\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = (n - remainder) / 2\n  end\n  return result\nend",
    "    local result = ''\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = tostring(remainder) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = result .. tostring(n % 2)\n    n = math.floor(n / 2)\n  end\n  return string.reverse(result)\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = (n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local s = ''\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      local rem = n % 2\n      return helper(math.floor(n / 2), rem .. acc)\n    end\n  end\n  return helper(n, \"\")\nend",
    "  local function recurse(n, s)\n    if n == 0 then return s end\n    return recurse(math.floor(n / 2), tostring(n % 2) .. s)\n  end\n  return recurse(n, \"\")\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local result = ''\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local r = ''\n  while n > 0 do\n    r = tostring(n % 2) .. r\n    n = math.floor(n / 2)\n  end\n  return r\nend",
    "\tlocal t = {}\n\twhile n > 0 do\n\t\ttable.insert(t, n % 2)\n\t\tn = math.floor(n / 2)\n\tend\n\treturn table.concat(t)\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = (n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local t = {}\n  while n > 0 do\n    local r = n % 2\n    n = math.floor(n / 2)\n    table.insert(t, 1, r)\n  end\n  return table.concat(t)\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local s = \"\"\n    while n > 0 do\n        local r = n % 2\n        s = r .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n    end\n  end\n  return helper(n, \"\")\nend",
    "    local bin = ''\n    while n > 0 do\n        bin = tostring(n % 2) .. bin\n        n = math.floor(n / 2)\n    end\n    return bin\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    local r = n % 2\n    result = r .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend"
  ]
}