{
  "name": "mbpp_99_decimal_to_binary",
  "language": "lua",
  "prompt": "-- Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nlocal function decimal_to_binary(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(8), '1000')\n    lu.assertEquals(candidate(18), '10010')\n    lu.assertEquals(candidate(7), '111')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local binary = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    binary = remainder .. binary\n    n = math.floor(n / 2)\n  end\n  return binary\nend",
    "  local function recurse(n)\n    if n == 0 then return \"\" end\n    return recurse(math.floor(n / 2)) .. tostring(n % 2)\n  end",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local t = {}\n    while n > 0 do\n        table.insert(t, n % 2)\n        n = math.floor(n / 2)\n    end\n    return table.concat(t)\nend",
    "  local function recurse(n, s)\n    if n == 0 then return s end\n    return recurse(math.floor(n / 2), tostring(n % 2) .. s)\n  end\n  return recurse(n, \"\")\nend",
    "    local t = {}\n    while n > 0 do\n        table.insert(t, n % 2)\n        n = math.floor(n / 2)\n    end\n    return table.concat(t):reverse()\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local b = \"\"\n  while n > 0 do\n    b = (n % 2) .. b\n    n = math.floor(n / 2)\n  end\n  return b\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local s = ''\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n    end\n  end\n  return helper(n, \"\")\nend",
    "    local bin = \"\"\n    while n > 0 do\n        local r = n % 2\n        bin = r .. bin\n        n = (n - r) / 2\n    end\n    return bin\nend"
  ]
}