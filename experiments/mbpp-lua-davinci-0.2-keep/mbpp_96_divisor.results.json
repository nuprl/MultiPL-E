{
  "name": "mbpp_96_divisor",
  "language": "lua",
  "prompt": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tdivisors = divisors + 1\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local divisors = {}\n  for i = 1, n do\n    if n % i == 0 then\n      table.insert(divisors, i)\n    end\n  end\n  return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp136k7xi9.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmp136k7xi9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoi2rhl8.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmphoi2rhl8.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tdivisors = divisors + 1\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[#divisors + 1] = i\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfevtjtcw.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpfevtjtcw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal c = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local divisors = 0\n  for i = 1, n do\n    if n % i == 0 then\n      divisors = divisors + 1\n    end\n  end\n  return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tdivisors = divisors + 1\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tdivisors = divisors + 1\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local divisors = {}\n  for i = 1, n do\n    if n % i == 0 then\n      table.insert(divisors, i)\n    end\n  end\n  return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp136k7xi9.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmp136k7xi9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tdivisors = divisors + 1\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i=1,n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[#divisors + 1] = i\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfevtjtcw.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpfevtjtcw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local divisors = 0\n  for i = 1, n do\n    if n % i == 0 then\n      divisors = divisors + 1\n    end\n  end\n  return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisor = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tdivisor = divisor + 1\n\t\tend\n\tend\n\treturn divisor\nend\nprint(divisor(10))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": "4\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[#divisors + 1] = i\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfevtjtcw.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpfevtjtcw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local divisors = 0\n  for i = 1, n do\n    if n % i == 0 then\n      divisors = divisors + 1\n    end\n  end\n  return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[#divisors + 1] = i\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfevtjtcw.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpfevtjtcw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[#divisors + 1] = i\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfevtjtcw.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpfevtjtcw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local divisors = {}\n  for i = 1, n do\n    if n % i == 0 then\n      divisors[#divisors + 1] = i\n    end\n  end\n  return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp402ceoi7.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmp402ceoi7.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[#divisors + 1] = i\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfevtjtcw.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpfevtjtcw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal i = 1\n\tlocal count = 0\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoi2rhl8.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmphoi2rhl8.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local divisors = {}\n  for i = 1, n do\n    if n % i == 0 then\n      table.insert(divisors, i)\n    end\n  end\n  return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp136k7xi9.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmp136k7xi9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local divisors = 0\n  for i = 1, n do\n    if n % i == 0 then\n      divisors = divisors + 1\n    end\n  end\n  return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = {}\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(divisors, i)\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlnecjql.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpxlnecjql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = {}\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(divisors, i)\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlnecjql.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpxlnecjql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoi2rhl8.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmphoi2rhl8.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tdivisors = divisors + 1\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local divisors = 0\n  for i = 1, n do\n    if n % i == 0 then\n      divisors = divisors + 1\n    end\n  end\n  return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[#divisors + 1] = i\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfevtjtcw.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpfevtjtcw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i=1,n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoi2rhl8.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmphoi2rhl8.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoi2rhl8.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmphoi2rhl8.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = {}\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(divisors, i)\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlnecjql.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpxlnecjql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tdivisors = divisors + 1\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = {}\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(divisors, i)\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlnecjql.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpxlnecjql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tdivisors = divisors + 1\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = {}\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(divisors, i)\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlnecjql.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpxlnecjql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tdivisors = divisors + 1\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoi2rhl8.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmphoi2rhl8.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[#divisors+1] = i\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6ejr0b5.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpu6ejr0b5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = {}\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(divisors, i)\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlnecjql.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpxlnecjql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoi2rhl8.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmphoi2rhl8.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tdivisors = divisors + 1\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tdivisors = divisors + 1\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i=1,n do\n        if n%i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[#divisors + 1] = i\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfevtjtcw.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpfevtjtcw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = 0\n    for i = 1, n do\n        if n % i == 0 then\n            divisors = divisors + 1\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i = 1, n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal divisors = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tdivisors = divisors + 1\n\t\tend\n\tend\n\treturn divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[#divisors + 1] = i\n        end\n    end\n    return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfevtjtcw.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmpfevtjtcw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local count = 0\n  for i=1,n do\n    if n % i == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122673,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n  local divisors = {}\n  for i = 1, n do\n    if n % i == 0 then\n      table.insert(divisors, i)\n    end\n  end\n  return divisors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp136k7xi9.lua:15: expected: 4, actual: {1, 3, 5, 15}\nstack traceback:\n\t/tmp/tmp136k7xi9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}