{
  "name": "mbpp_780_find_combinations",
  "language": "lua",
  "prompt": "-- Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nlocal function find_combinations(test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_combinations\n    lu.assertEquals(candidate({{2, 4}, {6, 7}, {5, 1}, {6, 10}}), {{8, 11}, {7, 5}, {8, 14}, {11, 8}, {12, 17}, {11, 11}})\n    lu.assertEquals(candidate({{3, 5}, {7, 8}, {6, 2}, {7, 11}}), {{10, 13}, {9, 7}, {10, 16}, {13, 10}, {14, 19}, {13, 13}})\n    lu.assertEquals(candidate({{4, 6}, {8, 9}, {7, 3}, {8, 12}}), {{12, 15}, {11, 9}, {12, 18}, {15, 12}, {16, 21}, {15, 15}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = {}\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] + test_list[j][1] == test_list[i][2] then\n                table.insert(result, {test_list[i], test_list[j]})\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] + test_list[j][1] == test_list[i][2] then\n                table.insert(result, {test_list[i], test_list[j]})\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] + test_list[j][1] == test_list[i][2] then\n                table.insert(result, {test_list[i], test_list[j]})\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local n = #test_list\n    for i = 1, n do\n        for j = i + 1, n do\n            for k = j + 1, n do\n                if test_list[i] + test_list[j] + test_list[k] == 0 then\n                    table.insert(result, {test_list[i], test_list[j], test_list[k]})\n                end\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] + test_list[j][1] == test_list[i][2] then\n                table.insert(result, {test_list[i], test_list[j]})\n            end\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i][1] + test_list[j][1] == test_list[i][2] then\n        table.insert(result, {test_list[i], test_list[j]})\n      end\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local n = #test_list\n    for i = 1, n do\n        for j = i + 1, n do\n            local sum = test_list[i][1] + test_list[j][1]\n            if result[sum] == nil then\n                result[sum] = {}\n            end\n            table.insert(result[sum], {test_list[i], test_list[j]})\n        end\n    end\n    return result\nend",
    "    local res = {}\n    local n = #test_list\n    for i = 1, n do\n        for j = i + 1, n do\n            local sum = test_list[i] + test_list[j]\n            res[sum] = res[sum] or {}\n            res[sum][#res[sum] + 1] = {test_list[i], test_list[j]}\n        end\n    end\n    return res\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] + test_list[j][1] == test_list[i][2] then\n                table.insert(result, {test_list[i], test_list[j]})\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local n = #test_list\n    for i = 1, n do\n        for j = i + 1, n do\n            local sum = test_list[i] + test_list[j]\n            if result[sum] == nil then\n                result[sum] = {test_list[i], test_list[j]}\n            else\n                result[sum] = {result[sum], test_list[i], test_list[j]}\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local n = #test_list\n    for i = 1, n do\n        for j = i + 1, n do\n            local sum = test_list[i][1] + test_list[j][1]\n            if result[sum] == nil then\n                result[sum] = {}\n            end\n            table.insert(result[sum], {test_list[i], test_list[j]})\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_list do\n    local first_list = test_list[i]\n    for j = i + 1, #test_list do\n      local second_list = test_list[j]\n      local sum = first_list[1] + second_list[1]\n      if result[sum] == nil then\n        result[sum] = {}\n      end\n      table.insert(result[sum], {first_list, second_list})\n    end\n  end\n  return result\nend",
    "    local result = {}\n    local n = #test_list\n    for i = 1, n do\n        for j = i + 1, n do\n            local sum = test_list[i] + test_list[j]\n            if result[sum] == nil then\n                result[sum] = {}\n            end\n            table.insert(result[sum], {test_list[i], test_list[j]})\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local n = #test_list\n    for i = 1, n do\n        for j = i + 1, n do\n            local sum = test_list[i] + test_list[j]\n            result[sum] = result[sum] or {}\n            table.insert(result[sum], {test_list[i], test_list[j]})\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local result_index = 1\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] + test_list[j][1] == test_list[i][2] then\n                result[result_index] = {test_list[i], test_list[j]}\n                result_index = result_index + 1\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local sum = 0\n    local index = 1\n    local temp = {}\n    local temp_index = 1\n    for i = 1, #test_list do\n        sum = sum + test_list[i][1]\n        temp[temp_index] = test_list[i]\n        temp_index = temp_index + 1\n        for j = i + 1, #test_list do\n            sum = sum + test_list[j][1]\n            temp[temp_index] = test_list[j]\n            temp_index = temp_index + 1\n            if sum == test_list[i][2] then\n                result[index] = temp\n                index = index + 1\n            end\n        end\n        sum = 0\n        temp = {}\n        temp_index = 1\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            local sum = test_list[i] + test_list[j]\n            if result[sum] == nil then\n                result[sum] = {}\n            end\n            table.insert(result[sum], {test_list[i], test_list[j]})\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            local sum = test_list[i] + test_list[j]\n            local tuple = {test_list[i], test_list[j]}\n            if result[sum] then\n                table.insert(result[sum], tuple)\n            else\n                result[sum] = {tuple}\n            end\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] + test_list[j][1] == test_list[i][2] then\n                table.insert(res, {test_list[i], test_list[j]})\n            end\n        end\n    end\n    return res\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] + test_list[j][1] == test_list[i][2] then\n                table.insert(result, {test_list[i], test_list[j]})\n            end\n        end\n    end\n    return result\nend"
  ]
}