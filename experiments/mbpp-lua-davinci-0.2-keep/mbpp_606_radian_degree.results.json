{
  "name": "mbpp_606_radian_degree",
  "language": "lua",
  "prompt": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps1vd1diz.lua:3: attempt to perform arithmetic on a nil value (global 'pi')\nstack traceback:\n\t/tmp/tmps1vd1diz.lua:3: in local 'candidate'\n\t/tmp/tmps1vd1diz.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n  return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    return degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * (math.pi / 180)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n\treturn degree * math.pi / 180\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}