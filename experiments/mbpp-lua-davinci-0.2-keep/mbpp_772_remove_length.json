{
  "name": "mbpp_772_remove_length",
  "language": "lua",
  "prompt": "-- Write a function to remove all the words with k length in the given string.\nlocal function remove_length(test_str, K)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_length\n    lu.assertEquals(candidate('The person is most value tet', 3), 'person is most value')\n    lu.assertEquals(candidate('If you told me about this ok', 4), 'If you me about ok')\n    lu.assertEquals(candidate('Forces of darkeness is come into the play', 4), 'Forces of darkeness is the')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal new_str = \"\"\n\tfor word in string.gmatch(test_str, \"%w+\") do\n\t\tif #word ~= K then\n\t\t\tnew_str = new_str .. word .. \" \"\n\t\tend\n\tend\n\treturn new_str\nend",
    "    local words = {}\n    for word in string.gmatch(test_str, \"%w+\") do\n        if string.len(word) ~= K then\n            table.insert(words, word)\n        end\n    end\n    return table.concat(words, \" \")\nend",
    "  local words = {}\n  for word in string.gmatch(test_str, \"%w+\") do\n    words[#words+1] = word\n  end\n  local new_str = \"\"\n  for i = 1, #words do\n    if #words[i] ~= K then\n      new_str = new_str .. words[i] .. \" \"\n    end\n  end\n  return new_str\nend",
    "    local str_tbl = {}\n    local str_tbl_len = 0\n    for word in string.gmatch(test_str, \"%w+\") do\n        if string.len(word) ~= K then\n            str_tbl_len = str_tbl_len + 1\n            str_tbl[str_tbl_len] = word\n        end\n    end\n    return table.concat(str_tbl, \" \")\nend",
    "    local words = {}\n    local i = 1\n    for word in string.gmatch(test_str, \"%w+\") do\n        if string.len(word) ~= K then\n            words[i] = word\n            i = i + 1\n        end\n    end\n    return table.concat(words, \" \")\nend",
    "    local str = \"\"\n    local words = {}\n    local i = 1\n    for word in string.gmatch(test_str, \"%w+\") do\n        words[i] = word\n        i = i + 1\n    end\n    for j = 1, #words do\n        if #words[j] ~= K then\n            str = str .. words[j] .. \" \"\n        end\n    end\n    return str\nend",
    "  local words = {}\n  for word in string.gmatch(test_str, \"%w+\") do\n    if #word ~= K then\n      table.insert(words, word)\n    end\n  end\n  return table.concat(words, \" \")\nend",
    "    local str = test_str\n    local k = K\n    local new_str = \"\"\n    local word = \"\"\n    for i = 1, #str do\n        if str:sub(i, i) == \" \" then\n            if #word == k then\n                new_str = new_str .. \" \"\n            else\n                new_str = new_str .. word .. \" \"\n            end\n            word = \"\"\n        else\n            word = word .. str:sub(i, i)\n        end\n    end\n    if #word == k then\n        new_str = new_str .. \" \"\n    else\n        new_str = new_str .. word .. \" \"\n    end\n    return new_str\nend",
    "    local str_tbl = {}\n    local new_str = \"\"\n    for word in string.gmatch(test_str, \"%w+\") do\n        if string.len(word) ~= K then\n            table.insert(str_tbl, word)\n        end\n    end\n    new_str = table.concat(str_tbl, \" \")\n    return new_str\nend",
    "    local words = {}\n    for word in string.gmatch(test_str, \"%w+\") do\n        if #word ~= K then\n            table.insert(words, word)\n        end\n    end\n    return table.concat(words, \" \")\nend",
    "    local words = {}\n    for word in string.gmatch(test_str, \"%w+\") do\n        if #word ~= K then\n            table.insert(words, word)\n        end\n    end\n    return table.concat(words, \" \")\nend",
    "    local words = {}\n    for word in string.gmatch(test_str, \"%w+\") do\n        if #word ~= K then\n            table.insert(words, word)\n        end\n    end\n    return table.concat(words, \" \")\nend",
    "    local str = \"\"\n    for i in string.gmatch(test_str, \"%S+\") do\n        if string.len(i) ~= K then\n            str = str .. i .. \" \"\n        end\n    end\n    return str\nend",
    "    local words = {}\n    for word in string.gmatch(test_str, \"%w+\") do\n        if string.len(word) ~= K then\n            table.insert(words, word)\n        end\n    end\n    return table.concat(words, \" \")\nend",
    "    local str_list = string_split(test_str, \" \")\n    local new_str = \"\"\n    for i, v in ipairs(str_list) do\n        if string.len(v) ~= K then\n            new_str = new_str .. v .. \" \"\n        end\n    end\n    return new_str\nend",
    "    local words = {}\n    for word in string.gmatch(test_str, \"%w+\") do\n        if #word == K then\n            table.insert(words, word)\n        end\n    end\n    for _, word in ipairs(words) do\n        test_str = string.gsub(test_str, word, \"\")\n    end\n    return test_str\nend",
    "  local words = {}\n  local i = 1\n  for word in string.gmatch(test_str, \"%w+\") do\n    words[i] = word\n    i = i + 1\n  end\n  for i = 1, #words do\n    if #words[i] == K then\n      words[i] = \"\"\n    end\n  end\n  return table.concat(words, \" \")\nend",
    "    local words = {}\n    local i = 1\n    for word in string.gmatch(test_str, \"%w+\") do\n        if string.len(word) ~= K then\n            words[i] = word\n            i = i + 1\n        end\n    end\n    return table.concat(words, \" \")\nend",
    "  local words = {}\n  local i = 1\n  for word in string.gmatch(test_str, \"%w+\") do\n    words[i] = word\n    i = i + 1\n  end\n  local new_str = \"\"\n  for i = 1, #words do\n    if #words[i] ~= K then\n      new_str = new_str .. words[i] .. \" \"\n    end\n  end\n  return new_str\nend",
    "    local words = {}\n    for word in string.gmatch(test_str, \"%w+\") do\n        if #word ~= K then\n            table.insert(words, word)\n        end\n    end\n    return table.concat(words, \" \")\nend"
  ]
}