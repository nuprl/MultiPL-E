{
  "name": "mbpp_457_Find_Min",
  "language": "lua",
  "prompt": "-- Write a python function to find the sublist having minimum length.\nlocal function Find_Min(lst)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min\n    lu.assertEquals(candidate({{1}, {1, 2}, {1, 2, 3}}), {1})\n    lu.assertEquals(candidate({{1, 1}, {1, 1, 1}, {1, 2, 7, 8}}), {1, 1})\n    lu.assertEquals(candidate({{'x'}, {'x', 'y'}, {'x', 'y', 'z'}}), {'x'})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal min = math.huge\n\tlocal min_lst = {}\n\tfor _, l in ipairs(lst) do\n\t\tif #l < min then\n\t\t\tmin = #l\n\t\t\tmin_lst = l\n\t\tend\n\tend\n\treturn min_lst\nend",
    "\tlocal min = lst[1]\n\tfor i = 2, #lst do\n\t\tif #lst[i] < #min then\n\t\t\tmin = lst[i]\n\t\tend\n\tend\n\treturn min\nend",
    "\tlocal min = lst[1]\n\tfor i = 1, #lst do\n\t\tif #lst[i] < #min then\n\t\t\tmin = lst[i]\n\t\tend\n\tend\n\treturn min\nend",
    "  local min = lst[1]\n  for i = 2, #lst do\n    if #lst[i] < #min then\n      min = lst[i]\n    end\n  end\n  return min\nend",
    "\tlocal min = lst[1]\n\tfor i = 2, #lst do\n\t\tif #lst[i] < #min then\n\t\t\tmin = lst[i]\n\t\tend\n\tend\n\treturn min\nend",
    "\tlocal min = lst[1]\n\tfor i = 2, #lst do\n\t\tif #lst[i] < #min then\n\t\t\tmin = lst[i]\n\t\tend\n\tend\n\treturn min\nend",
    "    local min = math.huge\n    local min_index = 0\n    for i,v in ipairs(lst) do\n        if #v < min then\n            min = #v\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local min = lst[1]\n    for i = 2, #lst do\n        if #lst[i] < #min then\n            min = lst[i]\n        end\n    end\n    return min\nend",
    "  local min = math.huge\n  local min_lst = {}\n  for _, l in ipairs(lst) do\n    if #l < min then\n      min = #l\n      min_lst = l\n    end\n  end\n  return min_lst\nend",
    "\tlocal min = #lst[1]\n\tlocal min_lst = lst[1]\n\tfor i = 2, #lst do\n\t\tif #lst[i] < min then\n\t\t\tmin = #lst[i]\n\t\t\tmin_lst = lst[i]\n\t\tend\n\tend\n\treturn min_lst\nend",
    "\tlocal min = lst[1]\n\tfor i = 2, #lst do\n\t\tif #lst[i] < #min then\n\t\t\tmin = lst[i]\n\t\tend\n\tend\n\treturn min\nend",
    "    local min = lst[1]\n    for i = 2, #lst do\n        if #lst[i] < #min then\n            min = lst[i]\n        end\n    end\n    return min\nend",
    "  local min = lst[1]\n  for i = 2, #lst do\n    if #lst[i] < #min then\n      min = lst[i]\n    end\n  end\n  return min\nend",
    "\tlocal min = #lst[1]\n\tlocal min_index = 1\n\tfor i = 2, #lst do\n\t\tif #lst[i] < min then\n\t\t\tmin = #lst[i]\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "\tlocal min = lst[1]\n\tfor i = 2, #lst do\n\t\tif #lst[i] < #min then\n\t\t\tmin = lst[i]\n\t\tend\n\tend\n\treturn min\nend",
    "\tlocal min = math.huge\n\tlocal min_lst = {}\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\t\tmin_lst = v\n\t\t\tend\n\t\tend\n\tend\n\treturn min_lst\nend",
    "\tlocal min = math.huge\n\tlocal min_lst = {}\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len < min then\n\t\t\t\tmin = len\n\t\t\t\tmin_lst = v\n\t\t\tend\n\t\tend\n\tend\n\treturn min_lst\nend",
    "\tlocal min = #lst[1]\n\tlocal min_index = 1\n\tfor i = 2, #lst do\n\t\tif #lst[i] < min then\n\t\t\tmin = #lst[i]\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn lst[min_index]\nend",
    "    local min_len = math.huge\n    local min_lst = nil\n    for _, lst in ipairs(lst) do\n        local len = #lst\n        if len < min_len then\n            min_len = len\n            min_lst = lst\n        end\n    end\n    return min_lst\nend",
    "    local min = math.huge\n    local min_lst = {}\n    for _, lst in ipairs(lst) do\n        if #lst < min then\n            min = #lst\n            min_lst = lst\n        end\n    end\n    return min_lst\nend"
  ]
}