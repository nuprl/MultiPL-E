{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "lua",
  "prompt": "-- Write a function that checks if a strings contains 'z', except at the start and end of the word.\nlocal function text_match_wordz_middle(text)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_wordz_middle\n    lu.assertEquals(candidate('pythonzabc.'), true)\n    lu.assertEquals(candidate('zxyabc.'), false)\n    lu.assertEquals(candidate('  lang  .'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    return text:match(\"^[^z]*z[^z]*$\")\nend",
    "  return text:match(\"^[^z]*z[^z]*$\")\nend",
    "  return text:match(\"^[^z]*z[^z]*$\")\nend",
    "    return text:match('^[^z]*z[^z]*$')\nend",
    "  return text:match(\"^[^z]*z[^z]*$\")\nend",
    "  return text:match(\"^[^z]*z[^z]*$\")\nend",
    "  return text:match('^[^z]*z[^z]*$') ~= nil\nend",
    "  return string.match(text, \"^[^z]*z[^z]*$\")\nend",
    "  return text:match('^[^z]*z[^z]*$')\nend",
    "    return text:match(\"^[^z]*z[^z]*$\")\nend",
    "  return string.match(text, \"^[^z]*z[^z]*$\")\nend",
    "    return string.match(text, \"^[^z]*z[^z]*$\")\nend",
    "    local pattern = '%f[%w]z%f[%W]'\n    return string.match(text, pattern)\nend",
    "    local pattern = '^[^z]*z[^z]*$'\n    return text:match(pattern) ~= nil\nend",
    "    local pattern = \"^[^z]*z[^z]*$\"\n    return string.match(text, pattern)\nend",
    "  return text:match(\"^[^z]*z[^z]*$\")\nend",
    "  return text:match(\"^[^z]*z[^z]*$\")\nend",
    "  local pattern = \"^[^z]*z[^z]*$\"\n  return string.match(text, pattern)\nend",
    "    return string.match(text, 'z.-z')\nend",
    "    return string.match(text, \"^[^z]*z[^z]*$\")\nend"
  ]
}