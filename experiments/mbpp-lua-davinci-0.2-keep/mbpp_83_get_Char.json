{
  "name": "mbpp_83_get_Char",
  "language": "lua",
  "prompt": "-- Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nlocal function get_Char(strr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Char\n    lu.assertEquals(candidate('abc'), 'f')\n    lu.assertEquals(candidate('gfg'), 't')\n    lu.assertEquals(candidate('ab'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal sum = 0\n\tfor i = 1, #strr do\n\t\tsum = sum + string.byte(strr, i)\n\tend\n\treturn string.char(sum % 26 + string.byte('a'))\nend",
    "    local sum = 0\n    for i = 1, #strr do\n        sum = sum + string.byte(strr:sub(i, i))\n    end\n    return string.char(sum % 26 + 65)\nend",
    "    local sum = 0\n    for i = 1, #strr do\n        sum = sum + strr:byte(i)\n    end\n    return string.char(sum % 26 + 97)\nend",
    "\tlocal sum = 0\n\tfor i = 1, #strr do\n\t\tsum = sum + string.byte(strr, i)\n\tend\n\treturn string.char(sum % 26 + 65)\nend",
    "    local sum = 0\n    for i = 1, #strr do\n        sum = sum + string.byte(strr, i)\n    end\n    return string.char(sum % 26 + 64)\nend",
    "    local sum = 0\n    for i = 1, #strr do\n        sum = sum + string.byte(strr, i)\n    end\n    return string.char(sum % 26 + 65)\nend",
    "\tlocal sum = 0\n\tfor i = 1, #strr do\n\t\tsum = sum + string.byte(strr, i)\n\tend\n\treturn string.char(sum % 26 + 65)\nend",
    "    local sum = 0\n    for i = 1, #strr do\n        sum = sum + string.byte(strr, i)\n    end\n    return string.char(sum % 26 + 65)\nend",
    "\tlocal sum = 0\n\tfor i = 1, #strr do\n\t\tsum = sum + string.byte(strr:sub(i,i))\n\tend\n\treturn string.char(sum%26 + 97)\nend",
    "\tlocal str = strr:lower()\n\tlocal sum = 0\n\tfor i = 1, #str do\n\t\tsum = sum + str:byte(i)\n\tend\n\treturn string.char(97 + (sum % 26))\nend",
    "  local sum = 0\n  for i = 1, #strr do\n    sum = sum + string.byte(strr, i)\n  end\n  return string.char(sum % 26 + 97)\nend",
    "\tlocal sum = 0\n\tlocal str = strr:lower()\n\tfor i = 1, #str do\n\t\tsum = sum + str:byte(i)\n\tend\n\treturn string.char(sum % 26 + 97)\nend",
    "\tlocal sum = 0\n\tfor i = 1, #strr do\n\t\tsum = sum + string.byte(strr, i)\n\tend\n\treturn string.char(sum % 26 + 97)\nend",
    "\tlocal sum = 0\n\tfor i = 1, #strr do\n\t\tsum = sum + string.byte(strr, i)\n\tend\n\treturn string.char(sum % 26 + 65)\nend",
    "\tlocal sum = 0\n\tfor i = 1, #strr do\n\t\tsum = sum + string.byte(strr:sub(i,i))\n\tend\n\treturn string.char(sum % 26 + 65)\nend",
    "\tlocal sum = 0\n\tfor i = 1, #strr do\n\t\tsum = sum + string.byte(strr, i)\n\tend\n\treturn string.char(sum % 26 + string.byte('a'))\nend",
    "\tlocal sum = 0\n\tfor i = 1, #strr do\n\t\tsum = sum + string.byte(strr:sub(i,i))\n\tend\n\treturn string.char(sum%26 + 65)\nend",
    "    local sum = 0\n    for i = 1, #strr do\n        sum = sum + string.byte(strr, i)\n    end\n    return string.char(sum % 26 + 65)\nend",
    "    local sum = 0\n    for i = 1, #strr do\n        sum = sum + string.byte(strr, i)\n    end\n    return string.char(sum % 26 + 97)\nend\nprint(get_Char(\"abc\"))",
    "\tlocal sum = 0\n\tfor i = 1, #strr do\n\t\tsum = sum + string.byte(strr, i)\n\tend\n\treturn string.char(sum % 26 + 65)\nend"
  ]
}