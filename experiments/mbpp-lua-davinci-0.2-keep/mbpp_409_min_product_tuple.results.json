{
  "name": "mbpp_409_min_product_tuple",
  "language": "lua",
  "prompt": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        local product = list1[i][1] * list1[j][1]\n        if product < min then\n          min = product\n        end\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcaggu54m.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpcaggu54m.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local prod = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n      if prod < min then\n        min = prod\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8mic_zw.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmpw8mic_zw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local prod = list1[i][1] * list1[i][2]\n        if prod < min_prod then\n            min_prod = prod\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min_product then\n      min_product = product\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = list1[i][1] * list1[j][1]\n                if product < min_product then\n                    min_product = product\n                end\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fd8avpx.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp_fd8avpx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min_product then\n      min_product = product\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min_product then\n      min_product = product\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min then\n      min = product\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i] * list1[j]\n      if product < min_product then\n        min_product = product\n      end\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo21cjbv2.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpo21cjbv2.lua:6: in local 'candidate'\n\t/tmp/tmpo21cjbv2.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        local tuple1 = list1[i]\n        for j = i + 1, #list1 do\n            local tuple2 = list1[j]\n            local product = tuple1[1] * tuple2[1] + tuple1[2] * tuple2[2]\n            if product < min then\n                min = product\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_tgooin.lua:20: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmpc_tgooin.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min then\n\t\t\tmin = product\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = list1[1][1] * list1[1][2]\n\tfor i, v in ipairs(list1) do\n\t\tif v[1] * v[2] < min then\n\t\t\tmin = v[1] * v[2]\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local prod = list1[i] * list1[j]\n            if prod < min_prod then\n                min_prod = prod\n            end\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_qszd_cf.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp_qszd_cf.lua:6: in local 'candidate'\n\t/tmp/tmp_qszd_cf.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local prod = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n            if prod < min then\n                min = prod\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoewencbh.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmpoewencbh.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local prod = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n      if prod < min then\n        min = prod\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8mic_zw.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmpw8mic_zw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal prod = list1[i][1] * list1[i][2]\n\t\tif prod < min then\n\t\t\tmin = prod\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i][1] * list1[j][1]\n      if product < min then\n        min = product\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j2o2hyp.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp1j2o2hyp.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min_product then\n      min_product = product\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min_product then\n      min_product = product\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        if list1[i][1] * list1[i][2] < min then\n            min = list1[i][1] * list1[i][2]\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min then\n                min = product\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qiy20e0.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp9qiy20e0.lua:6: in local 'candidate'\n\t/tmp/tmp9qiy20e0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = math.huge\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = list1[i][1] * list1[j][1]\n\t\t\tif product < min_product then\n\t\t\t\tmin_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5rrudyj.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpc5rrudyj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local prod = list1[i][1] * list1[j][1]\n            if prod < min_prod then\n                min_prod = prod\n            end\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1aae32_5.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp1aae32_5.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min then\n                min = product\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qiy20e0.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp9qiy20e0.lua:6: in local 'candidate'\n\t/tmp/tmp9qiy20e0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min_product then\n      min_product = product\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min_product then\n      min_product = product\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i, v in ipairs(list1) do\n        for j, w in ipairs(list1) do\n            if i ~= j then\n                local product = v[1] * w[1]\n                if product < min_product then\n                    min_product = product\n                end\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn84sbdfu.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpn84sbdfu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = list1[1][1] * list1[1][2]\n  for i, v in ipairs(list1) do\n    local product = v[1] * v[2]\n    if product < min_product then\n      min_product = product\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local prod = list1[i][1] * list1[i][2]\n        if prod < min_prod then\n            min_prod = prod\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min then\n\t\t\tmin = product\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = math.huge\n\tfor i = 1, #list1 do\n\t\tfor j = i+1, #list1 do\n\t\t\tlocal product = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n\t\t\tif product < min_product then\n\t\t\t\tmin_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdkpc8_1.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmpbdkpc8_1.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n      if product < min then\n        min = product\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nnipca9.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmp4nnipca9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min then\n\t\t\tmin = product\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_prod = math.huge\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal prod = list1[i] * list1[j]\n\t\t\tif prod < min_prod then\n\t\t\t\tmin_prod = prod\n\t\t\tend\n\t\tend\n\tend\n\treturn min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmko9wbni.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpmko9wbni.lua:6: in local 'candidate'\n\t/tmp/tmpmko9wbni.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = math.huge\n  for i, v in ipairs(list1) do\n    for j, w in ipairs(list1) do\n      if i ~= j then\n        local product = v[1] * w[1]\n        if product < min_product then\n          min_product = product\n        end\n      end\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_z0qj39.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp0_z0qj39.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local prod = list1[i][1] * list1[j][1]\n                if prod < min_prod then\n                    min_prod = prod\n                end\n            end\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevloa350.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpevloa350.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3chqamj.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmps3chqamj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = list1[i][1] * list1[j][1]\n                if product < min_product then\n                    min_product = product\n                end\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fd8avpx.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp_fd8avpx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min_product then\n      min_product = product\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min then\n                min = product\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qiy20e0.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp9qiy20e0.lua:6: in local 'candidate'\n\t/tmp/tmp9qiy20e0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1]\n            if product < min then\n                min = product\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpesqn6alc.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpesqn6alc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min then\n\t\t\tmin = product\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min then\n\t\t\tmin = product\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min then\n\t\t\tmin = product\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n      if product < min then\n        min = product\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nnipca9.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmp4nnipca9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = list1[i][1] * list1[j][1]\n                if product < min_product then\n                    min_product = product\n                end\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fd8avpx.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp_fd8avpx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal prod = list1[i][1] * list1[i][2]\n\t\tif prod < min then\n\t\t\tmin = prod\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = nil\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if min_product == nil or product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkt8irydt.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpkt8irydt.lua:6: in local 'candidate'\n\t/tmp/tmpkt8irydt.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i][1] * list1[j][1]\n      if product < min then\n        min = product\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j2o2hyp.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp1j2o2hyp.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min then\n                min = product\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qiy20e0.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp9qiy20e0.lua:6: in local 'candidate'\n\t/tmp/tmp9qiy20e0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local prod = list1[i][1] * list1[i][2]\n        if prod < min_prod then\n            min_prod = prod\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for _, tuple in ipairs(list1) do\n        local product = tuple[1] * tuple[2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min then\n                min = product\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qiy20e0.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp9qiy20e0.lua:6: in local 'candidate'\n\t/tmp/tmp9qiy20e0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i] * list1[j]\n      if product < min_product then\n        min_product = product\n      end\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo21cjbv2.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpo21cjbv2.lua:6: in local 'candidate'\n\t/tmp/tmpo21cjbv2.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local prod = list1[i][1] * list1[i][2]\n        if prod < min_prod then\n            min_prod = prod\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i][1] * list1[j][1]\n      if product < min_product then\n        min_product = product\n      end\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gunkxrl.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp8gunkxrl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_prod = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local prod = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n      if prod < min_prod then\n        min_prod = prod\n      end\n    end\n  end\n  return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvaqmo2zi.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmpvaqmo2zi.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i] * list1[j]\n      if product < min then\n        min = product\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgna_m4uh.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpgna_m4uh.lua:6: in local 'candidate'\n\t/tmp/tmpgna_m4uh.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local prod = list1[i][1] * list1[i][2]\n        if prod < min_prod then\n            min_prod = prod\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3brqh96_.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp3brqh96_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n      if product < min then\n        min = product\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nnipca9.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmp4nnipca9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_prod = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local prod = list1[i] * list1[j]\n      if prod < min_prod then\n        min_prod = prod\n      end\n    end\n  end\n  return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpokayjdj_.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpokayjdj_.lua:6: in local 'candidate'\n\t/tmp/tmpokayjdj_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            if list1[i] * list1[j] < min then\n                min = list1[i] * list1[j]\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp70rnmrph.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp70rnmrph.lua:6: in local 'candidate'\n\t/tmp/tmp70rnmrph.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = math.huge\n    for i = 1, #list1 do\n        for j = i+1, #list1 do\n            local prod = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n            if prod < min_prod then\n                min_prod = prod\n            end\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpysn2_j1g.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmpysn2_j1g.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local prod = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n            if prod < min_prod then\n                min_prod = prod\n            end\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiw43q2dz.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmpiw43q2dz.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3chqamj.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmps3chqamj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = math.huge\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = list1[i] * list1[j]\n\t\t\tif product < min then\n\t\t\t\tmin = product\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqphvvqte.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpqphvvqte.lua:6: in local 'candidate'\n\t/tmp/tmpqphvvqte.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = list1[i][1] * list1[j][1]\n                if product < min then\n                    min = product\n                end\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3qqu6tf.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpe3qqu6tf.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        local product = list1[i][1] * list1[j][2]\n        if product < min then\n          min = product\n        end\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8fg15fil.lua:20: expected: 8, actual: 6\nstack traceback:\n\t/tmp/tmp8fg15fil.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = math.huge\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = list1[i] * list1[j]\n\t\t\tif product < min_product then\n\t\t\t\tmin_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl8qpkw_3.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpl8qpkw_3.lua:6: in local 'candidate'\n\t/tmp/tmpl8qpkw_3.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    if list1[i][1] * list1[i][2] < min_product then\n      min_product = list1[i][1] * list1[i][2]\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = math.huge\n\tfor i = 1, #list1 do\n\t\tfor j = i+1, #list1 do\n\t\t\tlocal product = list1[i] * list1[j]\n\t\t\tif product < min then\n\t\t\t\tmin = product\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_b_5fppd.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp_b_5fppd.lua:6: in local 'candidate'\n\t/tmp/tmp_b_5fppd.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local prod = list1[i][1] * list1[i][2]\n        if prod < min then\n            min = prod\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3chqamj.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmps3chqamj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local prod = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n            if prod < min then\n                min = prod\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoewencbh.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmpoewencbh.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min then\n      min = product\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        if list1[i][1] * list1[i][2] < min then\n            min = list1[i][1] * list1[i][2]\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n            if product < min then\n                min = product\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnpnm2xq.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmprnpnm2xq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = math.huge\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = list1[i] * list1[j]\n\t\t\tif product < min_product then\n\t\t\t\tmin_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl8qpkw_3.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpl8qpkw_3.lua:6: in local 'candidate'\n\t/tmp/tmpl8qpkw_3.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1]\n            if product < min then\n                min = product\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpesqn6alc.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpesqn6alc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local prod = list1[i][1] * list1[j][1]\n                if prod < min_prod then\n                    min_prod = prod\n                end\n            end\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevloa350.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpevloa350.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local prod = list1[i] * list1[j]\n            if prod < min_prod then\n                min_prod = prod\n            end\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_qszd_cf.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp_qszd_cf.lua:6: in local 'candidate'\n\t/tmp/tmp_qszd_cf.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min then\n      min = product\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i, v in ipairs(list1) do\n        for j, w in ipairs(list1) do\n            if i ~= j then\n                local product = v[1] * w[1]\n                if product < min_product then\n                    min_product = product\n                end\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn84sbdfu.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpn84sbdfu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        local product = list1[i][1] * list1[j][1]\n        if product < min then\n          min = product\n        end\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcaggu54m.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpcaggu54m.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local prod = list1[i] * list1[j]\n            if prod < min_prod then\n                min_prod = prod\n            end\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_qszd_cf.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp_qszd_cf.lua:6: in local 'candidate'\n\t/tmp/tmp_qszd_cf.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n            if product < min then\n                min = product\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnpnm2xq.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmprnpnm2xq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min then\n      min = product\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = math.huge\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = list1[i] * list1[j]\n\t\t\tif product < min_product then\n\t\t\t\tmin_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl8qpkw_3.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpl8qpkw_3.lua:6: in local 'candidate'\n\t/tmp/tmpl8qpkw_3.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = list1[i][1] * list1[j][1]\n                if product < min then\n                    min = product\n                end\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3qqu6tf.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpe3qqu6tf.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n      if product < min then\n        min = product\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nnipca9.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmp4nnipca9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal prod = list1[i][1] * list1[i][2]\n\t\tif prod < min then\n\t\t\tmin = prod\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i][1] * list1[j][1]\n      if product < min then\n        min = product\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j2o2hyp.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp1j2o2hyp.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3brqh96_.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp3brqh96_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = list1[1][1] * list1[1][2]\n    for _, tuple in ipairs(list1) do\n        local prod = tuple[1] * tuple[2]\n        if prod < min_prod then\n            min_prod = prod\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = list1[i][1] * list1[j][1]\n                if product < min_product then\n                    min_product = product\n                end\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fd8avpx.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp_fd8avpx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = math.huge\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1 do\n\t\t\tif i ~= j then\n\t\t\t\tlocal product = list1[i][1] * list1[j][1]\n\t\t\t\tif product < min then\n\t\t\t\t\tmin = product\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwde4zb62.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpwde4zb62.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i] * list1[j]\n      if product < min_product then\n        min_product = product\n      end\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo21cjbv2.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpo21cjbv2.lua:6: in local 'candidate'\n\t/tmp/tmpo21cjbv2.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3chqamj.lua:18: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmps3chqamj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min then\n\t\t\tmin = product\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i] * list1[j]\n      if product < min_product then\n        min_product = product\n      end\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo21cjbv2.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpo21cjbv2.lua:6: in local 'candidate'\n\t/tmp/tmpo21cjbv2.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = list1[i][1] * list1[j][1]\n                if product < min_product then\n                    min_product = product\n                end\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fd8avpx.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp_fd8avpx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local prod = list1[i] * list1[j]\n            if prod < min then\n                min = prod\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkml6_kc_.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpkml6_kc_.lua:6: in local 'candidate'\n\t/tmp/tmpkml6_kc_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal prod = list1[i][1] * list1[i][2]\n\t\tif prod < min then\n\t\t\tmin = prod\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min then\n            min = product\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min_product then\n      min_product = product\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_prod = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local prod = list1[i][1] * list1[i][2]\n        if prod < min_prod then\n            min_prod = prod\n        end\n    end\n    return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min then\n      min = product\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3brqh96_.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp3brqh96_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = nil\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i] * list1[j]\n      if min_product == nil or product < min_product then\n        min_product = product\n      end\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj84szjmh.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpj84szjmh.lua:6: in local 'candidate'\n\t/tmp/tmpj84szjmh.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = math.huge\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1 do\n\t\t\tif i ~= j then\n\t\t\t\tlocal product = list1[i][1] * list1[j][1]\n\t\t\t\tif product < min then\n\t\t\t\t\tmin = product\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwde4zb62.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpwde4zb62.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = math.huge\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        local product = list1[i][1] * list1[j][1]\n        if product < min then\n          min = product\n        end\n      end\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcaggu54m.lua:20: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpcaggu54m.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_prod = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local prod = list1[i][1] * list1[i][2]\n    if prod < min_prod then\n      min_prod = prod\n    end\n  end\n  return min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3brqh96_.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp3brqh96_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3brqh96_.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp3brqh96_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3brqh96_.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp3brqh96_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i][1] * list1[j][1]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3brqh96_.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp3brqh96_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i][1] * list1[j][1]\n      if product < min_product then\n        min_product = product\n      end\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gunkxrl.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmp8gunkxrl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_prod = math.huge\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal prod = list1[i] * list1[j]\n\t\t\tif prod < min_prod then\n\t\t\t\tmin_prod = prod\n\t\t\tend\n\t\tend\n\tend\n\treturn min_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmko9wbni.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpmko9wbni.lua:6: in local 'candidate'\n\t/tmp/tmpmko9wbni.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min = math.huge\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1 do\n\t\t\tif i ~= j then\n\t\t\t\tlocal product = list1[i][1] * list1[j][1] + list1[i][2] * list1[j][2]\n\t\t\t\tif product < min then\n\t\t\t\t\tmin = product\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps71hf1eq.lua:20: expected: 8, actual: 46\nstack traceback:\n\t/tmp/tmps71hf1eq.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min_product then\n      min_product = product\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min = list1[1][1] * list1[1][2]\n  for i = 2, #list1 do\n    local product = list1[i][1] * list1[i][2]\n    if product < min then\n      min = product\n    end\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n  local min_product = list1[1][1] * list1[1][2]\n  for i, v in ipairs(list1) do\n    local product = v[1] * v[2]\n    if product < min_product then\n      min_product = product\n    end\n  end\n  return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min_product then\n                min_product = product\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = list1[1][1] * list1[1][2]\n\tfor i = 2, #list1 do\n\t\tlocal product = list1[i][1] * list1[i][2]\n\t\tif product < min_product then\n\t\t\tmin_product = product\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n\tlocal min_product = math.huge\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal product = list1[i][1] * list1[j][1]\n\t\t\tif product < min_product then\n\t\t\t\tmin_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5rrudyj.lua:18: expected: 8, actual: 2\nstack traceback:\n\t/tmp/tmpc5rrudyj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = list1[i][1] * list1[j][2]\n                if product < min_product then\n                    min_product = product\n                end\n            end\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4l9o6tu.lua:20: expected: 8, actual: 6\nstack traceback:\n\t/tmp/tmpt4l9o6tu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min_product = list1[1][1] * list1[1][2]\n    for i = 2, #list1 do\n        local product = list1[i][1] * list1[i][2]\n        if product < min_product then\n            min_product = product\n        end\n    end\n    return min_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n    local min = math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product < min then\n                min = product\n            end\n        end\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124230,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qiy20e0.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp9qiy20e0.lua:6: in local 'candidate'\n\t/tmp/tmp9qiy20e0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}