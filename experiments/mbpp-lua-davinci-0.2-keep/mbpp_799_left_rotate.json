{
  "name": "mbpp_799_left_rotate",
  "language": "lua",
  "prompt": "-- Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nlocal function left_rotate(n, d)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = left_rotate\n    lu.assertEquals(candidate(16, 2), 64)\n    lu.assertEquals(candidate(10, 2), 40)\n    lu.assertEquals(candidate(99, 3), 792)\n    lu.assertEquals(candidate(99, 3), 792)\n    lu.assertEquals(candidate(1, 3), 8)\n    lu.assertEquals(candidate(5, 3), 40)\n    lu.assertEquals(candidate(29, 3), 232)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  return (n << d) | (n >> (32 - d))\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "  local d = d % 32\n  local left = n << d\n  local right = n >> (32 - d)\n  return left | right\nend",
    "    local r = n\n    for i = 1, d do\n        local lsb = r % 2\n        r = math.floor(r / 2)\n        r = r + lsb * math.pow(2, 31)\n    end\n    return r\nend",
    "    local left_mask = 0xffffffff\n    local right_mask = 0xffffffff\n    local left_mask = left_mask << d\n    local right_mask = right_mask >> (32 - d)\n    local left_mask = left_mask & right_mask\n    local right_mask = ~left_mask\n    local left_mask = left_mask & n\n    local right_mask = right_mask & n\n    local left_mask = left_mask << (32 - d)\n    local right_mask = right_mask >> d\n    local left_mask = left_mask | right_mask\n    return left_mask\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "    local d = d % 32\n    return ((n << d) | (n >> (32 - d)))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  local r = n << d\n  local mask = 0xFFFFFFFF\n  return (r & mask) | (r >> 32)\nend",
    "    local mask = 0xFFFFFFFF\n    local left = n << d\n    local right = n >> (32 - d)\n    return (left | right) & mask\nend",
    "    local res = 0\n    for i = 0, 31 do\n        local bit = n & (1 << i)\n        if bit ~= 0 then\n            res = res | (bit << ((i + d) % 32))\n        end\n    end\n    return res\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "  return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "    return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "    local r = 0\n    local m = 0\n    for i = 0, 31 do\n        m = 1 << i\n        if (n & m) ~= 0 then\n            r = r | (m << d)\n        end\n    end\n    return r\nend",
    "  return (n << d) | (n >> (32 - d))\nend"
  ]
}