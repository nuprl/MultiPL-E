{
  "name": "mbpp_799_left_rotate",
  "language": "lua",
  "prompt": "-- Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nlocal function left_rotate(n, d)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = left_rotate\n    lu.assertEquals(candidate(16, 2), 64)\n    lu.assertEquals(candidate(10, 2), 40)\n    lu.assertEquals(candidate(99, 3), 792)\n    lu.assertEquals(candidate(99, 3), 792)\n    lu.assertEquals(candidate(1, 3), 8)\n    lu.assertEquals(candidate(5, 3), 40)\n    lu.assertEquals(candidate(29, 3), 232)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  return (n << d) | (n >> (32 - d))\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "  local d = d % 32\n  local left = n << d\n  local right = n >> (32 - d)\n  return left | right\nend",
    "    local r = n\n    for i = 1, d do\n        local lsb = r % 2\n        r = math.floor(r / 2)\n        r = r + lsb * math.pow(2, 31)\n    end\n    return r\nend",
    "    local left_mask = 0xffffffff\n    local right_mask = 0xffffffff\n    local left_mask = left_mask << d\n    local right_mask = right_mask >> (32 - d)\n    local left_mask = left_mask & right_mask\n    local right_mask = ~left_mask\n    local left_mask = left_mask & n\n    local right_mask = right_mask & n\n    local left_mask = left_mask << (32 - d)\n    local right_mask = right_mask >> d\n    local left_mask = left_mask | right_mask\n    return left_mask\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "    local d = d % 32\n    return ((n << d) | (n >> (32 - d)))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  local r = n << d\n  local mask = 0xFFFFFFFF\n  return (r & mask) | (r >> 32)\nend",
    "    local mask = 0xFFFFFFFF\n    local left = n << d\n    local right = n >> (32 - d)\n    return (left | right) & mask\nend",
    "    local res = 0\n    for i = 0, 31 do\n        local bit = n & (1 << i)\n        if bit ~= 0 then\n            res = res | (bit << ((i + d) % 32))\n        end\n    end\n    return res\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "  return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "    return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "    local r = 0\n    local m = 0\n    for i = 0, 31 do\n        m = 1 << i\n        if (n & m) ~= 0 then\n            r = r | (m << d)\n        end\n    end\n    return r\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local mask = 0xFFFFFFFF\n    local left = n << d\n    local right = n >> (32 - d)\n    return (left & mask) | right\nend",
    "  return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "  return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local res = 0\n    for i = 1, d do\n        res = res * 2 + n % 2\n        n = math.floor(n / 2)\n    end\n    return res\nend",
    "    local r = n\n    for i = 1, d do\n        local lsb = r % 2\n        r = math.floor(r / 2)\n        r = r + lsb * (2 ^ 31)\n    end\n    return r\nend",
    "  local left = n << d\n  local right = n >> (32 - d)\n  return left | right\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local mask = 0xFFFFFFFF\n    local left = bit32.lshift(n, d)\n    local right = bit32.rshift(n, 32 - d)\n    return bit32.band(left + right, mask)\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "    return bit32.lrotate(n, d)\nend",
    "    local b = math.floor(math.log(n, 2)) + 1\n    local mask = math.pow(2, b) - 1\n    return ((n << d) & mask) | (n >> (b - d))\nend",
    "    local mask = 0xFFFFFFFF\n    local left_mask = mask << d\n    local right_mask = mask >> (32 - d)\n    return ((n & left_mask) >> (32 - d)) | ((n & right_mask) << d)\nend",
    "    -- n = n & 0xFFFFFFFF\n    local r = n\n    for i = 1, d do\n        local lsb = r & 1\n        r = r >> 1\n        if lsb == 1 then\n            r = r | 0x80000000\n        end\n    end\n    return r\nend",
    "    return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local n_bits = 32\n    return bit.bor(bit.lshift(n, d), bit.rshift(n, n_bits - d))\nend",
    "\tlocal left = n << d\n\tlocal right = n >> (32 - d)\n\treturn left | right\nend",
    "    local r = n\n    for i = 1, d do\n        r = bit.lshift(r, 1) + bit.rshift(r, 31)\n    end\n    return r\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "  return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "    local low = n % (2^d)\n    local high = n - low\n    return (low * (2^(32-d))) + high\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local mask = 0xFFFFFFFF\n    local left = n << d\n    local right = n >> (32 - d)\n    return (left & mask) | (right & mask)\nend",
    "  local d = d % 32\n  return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "    local r = n\n    for i = 1, d do\n        r = (r << 1) | (r >> 31)\n    end\n    return r\nend",
    "    return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "  return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  local r = n\n  for i = 1, d do\n    r = bit.lshift(r, 1)\n    r = bit.bor(r, bit.band(n, 1))\n    n = bit.rshift(n, 1)\n  end\n  return r\nend",
    "  return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "    local n_bits = 32\n    return ((n << d) | (n >> (n_bits - d))) & (2^n_bits - 1)\nend",
    "    return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "  local mask = 0xffffffff\n  return bit32.band(n, mask) * 2^d + bit32.rshift(n, 32-d)\nend",
    "    return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "    local l = math.floor(math.log(n) / math.log(2)) + 1\n    return bit.lshift(n, d) % bit.lshift(1, l)\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "  return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  local d = d % 32\n  return (n << d) | (n >> (32 - d))\nend",
    "    local r = n >> (32 - d)\n    local l = n << d\n    return l | r\nend",
    "    local mask = 0xffffffff\n    local left = bit32.lshift(n, d)\n    local right = bit32.rshift(n, 32 - d)\n    return bit32.band(left + right, mask)\nend",
    "    local r = n\n    for i = 1, d do\n        local lsb = r % 2\n        r = math.floor(r / 2)\n        r = r + lsb * (2 ^ 31)\n    end\n    return r\nend",
    "    local r = n\n    for i = 1, d do\n        r = r * 2\n        if r > 2^32 then\n            r = r - 2^32\n        end\n    end\n    return r\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  local left = n << d\n  local right = n >> (32 - d)\n  return left | right\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local left_mask = 0xFFFFFFFF\n    local right_mask = 0xFFFFFFFF\n    left_mask = left_mask << d\n    right_mask = right_mask >> (32 - d)\n    right_mask = bit.bnot(right_mask)\n    local left_part = bit.band(n, left_mask)\n    local right_part = bit.band(n, right_mask)\n    left_part = bit.rshift(left_part, 32 - d)\n    right_part = bit.lshift(right_part, d)\n    local result = bit.bor(left_part, right_part)\n    return result\nend",
    "  return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "    return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "    local b = math.floor(math.log(n, 2)) + 1\n    local mask = math.pow(2, b) - 1\n    return bit32.band(bit32.lshift(n, d), mask) + bit32.rshift(n, b - d)\nend",
    "\treturn bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "    local x = n & 0xFFFFFFFF\n    local y = x << d\n    local z = y & 0xFFFFFFFF\n    return z\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local mask = 0xFFFFFFFF\n    local left = bit.lshift(n, d)\n    local right = bit.rshift(n, 32 - d)\n    return bit.bor(left, right)\nend",
    "    local left = n << d\n    local right = n >> (32 - d)\n    return left | right\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "  local low_bits = n % (2^d)\n  local high_bits = n - low_bits\n  return high_bits * 2 + low_bits\nend",
    "    return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "    local r = n\n    for i = 1, d do\n        r = bit.lshift(r, 1) + bit.rshift(r, 31)\n    end\n    return r\nend",
    "    local r = n\n    for i = 1, d do\n        r = bit.lshift(r, 1)\n        r = bit.bor(r, bit.band(n, 1))\n        n = bit.rshift(n, 1)\n    end\n    return r\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "    local mask = (2^d - 1)\n    local low = n & mask\n    local high = n & ~mask\n    return (low << (32 - d)) | (high >> d)\nend",
    "    local low_mask = 2^d - 1\n    local high_mask = 2^32 - low_mask\n    local low_bits = n & low_mask\n    local high_bits = n & high_mask\n    return (low_bits << (32 - d)) | (high_bits >> d)\nend",
    "    local mask = 0xFFFFFFFF\n    local left = bit32.lshift(n, d)\n    local right = bit32.rshift(n, 32 - d)\n    return bit32.band(left + right, mask)\nend",
    "    local r = n\n    for i = 1, d do\n        r = bit.lshift(r, 1) + bit.rshift(r, 31)\n    end\n    return r\nend",
    "    local r = n\n    for i = 1, d do\n        r = bit32.lrotate(r, 1)\n    end\n    return r\nend",
    "  local high = n >> (32 - d)\n  local low = n << d\n  return low | high\nend",
    "  return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "    local mask = 0xFFFFFFFF\n    local left = n << d\n    local right = n >> (32 - d)\n    return (left & mask) | (right & mask)\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local high_bits = n >> (32 - d)\n    local low_bits = n << d\n    return low_bits | high_bits\nend",
    "    return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "    local b = math.floor(math.log(n, 2)) + 1\n    d = d % b\n    local mask = math.pow(2, b) - 1\n    local left = n << d\n    local right = n >> (b - d)\n    return (left | right) & mask\nend",
    "  local l = math.floor(math.log(n, 2))\n  local mask = 2^l - 1\n  local r = n >> d\n  local l = n << (32 - d)\n  return (r & mask) | (l & mask)\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local l = math.floor(math.log(n, 2))\n    local mask = math.pow(2, l) - 1\n    local left = n >> (32 - d)\n    local right = n & mask\n    return (left | right) << d\nend",
    "    local d = d % 32\n    local low = bit.lshift(n, d)\n    local high = bit.rshift(n, 32 - d)\n    return bit.bor(low, high)\nend",
    "  local left_mask = 0xFFFFFFFF\n  local right_mask = 0xFFFFFFFF\n  left_mask = left_mask << d\n  right_mask = right_mask >> (32 - d)\n  right_mask = bit.bnot(right_mask)\n  local left = bit.band(n, left_mask)\n  local right = bit.band(n, right_mask)\n  left = bit.rshift(left, 32 - d)\n  right = bit.lshift(right, d)\n  return bit.bor(left, right)\nend",
    "    local d = d % 32\n    local n1 = n << d\n    local n2 = n >> (32 - d)\n    return n1 | n2\nend",
    "  return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local left_mask = 0xFFFFFFFF\n    local right_mask = left_mask << d\n    local left = n & left_mask\n    local right = n & right_mask\n    return left << d | right >> (32 - d)\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local left_mask = 0xFFFFFFFF\n    local right_mask = left_mask << d\n    local right_bits = bit.band(n, right_mask)\n    local left_bits = bit.rshift(n, d)\n    return bit.bor(left_bits, right_bits)\nend",
    "  local left = n << d\n  local right = n >> (32 - d)\n  return left | right\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "  local mask = 0xFFFFFFFF\n  local left_mask = mask << d\n  local right_mask = mask >> (32 - d)\n  return ((n & left_mask) >> (32 - d)) | ((n & right_mask) << d)\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    return bit32.lshift(n, d) + bit32.rshift(n, 32 - d)\nend",
    "  return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "    return bit32.lrotate(n, d)\nend",
    "    local left = n << d\n    local right = n >> (32 - d)\n    return left | right\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  local r = n\n  for i = 1, d do\n    local lsb = r % 2\n    r = math.floor(r / 2)\n    r = r + lsb * math.pow(2, 31)\n  end\n  return r\nend",
    "    return ((n << d) | (n >> (32 - d)))\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local left = n << d\n    local right = n >> (32 - d)\n    return left | right\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local mask = 0xFFFFFFFF\n    local left_mask = mask << d\n    local right_mask = mask >> (32 - d)\n    return (n & left_mask) >> (32 - d) | (n & right_mask) << d\nend",
    "    local r = n\n    local i = 0\n    while i < d do\n        r = bit.lshift(r, 1)\n        if bit.band(r, 0x100000000) ~= 0 then\n            r = bit.bor(r, 0x1)\n        end\n        i = i + 1\n    end\n    return r\nend",
    "    local d = d % 32\n    local mask = (2^32 - 1) - ((2^d - 1) * 2^(32 - d))\n    return (n * 2^d) + (n & mask) / 2^d\nend",
    "    local low_bits = n % (2^d)\n    local high_bits = n - low_bits\n    return high_bits * 2 + low_bits\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "\treturn bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "    return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "    local low = n % (2^d)\n    local high = n - low\n    return low * 2^(32-d) + high\nend",
    "    return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "    local d = d % 32\n    return (n << d) | (n >> (32 - d))\nend",
    "    local mask = 0xFFFFFFFF\n    local d = d % 32\n    local n_left = bit.lshift(n, d)\n    local n_right = bit.rshift(n, 32 - d)\n    return bit.bor(n_left, n_right)\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "  local r = n % (2^d)\n  return r * (2^(32-d)) + n / (2^d)\nend",
    "    return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "    local mask = 0xFFFFFFFF\n    local left = bit32.lshift(n, d)\n    local right = bit32.rshift(n, 32 - d)\n    return bit32.band(left + right, mask)\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local d = d % 32\n    return (n << d) | (n >> (32 - d))\nend",
    "  return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "    local left = n << d\n    local right = n >> (32 - d)\n    return left | right\nend",
    "    local mask = 0xffffffff\n    local l = n & mask\n    local r = n & ~mask\n    return (l << d) | (r >> (32 - d))\nend",
    "  local mask = 2^32 - 1\n  return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "    local mask = 2^32 - 1\n    local left = bit.lshift(n, d)\n    local right = bit.rshift(n, 32 - d)\n    return bit.band(left + right, mask)\nend",
    "  return n * 2 ^ d % 2 ^ 32\nend",
    "  local low_bits = n % (2^d)\n  local high_bits = n - low_bits\n  return (low_bits * 2^(32-d)) + high_bits\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "    local r = n\n    for i = 1, d do\n        r = bit32.lrotate(r, 1)\n    end\n    return r\nend",
    "    local left_mask = 0xFFFFFFFF << d\n    local right_mask = 0xFFFFFFFF >> (32 - d)\n    return (n & left_mask) | (n & right_mask)\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "    local left_mask = 0xFFFFFFFF\n    local right_mask = left_mask << d\n    local left = n & right_mask\n    local right = n & left_mask\n    return (left >> (32 - d)) | (right << d)\nend",
    "  return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    return bit32.lshift(n, d) + bit32.rshift(n, 32 - d)\nend",
    "  local mask = 0xFFFFFFFF\n  local left = bit.lshift(n, d)\n  local right = bit.rshift(n, 32 - d)\n  return bit.bor(left, right)\nend",
    "    local mask = 2^32 - 1\n    return (n << d) & mask\nend",
    "    local left = n << d\n    local right = n >> (32 - d)\n    return left | right\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local high = bit32.lshift(n, d)\n    local low = bit32.rshift(n, 32 - d)\n    return bit32.bor(high, low)\nend",
    "  local mask = 0xFFFFFFFF\n  local mask_d = mask >> (32 - d)\n  local mask_32_d = mask - mask_d\n  return ((n << d) & mask) | ((n & mask_32_d) >> (32 - d))\nend",
    "    local mask = 0xFFFFFFFF\n    local low_mask = bit.lshift(mask, d)\n    local high_mask = bit.rshift(mask, 32 - d)\n    local low_bits = bit.band(n, low_mask)\n    local high_bits = bit.band(n, high_mask)\n    return bit.bor(bit.rshift(low_bits, d), bit.lshift(high_bits, 32 - d))\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "    local low = n % (2^d)\n    local high = n - low\n    return (low * 2^(32-d)) + high\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "    local r = n\n    for i = 1, d do\n        r = bit.lshift(r, 1) + bit.rshift(r, 31)\n    end\n    return r\nend",
    "    local d = d % 32\n    local mask = 0xFFFFFFFF\n    local left = n << d\n    local right = n >> (32 - d)\n    return (left & mask) | (right & mask)\nend",
    "    local mask = 0xffffffff\n    local l = n << d\n    local r = n >> (32 - d)\n    return (l & mask) | r\nend",
    "  return bit.bor(bit.lshift(n, d), bit.rshift(n, 32 - d))\nend",
    "    local b = math.floor(math.log(n, 2)) + 1\n    return bit.bor(bit.lshift(n, d), bit.rshift(n, b - d))\nend",
    "  local r = n\n  for i = 1, d do\n    r = bit32.lrotate(r, 1)\n  end\n  return r\nend",
    "    local mask = math.pow(2, d) - 1\n    local left = n >> (32 - d)\n    local right = n & mask\n    return (left | right) << d\nend",
    "  local r = n\n  for i = 1, d do\n    local lsb = r % 2\n    r = math.floor(r / 2)\n    r = r + lsb * math.pow(2, 31)\n  end\n  return r\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "  local mask = 0xffffffff\n  local d = d % 32\n  return ((n << d) & mask) | (n >> (32 - d))\nend",
    "  local l = n & 0xFFFFFFFF\n  local r = n >> 32\n  local lr = l << d\n  local rr = r << d\n  local lrr = lr >> 32\n  local rrr = rr >> 32\n  local lrrr = lrr << 32\n  local rrrr = rrr << 32\n  return lrrr | rrrr\nend",
    "    local mask = 0xFFFFFFFF\n    local left_mask = mask << d\n    local right_mask = mask >> (32 - d)\n    return ((n & left_mask) >> (32 - d)) | ((n & right_mask) << d)\nend",
    "    local r = n >> (32 - d)\n    local l = n << d\n    return (l | r) % (2^32)\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend"
  ]
}