{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "lua",
  "prompt": "-- Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlocal function toggle_middle_bits(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_middle_bits\n    lu.assertEquals(candidate(9), 15)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(11), 13)\n    lu.assertEquals(candidate(65), 127)\n    lu.assertEquals(candidate(77), 115)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local mask = 0xFFFFFFFF\n  local first_bit = 0x80000000\n  local last_bit = 0x00000001\n  local first_mask = mask - first_bit\n  local last_mask = mask - last_bit\n  local middle_mask = first_mask - last_mask\n  return n ~ middle_mask\nend",
    "    local mask = 2^(bit.rshift(bit.rshift(n, 1), 1)) - 1\n    return bit.bxor(n, mask)\nend",
    "    local mask = 2^(math.floor(math.log(n, 2)) - 1) - 1\n    return n ^ mask\nend",
    "    local mask = 0xffffffff\n    local first_bit = n & 0x80000000\n    local last_bit = n & 0x1\n    mask = mask & (first_bit | last_bit)\n    return n ^ mask\nend",
    "    local mask = 0x7ffffffe\n    return bit.bxor(n, mask)\nend",
    "  local mask = 0xffffffff\n  local first_bit = n & 0x80000000\n  local last_bit = n & 0x00000001\n  local middle_bits = n & 0x7ffffffe\n  local toggled_middle_bits = middle_bits ^ mask\n  return first_bit | toggled_middle_bits | last_bit\nend",
    "    local mask = 0xffffffff\n    mask = bit32.bnot(mask)\n    mask = bit32.lshift(mask, 1)\n    mask = bit32.bor(mask, 1)\n    return bit32.bxor(n, mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit.bxor(first_bit, mask)\n    local last_mask = bit.bxor(last_bit, mask)\n    local mask = bit.bor(first_mask, last_mask)\n    local result = bit.bxor(n, mask)\n    return result\nend",
    "    local mask = 0x7FFFFFFF\n    local result = bit.bxor(n, mask)\n    return result\nend",
    "\tlocal mask = (1 << (n.size - 2)) - 1\n\treturn bit.bxor(n, mask)\nend",
    "  local mask = 0x7ffffffe\n  return bit32.bxor(n, mask)\nend",
    "    return bit32.bxor(n, bit32.lshift(2^(bit32.extract(n, 2, 30)-1), 1))\nend",
    "    local mask = 0xffffffffffffffff\n    local first_bit = 0x8000000000000000\n    local last_bit = 0x0000000000000001\n    local mask = bit.bxor(mask, first_bit)\n    mask = bit.bxor(mask, last_bit)\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0xffffffff\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    mask = mask & ~first_bit\n    mask = mask & ~last_bit\n    return bit.bxor(n, mask)\nend",
    "\tlocal mask = 0xFFFFFFFF\n\tlocal first_bit = 0x80000000\n\tlocal last_bit = 0x00000001\n\tlocal first_last_mask = bit.bor(first_bit, last_bit)\n\tlocal middle_mask = bit.bxor(mask, first_last_mask)\n\treturn bit.bxor(n, middle_mask)\nend",
    "    local mask = 0x7FFFFFFE\n    return bit.bxor(n, mask)\nend",
    "    local first_bit = n & 1\n    local last_bit = n & (1 << 31)\n    local mask = 0x55555555\n    return (n ^ mask) | (first_bit << 31) | last_bit\nend",
    "    local mask = 0xffffffff\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    return n ~ middle_mask\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local mask = mask - first_bit - last_bit\n    return bit.bxor(n, mask)\nend",
    "    local mask = 2^(n.size - 2) - 1\n    return n:xor(mask)\nend",
    "    local mask = 0xffffffff\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit32.bor(first_bit, last_bit)\n    local middle_mask = bit32.bxor(mask, first_mask)\n    return bit32.bxor(n, middle_mask)\nend",
    "  local mask = 0x7FFFFFFE\n  return bit.bxor(n, mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    return n ~ middle_mask\nend",
    "\tlocal mask = 0xffffffff\n\tlocal first_bit = n & 1\n\tlocal last_bit = n & (1 << 31)\n\tmask = mask >> 1\n\tmask = mask << 1\n\tmask = mask | 1\n\tmask = mask & n\n\tmask = mask ^ 0x55555555\n\tmask = mask | (first_bit << 31)\n\tmask = mask | last_bit\n\treturn mask\nend",
    "    local mask = 0x7FFFFFFF\n    local result = n ^ mask\n    return result\nend",
    "    local mask = 0x7FFFFFFF\n    return bit32.bxor(n, mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 1\n    local last_bit = 1\n    while (n & first_bit) == 0 do\n        first_bit = first_bit << 1\n    end\n    while (n & last_bit) ~= 0 do\n        last_bit = last_bit << 1\n    end\n    last_bit = last_bit >> 1\n    mask = mask - (first_bit | last_bit)\n    return n ^ mask\nend",
    "  local mask = 0x7fffffff\n  return bit.bxor(n, mask)\nend",
    "    local mask = 0xffffffff\n    local first_bit = bit.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit.bor(first_bit, last_bit)\n    local middle_mask = bit.bxor(mask, first_mask)\n    return bit.bxor(n, middle_mask)\nend",
    "    local mask = 0xffffffff\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local mask = bit32.bxor(mask, first_bit)\n    mask = bit32.bxor(mask, last_bit)\n    return bit32.bxor(n, mask)\nend",
    "    local mask = 0x7FFFFFFF\n    local mask2 = 0x80000000\n    local mask3 = 0x00000001\n    local mask4 = 0xFFFFFFFE\n    local mask5 = 0x7FFFFFFE\n    local mask6 = 0xFFFFFFFC\n    local mask7 = 0x00000003\n    local mask8 = 0xFFFFFFFC\n    local mask9 = 0x7FFFFFFD\n    local mask10 = 0xFFFFFFFA\n    local mask11 = 0x00000005\n    local mask12 = 0xFFFFFFFA\n    local mask13 = 0x7FFFFFFB\n    local mask14 = 0xFFFFFFF8\n    local mask15 = 0x00000007\n    local mask16 = 0xFFFFFFF8\n    local mask17 = 0x7FFFFFF7\n    local mask18 = 0xFFFFFFF0\n    local mask19 = 0x0000000F\n    local mask20 = 0xFFFFFFF0\n    local mask21 = 0x7FFFFFEF\n    local mask22 = 0xFFFFFFE0\n    local mask23 = 0x0000001F\n    local mask24 = 0xFFFFFFE0\n    local mask25 = 0x7FFFFFDF\n    local mask26 = 0xFFFFFFC0\n    local mask27 = 0x0000003F\n    local mask28 = 0xFFFFFFC0\n    local mask29 = 0x7FFFFF9F\n    local mask30 = 0xFFFFFF80\n    local mask31 = 0x0000007F\n    local mask32 = 0xFFFFFF80\n    local mask33 = 0x7FFFFF7F\n    local mask34 = 0xFFFFFF00\n    local mask35 = 0x000000FF\n    local mask36 = 0xFFFFFF00\n    local mask37 = 0x7FFFFEFF\n    local mask38 = 0xFFFFFE00\n    local mask39 = 0x000001FF\n    local mask40 = 0xFFFFFE00\n    local mask41 = 0x7FFFFBFF\n    local mask42 = 0xFFFFFC00\n    local mask43 = 0x000003FF\n    local mask44 = 0xFFFFFC00\n    local mask45 = 0x7FFFF7FF\n    local mask",
    "  local mask = 0xFFFFFFFF\n  local first_bit = 0x80000000\n  local last_bit = 0x00000001\n  local first_mask = mask - first_bit\n  local last_mask = mask - last_bit\n  local middle_mask = first_mask - last_mask\n  local middle_bits = n & middle_mask\n  local toggled_middle_bits = middle_bits ~ middle_mask\n  return n & first_mask & last_mask | toggled_middle_bits\nend",
    "    local mask = 0xffffffff\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit32.bxor(mask, first_bit)\n    local last_mask = bit32.bxor(mask, last_bit)\n    local middle_mask = bit32.band(first_mask, last_mask)\n    return bit32.bxor(n, middle_mask)\nend",
    "  local mask = 0xFFFFFFFF\n  local first_bit = 0x80000000\n  local last_bit = 0x00000001\n  local first_mask = mask - first_bit\n  local last_mask = mask - last_bit\n  local middle_mask = first_mask - last_mask\n  local middle_bits = n & middle_mask\n  local toggled_middle_bits = ~middle_bits & middle_mask\n  return n & first_mask & last_mask | toggled_middle_bits\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit32.bor(first_bit, last_bit)\n    local middle_mask = bit32.bxor(mask, first_mask)\n    return bit32.bxor(n, middle_mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit32.bxor(first_bit, mask)\n    local last_mask = bit32.bxor(last_bit, mask)\n    local result = bit32.bxor(n, first_mask)\n    result = bit32.bxor(result, last_mask)\n    return result\nend",
    "    local mask = 0xFFFFFFFF\n    local mask1 = mask - (1 << 31)\n    local mask2 = mask - (1 << 0)\n    local mask = mask1 & mask2\n    local result = n ^ mask\n    return result\nend",
    "    local mask = 0xffffffff\n    mask = bit.bnot(bit.lshift(mask, 2))\n    mask = bit.band(mask, 0xfffffffc)\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0xffffffff\n    local first_bit = 0x80000000\n    local last_bit = 0x1\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    local middle_bits = n & middle_mask\n    local toggled_middle_bits = middle_bits ^ middle_mask\n    local result = n & (first_mask + last_mask) + toggled_middle_bits\n    return result\nend",
    "  local mask = 0xffffffff\n  local first_bit = n & 0x1\n  local last_bit = n & 0x80000000\n  mask = mask >> 1\n  mask = mask << 1\n  mask = mask | first_bit\n  mask = mask | last_bit\n  return n ^ mask\nend",
    "    local mask = 0xffffffff\n    mask = bit32.lshift(mask, 2)\n    mask = bit32.rshift(mask, 2)\n    return bit32.bxor(n, mask)\nend",
    "  local mask = 0xFFFFFFFF\n  local mask = bit.bnot(bit.lshift(mask, 32 - n))\n  local mask = bit.bnot(bit.rshift(mask, n))\n  return bit.bxor(mask, n)\nend",
    "    local mask = 0xffffffff\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    local middle_bits = n & middle_mask\n    local toggled_middle_bits = middle_bits ^ middle_mask\n    local result = n & (first_mask + last_mask) + toggled_middle_bits\n    return result\nend",
    "  local mask = 0x7ffffffe\n  return bit32.bxor(n, mask)\nend",
    "  local mask = 0xffffffffffffffff\n  local first_bit = 0x8000000000000000\n  local last_bit = 0x0000000000000001\n  local first_mask = mask ^ first_bit\n  local last_mask = mask ^ last_bit\n  local middle_mask = first_mask ^ last_mask\n  return bit.bxor(n, middle_mask)\nend",
    "    local mask = 0xffffffff\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    return bit32.bxor(n, middle_mask)\nend",
    "  local mask = 0xffffffff\n  local first_bit = bit32.lshift(1, 31)\n  local last_bit = 1\n  local first_mask = bit32.bxor(first_bit, mask)\n  local last_mask = bit32.bxor(last_bit, mask)\n  local middle_mask = bit32.bor(first_mask, last_mask)\n  return bit32.bxor(n, middle_mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = bit32.bnot(first_bit)\n    local last_mask = bit32.bnot(last_bit)\n    local middle_mask = bit32.band(first_mask, last_mask)\n    local middle_bits = bit32.band(n, middle_mask)\n    local toggled_middle_bits = bit32.bxor(middle_bits, middle_mask)\n    return bit32.bor(first_bit, toggled_middle_bits, last_bit)\nend",
    "    local first_bit = n & 1\n    local last_bit = n & (1 << 31)\n    local mask = 0xFFFFFFFF\n    local result = n ^ mask\n    result = result | first_bit\n    result = result | last_bit\n    return result\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit.lshift(1, 31)\n    local last_bit = 1\n    local mask = bit.bxor(mask, first_bit)\n    mask = bit.bxor(mask, last_bit)\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local mask = bit32.bxor(mask, first_bit)\n    mask = bit32.bxor(mask, last_bit)\n    return bit32.bxor(n, mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    local middle_bits = n & middle_mask\n    local toggled_middle_bits = middle_bits ^ middle_mask\n    return n & first_mask | toggled_middle_bits | n & last_mask\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = n & 1\n    local last_bit = n & (1 << 31)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask &",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit32.bxor(first_bit, mask)\n    local last_mask = bit32.bxor(last_bit, mask)\n    local middle_mask = bit32.band(first_mask, last_mask)\n    local result = bit32.bxor(n, middle_mask)\n    return result\nend",
    "    local mask = 0xFFFFFFFF\n    local left_mask = mask << 2\n    local right_mask = mask >> 2\n    local left_mask = left_mask & right_mask\n    local left_mask = left_mask & n\n    local left_mask = left_mask >> 2\n    local right_mask = right_mask & n\n    local right_mask = right_mask << 2\n    local result = left_mask | right_mask\n    return result\nend",
    "    local mask = 2^(bit.rshift(bit.tobit(n), 1)) - 1\n    return bit.bxor(n, mask)\nend",
    "  local mask = 0x7ffffffe\n  return bit32.bxor(n, mask)\nend",
    "    local mask = (2^(n.size-2)) - 1\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0x7FFFFFFE\n    return bit.bxor(n, mask)\nend",
    "    local first_bit = n & 1\n    local last_bit = n & (1 << 31)\n    n = n ^ (n & 0x7FFFFFFE)\n    n = n | first_bit\n    n = n | last_bit\n    return n\nend",
    "    local mask = 0xffffffff\n    local first_bit = n & 0x80000000\n    local last_bit = n & 0x00000001\n    mask = mask & ~(first_bit | last_bit)\n    return n ^ mask\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    local middle_bits = n & middle_mask\n    local middle_bits_toggled = middle_bits ^ middle_mask\n    local n_toggled = n ^ middle_bits_toggled\n    return n_toggled\nend",
    "    local first_bit = n & 1\n    local last_bit = n & (1 << 31)\n    local mask = 0x7ffffffe\n    return (n ^ mask) | (first_bit << 31) | last_bit\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask & last_mask\n    return n ~ middle_mask\nend",
    "  local mask = 0xffffffff\n  local first_bit = bit32.lshift(1, 31)\n  local last_bit = 1\n  local mask = bit32.bxor(mask, first_bit)\n  mask = bit32.bxor(mask, last_bit)\n  return bit32.bxor(n, mask)\nend",
    "  local mask = 0x7ffffffe\n  return bit.bxor(n, mask)\nend",
    "    local mask = 0x7ffffffe\n    local result = n ^ mask\n    return result\nend",
    "    local mask = 0xfffffffffffffffc\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0xffffffff\n    local first_bit = 0x80000000\n    local last_bit = 0x1\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask & last_mask\n    return n ~ middle_mask\nend",
    "    local mask = 0xffffffff\n    local first_bit = bit.lshift(1, 31)\n    local last_bit = 1\n    local mask = bit.bxor(mask, first_bit)\n    local mask = bit.bxor(mask, last_bit)\n    local result = bit.bxor(n, mask)\n    return result\nend",
    "  local mask = 0xFFFFFFFF\n  local first_bit = n & 0x80000000\n  local last_bit = n & 0x00000001\n  mask = mask - (1 << 31)\n  mask = mask - 1\n  n = n ^ mask\n  n = n | first_bit\n  n = n | last_bit\n  return n\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit32.bxor(first_bit, mask)\n    local last_mask = bit32.bxor(last_bit, mask)\n    local middle_mask = bit32.bxor(first_mask, last_mask)\n    return bit32.bxor(n, middle_mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit32.bxor(mask, first_bit)\n    local last_mask = bit32.bxor(mask, last_bit)\n    local middle_mask = bit32.band(first_mask, last_mask)\n    local result = bit32.bxor(n, middle_mask)\n    return result\nend",
    "    local mask = 0xffffffff\n    local first_bit = n & 1\n    local last_bit = n & (1 << 31)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 2)\n    mask = mask & (mask << 2)\n    n = n ^ mask\n    n = n | first_bit\n    n = n | last_bit\n    return n\nend",
    "    local mask = 0xFFFFFFFF\n    mask = bit.bnot(bit.lshift(mask, 1))\n    mask = bit.band(mask, bit.rshift(mask, 1))\n    return bit.bxor(n, mask)\nend",
    "\tlocal mask = (2^(n.bit_length - 2) - 1) << 1\n\treturn n ^ mask\nend",
    "  local mask = 0xFFFFFFFF\n  local first_bit = bit32.lshift(1, 31)\n  local last_bit = 1\n  local mask_without_first_bit = bit32.bxor(mask, first_bit)\n  local mask_without_first_and_last_bit = bit32.bxor(mask_without_first_bit, last_bit)\n  return bit32.bxor(n, mask_without_first_and_last_bit)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local result = bit32.bxor(n, bit32.band(mask, bit32.bnot(first_bit)))\n    result = bit32.bxor(result, bit32.band(mask, bit32.bnot(last_bit)))\n    return result\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit32.bxor(first_bit, mask)\n    local last_mask = bit32.bxor(last_bit, mask)\n    local middle_mask = bit32.bxor(first_mask, last_mask)\n    return bit32.bxor(n, middle_mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit.band(n, 0x80000000)\n    local last_bit = bit.band(n, 0x00000001)\n    local middle_bits = bit.band(n, bit.bnot(mask))\n    return bit.bor(first_bit, middle_bits, last_bit)\nend",
    "    local mask = 2^(bit.rshift(bit.rshift(n, 1), 1)) - 1\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0x7fffffff\n    return bit.bxor(n, mask)\nend",
    "  local mask = 0xFFFFFFFF\n  local first_bit = 0x80000000\n  local last_bit = 0x00000001\n  local first_mask = mask - first_bit\n  local last_mask = mask - last_bit\n  local middle_mask = first_mask - last_mask\n  return bit32.bxor(n, middle_mask)\nend",
    "  local mask = 0x7FFFFFFF\n  local result = bit.bxor(n, mask)\n  return result\nend",
    "    local mask = 0xffffffffffffffff\n    local first_bit = n & 0x8000000000000000\n    local last_bit = n & 0x0000000000000001\n    mask = mask - first_bit - last_bit\n    return n ^ mask\nend",
    "    local mask = (2^(math.floor(math.log(n, 2)) - 1) - 1) << 1\n    return bit32.bxor(n, mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local mask = mask - first_bit - last_bit\n    return bit.bxor(n, mask)\nend",
    "  local first_bit = bit32.extract(n, 1)\n  local last_bit = bit32.extract(n, 32)\n  local mask = bit32.lshift(1, 32) - 1\n  mask = bit32.bxor(mask, 3)\n  local result = bit32.bxor(n, mask)\n  result = bit32.replace(result, first_bit, 1)\n  result = bit32.replace(result, last_bit, 32)\n  return result\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask ^ first_bit\n    local last_mask = mask ^ last_bit\n    local middle_mask = first_mask ^ last_mask\n    return n ^ middle_mask\nend",
    "  local first_bit = n % 2\n  local last_bit = math.floor(n / 2) % 2\n  local mask = math.pow(2, math.floor(math.log(n) / math.log(2))) - 1\n  return (n ^ mask) + (first_bit * math.pow(2, math.floor(math.log(n) / math.log(2)))) + (last_bit * math.pow(2, math.floor(math.log(n) / math.log(2)) - 1))\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = n & 1\n    local last_bit = n & (1 << 31)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 2)\n    mask = mask & (mask << 2)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 2)\n    mask = mask & (mask << 2)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 2)\n    mask = mask & (mask << 2)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 2)\n    mask = mask & (mask << 2)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 2)\n    mask = mask & (mask << 2)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 2)\n    mask = mask & (mask << 2)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 2)\n    mask = mask & (mask << 2)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 2)\n    mask = mask & (mask << 2)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 2)\n    mask = mask & (mask << 2)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 2)\n    mask = mask & (mask << 2)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 2)\n    mask = mask &",
    "  local first_bit = n & 1\n  local last_bit = n & (1 << 31)\n  local mask = 0x7ffffffe\n  return (n ^ mask) | (first_bit << 31) | last_bit\nend",
    "    local mask = 0xffffffff\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    return n ~ middle_mask\nend",
    "  local mask = 0xffffffff\n  local first_bit = 0x80000000\n  local last_bit = 0x00000001\n  local first_mask = mask - first_bit\n  local last_mask = mask - last_bit\n  local middle_mask = first_mask - last_mask\n  local middle_bits = n & middle_mask\n  return n ^ middle_bits\nend",
    "    local mask = 0xffffffff\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local mask = bit32.bxor(mask, first_bit)\n    mask = bit32.bxor(mask, last_bit)\n    return bit32.bxor(n, mask)\nend",
    "    local mask = 0\n    for i = 2, 31 do\n        mask = mask + 2^(i-1)\n    end\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0x7ffffffe\n    return bit32.bxor(n, mask)\nend",
    "    local mask = 2^(math.floor(math.log(n)/math.log(2))-1) - 1\n    return n^mask\nend",
    "    local mask = 0xffffffff\n    local first_bit = bit.lshift(1, 31)\n    local last_bit = 1\n    local mask_first_last = bit.bor(first_bit, last_bit)\n    mask = bit.bxor(mask, mask_first_last)\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = n & 1\n    local last_bit = n & (1 << 31)\n    mask = mask ^ 1\n    mask = mask ^ (1 << 31)\n    return (n ^ mask) | (first_bit << 31) | last_bit\nend",
    "    local mask = 0xffffffff\n    mask = bit32.lshift(mask, 1)\n    mask = bit32.bor(mask, 1)\n    return bit32.bxor(n, mask)\nend",
    "    local mask = 0xffffffffffffffff\n    local first_bit = bit.lshift(1, 63)\n    local last_bit = 1\n    local mask = bit.bxor(first_bit, last_bit)\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0xffffffff\n    local first_bit = 0x80000000\n    local last_bit = 0x1\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    return n ~ middle_mask\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_last_mask = bit.bor(first_bit, last_bit)\n    local middle_mask = bit.bxor(mask, first_last_mask)\n    local middle_bits = bit.band(n, middle_mask)\n    local toggled_middle_bits = bit.bxor(middle_bits, middle_mask)\n    return bit.bor(bit.band(n, first_last_mask), toggled_middle_bits)\nend",
    "  local mask = 0xFFFFFFFF - 0xFFFFFFFC\n  return bit32.bxor(n, mask)\nend",
    "  local mask = 0xFFFFFFFF\n  local first_bit = 0x80000000\n  local last_bit = 0x00000001\n  local first_mask = mask - first_bit\n  local last_mask = mask - last_bit\n  local middle_mask = first_mask - last_mask\n  return bit.bxor(n, middle_mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local result = bit32.bxor(n, bit32.band(mask, bit32.bnot(first_bit)))\n    result = bit32.bxor(result, bit32.band(mask, bit32.bnot(last_bit)))\n    return result\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    local middle_bits = n & middle_mask\n    local toggled_middle_bits = middle_bits ~ middle_mask\n    local result = n & first_mask & last_mask | toggled_middle_bits\n    return result\nend",
    "    local mask = 0x7FFFFFFF\n    local result = n ^ mask\n    return result\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = n & 0x80000000\n    local last_bit = n & 0x00000001\n    mask = mask - (1 << 31)\n    mask = mask - 1\n    mask = mask & n\n    mask = mask ^ 0xFFFFFFFF\n    mask = mask + first_bit + last_bit\n    return mask\nend",
    "    local mask = 0xffffffff\n    local first_bit = bit.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit.bxor(first_bit, mask)\n    local last_mask = bit.bxor(last_bit, mask)\n    local middle_mask = bit.bor(first_mask, last_mask)\n    return bit.bxor(n, middle_mask)\nend",
    "    local mask = 0xffffffff\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    mask = bit32.bxor(mask, first_bit)\n    mask = bit32.bxor(mask, last_bit)\n    return bit32.bxor(n, mask)\nend",
    "  local mask = 0xffffffff\n  local first_bit = bit32.lshift(1, 31)\n  local last_bit = 1\n  local first_mask = bit32.bxor(mask, first_bit)\n  local last_mask = bit32.bxor(mask, last_bit)\n  local middle_mask = bit32.bxor(first_mask, last_mask)\n  return bit32.bxor(n, middle_mask)\nend",
    "    local mask = 0x7ffffffe\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0x7FFFFFFF\n    local result = bit32.bxor(n, mask)\n    return result\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit32.bxor(first_bit, mask)\n    local last_mask = bit32.bxor(last_bit, mask)\n    local middle_mask = bit32.bor(first_mask, last_mask)\n    local result = bit32.bxor(n, middle_mask)\n    return result\nend",
    "\tlocal mask = 0xffffffff\n\tlocal first_bit = n & 0x80000000\n\tlocal last_bit = n & 0x1\n\tlocal middle_bits = n & 0x7ffffffe\n\tlocal result = first_bit | last_bit | (middle_bits ^ mask)\n\treturn result\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit32.bxor(mask, first_bit)\n    local last_mask = bit32.bxor(mask, last_bit)\n    local final_mask = bit32.band(first_mask, last_mask)\n    return bit32.bxor(n, final_mask)\nend",
    "  local mask = 0xFFFFFFFF\n  local first_bit = bit32.band(n, 0x80000000)\n  local last_bit = bit32.band(n, 0x00000001)\n  local middle_bits = bit32.band(n, bit32.bnot(mask))\n  local result = bit32.bor(first_bit, middle_bits, last_bit)\n  return result\nend",
    "    local mask = 0x7FFFFFFF\n    local result = bit.bxor(n, mask)\n    return result\nend",
    "    local mask = 0xffffffff\n    local first_bit = bit.lshift(1, 31)\n    local last_bit = 1\n    local mask = bit.bxor(mask, first_bit)\n    mask = bit.bxor(mask, last_bit)\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = n & 0x80000000\n    local last_bit = n & 0x00000001\n    local middle_bits = n & 0x7FFFFFFE\n    local toggled_middle_bits = middle_bits ^ mask\n    return first_bit | toggled_middle_bits | last_bit\nend",
    "    local mask = (2^(n.size - 2) - 1) << 1\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0x7ffffffe\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0x7FFFFFFF\n    local result = bit32.bxor(n, mask)\n    return result\nend",
    "    local mask = 0xffffffff\n    local first_bit = n & 0x80000000\n    local last_bit = n & 0x00000001\n    mask = mask ^ 0x80000000\n    mask = mask ^ 0x00000001\n    n = n ^ mask\n    n = n | first_bit\n    n = n | last_bit\n    return n\nend",
    "  local mask = 0xffffffff\n  local first_bit = n & 0x80000000\n  local last_bit = n & 0x00000001\n  mask = mask & (first_bit - 1)\n  mask = mask & (last_bit - 1)\n  return n ^ mask\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 1\n    local last_bit = 2^31\n    local result = bit.bxor(n, bit.bor(first_bit, last_bit))\n    result = bit.bxor(result, bit.band(mask, bit.lshift(first_bit, 1)))\n    result = bit.bxor(result, bit.band(mask, bit.rshift(last_bit, 1)))\n    return result\nend",
    "    local mask = 2^(n.size-2)-1\n    return n:xor(mask)\nend",
    "    local mask = 0xffffffff\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local first_last_mask = bit32.bor(first_bit, last_bit)\n    local middle_mask = bit32.bxor(mask, first_last_mask)\n    return bit32.bxor(n, middle_mask)\nend",
    "  local mask = 0xFFFFFFFF\n  local first_bit = n & 0x80000000\n  local last_bit = n & 0x00000001\n  local middle_bits = n & 0x7FFFFFFE\n  middle_bits = middle_bits ~ mask\n  return first_bit | middle_bits | last_bit\nend",
    "\tlocal mask = 0xFFFFFFFF\n\tlocal first_bit = bit32.lshift(1, 31)\n\tlocal last_bit = 1\n\tlocal first_mask = bit32.bxor(first_bit, mask)\n\tlocal last_mask = bit32.bxor(last_bit, mask)\n\tlocal middle_mask = bit32.band(first_mask, last_mask)\n\tlocal middle_bits = bit32.band(n, middle_mask)\n\tlocal toggled_bits = bit32.bxor(middle_bits, middle_mask)\n\treturn bit32.bor(toggled_bits, first_bit, last_bit)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    mask = mask - first_bit - last_bit\n    return n ~ mask\nend",
    "    local mask = 0xffffffff\n    local first_bit = bit.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit.bxor(mask, first_bit)\n    local last_mask = bit.bxor(mask, last_bit)\n    local middle_mask = bit.band(first_mask, last_mask)\n    return bit.bxor(n, middle_mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = n & 1\n    local last_bit = n & (1 << 31)\n    mask = mask ^ 1\n    mask = mask ^ (1 << 31)\n    return (n ^ mask) | (first_bit << 31) | (last_bit >> 31)\nend",
    "    local mask = 0xffffffff\n    local mask1 = mask - (1 << 31)\n    local mask2 = mask - (1 << 0)\n    local mask3 = mask1 & mask2\n    return n ^ mask3\nend",
    "    local mask = 0x7FFFFFFF\n    local result = bit32.bxor(n, mask)\n    return result\nend",
    "    local mask = 0xffffffff\n    local first_bit = n & 1\n    local last_bit = n & (1 << 31)\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 1)\n    mask = mask &",
    "    local mask = (2^(n.size-2)) - 1\n    return n:xor(mask):lshift(1):rshift(1)\nend",
    "    local first_bit = n & 1\n    local last_bit = n & (1 << 31)\n    local mask = 0xffffffff\n    mask = mask & (mask << 1)\n    mask = mask & (mask >> 1)\n    mask = mask & (mask >> 31)\n    mask = mask & (mask << 31)\n    local result = n ^ mask\n    result = result | first_bit\n    result = result | last_bit\n    return result\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit32.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit32.bxor(first_bit, mask)\n    local last_mask = bit32.bxor(last_bit, mask)\n    local middle_mask = bit32.band(first_mask, last_mask)\n    return bit32.bxor(n, middle_mask)\nend",
    "  local mask = 0xFFFFFFFF\n  local first_bit = n & 0x80000000\n  local last_bit = n & 0x00000001\n  local middle_bits = n & 0x7FFFFFFE\n  local result = first_bit | (middle_bits ^ mask) | last_bit\n  return result\nend",
    "    local mask = 0xFFFFFFFFFFFFFFFF\n    local first_bit = 0x8000000000000000\n    local last_bit = 0x0000000000000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    return bit.bxor(n, middle_mask)\nend",
    "  local mask = 2^(math.floor(math.log(n)/math.log(2))-1) - 1\n  return n ^ mask\nend",
    "    local mask = 0xffffffff\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    local middle_bits = n & middle_mask\n    local middle_bits_toggled = middle_bits ~ middle_mask\n    return n & first_mask & last_mask | middle_bits_toggled\nend",
    "  local mask = 0xffffffff\n  local first_bit = 0x80000000\n  local last_bit = 0x00000001\n  local first_mask = mask - first_bit\n  local last_mask = mask - last_bit\n  local middle_mask = first_mask - last_mask\n  local middle_bits = n & middle_mask\n  local middle_bits_toggled = middle_bits ~ middle_mask\n  return n ^ middle_bits_toggled\nend",
    "    local mask = 0xffffffff\n    local first_bit = n & 0x80000000\n    local last_bit = n & 0x00000001\n    mask = mask & (first_bit | last_bit)\n    n = n & (mask - 1)\n    n = n ^ (mask - 1)\n    return n\nend",
    "    local mask = 0x7FFFFFFE\n    return bit.bxor(n, mask)\nend",
    "    local mask = (1 << (n.bit_length - 2)) - 1\n    return n ^ mask\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask & last_mask\n    local middle_bits = n & middle_mask\n    return n ^ middle_bits\nend",
    "    local mask = 0xffffffff\n    local first_bit = n & 0x80000000\n    local last_bit = n & 0x00000001\n    mask = mask & ~first_bit\n    mask = mask & ~last_bit\n    return n ^ mask\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = n & 0x80000000\n    local last_bit = n & 0x00000001\n    mask = mask & ~first_bit\n    mask = mask & ~last_bit\n    return n ^ mask\nend",
    "    local mask = 0xFFFFFFFC\n    return n ~ mask\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    return n ~ middle_mask\nend",
    "    local result = 0\n    local i = 0\n    while n > 0 do\n        local bit = n % 2\n        if i ~= 0 and i ~= 31 then\n            bit = bit == 0 and 1 or 0\n        end\n        result = result + bit * 2^i\n        i = i + 1\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask & last_mask\n    local middle_bits = n & middle_mask\n    local middle_bits_toggled = middle_bits ~ middle_mask\n    return n & (first_bit | last_bit) | middle_bits_toggled\nend",
    "    local mask = 2^(32-2) - 1\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = n & 1\n    local last_bit = n & (1 << 31)\n    local middle_bits = n & (mask ^ (first_bit | last_bit))\n    middle_bits = middle_bits ^ mask\n    return first_bit | middle_bits | last_bit\nend",
    "    local mask = 0x7FFFFFFF\n    local result = bit32.bxor(n, mask)\n    return result\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local result = bit32.bxor(n, bit32.band(mask, bit32.bnot(bit32.bor(first_bit, last_bit))))\n    return result\nend",
    "    local mask = 0xFFFFFFFF\n    mask = bit32.bnot(bit32.lshift(mask, 1))\n    mask = bit32.bnot(bit32.rshift(mask, 1))\n    return bit32.bxor(n, mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    return n ~ middle_mask\nend",
    "    local mask = 0xffffffff\n    mask = bit32.lshift(mask, 2)\n    mask = bit32.rshift(mask, 2)\n    return bit32.bxor(n, mask)\nend",
    "    local mask = 0xFFFFFFFF\n    mask = bit32.bnot(mask)\n    mask = bit32.lshift(mask, 1)\n    mask = bit32.bor(mask, 1)\n    return bit32.bxor(n, mask)\nend",
    "    local mask = 0xFFFFFFFF\n    mask = bit.bnot(bit.lshift(mask, 2))\n    mask = bit.rshift(mask, 2)\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit32.band(n, 1)\n    local last_bit = bit32.band(n, 0x80000000)\n    local middle_bits = bit32.band(n, bit32.bnot(0x80000001))\n    return bit32.bor(first_bit, last_bit, bit32.bxor(middle_bits, mask))\nend",
    "  local mask = 0xffffffff\n  local first_bit = 0x80000000\n  local last_bit = 0x00000001\n  local first_mask = mask - first_bit\n  local last_mask = mask - last_bit\n  local middle_mask = first_mask - last_mask\n  local middle_bits = n & middle_mask\n  return n ^ middle_bits\nend",
    "    local mask = (2^(n.size-2)-1) << 1\n    return n:bxor(mask)\nend",
    "  local mask = 0xffffffff\n  local first_bit = n & 0x80000000\n  local last_bit = n & 0x00000001\n  mask = mask - (1 << 31)\n  mask = mask - 1\n  n = n ^ mask\n  n = n | first_bit\n  n = n | last_bit\n  return n\nend",
    "    local mask = 0x7FFFFFFE\n    return bit32.bxor(n, mask)\nend",
    "    local mask = 0xffffffff\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask & last_mask\n    local middle_bits = n & middle_mask\n    local middle_bits_toggled = middle_bits ~ middle_mask\n    return n & first_bit | middle_bits_toggled | n & last_bit\nend",
    "  local m = 0\n  for i = 1, 31 do\n    m = m + 2^(i-1)\n  end\n  return bit.bxor(n, m)\nend",
    "    local mask = 0xffffffff\n    local first_bit = n & 0x80000000\n    local last_bit = n & 0x1\n    mask = mask - (1 << 31)\n    mask = mask - 1\n    n = n ^ mask\n    n = n | first_bit\n    n = n | last_bit\n    return n\nend",
    "  local mask = 2^(n:len()-2) - 1\n  return n:sub(1, 1) .. (n:sub(2, -2) ~ mask):sub(2) .. n:sub(-1)\nend",
    "    local mask = 0xffffffff\n    local first_bit = bit.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit.bxor(first_bit, mask)\n    local last_mask = bit.bxor(last_bit, mask)\n    local middle_mask = bit.bor(first_mask, last_mask)\n    return bit.bxor(n, middle_mask)\nend",
    "    local mask = 0xffffffffffffffff\n    local first_bit = 0x8000000000000000\n    local last_bit = 0x0000000000000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    return n ~ middle_mask\nend",
    "    local mask = 0xffffffffffffffff\n    local first_bit = bit32.lshift(1, 63)\n    local last_bit = bit32.lshift(1, 0)\n    local first_mask = bit32.bxor(mask, first_bit)\n    local last_mask = bit32.bxor(mask, last_bit)\n    local middle_mask = bit32.band(first_mask, last_mask)\n    local middle_bits = bit32.band(n, middle_mask)\n    local toggled_middle_bits = bit32.bxor(middle_bits, middle_mask)\n    return bit32.bor(n, toggled_middle_bits)\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = n & 0x80000000\n    local last_bit = n & 0x00000001\n    mask = mask ^ 0x80000000\n    mask = mask ^ 0x00000001\n    n = n ^ mask\n    n = n | first_bit\n    n = n | last_bit\n    return n\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = n & 0x80000000\n    local last_bit = n & 0x00000001\n    mask = mask & (first_bit | last_bit)\n    return n ^ mask\nend",
    "  local mask = 0xFFFFFFFF\n  local first_bit = n & 0x80000000\n  local last_bit = n & 0x00000001\n  mask = mask & (first_bit | last_bit)\n  n = n & (mask - 1)\n  n = n ^ (mask - 1)\n  return n\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = bit.lshift(1, 31)\n    local last_bit = 1\n    local first_mask = bit.bor(first_bit, last_bit)\n    local middle_mask = bit.bxor(mask, first_mask)\n    return bit.bxor(n, middle_mask)\nend",
    "  local mask = 0x7FFFFFFF\n  local result = n ^ mask\n  return result\nend",
    "    local mask = 0x7FFFFFFF\n    local result = bit.bxor(n, mask)\n    return result\nend",
    "  local mask = 0xFFFFFFFF\n  local first_bit = 0x80000000\n  local last_bit = 0x00000001\n  local mask = mask & (first_bit | last_bit)\n  return n ^ mask\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local mask = mask - first_bit - last_bit\n    return n ~ mask\nend",
    "  local first_bit = bit.rshift(n, 31)\n  local last_bit = bit.band(n, 1)\n  local mask = bit.lshift(1, 30) - 1\n  local middle_bits = bit.bxor(n, mask)\n  return bit.bor(bit.lshift(first_bit, 30), bit.bor(middle_bits, last_bit))\nend",
    "    local mask = 0xffffffff\n    local first_bit = n & 0x80000000\n    local last_bit = n & 0x00000001\n    local middle_bits = n & 0x7ffffffe\n    local result = first_bit | (middle_bits ^ mask) | last_bit\n    return result\nend",
    "    local first_bit = bit32.band(n, 1)\n    local last_bit = bit32.band(n, 2^31)\n    local mask = bit32.bnot(0xFFFFFFFF)\n    local result = bit32.bxor(n, mask)\n    result = bit32.bor(result, first_bit)\n    result = bit32.bor(result, last_bit)\n    return result\nend",
    "  local mask = 0xFFFFFFFF\n  local first_bit = 0x80000000\n  local last_bit = 0x00000001\n  local mask = mask - first_bit - last_bit\n  return bit.bxor(n, mask)\nend",
    "    local m = bit.lshift(1, n)\n    local mask = bit.bnot(bit.bor(m, bit.rshift(m, 1)))\n    return bit.bxor(n, mask)\nend",
    "    local mask = 0xffffffff\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    local middle_bits = n & middle_mask\n    local middle_bits_toggled = middle_bits ~ middle_mask\n    local result = (n & first_mask) + middle_bits_toggled + (n & last_mask)\n    return result\nend",
    "    local mask = 0xffffffff\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local first_mask = mask - first_bit\n    local last_mask = mask - last_bit\n    local middle_mask = first_mask - last_mask\n    local middle_bits = n & middle_mask\n    local toggled_middle_bits = middle_bits ^ middle_mask\n    return n & first_bit | toggled_middle_bits | n & last_bit\nend",
    "  local mask = 0x7FFFFFFF\n  return bit32.bxor(n, mask)\nend",
    "    local mask = 0x7FFFFFFF\n    local result = n ^ mask\n    return result\nend",
    "  local first_bit = n & 1\n  local last_bit = n & (1 << 31)\n  local mask = 0xFFFFFFFF\n  mask = mask & ~1\n  mask = mask & ~(1 << 31)\n  return (n ^ mask) | first_bit | last_bit\nend",
    "    local mask = 0xFFFFFFFF\n    local first_bit = 0x80000000\n    local last_bit = 0x00000001\n    local mask = mask - (first_bit | last_bit)\n    return n ^ mask\nend",
    "    local mask = 0xffffffff\n    local mask = bit.bnot(bit.lshift(mask, 2))\n    mask = bit.band(mask, bit.rshift(mask, 2))\n    return bit.bxor(n, mask)\nend",
    "  local mask = 0x7FFFFFFF\n  local result = n ^ mask\n  return result\nend",
    "    local mask = 0xFFFFFFFF\n    mask = bit.bnot(bit.lshift(mask, 1))\n    mask = bit.band(mask, bit.rshift(mask, 1))\n    return bit.bxor(n, mask)\nend",
    "  local mask = 0xFFFFFFFF\n  local mask1 = 0xFFFFFFFC\n  local mask2 = 0x00000003\n  local n1 = bit32.band(n, mask1)\n  local n2 = bit32.band(n, mask2)\n  local n3 = bit32.bxor(n1, mask)\n  local n4 = bit32.bor(n3, n2)\n  return n4\nend"
  ]
}