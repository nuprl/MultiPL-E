{
  "name": "mbpp_291_count_no_of_ways",
  "language": "lua",
  "prompt": "-- Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlocal function count_no_of_ways(n, k)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_no_of_ways\n    lu.assertEquals(candidate(2, 4), 16)\n    lu.assertEquals(candidate(3, 2), 6)\n    lu.assertEquals(candidate(4, 4), 228)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local same = 0\n  local diff = k\n  for i = 2, n do\n    local temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  local same = 0\n  local diff = k",
    "  local same = 0\n  local diff = k",
    "    local same = 0\n    local diff = k",
    "\tlocal same, diff = k, k * (k - 1)\n\tfor i = 3, n do\n\t\tlocal tmp = diff\n\t\tdiff = (same + diff) * (k - 1)\n\t\tsame = tmp\n\tend\n\treturn same + diff\nend",
    "  local same, diff = 0, k\n  for i = 2, n do\n    local temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  local same, diff = 0, k\n  for i = 2, n do\n    local temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  local same = 0\n  local diff = k\n  local total = same + diff\n  for i = 2, n do\n    same = diff\n    diff = total * (k - 1)\n    total = same + diff\n  end\n  return total\nend",
    "  local same, diff = 0, k\n  for i = 2, n do\n    local temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  local same = 0\n  local diff = k\n  local total = same + diff\n  for i = 2, n do\n    same = diff\n    diff = total * (k - 1)\n    total = same + diff\n  end\n  return total\nend",
    "  local same = 0\n  local diff = k",
    "  local same = 0\n  local diff = k",
    "  local same = 0\n  local diff = k",
    "  local same, diff = k, k * (k - 1)\n  for i = 3, n do\n    same, diff = diff, (same + diff) * (k - 1)\n  end\n  return same + diff\nend",
    "  local same, diff = k, k * (k - 1)\n  for i = 3, n do\n    local temp = diff\n    diff = (same + diff) * (k - 1)\n    same = temp\n  end\n  return same + diff\nend",
    "  local same = 0\n  local diff = k\n  local total = same + diff",
    "  local same = 0\n  local diff = k\n  local total = same + diff\n  for i = 2, n do\n    same = diff\n    diff = total * (k - 1)\n    total = same + diff\n  end\n  return total\nend",
    "  local same = 0\n  local diff = k",
    "\tif n == 1 then\n\t\treturn k\n\tend\n\tif n == 2 then\n\t\treturn k * k\n\tend\n\tlocal same_color = k\n\tlocal diff_color = k * (k - 1)\n\tfor i = 3, n do\n\t\tlocal temp = diff_color\n\t\tdiff_color = (same_color + diff_color) * (k - 1)\n\t\tsame_color = temp\n\tend\n\treturn same_color + diff_color\nend",
    "  local same_color = 0\n  local diff_color = k"
  ]
}