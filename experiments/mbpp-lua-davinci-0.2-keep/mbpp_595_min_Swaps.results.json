{
  "name": "mbpp_595_min_Swaps",
  "language": "lua",
  "prompt": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    -- check if the strings are of equal length\n    if #str1 ~= #str2 then\n        return -1\n    end\n    -- convert the strings to numbers\n    local num1 = tonumber(str1, 2)\n    local num2 = tonumber(str2, 2)\n    -- count the number of bits to be flipped\n    local count = 0\n    for i = 0, #str1 - 1 do\n        -- check if the bits are different\n        if bit32.extract(num1, i) ~= bit32.extract(num2, i) then\n            count = count + 1\n        end\n    end\n    -- return the minimum number of swaps\n    return math.floor(count / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ai6f92v.lua:14: attempt to index a nil value (global 'bit32')\nstack traceback:\n\t/tmp/tmp6ai6f92v.lua:14: in local 'candidate'\n\t/tmp/tmp6ai6f92v.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprad96wz_.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprad96wz_.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmaew9a0b.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmaew9a0b.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmaew9a0b.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmaew9a0b.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxhdxmml.lua:16: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmpfxhdxmml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local len1 = #str1\n    local len2 = #str2\n    if len1 ~= len2 then\n        return -1\n    end\n    local count = 0\n    for i = 1, len1 do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return math.floor(count / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplchgo994.lua:20: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmplchgo994.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh1li_mr.lua:16: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmpeh1li_mr.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local str1 = str1:gsub(\"0\", \"2\")\n    local str2 = str2:gsub(\"0\", \"2\")\n    str1 = str1:gsub(\"1\", \"0\")\n    str2 = str2:gsub(\"1\", \"0\")\n    str1 = str1:gsub(\"2\", \"1\")\n    str2 = str2:gsub(\"2\", \"1\")\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpog3weujg.lua:21: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpog3weujg.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnyzxet1.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpwnyzxet1.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz3cicbw.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprz3cicbw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz3cicbw.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprz3cicbw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_r2upfm.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpq_r2upfm.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_r2upfm.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpq_r2upfm.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnyzxet1.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpwnyzxet1.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_r2upfm.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpq_r2upfm.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz3cicbw.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprz3cicbw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return math.floor(count / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xc5f8vr.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp9xc5f8vr.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmaew9a0b.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmaew9a0b.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = string.len(str1)\n    for i = 1, len do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6g6r4ys.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpz6g6r4ys.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprad96wz_.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprad96wz_.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return math.floor(count / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtiwvdnl.lua:16: expected: \"Not Possible\"\nactual: 1\nstack traceback:\n\t/tmp/tmpbtiwvdnl.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz3cicbw.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprz3cicbw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnyzxet1.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpwnyzxet1.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return math.floor(count / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1_x3s9r.lua:16: expected: \"Not Possible\"\nactual: 1\nstack traceback:\n\t/tmp/tmpf1_x3s9r.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_r2upfm.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpq_r2upfm.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmaew9a0b.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmaew9a0b.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz3cicbw.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprz3cicbw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_r2upfm.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpq_r2upfm.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmaew9a0b.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmaew9a0b.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprad96wz_.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprad96wz_.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnyzxet1.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpwnyzxet1.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz3cicbw.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprz3cicbw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnyzxet1.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpwnyzxet1.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz3cicbw.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprz3cicbw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1[i] ~= str2[i] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy0n38jk.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpgy0n38jk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprad96wz_.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprad96wz_.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz3cicbw.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprz3cicbw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnyzxet1.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpwnyzxet1.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_r2upfm.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpq_r2upfm.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn math.floor(count / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuq9_vlw4.lua:17: expected: \"Not Possible\"\nactual: 1\nstack traceback:\n\t/tmp/tmpuq9_vlw4.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local len = #str1\n    local count = 0\n    for i = 1, len do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuctj3rr.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpnuctj3rr.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmaew9a0b.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmaew9a0b.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz3cicbw.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprz3cicbw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal i = 1\n\twhile i <= #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfezqbfdp.lua:17: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfezqbfdp.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local n = #str1\n    for i = 1, n do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdo5cw3g.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppdo5cw3g.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return math.floor(count / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1_x3s9r.lua:16: expected: \"Not Possible\"\nactual: 1\nstack traceback:\n\t/tmp/tmpf1_x3s9r.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz3cicbw.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprz3cicbw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = string.len(str1)\n    for i = 1, len do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6g6r4ys.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpz6g6r4ys.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmaew9a0b.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpmaew9a0b.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8_cylyk.lua:15: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpn8_cylyk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pktruh9.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9pktruh9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = string.len(str1)\n  for i = 1, len do\n    if str1[i] ~= str2[i] then\n      count = count + 1\n    end\n  end\n  return math.floor(count / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tfgy5mj.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp5tfgy5mj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz3cicbw.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprz3cicbw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnyzxet1.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpwnyzxet1.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxhdxmml.lua:16: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmpfxhdxmml.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprad96wz_.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprad96wz_.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122554,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_r2upfm.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpq_r2upfm.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509950,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctwsjck5.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpctwsjck5.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}