{
  "name": "mbpp_560_union_elements",
  "language": "lua",
  "prompt": "-- Write a function to find the union of the elements of two given tuples and output them in sorted order.\nlocal function union_elements(test_tup1, test_tup2)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = union_elements\n    lu.assertEquals(candidate({3, 4, 5, 6}, {5, 7, 4, 10}), {3, 4, 5, 6, 7, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, {3, 4, 5, 6}), {1, 2, 3, 4, 5, 6})\n    lu.assertEquals(candidate({11, 12, 13, 14}, {13, 15, 16, 17}), {11, 12, 13, 14, 15, 16, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= test_tup1_len and j <= test_tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= test_tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= test_tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for _, v in pairs(test_tup1) do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = v\n    end\n    for _, v in pairs(test_tup2) do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for i = 1, #test_tup1 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        local is_in_union = false\n        for j = 1, #test_tup1 do\n            if test_tup2[i] == test_tup1[j] then\n                is_in_union = true\n                break\n            end\n        end\n        if not is_in_union then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for i, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, val in ipairs(test_tup1) do\n        table.insert(union_tup, val)\n    end\n    for _, val in ipairs(test_tup2) do\n        table.insert(union_tup, val)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            table.insert(union_tup, test_tup1[i])\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            table.insert(union_tup, test_tup2[j])\n            j = j + 1\n        else\n            table.insert(union_tup, test_tup1[i])\n            i = i + 1\n            j = j + 1\n        end\n    end\n    if i > tup1_len then\n        for k = j, tup2_len do\n            table.insert(union_tup, test_tup2[k])\n        end\n    elseif j > tup2_len then\n        for k = i, tup1_len do\n            table.insert(union_tup, test_tup1[k])\n        end\n    end\n    return union_tup\nend",
    "\tlocal union_tup = {}\n\tlocal union_tup_len = 0\n\tlocal tup1_len = #test_tup1\n\tlocal tup2_len = #test_tup2\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= tup1_len and j <= tup2_len do\n\t\tif test_tup1[i] < test_tup2[j] then\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\t\ti = i + 1\n\t\telseif test_tup1[i] > test_tup2[j] then\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup2[j]\n\t\t\tj = j + 1\n\t\telse\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\twhile i <= tup1_len do\n\t\tunion_tup_len = union_tup_len + 1\n\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\ti = i + 1\n\tend\n\twhile j <= tup2_len do\n\t\tunion_tup_len = union_tup_len + 1\n\t\tunion_tup[union_tup_len] = test_tup2[j]\n\t\tj = j + 1\n\tend\n\treturn union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for i = 1, #test_tup1 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n        union_tup_len = union_tup_len + 1\n    end\n    for i = 1, #test_tup2 do\n        local is_in_union = false\n        for j = 1, union_tup_len do\n            if test_tup2[i] == union_tup[j] then\n                is_in_union = true\n                break\n            end\n        end\n        if not is_in_union then\n            union_tup[#union_tup + 1] = test_tup2[i]\n            union_tup_len = union_tup_len + 1\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_set = {}\n    for i = 1, #test_tup1 do\n        union_set[test_tup1[i]] = true\n    end\n    for i = 1, #test_tup2 do\n        union_set[test_tup2[i]] = true\n    end\n    local union_tup = {}\n    for k, _ in pairs(union_set) do\n        table.insert(union_tup, k)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "\tlocal union_tup = {}\n\tlocal union_tup_index = 1\n\tfor i = 1, #test_tup1 do\n\t\tunion_tup[union_tup_index] = test_tup1[i]\n\t\tunion_tup_index = union_tup_index + 1\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tunion_tup[union_tup_index] = test_tup2[i]\n\t\tunion_tup_index = union_tup_index + 1\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "\tlocal union_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tunion_tup[#union_tup + 1] = test_tup1[i]\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tunion_tup[#union_tup + 1] = test_tup2[i]\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local tup1 = test_tup1 or {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    local tup2 = test_tup2 or {11, 12, 13, 14, 15, 16, 17, 18, 19, 20}\n    local tup3 = {}\n    local tup4 = {}\n    local tup5 = {}\n    for i = 1, #tup1 do\n        tup3[i] = tup1[i]\n    end\n    for i = 1, #tup2 do\n        tup4[i] = tup2[i]\n    end\n    for i = 1, #tup1 do\n        for j = 1, #tup2 do\n            if tup1[i] == tup2[j] then\n                tup4[j] = nil\n            end\n        end\n    end\n    for i = 1, #tup4 do\n        if tup4[i] ~= nil then\n            tup5[#tup5 + 1] = tup4[i]\n        end\n    end\n    for i = 1, #tup5 do\n        tup3[#tup3 + 1] = tup5[i]\n    end\n    table.sort(tup3)\n    return tup3\nend",
    "    local tup_union = {}\n    local tup_union_len = 0\n    for i = 1, #test_tup1 do\n        tup_union[tup_union_len + 1] = test_tup1[i]\n        tup_union_len = tup_union_len + 1\n    end\n    for i = 1, #test_tup2 do\n        tup_union[tup_union_len + 1] = test_tup2[i]\n        tup_union_len = tup_union_len + 1\n    end\n    table.sort(tup_union)\n    return tup_union\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    if i <= tup1_len then\n        for k = i, tup1_len do\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[k]\n        end\n    elseif j <= tup2_len then\n        for k = j, tup2_len do\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[k]\n        end\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    for i = 1, #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[i]\n        union_tup_index = union_tup_index + 1\n    end\n    for i = 1, #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[i]\n        union_tup_index = union_tup_index + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for i = 1, #test_tup1 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        local is_in = false\n        for j = 1, #test_tup1 do\n            if test_tup2[i] == test_tup1[j] then\n                is_in = true\n                break\n            end\n        end\n        if not is_in then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "  local union_tup = {}\n  for i = 1, #test_tup1 do\n    union_tup[#union_tup + 1] = test_tup1[i]\n  end\n  for i = 1, #test_tup2 do\n    union_tup[#union_tup + 1] = test_tup2[i]\n  end\n  table.sort(union_tup)\n  return union_tup\nend",
    "    local tup = {}\n    for i, v in ipairs(test_tup1) do\n        tup[#tup+1] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        tup[#tup+1] = v\n    end\n    table.sort(tup)\n    return tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= #test_tup1 and tup2_index <= #test_tup2 do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            tup2_index = tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        tup1_index = tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        tup2_index = tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    for i = 1, test_tup1_len do\n        union_tup[union_tup_len + 1] = test_tup1[i]\n        union_tup_len = union_tup_len + 1\n    end\n    for i = 1, test_tup2_len do\n        union_tup[union_tup_len + 1] = test_tup2[i]\n        union_tup_len = union_tup_len + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    for i = 1, tup1_len do\n        union_tup[i] = test_tup1[i]\n        union_tup_len = union_tup_len + 1\n    end\n    for i = 1, tup2_len do\n        local is_in_tup1 = false\n        for j = 1, tup1_len do\n            if test_tup2[i] == test_tup1[j] then\n                is_in_tup1 = true\n                break\n            end\n        end\n        if not is_in_tup1 then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for i = 1, #test_tup1 do\n        union_tup[i] = test_tup1[i]\n        union_tup_len = union_tup_len + 1\n    end\n    for i = 1, #test_tup2 do\n        local is_in_union = false\n        for j = 1, #union_tup do\n            if test_tup2[i] == union_tup[j] then\n                is_in_union = true\n                break\n            end\n        end\n        if not is_in_union then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "\tlocal union_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\ttable.insert(union_tup, test_tup1[i])\n\tend\n\tfor i = 1, #test_tup2 do\n\t\ttable.insert(union_tup, test_tup2[i])\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for i = 1, #test_tup1 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        local is_in = false\n        for j = 1, #test_tup1 do\n            if test_tup2[i] == test_tup1[j] then\n                is_in = true\n                break\n            end\n        end\n        if not is_in then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local tup_union = {}\n    for i = 1, #test_tup1 do\n        tup_union[#tup_union + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        tup_union[#tup_union + 1] = test_tup2[i]\n    end\n    table.sort(tup_union)\n    return tup_union\nend",
    "\tlocal union_tup = {}\n\tfor i, v in ipairs(test_tup1) do\n\t\tunion_tup[#union_tup + 1] = v\n\tend\n\tfor i, v in ipairs(test_tup2) do\n\t\tunion_tup[#union_tup + 1] = v\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for i = 1, #test_tup1 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        local is_in_union = false\n        for j = 1, #union_tup do\n            if test_tup2[i] == union_tup[j] then\n                is_in_union = true\n                break\n            end\n        end\n        if not is_in_union then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_size = 0\n    local tup1_size = #test_tup1\n    local tup2_size = #test_tup2\n    for i = 1, tup1_size do\n        union_tup[union_tup_size + 1] = test_tup1[i]\n        union_tup_size = union_tup_size + 1\n    end\n    for i = 1, tup2_size do\n        local is_duplicate = false\n        for j = 1, tup1_size do\n            if test_tup2[i] == test_tup1[j] then\n                is_duplicate = true\n                break\n            end\n        end\n        if not is_duplicate then\n            union_tup[union_tup_size + 1] = test_tup2[i]\n            union_tup_size = union_tup_size + 1\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for i = 1, #test_tup1 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        local is_exist = false\n        for j = 1, #union_tup do\n            if union_tup[j] == test_tup2[i] then\n                is_exist = true\n                break\n            end\n        end\n        if not is_exist then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local union_tup = {}\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            table.insert(union_tup, test_tup1[i])\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            table.insert(union_tup, test_tup2[j])\n            j = j + 1\n        else\n            table.insert(union_tup, test_tup1[i])\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        table.insert(union_tup, test_tup1[i])\n        i = i + 1\n    end\n    while j <= tup2_len do\n        table.insert(union_tup, test_tup2[j])\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local tup_union = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(tup_union, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(tup_union, v)\n    end\n    table.sort(tup_union)\n    return tup_union\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local union_tup_index = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= tup1_len and tup2_index <= tup2_len do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup_index = union_tup_index + 1\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup_index = union_tup_index + 1\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            tup2_index = tup2_index + 1\n        else\n            union_tup_index = union_tup_index + 1\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n    end\n    while tup1_index <= tup1_len do\n        union_tup_index = union_tup_index + 1\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        tup1_index = tup1_index + 1\n    end\n    while tup2_index <= tup2_len do\n        union_tup_index = union_tup_index + 1\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        tup2_index =",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= tup1_len and tup2_index <= tup2_len do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[tup2_index]\n            tup2_index = tup2_index + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n    end\n    while tup1_index <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[tup1_index]\n        tup1_index = tup1_index + 1\n    end\n    while tup2_index <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[tup2_index]\n        tup2_index = tup2_index + 1\n    end\n",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for _, v in ipairs(test_tup1) do\n        union_tup[union_tup_len] = v\n        union_tup_len = union_tup_len + 1\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[union_tup_len] = v\n        union_tup_len = union_tup_len + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local tup1 = test_tup1\n    local tup2 = test_tup2\n    local tup3 = {}\n    local tup4 = {}\n    local tup5 = {}\n    local tup6 = {}\n    local tup7 = {}\n    local tup8 = {}\n    local tup9 = {}\n    local tup10 = {}\n    local tup11 = {}\n    local tup12 = {}\n    local tup13 = {}\n    local tup14 = {}\n    local tup15 = {}\n    local tup16 = {}\n    local tup17 = {}\n    local tup18 = {}\n    local tup19 = {}\n    local tup20 = {}\n    local tup21 = {}\n    local tup22 = {}\n    local tup23 = {}\n    local tup24 = {}\n    local tup25 = {}\n    local tup26 = {}\n    local tup27 = {}\n    local tup28 = {}\n    local tup29 = {}\n    local tup30 = {}\n    local tup31 = {}\n    local tup32 = {}\n    local tup33 = {}\n    local tup34 = {}\n    local tup35 = {}\n    local tup36 = {}\n    local tup37 = {}\n    local tup38 = {}\n    local tup39 = {}\n    local tup40 = {}\n    local tup41 = {}\n    local tup42 = {}\n    local tup43 = {}\n    local tup44 = {}\n    local tup45 = {}\n    local tup46 = {}\n    local tup47 = {}\n    local tup48 = {}\n    local tup49 = {}\n    local tup50 = {}\n    local tup51 = {}\n    local tup52 = {}\n    local tup53 = {}\n    local tup54 = {}\n    local tup55 = {}\n    local tup56 = {}\n    local tup57 = {}\n    local tup58 = {}\n    local tup59 = {}\n    local tup60 = {}\n    local tup61 = {}\n    local tup62 = {}\n    local tup63 = {}",
    "    local tup1 = test_tup1\n    local tup2 = test_tup2\n    local union_tup = {}\n    for i = 1, #tup1 do\n        union_tup[#union_tup + 1] = tup1[i]\n    end\n    for i = 1, #tup2 do\n        union_tup[#union_tup + 1] = tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_size = 0\n    local tup1_size = #test_tup1\n    local tup2_size = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_size and j <= tup2_size do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_size do\n        union_tup_size = union_tup_size + 1\n        union_tup[union_tup_size] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_size do\n        union_tup_size = union_tup_size + 1\n        union_tup[union_tup_size] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local union_tup_index = 1",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for i = 1, #test_tup1 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        local is_in = false\n        for j = 1, #union_tup do\n            if test_tup2[i] == union_tup[j] then\n                is_in = true\n                break\n            end\n        end\n        if not is_in then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i, j = 1, 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "\tlocal union_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tunion_tup[#union_tup + 1] = test_tup1[i]\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tunion_tup[#union_tup + 1] = test_tup2[i]\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local union_tup_len_1 = 0\n    local union_tup_len_2 = 0\n    local union_tup_len_3 = 0\n    local union_tup_len_4 = 0\n    local union_tup_len_5 = 0\n    local union_tup_len_6 = 0\n    local union_tup_len_7 = 0\n    local union_tup_len_8 = 0\n    local union_tup_len_9 = 0\n    local union_tup_len_10 = 0\n    local union_tup_len_11 = 0\n    local union_tup_len_12 = 0\n    local union_tup_len_13 = 0\n    local union_tup_len_14 = 0\n    local union_tup_len_15 = 0\n    local union_tup_len_16 = 0\n    local union_tup_len_17 = 0\n    local union_tup_len_18 = 0\n    local union_tup_len_19 = 0\n    local union_tup_len_20 = 0\n    local union_tup_len_21 = 0\n    local union_tup_len_22 = 0\n    local union_tup_len_23 = 0\n    local union_tup_len_24 = 0\n    local union_tup_len_25 = 0\n    local union_tup_len_26 = 0\n    local union_tup_len_27 = 0\n    local union_tup_len_28 = 0\n    local union_tup_len_29 = 0\n    local union_tup_len_30 = 0\n    local union_tup_len_31 = 0\n    local union_tup_len_32 = 0\n    local union_tup_len_33 = 0\n    local union_tup_len_34 = 0\n    local union_tup_len_35 = 0\n    local union_tup_len_36 = 0\n    local union_tup_len_37 = 0\n    local union_tup_len_38",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for i, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    for i = 1, tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n    end\n    for i = 1, tup2_len do\n        local is_exist = false\n        for j = 1, union_tup_len do\n            if test_tup2[i] == union_tup[j] then\n                is_exist = true\n                break\n            end\n        end\n        if not is_exist then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for _, v in ipairs(test_tup1) do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union = {}\n    for _, v in ipairs(test_tup1) do\n        union[v] = true\n    end\n    for _, v in ipairs(test_tup2) do\n        union[v] = true\n    end\n    local union_list = {}\n    for k, _ in pairs(union) do\n        table.insert(union_list, k)\n    end\n    table.sort(union_list)\n    return union_list\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local tup1 = test_tup1\n    local tup2 = test_tup2\n    local tup_union = {}\n    local tup_union_sorted = {}\n    for i, v in ipairs(tup1) do\n        tup_union[v] = true\n    end\n    for i, v in ipairs(tup2) do\n        tup_union[v] = true\n    end\n    for k, v in pairs(tup_union) do\n        table.insert(tup_union_sorted, k)\n    end\n    table.sort(tup_union_sorted)\n    return tup_union_sorted\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup[union_tup_len + 1] = test_tup1[i]\n            union_tup_len = union_tup_len + 1\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup[union_tup_len + 1] = test_tup2[j]\n            union_tup_len = union_tup_len + 1\n            j = j + 1\n        else\n            union_tup[union_tup_len + 1] = test_tup1[i]\n            union_tup_len = union_tup_len + 1\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup[union_tup_len + 1] = test_tup1[i]\n        union_tup_len = union_tup_len + 1\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup[union_tup_len + 1] = test_tup2[j]\n        union_tup_len = union_tup_len + 1\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= test_tup1_len and j <= test_tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= test_tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= test_tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local tup_union = {}\n    for i, v in ipairs(test_tup1) do\n        tup_union[#tup_union + 1] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        tup_union[#tup_union + 1] = v\n    end\n    table.sort(tup_union)\n    return tup_union\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    for i = 1, tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n    end\n    for i = 1, tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[i] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local union_tup_index = 1\n    local tup_len = #test_tup1\n    for i = 1, tup_len do\n        union_tup[union_tup_index] = test_tup1[i]\n        union_tup_index = union_tup_index + 1\n    end\n    tup_len = #test_tup2\n    for i = 1, tup_len do\n        union_tup[union_tup_index] = test_tup2[i]\n        union_tup_index = union_tup_index + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end",
    "\tlocal union_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tunion_tup[#union_tup + 1] = test_tup1[i]\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tlocal found = false\n\t\tfor j = 1, #union_tup do\n\t\t\tif union_tup[j] == test_tup2[i] then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\tunion_tup[#union_tup + 1] = test_tup2[i]\n\t\tend\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local tup_union = {}\n    local tup_union_sorted = {}\n    for i, v in ipairs(test_tup1) do\n        tup_union[i] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        tup_union[#tup_union + 1] = v\n    end\n    table.sort(tup_union)\n    return tup_union\nend",
    "    local union_list = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_list, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_list, v)\n    end\n    table.sort(union_list)\n    return table.unpack(union_list)\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= #test_tup1 and tup2_index <= #test_tup2 do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            tup2_index = tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        tup1_index = tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        tup2_index = tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "  local union_tup = {}\n  local union_tup_size = 0\n  for i = 1, #test_tup1 do\n    union_tup[union_tup_size + 1] = test_tup1[i]\n    union_tup_size = union_tup_size + 1\n  end\n  for i = 1, #test_tup2 do\n    union_tup[union_tup_size + 1] = test_tup2[i]\n    union_tup_size = union_tup_size + 1\n  end\n  table.sort(union_tup)\n  return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union = {}\n    for _, v in ipairs(test_tup1) do\n        union[v] = true\n    end\n    for _, v in ipairs(test_tup2) do\n        union[v] = true\n    end\n    local res = {}\n    for k, _ in pairs(union) do\n        table.insert(res, k)\n    end\n    table.sort(res)\n    return res\nend",
    "    local union_tup = {}\n    local union_tup_count = 0\n    for i = 1, #test_tup1 do\n        union_tup_count = union_tup_count + 1\n        union_tup[union_tup_count] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        local is_in_tup = false\n        for j = 1, #test_tup1 do\n            if test_tup2[i] == test_tup1[j] then\n                is_in_tup = true\n                break\n            end\n        end\n        if not is_in_tup then\n            union_tup_count = union_tup_count + 1\n            union_tup[union_tup_count] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local tup_union = {}\n    local tup_union_index = 1\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= #test_tup1 and tup2_index <= #test_tup2 do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            tup_union[tup_union_index] = test_tup1[tup1_index]\n            tup_union_index = tup_union_index + 1\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            tup_union[tup_union_index] = test_tup2[tup2_index]\n            tup_union_index = tup_union_index + 1\n            tup2_index = tup2_index + 1\n        else\n            tup_union[tup_union_index] = test_tup1[tup1_index]\n            tup_union_index = tup_union_index + 1\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n    end\n    if tup1_index <= #test_tup1 then\n        for i = tup1_index, #test_tup1 do\n            tup_union[tup_union_index] = test_tup1[i]\n            tup_union_index = tup_union_index + 1\n        end\n    elseif tup2_index <= #test_tup2 then\n        for i = tup2_index, #test_tup2 do\n            tup_union[tup_union_index] = test_tup2[i]\n            tup_union_index = tup_union_index + 1\n        end\n    end\n    return tup_union\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for i = 1, #test_tup1 do\n        union_tup[union_tup_len + 1] = test_tup1[i]\n        union_tup_len = union_tup_len + 1\n    end\n    for i = 1, #test_tup2 do\n        local is_exist = false\n        for j = 1, #union_tup do\n            if test_tup2[i] == union_tup[j] then\n                is_exist = true\n                break\n            end\n        end\n        if not is_exist then\n            union_tup[union_tup_len + 1] = test_tup2[i]\n            union_tup_len = union_tup_len + 1\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "\tlocal union_tup = {}\n\tlocal union_tup_len = 0\n\tfor i = 1, #test_tup1 do\n\t\tunion_tup[i] = test_tup1[i]\n\t\tunion_tup_len = union_tup_len + 1\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tlocal is_in = false\n\t\tfor j = 1, #test_tup1 do\n\t\t\tif test_tup2[i] == test_tup1[j] then\n\t\t\t\tis_in = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not is_in then\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup2[i]\n\t\tend\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    for i = 1, #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[i]\n        union_tup_idx = union_tup_idx + 1\n    end\n    for i = 1, #test_tup2 do\n        union_tup[union_tup_idx] = test_tup2[i]\n        union_tup_idx = union_tup_idx + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local tup1_idx = 1\n    local tup2_idx = 1\n    while tup1_idx <= tup1_len and tup2_idx <= tup2_len do\n        if test_tup1[tup1_idx] < test_tup2[tup2_idx] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n        elseif test_tup1[tup1_idx] > test_tup2[tup2_idx] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[tup2_idx]\n            tup2_idx = tup2_idx + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n            tup2_idx = tup2_idx + 1\n        end\n    end\n    if tup1_idx <= tup1_len then\n        for i = tup1_idx, tup1_len do\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n        end\n    elseif tup2_idx <= tup2_len then\n        for i = tup2_idx, tup2_len do\n            union_tup_len = union_tup_len + 1\n            union_tup[",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= #test_tup1 and tup2_index <= #test_tup2 do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            tup2_index = tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        tup1_index = tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        tup2_index = tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup\nend",
    "\tlocal union_tup = {}\n\tlocal union_tup_index = 1\n\tlocal test_tup1_index = 1\n\tlocal test_tup2_index = 1\n\twhile test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n\t\tif test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n\t\t\tunion_tup[union_tup_index] = test_tup1[test_tup1_index]\n\t\t\ttest_tup1_index = test_tup1_index + 1\n\t\telseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n\t\t\tunion_tup[union_tup_index] = test_tup2[test_tup2_index]\n\t\t\ttest_tup2_index = test_tup2_index + 1\n\t\telse\n\t\t\tunion_tup[union_tup_index] = test_tup1[test_tup1_index]\n\t\t\ttest_tup1_index = test_tup1_index + 1\n\t\t\ttest_tup2_index = test_tup2_index + 1\n\t\tend\n\t\tunion_tup_index = union_tup_index + 1\n\tend\n\twhile test_tup1_index <= #test_tup1 do\n\t\tunion_tup[union_tup_index] = test_tup1[test_tup1_index]\n\t\ttest_tup1_index = test_tup1_index + 1\n\t\tunion_tup_index = union_tup_index + 1\n\tend\n\twhile test_tup2_index <= #test_tup2 do\n\t\tunion_tup[union_tup_index] = test_tup2[test_tup2_index]\n\t\ttest_tup2_index = test_tup2_index + 1\n\t\t",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local tup1_idx = 1\n    local tup2_idx = 1\n    while tup1_idx <= #test_tup1 and tup2_idx <= #test_tup2 do\n        if test_tup1[tup1_idx] < test_tup2[tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n        elseif test_tup1[tup1_idx] > test_tup2[tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[tup2_idx]\n            tup2_idx = tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n            tup2_idx = tup2_idx + 1\n        end\n        union_tup_idx = union_tup_idx + 1\n    end\n    while tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[tup1_idx]\n        tup1_idx = tup1_idx + 1\n        union_tup_idx = union_tup_idx + 1\n    end\n    while tup2_idx <= #test_tup2 do\n        union_tup[union_tup_idx] = test_tup2[tup2_idx]\n        tup2_idx = tup2_idx + 1\n        union_tup_idx = union_tup_idx + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= tup1_len and tup2_index <= tup2_len do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[tup2_index]\n            tup2_index = tup2_index + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n    end\n    while tup1_index <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[tup1_index]\n        tup1_index = tup1_index + 1\n    end\n    while tup2_index <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[tup2_index]\n        tup2_index = tup2_index + 1\n    end\n",
    "\tlocal union_tup = {}\n\tlocal union_tup_len = 0\n\tlocal tup1_len = #test_tup1\n\tlocal tup2_len = #test_tup2\n\tlocal i, j = 1, 1\n\twhile i <= tup1_len and j <= tup2_len do\n\t\tif test_tup1[i] < test_tup2[j] then\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\t\ti = i + 1\n\t\telseif test_tup1[i] > test_tup2[j] then\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup2[j]\n\t\t\tj = j + 1\n\t\telse\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\twhile i <= tup1_len do\n\t\tunion_tup_len = union_tup_len + 1\n\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\ti = i + 1\n\tend\n\twhile j <= tup2_len do\n\t\tunion_tup_len = union_tup_len + 1\n\t\tunion_tup[union_tup_len] = test_tup2[j]\n\t\tj = j + 1\n\tend\n\treturn union_tup\nend",
    "\tlocal union_tup = {}\n\tfor _,v in ipairs(test_tup1) do\n\t\ttable.insert(union_tup, v)\n\tend\n\tfor _,v in ipairs(test_tup2) do\n\t\ttable.insert(union_tup, v)\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    if i <= tup1_len then\n        for k = i, tup1_len do\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[k]\n        end\n    elseif j <= tup2_len then\n        for k = j, tup2_len do\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[k]\n        end\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for _, v in ipairs(test_tup1) do\n        union_tup[union_tup_len + 1] = v\n        union_tup_len = union_tup_len + 1\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[union_tup_len + 1] = v\n        union_tup_len = union_tup_len + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_size = 0\n    local tup1_size = #test_tup1\n    local tup2_size = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_size and j <= tup2_size do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_size do\n        union_tup_size = union_tup_size + 1\n        union_tup[union_tup_size] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_size do\n        union_tup_size = union_tup_size + 1\n        union_tup[union_tup_size] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= tup1_len and tup2_index <= tup2_len do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[tup2_index]\n            tup2_index = tup2_index + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n    end\n    while tup1_index <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[tup1_index]\n        tup1_index = tup1_index + 1\n    end\n    while tup2_index <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[tup2_index]\n        tup2_index = tup2_index + 1\n    end\n",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= test_tup1_len and j <= test_tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= test_tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= test_tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "  local union_tup = {}\n  for i = 1, #test_tup1 do\n    union_tup[#union_tup + 1] = test_tup1[i]\n  end\n  for i = 1, #test_tup2 do\n    union_tup[#union_tup + 1] = test_tup2[i]\n  end\n  table.sort(union_tup)\n  return union_tup\nend",
    "\tlocal union_tup = {}\n\tlocal union_tup_len = 0\n\tfor _, v in pairs(test_tup1) do\n\t\tif not union_tup[v] then\n\t\t\tunion_tup[v] = true\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\tend\n\tend\n\tfor _, v in pairs(test_tup2) do\n\t\tif not union_tup[v] then\n\t\t\tunion_tup[v] = true\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\tend\n\tend\n\tlocal union_tup_sorted = {}\n\tlocal i = 1\n\tfor k, _ in pairs(union_tup) do\n\t\tunion_tup_sorted[i] = k\n\t\ti = i + 1\n\tend\n\ttable.sort(union_tup_sorted)\n\treturn union_tup_sorted\nend",
    "    local tup_union = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(tup_union, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(tup_union, v)\n    end\n    table.sort(tup_union)\n    return tup_union\nend",
    "\tlocal tup_union = {}\n\tlocal tup_union_len = 0\n\tfor i = 1, #test_tup1 do\n\t\ttup_union[i] = test_tup1[i]\n\t\ttup_union_len = tup_union_len + 1\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tlocal is_in_tup1 = false\n\t\tfor j = 1, #test_tup1 do\n\t\t\tif test_tup2[i] == test_tup1[j] then\n\t\t\t\tis_in_tup1 = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not is_in_tup1 then\n\t\t\ttup_union[tup_union_len + 1] = test_tup2[i]\n\t\t\ttup_union_len = tup_union_len + 1\n\t\tend\n\tend\n\ttable.sort(tup_union)\n\treturn tup_union\nend",
    "  local union_tup = {}\n  for _, v in ipairs(test_tup1) do\n    table.insert(union_tup, v)\n  end\n  for _, v in ipairs(test_tup2) do\n    table.insert(union_tup, v)\n  end\n  table.sort(union_tup)\n  return union_tup\nend",
    "    local tup_union = {}\n    for i = 1, #test_tup1 do\n        tup_union[#tup_union + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        tup_union[#tup_union + 1] = test_tup2[i]\n    end\n    table.sort(tup_union)\n    return tup_union\nend",
    "\tlocal union_tup = {}\n\tlocal union_tup_size = 0\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= #test_tup1 and j <= #test_tup2 do\n\t\tif test_tup1[i] < test_tup2[j] then\n\t\t\tunion_tup_size = union_tup_size + 1\n\t\t\tunion_tup[union_tup_size] = test_tup1[i]\n\t\t\ti = i + 1\n\t\telseif test_tup1[i] > test_tup2[j] then\n\t\t\tunion_tup_size = union_tup_size + 1\n\t\t\tunion_tup[union_tup_size] = test_tup2[j]\n\t\t\tj = j + 1\n\t\telse\n\t\t\tunion_tup_size = union_tup_size + 1\n\t\t\tunion_tup[union_tup_size] = test_tup1[i]\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\twhile i <= #test_tup1 do\n\t\tunion_tup_size = union_tup_size + 1\n\t\tunion_tup[union_tup_size] = test_tup1[i]\n\t\ti = i + 1\n\tend\n\twhile j <= #test_tup2 do\n\t\tunion_tup_size = union_tup_size + 1\n\t\tunion_tup[union_tup_size] = test_tup2[j]\n\t\tj = j + 1\n\tend\n\treturn union_tup\nend",
    "    local tup = {}\n    for i = 1, #test_tup1 do\n        tup[#tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        tup[#tup + 1] = test_tup2[i]\n    end\n    table.sort(tup)\n    return tup\nend",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "\tlocal union_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tunion_tup[#union_tup + 1] = test_tup1[i]\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tunion_tup[#union_tup + 1] = test_tup2[i]\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local tup1 = table.copy(test_tup1)\n    local tup2 = table.copy(test_tup2)\n    local result = {}\n    local i = 1\n    local j = 1\n    while i <= #tup1 and j <= #tup2 do\n        if tup1[i] < tup2[j] then\n            table.insert(result, tup1[i])\n            i = i + 1\n        elseif tup1[i] > tup2[j] then\n            table.insert(result, tup2[j])\n            j = j + 1\n        else\n            table.insert(result, tup1[i])\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= #tup1 do\n        table.insert(result, tup1[i])\n        i = i + 1\n    end\n    while j <= #tup2 do\n        table.insert(result, tup2[j])\n        j = j + 1\n    end\n    return result\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "\tlocal tup_union = {}\n\tlocal tup_union_sorted = {}\n\tlocal tup_union_sorted_final = {}\n\tlocal tup_union_sorted_final_str = \"\"\n\tlocal tup_union_sorted_final_str_final = \"\"\n\t\n\tfor i, v in ipairs(test_tup1) do\n\t\ttup_union[i] = v\n\tend\n\t\n\tfor i, v in ipairs(test_tup2) do\n\t\ttup_union[#tup_union + 1] = v\n\tend\n\t\n\tfor i, v in ipairs(tup_union) do\n\t\ttup_union_sorted[i] = v\n\tend\n\t\n\ttable.sort(tup_union_sorted)\n\t\n\tfor i, v in ipairs(tup_union_sorted) do\n\t\ttup_union_sorted_final[i] = v\n\tend\n\t\n\tfor i, v in ipairs(tup_union_sorted_final) do\n\t\ttup_union_sorted_final_str = tup_union_sorted_final_str .. v .. \" \"\n\tend\n\t\n\ttup_union_sorted_final_str_final = string.sub(tup_union_sorted_final_str, 1, string.len(tup_union_sorted_final_str) - 1)\n\t\n\treturn tup_union_sorted_final_str_final\nend",
    "    local tup1 = test_tup1 or {1, 2, 3, 4, 5}\n    local tup2 = test_tup2 or {2, 3, 4, 5, 6}\n    local union = {}\n    for i, v in ipairs(tup1) do\n        union[i] = v\n    end\n    for i, v in ipairs(tup2) do\n        if not table.contains(union, v) then\n            table.insert(union, v)\n        end\n    end\n    table.sort(union)\n    return union\nend",
    "\tlocal union_tup = {}\n\tlocal union_tup_len = 0\n\tlocal tup1_len = #test_tup1\n\tlocal tup2_len = #test_tup2\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= tup1_len and j <= tup2_len do\n\t\tif test_tup1[i] < test_tup2[j] then\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\t\ti = i + 1\n\t\telseif test_tup1[i] > test_tup2[j] then\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup2[j]\n\t\t\tj = j + 1\n\t\telse\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\twhile i <= tup1_len do\n\t\tunion_tup_len = union_tup_len + 1\n\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\ti = i + 1\n\tend\n\twhile j <= tup2_len do\n\t\tunion_tup_len = union_tup_len + 1\n\t\tunion_tup[union_tup_len] = test_tup2[j]\n\t\tj = j + 1\n\tend\n\treturn union_tup\nend",
    "\tlocal union_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tunion_tup[#union_tup + 1] = test_tup1[i]\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tunion_tup[#union_tup + 1] = test_tup2[i]\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local tup_union = {}\n    local tup_union_sorted = {}\n    for i = 1, #test_tup1 do\n        tup_union[#tup_union + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        tup_union[#tup_union + 1] = test_tup2[i]\n    end\n    table.sort(tup_union)\n    for i = 1, #tup_union do\n        tup_union_sorted[#tup_union_sorted + 1] = tup_union[i]\n    end\n    return tup_union_sorted\nend",
    "\tlocal union_tup = {}\n\tfor _, v in ipairs(test_tup1) do\n\t\ttable.insert(union_tup, v)\n\tend\n\tfor _, v in ipairs(test_tup2) do\n\t\ttable.insert(union_tup, v)\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local union = {}\n    for _, v in ipairs(test_tup1) do\n        union[v] = true\n    end\n    for _, v in ipairs(test_tup2) do\n        union[v] = true\n    end\n    local union_tup = {}\n    for k, _ in pairs(union) do\n        table.insert(union_tup, k)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_size = 0\n    local tup1_size = #test_tup1\n    local tup2_size = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_size and j <= tup2_size do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_size do\n        union_tup_size = union_tup_size + 1\n        union_tup[union_tup_size] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_size do\n        union_tup_size = union_tup_size + 1\n        union_tup[union_tup_size] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local tup_union = {}\n    local tup_union_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local tup1_idx = 1\n    local tup2_idx = 1\n    while tup1_idx <= tup1_len and tup2_idx <= tup2_len do\n        if test_tup1[tup1_idx] < test_tup2[tup2_idx] then\n            tup_union[tup_union_len + 1] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n        elseif test_tup1[tup1_idx] > test_tup2[tup2_idx] then\n            tup_union[tup_union_len + 1] = test_tup2[tup2_idx]\n            tup2_idx = tup2_idx + 1\n        else\n            tup_union[tup_union_len + 1] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n            tup2_idx = tup2_idx + 1\n        end\n        tup_union_len = tup_union_len + 1\n    end\n    if tup1_idx <= tup1_len then\n        for i = tup1_idx, tup1_len do\n            tup_union[tup_union_len + 1] = test_tup1[i]\n            tup_union_len = tup_union_len + 1\n        end\n    elseif tup2_idx <= tup2_len then\n        for i = tup2_idx, tup2_len do\n            tup_union[tup_union_len + 1] = test_tup2[i]\n            tup_union_len = tup_union_len + 1\n        end\n    end\n   ",
    "  local union_tup = {}\n  for i = 1, #test_tup1 do\n    union_tup[#union_tup + 1] = test_tup1[i]\n  end\n  for i = 1, #test_tup2 do\n    union_tup[#union_tup + 1] = test_tup2[i]\n  end\n  table.sort(union_tup)\n  return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= #test_tup1 and tup2_index <= #test_tup2 do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            tup2_index = tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        tup1_index = tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        tup2_index = tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for i, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2",
    "    local result = {}\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            table.insert(result, test_tup1[i])\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            table.insert(result, test_tup2[j])\n            j = j + 1\n        else\n            table.insert(result, test_tup1[i])\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        table.insert(result, test_tup1[i])\n        i = i + 1\n    end\n    while j <= tup2_len do\n        table.insert(result, test_tup2[j])\n        j = j + 1\n    end\n    return result\nend",
    "    local tup_union = {}\n    for i = 1, #test_tup1 do\n        tup_union[#tup_union + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        tup_union[#tup_union + 1] = test_tup2[i]\n    end\n    table.sort(tup_union)\n    return tup_union\nend",
    "  local tup1 = {}\n  local tup2 = {}\n  for i = 1, #test_tup1 do\n    tup1[i] = test_tup1[i]\n  end\n  for i = 1, #test_tup2 do\n    tup2[i] = test_tup2[i]\n  end\n  local union = {}\n  for i = 1, #tup1 do\n    union[i] = tup1[i]\n  end\n  for i = 1, #tup2 do\n    local found = false\n    for j = 1, #tup1 do\n      if tup2[i] == tup1[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      union[#union + 1] = tup2[i]\n    end\n  end\n  table.sort(union)\n  return union\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= #test_tup1 and tup2_index <= #test_tup2 do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            union_tup_index = union_tup_index + 1\n            tup2_index = tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n    end\n    while tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        union_tup_index = union_tup_index + 1\n        tup1_index = tup1_index + 1\n    end\n    while tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        union_tup_index = union_tup_index + 1\n        tup2_index = tup2_index + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 or test_tup2_index <= #test_tup2 do\n        if test_tup1_index > #test_tup1 then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        elseif test_tup2_index > #test_tup2 then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup\nend",
    "    local tup_union = {}\n    local tup_union_sorted = {}\n    for i = 1, #test_tup1 do\n        table.insert(tup_union, test_tup1[i])\n    end\n    for i = 1, #test_tup2 do\n        table.insert(tup_union, test_tup2[i])\n    end\n    table.sort(tup_union)\n    for i = 1, #tup_union do\n        table.insert(tup_union_sorted, tup_union[i])\n    end\n    return tup_union_sorted\nend",
    "    local union = {}\n    for i = 1, #test_tup1 do\n        union[#union + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union[#union + 1] = test_tup2[i]\n    end\n    table.sort(union)\n    return union\nend",
    "    local union_tup = {}\n    local union_tup_size = 0\n    local i = 1\n    local j = 1\n    while i <= #test_tup1 and j <= #test_tup2 do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= #test_tup1 do\n        union_tup_size = union_tup_size + 1\n        union_tup[union_tup_size] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= #test_tup2 do\n        union_tup_size = union_tup_size + 1\n        union_tup[union_tup_size] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "\tlocal union_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tunion_tup[#union_tup + 1] = test_tup1[i]\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tunion_tup[#union_tup + 1] = test_tup2[i]\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "  local union_tup = {}\n  for i = 1, #test_tup1 do\n    union_tup[#union_tup + 1] = test_tup1[i]\n  end\n  for i = 1, #test_tup2 do\n    union_tup[#union_tup + 1] = test_tup2[i]\n  end\n  table.sort(union_tup)\n  return union_tup\nend",
    "\tlocal union_tup = {}\n\tlocal union_tup_len = 0\n\tlocal test_tup1_len = #test_tup1\n\tlocal test_tup2_len = #test_tup2\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= test_tup1_len and j <= test_tup2_len do\n\t\tif test_tup1[i] < test_tup2[j] then\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\t\ti = i + 1\n\t\telseif test_tup1[i] > test_tup2[j] then\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup2[j]\n\t\t\tj = j + 1\n\t\telse\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\twhile i <= test_tup1_len do\n\t\tunion_tup_len = union_tup_len + 1\n\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\ti = i + 1\n\tend\n\twhile j <= test_tup2_len do\n\t\tunion_tup_len = union_tup_len + 1\n\t\tunion_tup[union_tup_len] = test_tup2[j]\n\t\tj = j + 1\n\tend\n\treturn union_tup\nend",
    "\tlocal union_tup = {}\n\tlocal union_tup_len = 0\n\tlocal test_tup1_len = #test_tup1\n\tlocal test_tup2_len = #test_tup2\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= test_tup1_len and j <= test_tup2_len do\n\t\tif test_tup1[i] < test_tup2[j] then\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\t\ti = i + 1\n\t\telseif test_tup1[i] > test_tup2[j] then\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup2[j]\n\t\t\tj = j + 1\n\t\telse\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\twhile i <= test_tup1_len do\n\t\tunion_tup_len = union_tup_len + 1\n\t\tunion_tup[union_tup_len] = test_tup1[i]\n\t\ti = i + 1\n\tend\n\twhile j <= test_tup2_len do\n\t\tunion_tup_len = union_tup_len + 1\n\t\tunion_tup[union_tup_len] = test_tup2[j]\n\t\tj = j + 1\n\tend\n\treturn union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i, j = 1, 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "\tlocal union_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tunion_tup[#union_tup + 1] = test_tup1[i]\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tunion_tup[#union_tup + 1] = test_tup2[i]\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "\tlocal tup_union = {}\n\tfor i = 1, #test_tup1 do\n\t\ttup_union[#tup_union + 1] = test_tup1[i]\n\tend\n\tfor i = 1, #test_tup2 do\n\t\ttup_union[#tup_union + 1] = test_tup2[i]\n\tend\n\ttable.sort(tup_union)\n\treturn tup_union\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= test_tup1_len and j <= test_tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup[union_tup_len + 1] = test_tup1[i]\n            union_tup_len = union_tup_len + 1\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup[union_tup_len + 1] = test_tup2[j]\n            union_tup_len = union_tup_len + 1\n            j = j + 1\n        else\n            union_tup[union_tup_len + 1] = test_tup1[i]\n            union_tup_len = union_tup_len + 1\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= test_tup1_len do\n        union_tup[union_tup_len + 1] = test_tup1[i]\n        union_tup_len = union_tup_len + 1\n        i = i + 1\n    end\n    while j <= test_tup2_len do\n        union_tup[union_tup_len + 1] = test_tup2[j]\n        union_tup_len = union_tup_len + 1\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local union_tup_set = {}\n    for i = 1, #test_tup1 do\n        if not union_tup_set[test_tup1[i]] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            union_tup_set[test_tup1[i]] = true\n        end\n    end\n    for i = 1, #test_tup2 do\n        if not union_tup_set[test_tup2[i]] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[i]\n            union_tup_set[test_tup2[i]] = true\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local tup_union = {}\n    local tup_union_count = 0\n    local tup_union_index = 1\n    local tup_union_index_count = 1\n    local tup_union_index_count_max = 0\n    local tup_union_index_count_max_index = 1\n    local tup_union_index_count_max_index_count = 1\n    local tup_union_index_count_max_index_count_max = 0\n    local tup_union_index_count_max_index_count_max_index = 1\n    local tup_union_index_count_max_index_count_max_index_count = 1\n    local tup_union_index_count_max_index_count_max_index_count_max = 0\n    local tup_union_index_count_max_index_count_max_index_count_max_index = 1\n    local tup_union_index_count_max_index_count_max_index_count_max_index_count = 1\n    local tup_union_index_count_max_index_count_max_index_count_max_index_count_max = 0\n    local tup_union_index_count_max_index_count_max_index_count_max_index_count_max_index = 1\n    local tup_union_index_count_max_index_count_max_index_count_max_index_count_max_index_count = 1\n    local tup_union_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max = 0\n    local tup_union_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index = 1\n    local tup_union_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count = 1\n    local tup_union_index_count_max_index_count_max_index_count_max_index_count_max_index",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for i = 1, #test_tup1 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        local is_in = false\n        for j = 1, #test_tup1 do\n            if test_tup2[i] == test_tup1[j] then\n                is_in = true\n                break\n            end\n        end\n        if not is_in then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local tup_union = {}\n    for i = 1, #test_tup1 do\n        tup_union[#tup_union + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        tup_union[#tup_union + 1] = test_tup2[i]\n    end\n    table.sort(tup_union)\n    return tup_union\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_size = 0\n    for i = 1, #test_tup1 do\n        union_tup_size = union_tup_size + 1\n        union_tup[union_tup_size] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        local is_in_union = false\n        for j = 1, #union_tup do\n            if union_tup[j] == test_tup2[i] then\n                is_in_union = true\n                break\n            end\n        end\n        if not is_in_union then\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union = {}\n    local union_size = 0\n    for i = 1, #test_tup1 do\n        union[union_size + 1] = test_tup1[i]\n        union_size = union_size + 1\n    end\n    for i = 1, #test_tup2 do\n        local found = false\n        for j = 1, #test_tup1 do\n            if test_tup2[i] == test_tup1[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            union[union_size + 1] = test_tup2[i]\n            union_size = union_size + 1\n        end\n    end\n    table.sort(union)\n    return union\nend",
    "    local union_set = {}\n    for i = 1, #test_tup1 do\n        union_set[test_tup1[i]] = true\n    end\n    for i = 1, #test_tup2 do\n        union_set[test_tup2[i]] = true\n    end\n    local union_list = {}\n    for k, v in pairs(union_set) do\n        table.insert(union_list, k)\n    end\n    table.sort(union_list)\n    return tuple.new(unpack(union_list))\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "\tlocal tup1 = test_tup1\n\tlocal tup2 = test_tup2\n\tlocal union_tup = {}\n\tlocal union_tup_len = 0\n\tlocal tup1_len = #tup1\n\tlocal tup2_len = #tup2\n\tlocal i, j = 1, 1\n\twhile i <= tup1_len and j <= tup2_len do\n\t\tif tup1[i] < tup2[j] then\n\t\t\tunion_tup[union_tup_len + 1] = tup1[i]\n\t\t\ti = i + 1\n\t\telseif tup1[i] > tup2[j] then\n\t\t\tunion_tup[union_tup_len + 1] = tup2[j]\n\t\t\tj = j + 1\n\t\telse\n\t\t\tunion_tup[union_tup_len + 1] = tup1[i]\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\t\tunion_tup_len = union_tup_len + 1\n\tend\n\tif i <= tup1_len then\n\t\tfor k = i, tup1_len do\n\t\t\tunion_tup[union_tup_len + 1] = tup1[k]\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\tend\n\telseif j <= tup2_len then\n\t\tfor k = j, tup2_len do\n\t\t\tunion_tup[union_tup_len + 1] = tup2[k]\n\t\t\tunion_tup_len = union_tup_len + 1\n\t\tend\n\tend\n\treturn union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "  local union_tup = {}\n  local union_tup_len = 0\n  local tup1_len = #test_tup1\n  local tup2_len = #test_tup2\n  local i = 1\n  local j = 1\n  while i <= tup1_len and j <= tup2_len do\n    if test_tup1[i] < test_tup2[j] then\n      union_tup_len = union_tup_len + 1\n      union_tup[union_tup_len] = test_tup1[i]\n      i = i + 1\n    elseif test_tup1[i] > test_tup2[j] then\n      union_tup_len = union_tup_len + 1\n      union_tup[union_tup_len] = test_tup2[j]\n      j = j + 1\n    else\n      union_tup_len = union_tup_len + 1\n      union_tup[union_tup_len] = test_tup1[i]\n      i = i + 1\n      j = j + 1\n    end\n  end\n  if i <= tup1_len then\n    for k = i, tup1_len do\n      union_tup_len = union_tup_len + 1\n      union_tup[union_tup_len] = test_tup1[k]\n    end\n  end\n  if j <= tup2_len then\n    for k = j, tup2_len do\n      union_tup_len = union_tup_len + 1\n      union_tup[union_tup_len] = test_tup2[k]\n    end\n  end\n  return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "\tlocal tup = {}\n\tlocal tup_len = 0\n\tfor i = 1, #test_tup1 do\n\t\ttup[i] = test_tup1[i]\n\t\ttup_len = tup_len + 1\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tlocal found = false\n\t\tfor j = 1, #test_tup1 do\n\t\t\tif test_tup2[i] == test_tup1[j] then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttup_len = tup_len + 1\n\t\t\ttup[tup_len] = test_tup2[i]\n\t\tend\n\tend\n\ttable.sort(tup)\n\treturn tup\nend",
    "  local union_tup = {}\n  local union_tup_len = 0\n  local tup1_len = #test_tup1\n  local tup2_len = #test_tup2\n  local i, j = 1, 1\n  while i <= tup1_len and j <= tup2_len do\n    if test_tup1[i] < test_tup2[j] then\n      union_tup_len = union_tup_len + 1\n      union_tup[union_tup_len] = test_tup1[i]\n      i = i + 1\n    elseif test_tup1[i] > test_tup2[j] then\n      union_tup_len = union_tup_len + 1\n      union_tup[union_tup_len] = test_tup2[j]\n      j = j + 1\n    else\n      union_tup_len = union_tup_len + 1\n      union_tup[union_tup_len] = test_tup1[i]\n      i = i + 1\n      j = j + 1\n    end\n  end\n  while i <= tup1_len do\n    union_tup_len = union_tup_len + 1\n    union_tup[union_tup_len] = test_tup1[i]\n    i = i + 1\n  end\n  while j <= tup2_len do\n    union_tup_len = union_tup_len + 1\n    union_tup[union_tup_len] = test_tup2[j]\n    j = j + 1\n  end\n  return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local tup1_idx = 1\n    local tup2_idx = 1\n    while tup1_idx <= tup1_len and tup2_idx <= tup2_len do\n        if test_tup1[tup1_idx] < test_tup2[tup2_idx] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n        elseif test_tup1[tup1_idx] > test_tup2[tup2_idx] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[tup2_idx]\n            tup2_idx = tup2_idx + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n            tup2_idx = tup2_idx + 1\n        end\n    end\n    while tup1_idx <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[tup1_idx]\n        tup1_idx = tup1_idx + 1\n    end\n    while tup2_idx <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[t",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in pairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in pairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_size = 0\n    local tup1_size = #test_tup1\n    local tup2_size = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_size and j <= tup2_size do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_size do\n        union_tup_size = union_tup_size + 1\n        union_tup[union_tup_size] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_size do\n        union_tup_size = union_tup_size + 1\n        union_tup[union_tup_size] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_count = 0\n    local tup1_count = #test_tup1\n    local tup2_count = #test_tup2\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= tup1_count and tup2_index <= tup2_count do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup_count = union_tup_count + 1\n            union_tup[union_tup_count] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup_count = union_tup_count + 1\n            union_tup[union_tup_count] = test_tup2[tup2_index]\n            tup2_index = tup2_index + 1\n        else\n            union_tup_count = union_tup_count + 1\n            union_tup[union_tup_count] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n    end\n    while tup1_index <= tup1_count do\n        union_tup_count = union_tup_count + 1\n        union_tup[union_tup_count] = test_tup1[tup1_index]\n        tup1_index = tup1_index + 1\n    end\n    while tup2_index <= tup2_count do\n        union_tup_count = union_tup_count + 1\n        union_tup[union_tup_count] = test_tup2[tup2_index]\n        tup2_index = tup2_index + 1\n    end\n",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "  local union_tup = {}\n  local union_tup_index = 1\n  for i = 1, #test_tup1 do\n    union_tup[union_tup_index] = test_tup1[i]\n    union_tup_index = union_tup_index + 1\n  end\n  for i = 1, #test_tup2 do\n    union_tup[union_tup_index] = test_tup2[i]\n    union_tup_index = union_tup_index + 1\n  end\n  table.sort(union_tup)\n  return union_tup\nend",
    "\tlocal union_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tunion_tup[#union_tup + 1] = test_tup1[i]\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tunion_tup[#union_tup + 1] = test_tup2[i]\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    for i = 1, tup1_len do\n        union_tup[union_tup_len + 1] = test_tup1[i]\n        union_tup_len = union_tup_len + 1\n    end\n    for i = 1, tup2_len do\n        local is_exist = false\n        for j = 1, union_tup_len do\n            if test_tup2[i] == union_tup[j] then\n                is_exist = true\n                break\n            end\n        end\n        if not is_exist then\n            union_tup[union_tup_len + 1] = test_tup2[i]\n            union_tup_len = union_tup_len + 1\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local tup_union = {}\n    local tup_union_sorted = {}\n    for i, v in ipairs(test_tup1) do\n        tup_union[v] = true\n    end\n    for i, v in ipairs(test_tup2) do\n        tup_union[v] = true\n    end\n    for k, v in pairs(tup_union) do\n        table.insert(tup_union_sorted, k)\n    end\n    table.sort(tup_union_sorted)\n    return tup_union_sorted\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= #test_tup1 and tup2_index <= #test_tup2 do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            tup2_index = tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        tup1_index = tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        tup2_index = tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local tup1_set = {}\n    local tup2_set = {}\n    local union_set = {}\n    for i, v in ipairs(test_tup1) do\n        tup1_set[v] = true\n    end\n    for i, v in ipairs(test_tup2) do\n        tup2_set[v] = true\n    end\n    for k, v in pairs(tup1_set) do\n        union_set[k] = true\n    end\n    for k, v in pairs(tup2_set) do\n        union_set[k] = true\n    end\n    local union_tup = {}\n    for k, v in pairs(union_set) do\n        table.insert(union_tup, k)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend"
  ]
}