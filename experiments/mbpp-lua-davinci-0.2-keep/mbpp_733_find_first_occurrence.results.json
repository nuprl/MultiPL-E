{
  "name": "mbpp_733_find_first_occurrence",
  "language": "lua",
  "prompt": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l = 1\n  local r = #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9f11kin.lua:25: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpd9f11kin.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n    local lo, hi = 1, #A\n    while lo <= hi do\n        local mid = math.floor((lo + hi) / 2)\n        if A[mid] < x then\n            lo = mid + 1\n        elseif A[mid] > x then\n            hi = mid - 1\n        else\n            if mid == 1 or A[mid - 1] < x then\n                return mid\n            else\n                hi = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtkg8mdo.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpdtkg8mdo.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] < x then\n      lo = mid + 1\n    elseif A[mid] > x then\n      hi = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsaff2kr.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxsaff2kr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5wf3mbw.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmps5wf3mbw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = left + math.floor((right - left) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfi9h_cdz.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfi9h_cdz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg09qbn8t.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpg09qbn8t.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoofim2bi.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpoofim2bi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbru_n_nw.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbru_n_nw.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_oj80ta.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8_oj80ta.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph53nkpt5.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmph53nkpt5.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_oj80ta.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8_oj80ta.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8oum3_28.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8oum3_28.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dmgp35p.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3dmgp35p.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoofim2bi.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpoofim2bi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8i38imp.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpt8i38imp.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg09qbn8t.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpg09qbn8t.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsmzj2av.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpzsmzj2av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcsvdam6k.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bivd4pk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp6bivd4pk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  if A[l] == x then\n    return l\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpinxyn1a0.lua:20: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpinxyn1a0.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = left + math.floor((right - left) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_vb07nr.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpl_vb07nr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdyjpbkxl.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpdyjpbkxl.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x < A[mid] then\n      high = mid - 1\n    elseif x > A[mid] then\n      low = mid + 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91v_g99s.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp91v_g99s.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxb4p7mt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpyxb4p7mt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnd19jtt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfnd19jtt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bivd4pk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp6bivd4pk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8oum3_28.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8oum3_28.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg09qbn8t.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpg09qbn8t.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_oj80ta.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8_oj80ta.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5wf3mbw.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmps5wf3mbw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoofim2bi.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpoofim2bi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] < x then\n      lo = mid + 1\n    elseif A[mid] > x then\n      hi = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp80nl3dlf.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp80nl3dlf.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5nseb1v.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx5nseb1v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  if A[l] == x then\n    return l\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuglob8y.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpmuglob8y.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = lo + math.floor((hi - lo) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    elseif A[mid] < x then\n      lo = mid + 1\n    else\n      hi = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe7e1yac.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfe7e1yac.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbru_n_nw.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbru_n_nw.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = lo + math.floor((hi - lo) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      end\n      hi = mid - 1\n    elseif A[mid] < x then\n      lo = mid + 1\n    else\n      hi = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbno_on6.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpwbno_on6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      result = mid\n      high = mid - 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvetjmzkw.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpvetjmzkw.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg09qbn8t.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpg09qbn8t.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8oum3_28.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8oum3_28.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] < x then\n      lo = mid + 1\n    elseif A[mid] > x then\n      hi = mid - 1\n    elseif mid == 1 or A[mid - 1] ~= x then\n      return mid\n    else\n      hi = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfcbw9_y1.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfcbw9_y1.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsmzj2av.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpzsmzj2av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5wf3mbw.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmps5wf3mbw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8oum3_28.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8oum3_28.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5nseb1v.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx5nseb1v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5nseb1v.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx5nseb1v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxb4p7mt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpyxb4p7mt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        elseif A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzqxvd38.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpuzqxvd38.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5wf3mbw.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmps5wf3mbw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5nseb1v.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx5nseb1v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bivd4pk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp6bivd4pk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l < r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpai5ba6f3.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpai5ba6f3.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoofim2bi.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpoofim2bi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      end\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpioaa9qhi.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpioaa9qhi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = left + math.floor((right - left) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfi9h_cdz.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfi9h_cdz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bivd4pk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp6bivd4pk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp14ajewh.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpp14ajewh.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5nseb1v.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx5nseb1v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] < x then\n      lo = mid + 1\n    elseif A[mid] > x then\n      hi = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsaff2kr.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxsaff2kr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoofim2bi.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpoofim2bi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5nseb1v.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx5nseb1v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg09qbn8t.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpg09qbn8t.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5wf3mbw.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmps5wf3mbw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = left + math.floor((right - left) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrdafo10.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfrdafo10.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] > x then\n      r = m - 1\n    else\n      l = m + 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwtjapy7.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpmwtjapy7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwyl15f_.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbwyl15f_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = left + math.floor((right - left) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfi9h_cdz.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfi9h_cdz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5wf3mbw.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmps5wf3mbw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l < r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpai5ba6f3.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpai5ba6f3.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbru_n_nw.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbru_n_nw.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_oj80ta.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8_oj80ta.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5wf3mbw.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmps5wf3mbw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8oum3_28.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8oum3_28.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8oum3_28.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8oum3_28.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5nseb1v.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx5nseb1v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = left + math.floor((right - left) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_vb07nr.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpl_vb07nr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcsvdam6k.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5nseb1v.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx5nseb1v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l = 1\n  local r = #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] > x then\n      r = m - 1\n    else\n      l = m + 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ys59_4h.lua:25: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp1ys59_4h.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = low + math.floor((high - low) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjup31_eg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjup31_eg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_oj80ta.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8_oj80ta.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbru_n_nw.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbru_n_nw.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = lo + math.floor((hi - lo) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    elseif A[mid] < x then\n      lo = mid + 1\n    else\n      hi = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe7e1yac.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfe7e1yac.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5nseb1v.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx5nseb1v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = left + math.floor((right - left) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfi9h_cdz.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfi9h_cdz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x < A[mid] then\n      high = mid - 1\n    elseif x > A[mid] then\n      low = mid + 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91v_g99s.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp91v_g99s.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxb4p7mt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpyxb4p7mt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoofim2bi.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpoofim2bi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8oum3_28.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8oum3_28.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_oj80ta.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8_oj80ta.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n    local low = 1\n    local high = #A\n    local result = -1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if x == A[mid] then\n            result = mid\n            high = mid - 1\n        elseif x < A[mid] then\n            high = mid - 1\n        else\n            low = mid + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnibebq_e.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpnibebq_e.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      end\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpdnbgx5.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpmpdnbgx5.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnd19jtt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfnd19jtt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxb4p7mt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpyxb4p7mt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5wf3mbw.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmps5wf3mbw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40kq_n2f.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp40kq_n2f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoofim2bi.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpoofim2bi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_oj80ta.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8_oj80ta.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5nseb1v.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx5nseb1v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5wf3mbw.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmps5wf3mbw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoofim2bi.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpoofim2bi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = l + math.floor((r - l) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h64r3gr.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8h64r3gr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1muomgm.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm1muomgm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbru_n_nw.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbru_n_nw.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcsvdam6k.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoofim2bi.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpoofim2bi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509921,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbru_n_nw.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbru_n_nw.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb6s2kpg.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpeb6s2kpg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbtfuwv.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpflbtfuwv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] < x then\n      lo = mid + 1\n    elseif A[mid] > x then\n      hi = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509922,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsaff2kr.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxsaff2kr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] < x then\n      lo = mid + 1\n    elseif A[mid] > x then\n      hi = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122559,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp80nl3dlf.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp80nl3dlf.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}