{
  "name": "mbpp_71_comb_sort",
  "language": "lua",
  "prompt": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.25)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_yfu19m.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpd_yfu19m.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap/1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i+gap] then\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uforh5r.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp4uforh5r.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.max(1, math.floor(gap / 1.3))\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcajoj_l6.lua:20: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpcajoj_l6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3qr0e2u7.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.25)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytvzf7jz.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpytvzf7jz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.25)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpab681bsr.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpab681bsr.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local shrink = 1.3\n  local sorted = false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "lua: /tmp/tmplx16sbmq.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56r0gaki.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp56r0gaki.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local shrink = 1.3\n  local swapped = false\n  repeat\n    gap = math.floor(gap / shrink)\n    if gap < 1 then\n      gap = 1\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  until gap == 1 and not swapped\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx054os5c.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpx054os5c.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then\n      gap = 1\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeokd_zvo.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpeokd_zvo.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4izoucz.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpj4izoucz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then gap = math.floor(gap / 1.3) end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wi6ptfn.lua:20: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp3wi6ptfn.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local shrink = 1.3\n  local swapped = false\n  while gap > 1 or swapped do\n    gap = math.floor(gap / shrink)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6i_gooan.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp6i_gooan.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    repeat\n        gap = math.floor(gap / shrink)\n        if gap > 1 then\n            swapped = false\n        end\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    until gap == 1 and not swapped\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n\tlocal gap = #nums\n\tlocal swapped = true\n\twhile gap > 1 or swapped do\n\t\tgap = math.floor(gap / 1.3)\n\t\tif gap < 1 then gap = 1 end\n\t\tswapped = false\n\t\tfor i = 1, #nums - gap do\n\t\t\tif nums[i] > nums[i + gap] then\n\t\t\t\tnums[i], nums[i + gap] = nums[i + gap], nums[i]\n\t\t\t\tswapped = true\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ps2yedt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp5ps2yedt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcwqb1b5.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpwcwqb1b5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n\tlocal gap = #nums\n\tlocal swapped = true\n\twhile gap > 1 or swapped do\n\t\tgap = math.floor(gap / 1.3)\n\t\tif gap < 1 then gap = 1 end\n\t\tswapped = false\n\t\tfor i = 1, #nums - gap do\n\t\t\tif nums[i] > nums[i + gap] then\n\t\t\t\tnums[i], nums[i + gap] = nums[i + gap], nums[i]\n\t\t\t\tswapped = true\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ps2yedt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp5ps2yedt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56r0gaki.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp56r0gaki.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local shrink = 1.3\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / shrink)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_az9ydnf.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp_az9ydnf.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4izoucz.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpj4izoucz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.25)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytvzf7jz.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpytvzf7jz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw635gt4k.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpw635gt4k.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n\tlocal gap = #nums\n\tlocal swapped = true\n\twhile gap > 1 or swapped do\n\t\tgap = math.floor(gap / 1.3)\n\t\tif gap < 1 then gap = 1 end\n\t\tswapped = false\n\t\tfor i = 1, #nums - gap do\n\t\t\tif nums[i] > nums[i + gap] then\n\t\t\t\tnums[i], nums[i + gap] = nums[i + gap], nums[i]\n\t\t\t\tswapped = true\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ps2yedt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp5ps2yedt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local sorted = false\n    while not sorted do\n        gap = math.floor(gap / shrink)\n        if gap <= 1 then\n            gap = 1\n            sorted = true\n        end\n        local i = 1\n        while i + gap <= #nums do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            end\n            i = i + 1\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgdl_fc9.lua:26: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmphgdl_fc9.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcwqb1b5.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpwcwqb1b5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.25)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg59gtxx.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpqg59gtxx.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcwqb1b5.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpwcwqb1b5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.25)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg59gtxx.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpqg59gtxx.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        -- Update the gap value for a next comb.\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        -- A single \"comb\" over the input list.\n        swapped = false\n        for i = 1, #nums - gap do\n            local j = i + gap\n            if nums[i] > nums[j] then\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6g_cpwix.lua:26: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp6g_cpwix.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    if gap > 1 then\n      gap = math.floor(gap / 1.3)\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jrn9t6c.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp3jrn9t6c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local shrink = 1.3\n  local swapped = false\n  repeat\n    gap = math.floor(gap / shrink)\n    if gap > 1 then\n      swapped = false\n    end\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  until gap == 1 and not swapped\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    repeat\n        gap = math.floor(gap / shrink)\n        if gap > 1 then\n            swapped = false\n        end\n        for i = 1, #nums - gap do\n            local j = i + gap\n            if nums[i] > nums[j] then\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = true\n            end\n        end\n    until gap == 1 and not swapped\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw635gt4k.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpw635gt4k.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    repeat\n        gap = math.floor(gap / shrink)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    until gap == 1 and not swapped\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7a2tyjq2.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp7a2tyjq2.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local sorted = false\n    while not sorted do\n        gap = math.floor(gap / shrink)\n        if gap <= 1 then\n            gap = 1\n            sorted = true\n        end\n        for i = 1, #nums - gap do\n            local j = i + gap\n            if nums[i] > nums[j] then\n                nums[i], nums[j] = nums[j], nums[i]\n                sorted = false\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5k38l_a.lua:25: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpr5k38l_a.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local shrink = 1.3\n  local sorted = false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "lua: /tmp/tmplx16sbmq.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.25)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg59gtxx.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpqg59gtxx.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then\n      gap = 1\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeokd_zvo.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpeokd_zvo.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    if gap > 1 then\n      gap = math.floor(gap / 1.3)\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jrn9t6c.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp3jrn9t6c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.25)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg59gtxx.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpqg59gtxx.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.25)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_yfu19m.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpd_yfu19m.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56r0gaki.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp56r0gaki.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    if gap > 1 then\n      gap = math.floor(gap / 1.3)\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jrn9t6c.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp3jrn9t6c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.25)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg59gtxx.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpqg59gtxx.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    repeat\n        gap = math.floor(gap / shrink)\n        if gap > 1 then\n            swapped = false\n        end\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    until gap == 1 and not swapped\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw910kjr.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmprw910kjr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.25)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_yfu19m.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpd_yfu19m.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.max(1, math.floor(gap / 1.3))\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xcwiecu.lua:20: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp_xcwiecu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    repeat\n        gap = math.floor(gap / shrink)\n        if gap > 1 then\n            swapped = false\n        end\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    until gap == 1 and not swapped\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local shrink = 1.3\n  local swapped = false\n  repeat\n    gap = math.floor(gap / shrink)\n    if gap > 1 then\n      swapped = false\n    end\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  until gap == 1 and not swapped\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    if gap > 1 then\n      gap = math.floor(gap / 1.3)\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jrn9t6c.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp3jrn9t6c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    repeat\n        gap = math.floor(gap / shrink)\n        if gap > 1 then\n            swapped = false\n        end\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    until gap == 1 and not swapped\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.25)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg59gtxx.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpqg59gtxx.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    if gap > 1 then\n      gap = math.floor(gap / 1.3)\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jrn9t6c.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp3jrn9t6c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n\tlocal gap = #nums\n\tlocal shrink = 1.3\n\tlocal swapped = true\n\twhile swapped do\n\t\tgap = math.floor(gap / shrink)\n\t\tif gap <= 1 then\n\t\t\tgap = 1\n\t\t\tswapped = false\n\t\tend\n\t\tfor i = 1, #nums - gap do\n\t\t\tif nums[i] > nums[i + gap] then\n\t\t\t\tnums[i], nums[i + gap] = nums[i + gap], nums[i]\n\t\t\t\tswapped = true\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemgae04c.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpemgae04c.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n\tlocal gap = #nums\n\tlocal swapped = true\n\twhile gap > 1 or swapped do\n\t\tgap = math.floor(gap / 1.3)\n\t\tif gap < 1 then gap = 1 end\n\t\tswapped = false\n\t\tfor i = 1, #nums - gap do\n\t\t\tif nums[i] > nums[i + gap] then\n\t\t\t\tnums[i], nums[i + gap] = nums[i + gap], nums[i]\n\t\t\t\tswapped = true\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ps2yedt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp5ps2yedt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n\tlocal gap = #nums\n\tlocal swapped = true\n\twhile gap > 1 or swapped do\n\t\tgap = math.floor(gap / 1.3)\n\t\tif gap < 1 then gap = 1 end\n\t\tswapped = false\n\t\tfor i = 1, #nums - gap do\n\t\t\tif nums[i] > nums[i + gap] then\n\t\t\t\tnums[i], nums[i + gap] = nums[i + gap], nums[i]\n\t\t\t\tswapped = true\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ps2yedt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp5ps2yedt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then\n      gap = 1\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeokd_zvo.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpeokd_zvo.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3qr0e2u7.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56r0gaki.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp56r0gaki.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    if gap > 1 then\n      gap = math.floor(gap / 1.3)\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jrn9t6c.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp3jrn9t6c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    if gap > 1 then\n      gap = math.floor(gap / 1.3)\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jrn9t6c.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp3jrn9t6c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while swapped do\n        gap = math.floor(gap / shrink)\n        if gap > 1 then\n            swapped = false\n        else\n            gap = 1\n            swapped = false\n        end\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqp9ufvd.lua:26: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpqqp9ufvd.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local sorted = false\n    while not sorted do\n        gap = math.floor(gap / shrink)\n        if gap <= 1 then\n            gap = 1\n            sorted = true\n        end\n        local i = 1\n        while i + gap <= #nums do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            end\n            i = i + 1\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgdl_fc9.lua:26: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmphgdl_fc9.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.25)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_yfu19m.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpd_yfu19m.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n\tlocal gap = #nums\n\tlocal swapped = true\n\twhile gap > 1 or swapped do\n\t\tgap = math.floor(gap / 1.3)\n\t\tif gap < 1 then gap = 1 end\n\t\tswapped = false\n\t\tfor i = 1, #nums - gap do\n\t\t\tif nums[i] > nums[i + gap] then\n\t\t\t\tnums[i], nums[i + gap] = nums[i + gap], nums[i]\n\t\t\t\tswapped = true\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ps2yedt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp5ps2yedt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56r0gaki.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp56r0gaki.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local shrink = 1.3\n  local swapped = false\n  while gap > 1 or swapped do\n    gap = math.floor(gap / shrink)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6i_gooan.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp6i_gooan.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56r0gaki.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp56r0gaki.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n\tlocal gap = #nums\n\tlocal shrink = 1.3\n\tlocal swapped = false\n\trepeat\n\t\tgap = math.floor(gap / shrink)\n\t\tif gap > 1 then\n\t\t\tswapped = false\n\t\t\tfor i = 1, #nums - gap do\n\t\t\t\tif nums[i] > nums[i + gap] then\n\t\t\t\t\tnums[i], nums[i + gap] = nums[i + gap], nums[i]\n\t\t\t\t\tswapped = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tuntil gap == 1 and not swapped\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwhe4txs.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpuwhe4txs.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.max(1, math.floor(gap / 1.25))\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8aguaem.lua:20: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpf8aguaem.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while swapped do\n        gap = math.floor(gap / shrink)\n        if gap > 1 then\n            swapped = false\n        else\n            gap = 1\n            swapped = false\n        end\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4s_5nw49.lua:27: expected: {5, 15, 25, 37, 79}\nactual: {5, 15, 37, 25, 79}\nstack traceback:\n\t/tmp/tmp4s_5nw49.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n\tlocal gap = #nums\n\tlocal shrink = 1.3\n\tlocal swapped = false\n\trepeat\n\t\tgap = math.floor(gap / shrink)\n\t\tif gap > 1 then\n\t\t\tswapped = false\n\t\t\tfor i = 1, #nums - gap do\n\t\t\t\tif nums[i] > nums[i + gap] then\n\t\t\t\t\tnums[i], nums[i + gap] = nums[i + gap], nums[i]\n\t\t\t\t\tswapped = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tuntil gap == 1 and not swapped\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwhe4txs.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpuwhe4txs.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4izoucz.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpj4izoucz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4izoucz.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpj4izoucz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then\n      gap = 1\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeokd_zvo.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpeokd_zvo.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while swapped do\n        gap = math.floor(gap / shrink)\n        if gap > 1 then\n            swapped = false\n        else\n            gap = 1\n            swapped = false\n        end\n        for i = 1, #nums - gap do\n            local j = i + gap\n            if nums[i] > nums[j] then\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3ue0y54.lua:27: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3ue0y54.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4izoucz.lua:24: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpj4izoucz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.247330950103979)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zct3tkq.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmp_zct3tkq.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.max(1, math.floor(gap / 1.25))\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6irl_u1.lua:20: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpq6irl_u1.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw635gt4k.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpw635gt4k.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.25)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_yfu19m.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpd_yfu19m.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509794,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3qr0e2u7.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksm8nble.lua:22: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpksm8nble.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3btaemt.lua:21: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpg3btaemt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykkpp60t.lua:23: expected: {5, 15, 25, 37, 79}\nactual: nil\nstack traceback:\n\t/tmp/tmpykkpp60t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a list of elements.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.max(1, math.floor(gap / 1.25))\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124113,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}