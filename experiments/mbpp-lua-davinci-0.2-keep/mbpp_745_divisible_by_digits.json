{
  "name": "mbpp_745_divisible_by_digits",
  "language": "lua",
  "prompt": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local number = i\n    local digits = {}\n    while number > 0 do\n      local digit = number % 10\n      if digit ~= 0 then\n        table.insert(digits, digit)\n      end\n      number = math.floor(number / 10)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend",
    "  local result = {}\n  for i=startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = (num - digit) / 10\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local function is_divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch('%d') do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if is_divisible(i) then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local is_divisible = true\n        for digit in tostring(i):gmatch(\"%d\") do\n            if i % tonumber(digit) ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch('%d') do\n            digits[#digits+1] = tonumber(digit)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            divisible_numbers[#divisible_numbers+1] = i\n        end\n    end\n    return divisible_numbers\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = i\n        local digits = {}\n        while number > 0 do\n            local digit = number % 10\n            if digit ~= 0 then\n                table.insert(digits, digit)\n            end\n            number = math.floor(number / 10)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, divisor)\n      if num == 0 then\n        return true\n      elseif num % divisor == 0 then\n        return divisible_by_digits_helper_helper(math.floor(num / 10), divisor)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_helper_helper(num, num % 10)\n  end\n  local function divisible_by_digits_helper_helper(startnum, endnum, acc)\n    if startnum == endnum then\n      if divisible_by_digits_helper(startnum) then\n        return {startnum}\n      else\n        return {}\n      end\n    elseif divisible_by_digits_helper(startnum) then\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, {startnum})\n    else\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, {})\n    end\n  end\n  return divisible_by_digits_helper_helper(startnum, endnum, {})\nend",
    "    local function divisible_by_digits_helper(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_helper(i) then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    local number = i\n    while number > 0 do\n      local digit = number % 10\n      if digit == 0 then\n        break\n      end\n      table.insert(digits, digit)\n      number = math.floor(number / 10)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend",
    "    local divisible_by_digits = {}\n    for i=startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = (num - digit) / 10\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend",
    "  local function divisible(n)\n    local function divisible_by_digit(n, d)\n      return n % d == 0\n    end\n    local function digits(n)\n      local t = {}\n      while n > 0 do\n        local d = n % 10\n        t[#t + 1] = d\n        n = (n - d) / 10\n      end\n      return t\n    end\n    for _, d in ipairs(digits(n)) do\n      if not divisible_by_digit(n, d) then\n        return false\n      end\n    end\n    return true\n  end\n  local t = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      t[#t + 1] = i\n    end\n  end\n  return t\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits+1] = tonumber(digit)\n        end\n        local is_divisible = true\n        for _, digit in ipairs(digits) do\n            if digit == 0 or i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            divisible_numbers[#divisible_numbers+1] = i\n        end\n    end\n    return divisible_numbers\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend",
    "\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch('%d') do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, digit)\n      if digit == 0 then\n        return true\n      elseif num % digit == 0 then\n        return divisible_by_digits_helper_helper(num, digit / 10)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_helper_helper(num, num)\n  end\n  local function divisible_by_digits_helper_helper(startnum, endnum)\n    if startnum > endnum then\n      return {}\n    elseif divisible_by_digits_helper(startnum) then\n      return {startnum} + divisible_by_digits_helper_helper(startnum + 1, endnum)\n    else\n      return divisible_by_digits_helper_helper(startnum + 1, endnum)\n    end\n  end\n  return divisible_by_digits_helper_helper(startnum, endnum)\nend",
    "    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, digit)\n      if digit == 0 then return true end\n      if num % digit == 0 then\n        return divisible_by_digits_helper_helper(num, digit / 10)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_helper_helper(num, num)\n  end\n  local function divisible_by_digits_helper_helper(startnum, endnum, acc)\n    if startnum > endnum then return acc end\n    if divisible_by_digits_helper(startnum) then\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, acc .. startnum .. ' ')\n    else\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, acc)\n    end\n  end\n  return divisible_by_digits_helper_helper(startnum, endnum, '')\nend",
    "\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "  local function divisible_by_digits(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits, range(startnum, endnum))\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            table.insert(digits, tonumber(digit))\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "    local function divisible_by_digits_helper(num)\n        local num_str = tostring(num)\n        for i = 1, #num_str do\n            local digit = tonumber(num_str:sub(i, i))\n            if digit == 0 or num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_helper(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local function divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits+1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible(i) then\n            result[#result+1] = i\n        end\n    end\n    return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, digit)\n      return num % digit == 0\n    end\n    return num % 10 == 0 and num % 100 == 0 and num % 1000 == 0 and num % 10000 == 0 and num % 100000 == 0 and num % 1000000 == 0 and num % 10000000 == 0 and num % 100000000 == 0 and num % 1000000000 == 0 and num % 10000000000 == 0 and num % 100000000000 == 0 and num % 1000000000000 == 0 and num % 10000000000000 == 0 and num % 100000000000000 == 0 and num % 1000000000000000 == 0 and num % 10000000000000000 == 0 and num % 100000000000000000 == 0 and num % 1000000000000000000 == 0 and num % 10000000000000000000 == 0 and num % 100000000000000000000 == 0 and num % 1000000000000000000000 == 0 and num % 10000000000000000000000 == 0 and num % 100000000000000000000000 == 0 and num % 1000000000000000000000000 == 0 and num % 10000000000000000000000000 == 0 and num % 100000000000000000000000000 == 0 and num % 1000000000000000000000000000 == 0 and num % 10000000000000000000000000000 == 0 and num % 100000000000000000000000000000 == 0 and num % 1000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000000000 == 0 and num",
    "\tlocal divisible = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible_by_all = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit ~= 0 and i % digit ~= 0 then\n\t\t\t\tdivisible_by_all = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible_by_all then\n\t\t\ttable.insert(divisible, i)\n\t\tend\n\tend\n\treturn divisible\nend",
    "\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(num, divisor)\n\t\t\tif num == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tif divisor % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\treturn divisible_by_digits_inner_inner(math.floor(num / 10), divisor)\n\t\tend\n\t\treturn divisible_by_digits_inner_inner(num, num)\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible_by_digits_inner(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = num_to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(divisible_by_digits, i)\n    end\n  end\n  return divisible_by_digits\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = tostring(i)\n        local divisible = true\n        for j = 1, #num do\n            if i % tonumber(num:sub(j, j)) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local num = i\n    local is_divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if is_divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend",
    "    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local digits = {}\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 then\n                break\n            end\n            table.insert(digits, digit)\n            num = math.floor(num / 10)\n        end\n        if #digits > 0 then\n            local divisible = true\n            for _, digit in ipairs(digits) do\n                if i % digit ~= 0 then\n                    divisible = false\n                    break\n                end\n            end\n            if divisible then\n                table.insert(divisible_by_digits, i)\n            end\n        end\n    end\n    return divisible_by_digits\nend",
    "    local function divisible(n)\n        local digits = {}\n        for i = 1, #tostring(n) do\n            digits[i] = tonumber(tostring(n):sub(i, i))\n        end\n        for _, v in ipairs(digits) do\n            if n % v ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local divisible = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local divisible_by_all = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible_by_all = false\n                break\n            end\n        end\n        if divisible_by_all then\n            divisible[#divisible + 1] = i\n        end\n    end\n    return divisible\nend",
    "    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend",
    "  local divisible = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible_by_all = true\n    for j = 1, #num do\n      local digit = tonumber(num:sub(j, j))\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n    end\n    if divisible_by_all then\n      divisible[#divisible + 1] = i\n    end\n  end\n  return divisible\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, digit)\n      if digit == 0 then\n        return true\n      elseif num % digit == 0 then\n        return divisible_by_digits_helper_helper(num, digit / 10)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_helper_helper(num, num)\n  end\n  local function divisible_by_digits_helper_helper(startnum, endnum, acc)\n    if startnum > endnum then\n      return acc\n    elseif divisible_by_digits_helper(startnum) then\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, {startnum} + acc)\n    else\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, acc)\n    end\n  end\n  return divisible_by_digits_helper_helper(startnum, endnum, {})\nend",
    "\tlocal function divisible_by_digits_inner(n)\n\t\tlocal function divisible_by_digits_inner_inner(d)\n\t\t\treturn n % d == 0\n\t\tend\n\t\treturn all(divisible_by_digits_inner_inner, digits(n))\n\tend\n\treturn filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit ~= 0 and i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal function divisible_by_digits_helper(num)\n\t\tlocal num_str = tostring(num)\n\t\tfor i = 1, #num_str do\n\t\t\tlocal digit = tonumber(num_str:sub(i, i))\n\t\t\tif digit == 0 or num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible_by_digits_helper(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = get_digits(i)\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = i\n        local divisible = true\n        while number > 0 do\n            local digit = number % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            number = math.floor(number / 10)\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local is_divisible = true\n        for digit in tostring(i):gmatch(\"%d\") do\n            if i % tonumber(digit) ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        return all(divisible_by_digit, digits(num))\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digits_inner_inner(num, digit)\n      if digit == 0 then return true end\n      if num % digit == 0 then\n        return divisible_by_digits_inner_inner(num, digit // 10)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_inner_inner(num, num)\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_inner(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digits_inner_inner(num, divisor)\n      if num == 0 then\n        return true\n      else\n        return num % divisor == 0 and divisible_by_digits_inner_inner(math.floor(num / 10), divisor)\n      end\n    end\n    return divisible_by_digits_inner_inner(num, num % 10)\n  end\n  local function divisible_by_digits_inner_inner(startnum, endnum, acc)\n    if startnum > endnum then\n      return acc\n    else\n      return divisible_by_digits_inner_inner(startnum + 1, endnum, divisible_by_digits_inner(startnum) and acc or acc .. startnum .. \" \")\n    end\n  end\n  return divisible_by_digits_inner_inner(startnum, endnum, \"\")\nend",
    "\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(num, divisor)\n\t\t\tif num == 0 then\n\t\t\t\treturn true\n\t\t\telseif num % divisor == 0 then\n\t\t\t\treturn divisible_by_digits_inner_inner(math.floor(num / 10), divisor)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn divisible_by_digits_inner_inner(num, num % 10)\n\tend\n\tlocal function divisible_by_digits_inner_inner(startnum, endnum, acc)\n\t\tif startnum > endnum then\n\t\t\treturn acc\n\t\telseif divisible_by_digits_inner(startnum) then\n\t\t\treturn divisible_by_digits_inner_inner(startnum + 1, endnum, acc .. startnum .. \" \")\n\t\telse\n\t\t\treturn divisible_by_digits_inner_inner(startnum + 1, endnum, acc)\n\t\tend\n\tend\n\treturn divisible_by_digits_inner_inner(startnum, endnum, \"\")\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i=startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local is_divisible = true\n        for _, digit in ipairs(string.split(tostring(i), '')) do\n            if i % tonumber(digit) ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for i=1,#digits do\n      if num % digits[i] ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i=startnum,endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local function divisible_by_digits_inner(num)\n        local function divisible_by_digits_inner_inner(num)\n            local function divisible_by_digits_inner_inner_inner(num)\n                local function divisible_by_digits_inner_inner_inner_inner(num)\n                    local function divisible_by_digits_inner_inner_inner_inner_inner(num)\n                        local function divisible_by_digits_inner_inner_inner_inner_inner_inner(num)\n                            local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner(num)\n                                local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                    local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                        local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                            local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                                local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                                    local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                                        local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                                            local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                                                local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(",
    "\tlocal function is_divisible(num)\n\t\tlocal digits = tostring(num)\n\t\tfor i = 1, #digits do\n\t\t\tif num % tonumber(digits:sub(i, i)) ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif is_divisible(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal function divisible_by_digits_helper(num)\n\t\tlocal function divisible_by_digit(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\treturn all(divisible_by_digit, digits(num))\n\tend\n\treturn filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = string.gmatch(tostring(num), \"%d\")\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digits_inner_inner(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digits_inner_inner, digits(num))\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(digits, divisible_by_digit)\n    end\n    return filter(range(startnum, endnum), divisible_by_digits_helper)\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digits_inner_inner(num, digit)\n      return num % digit == 0\n    end\n    return num % 10 == 0 and num % 100 == 0 and num % 1000 == 0 and num % 10000 == 0 and num % 100000 == 0 and num % 1000000 == 0 and num % 10000000 == 0 and num % 100000000 == 0 and num % 1000000000 == 0 and num % 10000000000 == 0 and num % 100000000000 == 0 and num % 1000000000000 == 0 and num % 10000000000000 == 0 and num % 100000000000000 == 0 and num % 1000000000000000 == 0 and num % 10000000000000000 == 0 and num % 100000000000000000 == 0 and num % 1000000000000000000 == 0 and num % 10000000000000000000 == 0 and num % 100000000000000000000 == 0 and num % 1000000000000000000000 == 0 and num % 10000000000000000000000 == 0 and num % 100000000000000000000000 == 0 and num % 1000000000000000000000000 == 0 and num % 10000000000000000000000000 == 0 and num % 100000000000000000000000000 == 0 and num % 1000000000000000000000000000 == 0 and num % 10000000000000000000000000000 == 0 and num % 100000000000000000000000000000 == 0 and num % 1000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend",
    "  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local digits = {}\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 then\n        table.insert(digits, digit)\n      end\n      num = math.floor(num / 10)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(divisible_by_digits, i)\n    end\n  end\n  return divisible_by_digits\nend",
    "  local function divisible(n)\n    local function divisible_by_digit(d)\n      return n % d == 0\n    end\n    for d in tostring(n):gmatch(\"%d\") do\n      if not divisible_by_digit(tonumber(d)) then\n        return false\n      end\n    end\n    return true\n  end\n  local t = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      table.insert(t, i)\n    end\n  end\n  return t\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local digits = {}\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 then\n                break\n            end\n            table.insert(digits, digit)\n            num = math.floor(num / 10)\n        end\n        if #digits > 0 then\n            local divisible = true\n            for _, digit in ipairs(digits) do\n                if i % digit ~= 0 then\n                    divisible = false\n                    break\n                end\n            end\n            if divisible then\n                table.insert(divisible_by_digits, i)\n            end\n        end\n    end\n    return divisible_by_digits\nend",
    "\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = (num - digit) / 10\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            divisible_numbers[#divisible_numbers + 1] = i\n        end\n    end\n    return divisible_numbers\nend",
    "\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible = true\n    for j = 1, #num do\n      if i % tonumber(num:sub(j, j)) ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend",
    "  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend",
    "\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend",
    "    local result = {}\n    for i=startnum,endnum do\n        local str = tostring(i)\n        local divisible = true\n        for j=1,#str do\n            local digit = tonumber(str:sub(j,j))\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local digits = {}\n    local num = i\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 then\n        table.insert(digits, digit)\n      end\n      num = math.floor(num / 10)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(divisible_by_digits, i)\n    end\n  end\n  return divisible_by_digits\nend",
    "    local function divisible_by_digits_helper(num)\n        local num_str = tostring(num)\n        for i = 1, #num_str do\n            local digit = tonumber(num_str:sub(i, i))\n            if digit == 0 or num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_helper(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local divisible_nums = {}\n  for i=startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(divisible_nums, i)\n    end\n  end\n  return divisible_nums\nend",
    "  local function divisible_by_digits_helper(n)\n    local function divisible_by_digit(d)\n      return n % d == 0\n    end\n    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n      digits[#digits + 1] = tonumber(d)\n    end\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local number = i\n    local divisible = true\n    while number > 0 do\n      local digit = number % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      number = math.floor(number / 10)\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function is_divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      table.insert(digits, tonumber(digit))\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if is_divisible(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        local num = i\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 then\n                break\n            end\n            table.insert(digits, digit)\n            num = math.floor(num / 10)\n        end\n        if num == 0 then\n            local divisible = true\n            for _, digit in ipairs(digits) do\n                if i % digit ~= 0 then\n                    divisible = false\n                    break\n                end\n            end\n            if divisible then\n                table.insert(divisible_numbers, i)\n            end\n        end\n    end\n    return divisible_numbers\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local is_divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if is_divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "\tlocal function divisible(num)\n\t\tlocal digits = {}\n\t\tfor digit in tostring(num):gmatch(\"%d\") do\n\t\t\tdigits[#digits + 1] = tonumber(digit)\n\t\tend\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible(i) then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "\tlocal divisible_numbers = {}\n\tfor i = startnum, endnum do\n\t\tlocal divisible = true\n\t\tlocal number = i\n\t\twhile number > 0 do\n\t\t\tlocal digit = number % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnumber = math.floor(number / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_numbers, i)\n\t\tend\n\tend\n\treturn divisible_numbers\nend",
    "\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal divisible = true\n\t\tfor digit in tostring(i):gmatch('%d') do\n\t\t\tif i % tonumber(digit) ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend",
    "    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            divisible_by_digits[#divisible_by_digits + 1] = i\n        end\n    end\n    return divisible_by_digits\nend",
    "\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = (num - digit) / 10\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend",
    "  local result = {}\n  for i=startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "\tlocal function divisible_by_digits_helper(n)\n\t\tlocal function divisible_by_digit(d)\n\t\t\treturn n % d == 0\n\t\tend\n\t\treturn all(divisible_by_digit, digits(n))\n\tend\n\treturn filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        return all(divisible_by_digit, digits(num))\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local divisible = true\n        for digit in tostring(i):gmatch('%d') do\n            if i % tonumber(digit) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend",
    "\tlocal function divisible_by_digits_helper(n)\n\t\tlocal function divisible_by_digit(n, d)\n\t\t\treturn n % d == 0\n\t\tend\n\t\tlocal function digits(n)\n\t\t\tlocal digits = {}\n\t\t\twhile n > 0 do\n\t\t\t\ttable.insert(digits, n % 10)\n\t\t\t\tn = math.floor(n / 10)\n\t\t\tend\n\t\t\treturn digits\n\t\tend\n\t\tlocal function all_digits_divisible(n, digits)\n\t\t\tfor _, d in ipairs(digits) do\n\t\t\t\tif not divisible_by_digit(n, d) then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\t\treturn all_digits_divisible(n, digits(n))\n\tend\n\tlocal function range(startnum, endnum)\n\t\tlocal range = {}\n\t\tfor i = startnum, endnum do\n\t\t\ttable.insert(range, i)\n\t\tend\n\t\treturn range\n\tend\n\treturn filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local is_divisible = true\n        for digit in tostring(i):gmatch('%d') do\n            if i % tonumber(digit) ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        local number = i\n        while number > 0 do\n            local digit = number % 10\n            if digit ~= 0 then\n                table.insert(digits, digit)\n            end\n            number = math.floor(number / 10)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    local num = i\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 then\n        break\n      end\n      table.insert(digits, digit)\n      num = math.floor(num / 10)\n    end\n    if num == 0 then\n      local divisible = true\n      for _, digit in ipairs(digits) do\n        if i % digit ~= 0 then\n          divisible = false\n          break\n        end\n      end\n      if divisible then\n        table.insert(divisible_numbers, i)\n      end\n    end\n  end\n  return divisible_numbers\nend",
    "    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local digits = tostring(i):split(\"\")\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % tonumber(digit) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend",
    "  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      divisible_by_digits[#divisible_by_digits + 1] = i\n    end\n  end\n  return divisible_by_digits\nend",
    "    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            divisible_by_digits[#divisible_by_digits + 1] = i\n        end\n    end\n    return divisible_by_digits\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(digits, divisible_by_digit)\n    end\n    return filter(range(startnum, endnum), divisible_by_digits_helper)\nend",
    "  local function is_divisible(num)\n    local function is_divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(digits, is_divisible_by_digit)\n  end\n  return filter(range(startnum, endnum), is_divisible)\nend",
    "\tlocal function divisible_by_digits_helper(num)\n\t\tlocal function divisible_by_digit(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\treturn string.gmatch(num, \"%d\")\n\t\t\t:all(divisible_by_digit)\n\tend\n\treturn range(startnum, endnum)\n\t\t:filter(divisible_by_digits_helper)\nend",
    "\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\treturn all(divisible_by_digits_inner_inner, digits(num))\n\tend\n\treturn filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_predicate(num)\n    local digits = to_digits(num)\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  return filter(divisible_by_digits_predicate, range(startnum, endnum))\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = tostring(i)\n        local divisible = true\n        for j = 1, #num do\n            if i % tonumber(num:sub(j, j)) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = tostring(i)\n        local is_divisible = true\n        for j = 1, #num do\n            local digit = tonumber(num:sub(j, j))\n            if digit ~= 0 and i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = (num - digit) / 10\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(digits, divisible_by_digit)\n    end\n    return filter(range(startnum, endnum), divisible_by_digits_helper)\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "\tlocal function divisible_by_digits_inner(num)\n\t\tlocal digits = {}\n\t\tlocal num_copy = num\n\t\twhile num_copy > 0 do\n\t\t\tlocal digit = num_copy % 10\n\t\t\tif digit == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\ttable.insert(digits, digit)\n\t\t\tnum_copy = math.floor(num_copy / 10)\n\t\tend\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible_by_digits_inner(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "\tlocal divisible_numbers = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal is_divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tis_divisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif is_divisible then\n\t\t\ttable.insert(divisible_numbers, i)\n\t\tend\n\tend\n\treturn divisible_numbers\nend",
    "    local function divisible_by_digits_helper(num)\n        local digits = {}\n        local num_copy = num\n        while num_copy > 0 do\n            table.insert(digits, num_copy % 10)\n            num_copy = math.floor(num_copy / 10)\n        end\n        for _, digit in ipairs(digits) do\n            if digit == 0 then\n                return false\n            end\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for num = startnum, endnum do\n        if divisible_by_digits_helper(num) then\n            table.insert(result, num)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(digits, divisible_by_digit)\n  end\n  return filter(range(startnum, endnum), divisible_by_digits_helper)\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      divisible[#divisible + 1] = i\n    end\n  end\n  return divisible\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            divisible_numbers[#divisible_numbers + 1] = i\n        end\n    end\n    return divisible_numbers\nend",
    "  local function divisible_by_digits_inner(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local numbers = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_inner(i) then\n      numbers[#numbers + 1] = i\n    end\n  end\n  return numbers\nend",
    "  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local is_divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend",
    "    local function is_divisible(num)\n        local function is_divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(digits, is_divisible_by_digit)\n    end\n    return filter(range(startnum, endnum), is_divisible)\nend",
    "\tlocal function is_divisible(num)\n\t\tlocal digits = {}\n\t\tfor digit in tostring(num):gmatch(\"%d\") do\n\t\t\ttable.insert(digits, tonumber(digit))\n\t\tend\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif is_divisible(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal is_divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tis_divisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif is_divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            divisible_numbers[#divisible_numbers + 1] = i\n        end\n    end\n    return divisible_numbers\nend",
    "\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit ~= 0 and i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch('%d') do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local is_divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            divisible_numbers[#divisible_numbers + 1] = i\n        end\n    end\n    return divisible_numbers\nend",
    "  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local digits = {}\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 then\n        table.insert(digits, digit)\n      end\n      num = math.floor(num / 10)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(divisible_by_digits, i)\n    end\n  end\n  return divisible_by_digits\nend",
    "    local function is_divisible(num)\n        local function is_divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(digits, is_divisible_by_digit)\n    end\n    return filter(range(startnum, endnum), is_divisible)\nend",
    "    return filter(\n        function(n)\n            local digits = to_digits(n)\n            for _, d in ipairs(digits) do\n                if d == 0 or n % d ~= 0 then\n                    return false\n                end\n            end\n            return true\n        end,\n        range(startnum, endnum)\n    )\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local digits = {}\n        local num = i\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 then\n                break\n            end\n            table.insert(digits, digit)\n            num = math.floor(num / 10)\n        end\n        local is_divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local digits = {}\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 then\n        break\n      end\n      table.insert(digits, digit)\n      num = math.floor(num / 10)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local divisible = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible_by_all = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible_by_all = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible_by_all then\n            table.insert(divisible, i)\n        end\n    end\n    return divisible\nend",
    "\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(num, divisor)\n\t\t\tif num == 0 then\n\t\t\t\treturn true\n\t\t\telseif num % divisor == 0 then\n\t\t\t\treturn divisible_by_digits_inner_inner(math.floor(num / 10), divisor)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn divisible_by_digits_inner_inner(num, num % 10)\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible_by_digits_inner(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_by_digits[#divisible_by_digits + 1] = i\n    end\n  end\n  return divisible_by_digits\nend",
    "    local function divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits+1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible(i) then\n            result[#result+1] = i\n        end\n    end\n    return result\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = string.gmatch(tostring(num), \"%d\")\n    return all(digits, divisible_by_digit)\n  end\n  return filter(range(startnum, endnum), divisible_by_digits_inner)\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digits_helper_helper(num, divisor)\n            if num == 0 then\n                return true\n            elseif num % divisor ~= 0 then\n                return false\n            else\n                return divisible_by_digits_helper_helper(num // 10, divisor)\n            end\n        end\n        return divisible_by_digits_helper_helper(num, num % 10)\n    end\n    local function divisible_by_digits_helper_helper(num)\n        if num == 0 then\n            return true\n        elseif not divisible_by_digits_helper(num) then\n            return false\n        else\n            return divisible_by_digits_helper_helper(num // 10)\n        end\n    end\n    local function divisible_by_digits_helper_helper_helper(num)\n        if num == 0 then\n            return true\n        elseif not divisible_by_digits_helper_helper(num) then\n            return false\n        else\n            return divisible_by_digits_helper_helper_helper(num // 10)\n        end\n    end\n    local function divisible_by_digits_helper_helper_helper_helper(num)\n        if num == 0 then\n            return true\n        elseif not divisible_by_digits_helper_helper_helper(num) then\n            return false\n        else\n            return divisible_by_digits_helper_helper_helper_helper(num // 10)\n        end\n    end\n    local function divisible_by_digits_helper_helper_helper_helper_helper(num)\n        if num == 0 then\n            return true\n        elseif not divisible_by_digits_helper_helper_helper_helper(num) then\n            return false\n        else\n            return divisible_by_digits_helper_helper_helper_helper_helper(num // 10",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible = true\n    for j = 1, #num do\n      local digit = tonumber(num:sub(j, j))\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(divisible_by_digits, i)\n    end\n  end\n  return divisible_by_digits\nend",
    "    local function is_divisible(num)\n        local digits = {}\n        for i = 1, #num do\n            digits[i] = tonumber(num:sub(i, i))\n        end\n        for i = 1, #digits do\n            if num % digits[i] ~= 0 then\n                return false\n            end\n        end\n        return true\n    end",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            table.insert(digits, tonumber(digit))\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch('%d') do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local is_divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n    end\n    if is_divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend",
    "    local function divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits+1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible(i) then\n            result[#result+1] = i\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "\tlocal divisible = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible_by_all = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible_by_all = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible_by_all then\n\t\t\ttable.insert(divisible, i)\n\t\tend\n\tend\n\treturn divisible\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "\tlocal divisible_by_digits = {}\n\tfor i=startnum, endnum do\n\t\tif i % tonumber(i:sub(1,1)) == 0 and i % tonumber(i:sub(2,2)) == 0 then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local number = i\n    local divisible = true\n    while number > 0 do\n      local digit = number % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      number = math.floor(number / 10)\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend",
    "  local divisible = {}\n  for i = startnum, endnum do\n    local divisible_by_all = true\n    for digit in tostring(i):gmatch('%d') do\n      if i % tonumber(digit) ~= 0 then\n        divisible_by_all = false\n        break\n      end\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend",
    "  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      divisible_by_digits[#divisible_by_digits + 1] = i\n    end\n  end\n  return divisible_by_digits\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digits_helper_helper(num, digit)\n            if digit == 0 then\n                return true\n            elseif num % digit == 0 then\n                return divisible_by_digits_helper_helper(num, digit / 10)\n            else\n                return false\n            end\n        end\n        return divisible_by_digits_helper_helper(num, num)\n    end\n    local function divisible_by_digits_helper_helper(startnum, endnum, acc)\n        if startnum > endnum then\n            return acc\n        elseif divisible_by_digits_helper(startnum) then\n            return divisible_by_digits_helper_helper(startnum + 1, endnum, acc .. startnum .. \" \")\n        else\n            return divisible_by_digits_helper_helper(startnum + 1, endnum, acc)\n        end\n    end\n    return divisible_by_digits_helper_helper(startnum, endnum, \"\")\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local is_divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n    end\n    if is_divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend",
    "  local divisible = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local is_divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n    end\n    if is_divisible then\n      divisible[#divisible + 1] = i\n    end\n  end\n  return divisible\nend",
    "\tlocal function divisible_by_digits_helper(num)\n\t\tlocal function divisible_by_digit(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\tlocal digits = {}\n\t\tfor digit in tostring(num):gmatch(\"%d\") do\n\t\t\tdigits[#digits + 1] = tonumber(digit)\n\t\tend\n\t\treturn all(divisible_by_digit, digits)\n\tend\n\tlocal numbers = {}\n\tfor num = startnum, endnum do\n\t\tif divisible_by_digits_helper(num) then\n\t\t\tnumbers[#numbers + 1] = num\n\t\tend\n\tend\n\treturn numbers\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = tostring(i):gmatch(\"%d\")\n        local divisible = true\n        for digit in digits do\n            if i % tonumber(digit) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend",
    "\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal digits = {}\n\t\tfor digit in tostring(i):gmatch('%d') do\n\t\t\ttable.insert(digits, tonumber(digit))\n\t\tend\n\t\tlocal is_divisible = true\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif i % digit ~= 0 then\n\t\t\t\tis_divisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend",
    "\tlocal function divisible_by_digits_inner(num)\n\t\tlocal num_str = tostring(num)\n\t\tfor i = 1, #num_str do\n\t\t\tlocal digit = tonumber(num_str:sub(i, i))\n\t\t\tif digit == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tif num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\treturn divisible_by_digits_inner\nend",
    "\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal is_divisible = true\n\t\tlocal num = i\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tis_divisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif is_divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for i = 1, #digits do\n      if num % digits[i] ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend",
    "    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local digits = {}\n        while num > 0 do\n            local digit = num % 10\n            if digit > 0 then\n                table.insert(digits, digit)\n            end\n            num = math.floor(num / 10)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digits_inner_inner(num, divisor)\n      return num % divisor == 0\n    end\n    local function divisible_by_digits_inner_inner_inner(num, divisor)\n      return divisible_by_digits_inner_inner(num, divisor) and divisible_by_digits_inner_inner(num, math.floor(divisor / 10))\n    end\n    return divisible_by_digits_inner_inner_inner(num, num)\n  end\n  local function divisible_by_digits_inner_inner(startnum, endnum, acc)\n    if startnum > endnum then\n      return acc\n    else\n      if divisible_by_digits_inner(startnum) then\n        return divisible_by_digits_inner_inner(startnum + 1, endnum, acc .. startnum .. ' ')\n      else\n        return divisible_by_digits_inner_inner(startnum + 1, endnum, acc)\n      end\n    end\n  end\n  return divisible_by_digits_inner_inner(startnum, endnum, '')\nend"
  ]
}