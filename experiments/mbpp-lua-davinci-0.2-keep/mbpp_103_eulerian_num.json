{
  "name": "mbpp_103_eulerian_num",
  "language": "lua",
  "prompt": "-- Write a function to find the Eulerian number a(n, m).\nlocal function eulerian_num(n, m)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eulerian_num\n    lu.assertEquals(candidate(3, 1), 4)\n    lu.assertEquals(candidate(4, 1), 11)\n    lu.assertEquals(candidate(5, 3), 26)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local a = {}\n    for i = 0, n do\n        a[i] = {}\n        for j = 0, m do\n            if i == 0 then\n                a[i][j] = 0\n            elseif j == 0 then\n                a[i][j] = 1\n            else\n                a[i][j] = (i - j + 1) * a[i - 1][j] + j * a[i - 1][j - 1]\n            end\n        end\n    end\n    return a[n][m]\nend",
    "  if n == 0 and m == 0 then\n    return 1\n  elseif n == 0 or m == 0 then\n    return 0\n  else\n    return (n + m) * eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n  end\nend",
    "    local a = {}\n    for i = 0, n do\n        a[i] = {}\n        for j = 0, m do\n            if i == 0 then\n                a[i][j] = 0\n            elseif j == 0 then\n                a[i][j] = 1\n            else\n                a[i][j] = (i - j + 1) * a[i - 1][j] + j * a[i - 1][j - 1]\n            end\n        end\n    end\n    return a[n][m]\nend",
    "  if n == 0 then\n    return 1\n  elseif n < 0 or m < 0 then\n    return 0\n  else\n    return (n + m - 1) * eulerian_num(n - 1, m) + (n - m) * eulerian_num(n - 1, m - 1)\n  end\nend",
    "  if n < 0 or m < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  elseif m == 0 then\n    return 0\n  else\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) +\n           (m + 1) * eulerian_num(n - 1, m)\n  end\nend",
    "  local a = {}\n  for i = 0, n do\n    a[i] = {}\n    for j = 0, m do\n      if i == 0 then\n        a[i][j] = 1\n      elseif j == 0 then\n        a[i][j] = 0\n      else\n        a[i][j] = (i - j + 1) * a[i - 1][j] + j * a[i - 1][j - 1]\n      end\n    end\n  end\n  return a[n][m]\nend",
    "  if n == 0 then return 1 end\n  if m == 0 then return 0 end\n  return (n - m + 1) * eulerian_num(n - 1, m - 1) + m * eulerian_num(n - 1, m)\nend",
    "    if n < m then\n        return 0\n    end\n    if n == m then\n        return 1\n    end\n    if m == 1 then\n        return 1\n    end\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1)\nend",
    "  local a = {}\n  for i = 0, n do\n    a[i] = {}\n    for j = 0, m do\n      a[i][j] = 0\n    end\n  end\n  for i = 0, n do\n    a[i][0] = 1\n  end\n  for i = 1, n do\n    for j = 1, m do\n      a[i][j] = (i - j) * a[i - 1][j] + (j + 1) * a[i - 1][j - 1]\n    end\n  end\n  return a[n][m]\nend",
    "    if n < 0 or m < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 1\n    end\n    if m == 0 then\n        return 0\n    end\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\nend",
    "    local a = {}\n    for i = 0, n do\n        a[i] = {}\n        for j = 0, m do\n            if i == 0 then\n                a[i][j] = 0\n            elseif j == 0 then\n                a[i][j] = 1\n            else\n                a[i][j] = (i - j + 1) * a[i - 1][j] + j * a[i - 1][j - 1]\n            end\n        end\n    end\n    return a[n][m]\nend",
    "  local a = {}\n  for i = 0, n do\n    a[i] = {}\n    for j = 0, m do\n      a[i][j] = 0\n    end\n  end\n  a[0][0] = 1\n  for i = 1, n do\n    a[i][0] = 0\n    for j = 1, m do\n      a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n    end\n  end\n  return a[n][m]\nend",
    "    local a = {}\n    for i = 0, n do\n        a[i] = {}\n        for j = 0, m do\n            a[i][j] = 0\n        end\n    end\n    a[0][0] = 1\n    for i = 1, n do\n        a[i][0] = 0\n        for j = 1, m do\n            a[i][j] = (i - j + 1) * a[i - 1][j - 1] + j * a[i - 1][j]\n        end\n    end\n    return a[n][m]\nend",
    "    local a = {}\n    for i = 0, n do\n        a[i] = {}\n        for j = 0, m do\n            a[i][j] = 0\n        end\n    end\n    for i = 0, n do\n        a[i][0] = 1\n    end\n    for i = 1, n do\n        for j = 1, m do\n            a[i][j] = (i - j) * a[i - 1][j] + (j + 1) * a[i - 1][j - 1]\n        end\n    end\n    return a[n][m]\nend",
    "  local a = {}\n  for i = 0, n do\n    a[i] = {}\n    for j = 0, m do\n      a[i][j] = 0\n    end\n  end\n  for i = 0, n do\n    for j = 0, m do\n      if i == 0 and j == 0 then\n        a[i][j] = 1\n      elseif i == 0 then\n        a[i][j] = 0\n      elseif j == 0 then\n        a[i][j] = 1\n      else\n        a[i][j] = (i - j + 1) * a[i - 1][j] + j * a[i - 1][j - 1]\n      end\n    end\n  end\n  return a[n][m]\nend",
    "  local a = {}\n  for i = 0, n do\n    a[i] = {}\n    for j = 0, m do\n      if i == 0 then\n        a[i][j] = 0\n      elseif j == 0 then\n        a[i][j] = 1\n      else\n        a[i][j] = (i - j + 1) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n      end\n    end\n  end\n  return a[n][m]\nend",
    "  if n < 0 or m < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  elseif m == 0 then\n    return 0\n  else\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) +\n      (m + 1) * eulerian_num(n - 1, m)\n  end\nend",
    "  if n < 0 or m < 0 then return 0 end\n  if n == 0 and m == 0 then return 1 end\n  if n == 0 or m == 0 then return 0 end\n  return (n+1) * eulerian_num(n, m-1) + (1-m) * eulerian_num(n-1, m-1)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = {}\n        for j = 1, m do\n            if i == 1 then\n                a[i][j] = 1\n            elseif j == 1 then\n                a[i][j] = 0\n            else\n                a[i][j] = (i - j + 1) * a[i - 1][j] + j * a[i - 1][j - 1]\n            end\n        end\n    end\n    return a[n][m]\nend",
    "  -- TODO: Implement this function.\n  return 0\nend"
  ]
}