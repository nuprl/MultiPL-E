{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "lua",
  "prompt": "-- Write a python function to find the next perfect square greater than a given number.\nlocal function next_Perfect_Square(N)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_Perfect_Square\n    lu.assertEquals(candidate(35), 36)\n    lu.assertEquals(candidate(6), 9)\n    lu.assertEquals(candidate(9), 16)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\treturn ceil * ceil\nend",
    "    local sqrt = math.sqrt(N)\n    local next_sqrt = math.ceil(sqrt)\n    return next_sqrt * next_sqrt\nend",
    "\tlocal sqrt_N = math.sqrt(N)\n\tlocal next_sqrt_N = math.ceil(sqrt_N)\n\tlocal next_Perfect_Square = next_sqrt_N * next_sqrt_N\n\treturn next_Perfect_Square\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (sqrt + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "    local i = 1\n    while (i * i) < N do\n        i = i + 1\n    end\n    return i * i\nend",
    "\tlocal n = math.floor(math.sqrt(N))\n\treturn (n+1)^2\nend",
    "\tlocal sqrt_N = math.sqrt(N)\n\tlocal next_Perfect_Square = math.ceil(sqrt_N)\n\treturn next_Perfect_Square * next_Perfect_Square\nend",
    "\tlocal n = math.floor(math.sqrt(N))\n\treturn (n+1)*(n+1)\nend",
    "\tlocal sqrt_N = math.sqrt(N)\n\tlocal next_sqrt_N = math.ceil(sqrt_N)\n\treturn next_sqrt_N * next_sqrt_N\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (N+1)*(N+1)\n\telse\n\t\treturn (floor+1)*(floor+1)\n\tend\nend",
    "    local sqrt = math.sqrt(N)\n    local ceil = math.ceil(sqrt)\n    return ceil * ceil\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "\tlocal i = 1\n\twhile i*i < N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\treturn math.ceil(math.sqrt(N))^2\nend",
    "\tlocal i = 1\n\twhile i*i < N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "    local sqrt = math.sqrt(N)\n    local ceil = math.ceil(sqrt)\n    return ceil * ceil\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) ^ 2\n    else\n        return (floor + 1) ^ 2\n    end\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal next_Perfect_Square = ceil * ceil\n\treturn next_Perfect_Square\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "  if N < 0 then\n    return nil\n  end\n  local n = math.sqrt(N)\n  if n == math.floor(n) then\n    return (n + 1) ^ 2\n  end\n  return (math.floor(n) + 1) ^ 2\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (floor + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal next_sqrt = math.ceil(sqrt)\n\tlocal next_sqrt_square = next_sqrt * next_sqrt\n\treturn next_sqrt_square\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal square = ceil * ceil\n\treturn square\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal next_Perfect_Square = ceil * ceil\n\treturn next_Perfect_Square\nend",
    "    local n = math.ceil(math.sqrt(N))\n    return n * n\nend",
    "    local sqrt_N = math.sqrt(N)\n    local ceil_sqrt_N = math.ceil(sqrt_N)\n    local next_Perfect_Square = ceil_sqrt_N * ceil_sqrt_N\n    return next_Perfect_Square\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\treturn ceil*ceil\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (floor + 1)^2\n\telse\n\t\treturn (floor + 1)^2\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (floor + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) ^ 2\n    else\n        return (floor + 1) ^ 2\n    end\nend",
    "    local i = 1\n    while i*i < N do\n        i = i + 1\n    end\n    return i*i\nend",
    "    local sqrt = math.sqrt(N)\n    if math.floor(sqrt) == sqrt then\n        return (sqrt + 1) * (sqrt + 1)\n    else\n        return (math.floor(sqrt) + 1) * (math.floor(sqrt) + 1)\n    end\nend",
    "    local n = math.floor(math.sqrt(N))\n    return (n+1)^2\nend",
    "  local n = math.floor(math.sqrt(N))\n  return (n+1)^2\nend",
    "\tlocal i = 1\n\twhile true do\n\t\tif i * i > N then\n\t\t\treturn i * i\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "    local i = 1\n    while i*i < N do\n        i = i + 1\n    end\n    return i*i\nend",
    "    local n = math.ceil(math.sqrt(N))\n    return n*n\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) ^ 2\n    else\n        return (floor + 1) ^ 2\n    end\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal next_sqrt = math.ceil(sqrt)\n\treturn next_sqrt * next_sqrt\nend",
    "  local next_Perfect_Square = N + 1\n  while math.sqrt(next_Perfect_Square) % 1 ~= 0 do\n    next_Perfect_Square = next_Perfect_Square + 1\n  end\n  return next_Perfect_Square\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (sqrt + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "  local i = 1\n  while true do\n    if i*i > N then\n      return i*i\n    end\n    i = i + 1\n  end\nend",
    "\tN = N + 1\n\twhile true do\n\t\tlocal sqrt = math.sqrt(N)\n\t\tif sqrt == math.floor(sqrt) then\n\t\t\treturn N\n\t\tend\n\t\tN = N + 1\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\treturn ceil * ceil\nend",
    "  local sqrt = math.sqrt(N)\n  local floor = math.floor(sqrt)\n  if floor == sqrt then\n    return (sqrt + 1) ^ 2\n  else\n    return (floor + 1) ^ 2\n  end\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "    local n = math.floor(math.sqrt(N))\n    return (n+1)^2\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal next_Perfect_Square = ceil * ceil\n\treturn next_Perfect_Square\nend",
    "  local sqrt_N = math.sqrt(N)\n  local next_sqrt_N = math.ceil(sqrt_N)\n  return next_sqrt_N * next_sqrt_N\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\treturn ceil * ceil\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "\tlocal sqrt_N = math.sqrt(N)\n\tlocal next_sqrt_N = math.ceil(sqrt_N)\n\tlocal next_perfect_square = next_sqrt_N * next_sqrt_N\n\treturn next_perfect_square\nend",
    "  local sqrt = math.sqrt(N)\n  local floor = math.floor(sqrt)\n  if floor == sqrt then\n    return (sqrt + 1) ^ 2\n  else\n    return (floor + 1) ^ 2\n  end\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (floor + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "    local num = math.floor(math.sqrt(N))\n    return (num + 1) * (num + 1)\nend",
    "  local sqrt = math.sqrt(N)\n  local floor = math.floor(sqrt)\n  if floor == sqrt then\n    return (sqrt + 1)^2\n  else\n    return (floor + 1)^2\n  end\nend",
    "    local next_Perfect_Square = math.floor(math.sqrt(N)) + 1\n    return next_Perfect_Square * next_Perfect_Square\nend",
    "  local n = math.sqrt(N)\n  if n == math.floor(n) then\n    return (n + 1) ^ 2\n  else\n    return (math.floor(n) + 1) ^ 2\n  end\nend",
    "  local sqrt = math.sqrt(N)\n  if math.floor(sqrt) == sqrt then\n    return (sqrt + 1) * (sqrt + 1)\n  else\n    return -1\n  end\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\treturn ceil * ceil\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal next_Perfect_Square = ceil * ceil\n\treturn next_Perfect_Square\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n * n\nend",
    "    local sqrt = math.sqrt(N)\n    local ceil = math.ceil(sqrt)\n    return ceil * ceil\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "  local sqrt = math.sqrt(N)\n  local floor = math.floor(sqrt)\n  if floor == sqrt then\n    return (sqrt + 1)^2\n  else\n    return (floor + 1)^2\n  end\nend",
    "    local sqrt = math.sqrt(N)\n    local next_sqrt = math.ceil(sqrt)\n    return next_sqrt * next_sqrt\nend",
    "    local i = 1\n    while i * i <= N do\n        i = i + 1\n    end\n    return i * i\nend",
    "    local i = 1\n    while i*i <= N do\n        i = i + 1\n    end\n    return i*i\nend",
    "  local next_Perfect_Square = math.ceil(math.sqrt(N))^2\n  return next_Perfect_Square\nend",
    "    local i = 1\n    while i*i <= N do\n        i = i + 1\n    end\n    return i*i\nend",
    "    local sqrt_N = math.sqrt(N)\n    if math.floor(sqrt_N) == sqrt_N then\n        return (sqrt_N + 1) ^ 2\n    else\n        return (math.floor(sqrt_N) + 1) ^ 2\n    end\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (sqrt + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "  local n = math.floor(math.sqrt(N))\n  return (n+1)^2\nend",
    "\tlocal sqrt_N = math.sqrt(N)\n\tlocal next_sqrt = math.ceil(sqrt_N)\n\tlocal next_perfect_square = next_sqrt ^ 2\n\treturn next_perfect_square\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (sqrt + 1)^2\n\telse\n\t\treturn (floor + 1)^2\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal next_perfect_square = ceil * ceil\n\treturn next_perfect_square\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal next_perfect_square = ceil * ceil\n\treturn next_perfect_square\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "  local sqrt = math.sqrt(N)\n  local floor = math.floor(sqrt)\n  if floor == sqrt then\n    return (sqrt + 1) * (sqrt + 1)\n  else\n    return (floor + 1) * (floor + 1)\n  end\nend",
    "\tlocal sqrt_N = math.sqrt(N)\n\tlocal next_sqrt = math.ceil(sqrt_N)\n\tlocal next_perfect_square = next_sqrt * next_sqrt\n\treturn next_perfect_square\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\treturn ceil*ceil\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal next_Perfect_Square = ceil * ceil\n\treturn next_Perfect_Square\nend",
    "\tlocal sqrt = math.sqrt(N)\n\treturn math.ceil(sqrt)^2\nend",
    "\tlocal next_Perfect_Square = N\n\twhile true do\n\t\tif math.sqrt(next_Perfect_Square) % 1 == 0 then\n\t\t\treturn next_Perfect_Square\n\t\tend\n\t\tnext_Perfect_Square = next_Perfect_Square + 1\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\treturn ceil*ceil\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\treturn ceil*ceil\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1)^2\n    else\n        return (floor + 1)^2\n    end\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) ^ 2\n    else\n        return (floor + 1) ^ 2\n    end\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal square = ceil * ceil\n\treturn square\nend",
    "  local n = math.floor(math.sqrt(N))\n  return (n+1)^2\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif sqrt == floor then\n\t\treturn (floor + 1)^2\n\telse\n\t\treturn (floor + 1)^2\n\tend\nend",
    "    local i = 1\n    while i*i <= N do\n        i = i + 1\n    end\n    return i*i\nend",
    "    local n = math.ceil(math.sqrt(N))\n    return n*n\nend",
    "    local n = math.floor(math.sqrt(N))\n    return (n+1)^2\nend",
    "  local n = math.sqrt(N)\n  if n == math.floor(n) then\n    return (n + 1) ^ 2\n  else\n    return (math.floor(n) + 1) ^ 2\n  end\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif sqrt == floor then\n\t\treturn (floor + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\treturn ceil * ceil\nend",
    "\tlocal n = math.sqrt(N)\n\tif n % 1 == 0 then\n\t\treturn (n + 1) ^ 2\n\telse\n\t\treturn (math.ceil(n) + 1) ^ 2\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (sqrt + 1)^2\n\telse\n\t\treturn (floor + 1)^2\n\tend\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) ^ 2\n    else\n        return (floor + 1) ^ 2\n    end\nend",
    "    local i = 1\n    while i * i < N do\n        i = i + 1\n    end\n    return i * i\nend",
    "  local i = 1\n  while i*i <= N do\n    i = i + 1\n  end\n  return i*i\nend",
    "\tlocal sqrtN = math.sqrt(N)\n\tlocal next_Perfect_Square = math.ceil(sqrtN)\n\treturn next_Perfect_Square * next_Perfect_Square\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) ^ 2\n    else\n        return (floor + 1) ^ 2\n    end\nend",
    "    local i = 1\n    while true do\n        local square = i * i\n        if square > N then\n            return square\n        end\n        i = i + 1\n    end\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (floor + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal next_perfect_square = ceil*ceil\n\treturn next_perfect_square\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal next_sqrt = math.ceil(sqrt)\n\tlocal next_square = next_sqrt * next_sqrt\n\treturn next_square\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (sqrt + 1)^2\n\telse\n\t\treturn (floor + 1)^2\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (floor + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "\tlocal sqrtN = math.sqrt(N)\n\tlocal next_Perfect_Square = math.ceil(sqrtN)\n\treturn next_Perfect_Square * next_Perfect_Square\nend",
    "  local i = 1\n  while i*i <= N do\n    i = i + 1\n  end\n  return i*i\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (floor + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "    local sqrt = math.sqrt(N)\n    if sqrt == math.floor(sqrt) then\n        return (sqrt + 1) ^ 2\n    else\n        return (math.floor(sqrt) + 1) ^ 2\n    end\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) ^ 2\n    else\n        return (floor + 1) ^ 2\n    end\nend",
    "    local sqrt = math.sqrt(N)\n    local ceil = math.ceil(sqrt)\n    return ceil * ceil\nend",
    "\tlocal i = 1\n\twhile i*i < N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "    local n = math.ceil(math.sqrt(N))\n    return n * n\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (sqrt + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (floor + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\treturn ceil*ceil\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal square = ceil * ceil\n\treturn square\nend",
    "\tlocal i = 1\n\twhile i*i < N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal i = 1\n\twhile true do\n\t\tif i*i > N then\n\t\t\treturn i*i\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "    local sqrt = math.sqrt(N)\n    local ceil = math.ceil(sqrt)\n    return ceil*ceil\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal i = 1\n\twhile i*i < N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal next_Perfect_Square = ceil * ceil\n\treturn next_Perfect_Square\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (N + 1)^2\n\telse\n\t\treturn (floor + 1)^2\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tif sqrt % 1 == 0 then\n\t\treturn (sqrt + 1) ^ 2\n\telse\n\t\treturn (math.floor(sqrt) + 1) ^ 2\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (floor + 1)^2\n\telse\n\t\treturn (floor + 1)^2\n\tend\nend",
    "  local n = math.floor(math.sqrt(N))\n  return (n+1)^2\nend",
    "    local sqrt = math.sqrt(N)\n    if sqrt == math.floor(sqrt) then\n        return (sqrt + 1) ^ 2\n    end\n    return (math.floor(sqrt) + 1) ^ 2\nend",
    "\tlocal i = 1\n\twhile true do\n\t\tif i*i > N then\n\t\t\treturn i*i\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "    local next_Perfect_Square = math.ceil(math.sqrt(N))^2\n    return next_Perfect_Square\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "    local i = 1\n    while i*i <= N do\n        i = i + 1\n    end\n    return i*i\nend",
    "\tlocal next_Perfect_Square = math.ceil(math.sqrt(N))\n\treturn next_Perfect_Square^2\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) * (sqrt + 1)\n    else\n        return (floor + 1) * (floor + 1)\n    end\nend",
    "  local i = 1\n  while i*i < N do\n    i = i + 1\n  end\n  return i*i\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\treturn ceil*ceil\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) ^ 2\n    else\n        return (floor + 1) ^ 2\n    end\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal next_perfect_square = ceil * ceil\n\treturn next_perfect_square\nend",
    "\tlocal n = math.floor(math.sqrt(N))\n\treturn (n + 1) * (n + 1)\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (sqrt + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) * (sqrt + 1)\n    else\n        return (floor + 1) * (floor + 1)\n    end\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) ^ 2\n    else\n        return (floor + 1) ^ 2\n    end\nend",
    "\tlocal i = 1\n\twhile true do\n\t\tif i*i > N then\n\t\t\treturn i*i\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1)^2\n    else\n        return (floor + 1)^2\n    end\nend",
    "\tlocal n = math.floor(math.sqrt(N))\n\treturn (n+1)^2\nend",
    "    local i = 1\n    while i * i < N do\n        i = i + 1\n    end\n    return i * i\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (sqrt + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) ^ 2\n    else\n        return (floor + 1) ^ 2\n    end\nend",
    "    local sqrt = math.sqrt(N)\n    local ceil = math.ceil(sqrt)\n    return ceil * ceil\nend",
    "    local sqrt = math.sqrt(N)\n    local ceil = math.ceil(sqrt)\n    return ceil * ceil\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal next_perfect_square = ceil * ceil\n\treturn next_perfect_square\nend",
    "    local sqrtN = math.sqrt(N)\n    local next_sqrtN = math.ceil(sqrtN)\n    return next_sqrtN * next_sqrtN\nend",
    "\tlocal i = 1\n\twhile N > i*i do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "    local n = math.ceil(math.sqrt(N))\n    return n * n\nend",
    "\tlocal sqrt_N = math.sqrt(N)\n\tlocal next_sqrt_N = math.ceil(sqrt_N)\n\tlocal next_perfect_square = next_sqrt_N * next_sqrt_N\n\treturn next_perfect_square\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (sqrt + 1)^2\n\telse\n\t\treturn (floor + 1)^2\n\tend\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal next_sqrt = math.ceil(sqrt)\n\treturn next_sqrt * next_sqrt\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\treturn ceil * ceil\nend",
    "    local next_Square = math.ceil(math.sqrt(N))\n    return next_Square * next_Square\nend",
    "  local num = math.ceil(math.sqrt(N))\n  return num*num\nend",
    "    local sqrt = math.sqrt(N)\n    local ceil = math.ceil(sqrt)\n    return ceil * ceil\nend",
    "\tlocal next_Perfect_Square = math.ceil(math.sqrt(N))\n\treturn next_Perfect_Square * next_Perfect_Square\nend",
    "    local n = math.sqrt(N)\n    if n == math.floor(n) then\n        return (n + 1) ^ 2\n    else\n        return (math.floor(n) + 1) ^ 2\n    end\nend",
    "\tlocal next_Perfect_Square = N\n\twhile true do\n\t\tnext_Perfect_Square = next_Perfect_Square + 1\n\t\tif math.sqrt(next_Perfect_Square) % 1 == 0 then\n\t\t\treturn next_Perfect_Square\n\t\tend\n\tend\nend",
    "  local next_perfect_square = math.ceil(math.sqrt(N))\n  return next_perfect_square^2\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif sqrt == floor then\n\t\treturn (floor + 1)^2\n\telse\n\t\treturn (floor + 1)^2\n\tend\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "\tif N < 0 then\n\t\treturn nil\n\tend\n\tlocal sqrt_N = math.sqrt(N)\n\tif sqrt_N == math.floor(sqrt_N) then\n\t\treturn (sqrt_N + 1) ^ 2\n\telse\n\t\treturn (math.floor(sqrt_N) + 1) ^ 2\n\tend\nend",
    "\tlocal i = 1\n\twhile i*i < N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) ^ 2\n    else\n        return (floor + 1) ^ 2\n    end\nend",
    "    local next_Perfect_Square = N\n    while true do\n        next_Perfect_Square = next_Perfect_Square + 1\n        if math.sqrt(next_Perfect_Square) % 1 == 0 then\n            return next_Perfect_Square\n        end\n    end\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "    local sqrt = math.sqrt(N)\n    if sqrt == math.floor(sqrt) then\n        return (sqrt + 1) ^ 2\n    else\n        return (math.floor(sqrt) + 1) ^ 2\n    end\nend",
    "    local sqrt = math.sqrt(N)\n    if math.floor(sqrt) == sqrt then\n        return (sqrt + 1) ^ 2\n    else\n        return (math.floor(sqrt) + 1) ^ 2\n    end\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (sqrt + 1)^2\n\telse\n\t\treturn (floor + 1)^2\n\tend\nend",
    "\tlocal next_Perfect_Square = math.ceil(math.sqrt(N))\n\treturn next_Perfect_Square^2\nend"
  ]
}