{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "lua",
  "prompt": "-- Write a python function to find the next perfect square greater than a given number.\nlocal function next_Perfect_Square(N)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_Perfect_Square\n    lu.assertEquals(candidate(35), 36)\n    lu.assertEquals(candidate(6), 9)\n    lu.assertEquals(candidate(9), 16)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\treturn ceil * ceil\nend",
    "    local sqrt = math.sqrt(N)\n    local next_sqrt = math.ceil(sqrt)\n    return next_sqrt * next_sqrt\nend",
    "\tlocal sqrt_N = math.sqrt(N)\n\tlocal next_sqrt_N = math.ceil(sqrt_N)\n\tlocal next_Perfect_Square = next_sqrt_N * next_sqrt_N\n\treturn next_Perfect_Square\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (sqrt + 1) ^ 2\n\telse\n\t\treturn (floor + 1) ^ 2\n\tend\nend",
    "    local i = 1\n    while (i * i) < N do\n        i = i + 1\n    end\n    return i * i\nend",
    "\tlocal n = math.floor(math.sqrt(N))\n\treturn (n+1)^2\nend",
    "\tlocal sqrt_N = math.sqrt(N)\n\tlocal next_Perfect_Square = math.ceil(sqrt_N)\n\treturn next_Perfect_Square * next_Perfect_Square\nend",
    "\tlocal n = math.floor(math.sqrt(N))\n\treturn (n+1)*(n+1)\nend",
    "\tlocal sqrt_N = math.sqrt(N)\n\tlocal next_sqrt_N = math.ceil(sqrt_N)\n\treturn next_sqrt_N * next_sqrt_N\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn (N+1)*(N+1)\n\telse\n\t\treturn (floor+1)*(floor+1)\n\tend\nend",
    "    local sqrt = math.sqrt(N)\n    local ceil = math.ceil(sqrt)\n    return ceil * ceil\nend",
    "\tlocal n = math.ceil(math.sqrt(N))\n\treturn n*n\nend",
    "\tlocal i = 1\n\twhile i*i < N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "\treturn math.ceil(math.sqrt(N))^2\nend",
    "\tlocal i = 1\n\twhile i*i < N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "    local sqrt = math.sqrt(N)\n    local ceil = math.ceil(sqrt)\n    return ceil * ceil\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend",
    "    local sqrt = math.sqrt(N)\n    local floor = math.floor(sqrt)\n    if floor == sqrt then\n        return (sqrt + 1) ^ 2\n    else\n        return (floor + 1) ^ 2\n    end\nend",
    "\tlocal sqrt = math.sqrt(N)\n\tlocal ceil = math.ceil(sqrt)\n\tlocal next_Perfect_Square = ceil * ceil\n\treturn next_Perfect_Square\nend",
    "\tlocal i = 1\n\twhile i*i <= N do\n\t\ti = i + 1\n\tend\n\treturn i*i\nend"
  ]
}