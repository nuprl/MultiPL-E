{
  "name": "mbpp_452_loss_amount",
  "language": "lua",
  "prompt": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend",
    "    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend",
    "\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend",
    "  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend",
    "\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend",
    "\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend",
    "\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend",
    "\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend",
    "  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend",
    "    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend",
    "\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend",
    "    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend",
    "    if sale_amount < actual_cost then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend",
    "    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend",
    "    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend",
    "    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend",
    "  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend",
    "  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend",
    "    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend",
    "    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend"
  ]
}