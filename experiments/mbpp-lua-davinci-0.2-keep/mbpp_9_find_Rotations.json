{
  "name": "mbpp_9_find_Rotations",
  "language": "lua",
  "prompt": "-- Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nlocal function find_Rotations(str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Rotations\n    lu.assertEquals(candidate('aaaa'), 1)\n    lu.assertEquals(candidate('ab'), 2)\n    lu.assertEquals(candidate('abc'), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local len = #str\n    local str = str .. str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i <= len and j <= len do\n        k = 0\n        while k < len and str:sub(i, i + k) == str:sub(j, j + k) do\n            k = k + 1\n        end\n        if k == len then\n            break\n        end\n        if str:sub(i, i + k) > str:sub(j, j + k) then\n            i = i + k + 1\n        else\n            j = j + k + 1\n        end\n        if i == j then\n            j = j + 1\n        end\n    end\n    return math.min(i, j)\nend",
    "  local len = #str\n  local temp = str..str\n  local i, j = 1, 2\n  while i <= len and j <= len do\n    local k = 0\n    while k < len and temp:sub(i+k, i+k) == temp:sub(j+k, j+k) do\n      k = k + 1\n    end\n    if k == len then\n      return j - i\n    elseif temp:sub(i+k, i+k) > temp:sub(j+k, j+k) then\n      i = i + k + 1\n      if i == j then\n        j = j + 1\n      end\n    else\n      j = j + k + 1\n    end\n  end\n  return 0\nend",
    "    local str_len = string.len(str)\n    local temp = str .. str\n    local min_rotations = str_len\n    for i = 2, str_len do\n        local sub_str = string.sub(temp, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = str_len - i + 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "  local len = #str\n  local temp = str..str\n  local i, j = 1, 2\n  while i <= len and j <= len do\n    local k = 0\n    while k < len and temp:byte(i+k) == temp:byte(j+k) do\n      k = k + 1\n    end\n    if k == len then\n      return i\n    end\n    if temp:byte(i+k) > temp:byte(j+k) then\n      i = i + k + 1\n    else\n      j = j + k + 1\n    end\n    if i == j then\n      j = j + 1\n    end\n  end\n  return i\nend",
    "    local str_len = string.len(str)\n    local str_concat = str..str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local len = string.len(str)\n    local str2 = str .. str\n    local i = 1\n    local j = 1\n    local k = 0\n    while i <= len and j <= len do\n        if str[i] == str[j] then\n            i = i + 1\n            j = j + 1\n        else\n            if k > 0 then\n                k = k - 1\n                i = i - k\n                j = j - k\n            else\n                k = 0\n                j = j + 1\n            end\n        end\n    end\n    return i - k\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_concat = str..str\n    local min_rotations = str_len\n    for i = 2, str_len do\n        if str_concat:sub(i, i+str_len-1) < str then\n            min_rotations = i-1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local str = str .. str\n    local i, j = 1, 2\n    while i <= len and j <= len do\n        local k = 0\n        while k < len and str:sub(i + k, i + k) == str:sub(j + k, j + k) do\n            k = k + 1\n        end\n        if k == len then\n            return i\n        end\n        if str:sub(i + k, i + k) > str:sub(j + k, j + k) then\n            i = i + k + 1\n        else\n            j = j + k + 1\n        end\n        if i == j then\n            j = j + 1\n        end\n    end\n    return i\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local str_rotated = string.sub(str_concat, i, i + str_len - 1)\n        if str == str_rotated then\n            if i < min_rotations then\n                min_rotations = i\n            end\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local i = 1\n    local j = 1\n    local k = 0\n    while (i <= str_len and j <= str_len) do\n        if (string.sub(str, i, i) == string.sub(str, j, j)) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i + 1\n            k = j\n            j = k + 1\n        end\n    end\n    return k\nend",
    "    local len = #str\n    local min = len\n    local min_index = 0\n    for i = 1, len do\n        local j = i\n        local k = 1\n        while j <= len do\n            if str:sub(k, k) ~= str:sub(j, j) then\n                break\n            end\n            j = j + 1\n            k = k + 1\n        end\n        if j > len and min > i then\n            min = i\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local str = str..str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i <= len and j <= len do\n        k = 0\n        while k < len and str:sub(i,i+k) == str:sub(j,j+k) do\n            k = k + 1\n        end\n        if k == len then\n            break\n        end\n        if str:sub(i,i+k) > str:sub(j,j+k) then\n            i = i + k + 1\n            if i == j then\n                j = j + 1\n            end\n        else\n            j = j + k + 1\n            if i == j then\n                j = j + 1\n            end\n        end\n    end\n    return i\nend",
    "\tlocal str_len = #str\n\tlocal str_concat = str .. str\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 0\n\tlocal lps = {}\n\twhile i < str_len and j < str_len do\n\t\tif str_concat[i + k] == str_concat[j + k] then\n\t\t\tk = k + 1\n\t\t\tlps[j] = k\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\tif k ~= 0 then\n\t\t\t\tk = lps[k]\n\t\t\telse\n\t\t\t\tlps[j] = 0\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn lps[str_len]\nend",
    "    local len = string.len(str)\n    local temp = str .. str\n    local min = len\n    for i = 1, len do\n        local s = string.sub(temp, i, i + len - 1)\n        if s < str then\n            min = i\n            break\n        end\n    end\n    return min\nend",
    "  local str_len = string.len(str)\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    local sub_str = string.sub(str_concat, i, i + str_len - 1)\n    if sub_str == str then\n      min_rotations = i - 1\n      break\n    end\n  end\n  return min_rotations\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    local i = 1\n    while i <= str_len do\n        local j = i + 1\n        while j <= str_len do\n            if str_concat:sub(i, j) == str then\n                min_rotations = math.min(min_rotations, j - i)\n            end\n            j = j + 1\n        end\n        i = i + 1\n    end\n    return min_rotations\nend",
    "\tlocal len = string.len(str)\n\tlocal temp = str..str\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 0\n\twhile i <= len and j <= len do\n\t\tk = 0\n\t\twhile k < len and string.sub(temp, i, i+k) == string.sub(temp, j, j+k) do\n\t\t\tk = k + 1\n\t\tend\n\t\tif k == len then\n\t\t\tbreak\n\t\telseif string.sub(temp, i, i+k) > string.sub(temp, j, j+k) then\n\t\t\ti = i + k + 1\n\t\t\tif i == j then\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telse\n\t\t\tj = j + k + 1\n\t\t\tif i == j then\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn i\nend",
    "    local len = #str\n    local str = str .. str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i <= len and j <= len do\n        k = 0\n        while k < len and str:sub(i, i + k) == str:sub(j, j + k) do\n            k = k + 1\n        end\n        if k == len then\n            break\n        end\n        if str:sub(i, i + k) > str:sub(j, j + k) then\n            i = i + k + 1\n        else\n            j = j + k + 1\n        end\n        if i == j then\n            j = j + 1\n        end\n    end\n    return math.min(i, j)\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            if i < min_rotations then\n                min_rotations = i\n            end\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal str_len = #str\n\tlocal str_concat = str .. str\n\tlocal min_rotations = str_len\n\tlocal i = 1\n\twhile i <= str_len do\n\t\tlocal j = i + 1\n\t\twhile j <= str_len do\n\t\t\tif str_concat:sub(i, j) == str_concat:sub(j + 1, j + str_len) then\n\t\t\t\tmin_rotations = math.min(min_rotations, j - i)\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn min_rotations\nend",
    "    local len = #str\n    local str = str .. str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i <= len and j <= len do\n        k = 0\n        while k < len and str:sub(i, i + k) == str:sub(j, j + k) do\n            k = k + 1\n        end\n        if k == len then\n            break\n        end\n        if str:sub(i + k, i + k) > str:sub(j + k, j + k) then\n            i = i + k + 1\n        else\n            j = j + k + 1\n        end\n        if i == j then\n            j = j + 1\n        end\n    end\n    return math.min(i, j)\nend",
    "    local len = #str\n    local str = str..str\n    local i, j = 1, 2\n    while i <= len and j <= len do\n        local k = 0\n        while k < len and str:sub(i+k, i+k) == str:sub(j+k, j+k) do\n            k = k + 1\n        end\n        if k == len then\n            return i\n        end\n        if str:sub(i+k, i+k) > str:sub(j+k, j+k) then\n            i = i + k + 1\n        else\n            j = j + k + 1\n        end\n        if i == j then\n            j = j + 1\n        end\n    end\n    return i\nend",
    "\tlocal str1 = str..str\n\tlocal n = #str\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 0\n\twhile i <= n and j <= n and k < n do\n\t\tif str1:sub(i, i+k) == str1:sub(j, j+k) then\n\t\t\tk = k + 1\n\t\telse\n\t\t\tif str1:sub(i, i+k) > str1:sub(j, j+k) then\n\t\t\t\ti = i + k + 1\n\t\t\telse\n\t\t\t\tj = j + k + 1\n\t\t\tend\n\t\t\tif i == j then\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\t\tk = 0\n\t\tend\n\tend\n\treturn math.min(i, j)\nend",
    "    local str_len = #str\n    local str_double = str .. str\n    local i = 1\n    local j = 1\n    local k = 1\n    local lps = {}\n    while i < str_len do\n        if str_double[i] == str_double[j] then\n            i = i + 1\n            j = j + 1\n            lps[i] = k\n        else\n            if k > 0 then\n                k = lps[k]\n            else\n                i = i + 1\n                j = j + 1\n            end\n        end\n    end\n    return str_len - lps[str_len]\nend",
    "\tlocal str_len = string.len(str)\n\tlocal str_copy = str\n\tlocal rotations = 0\n\tlocal i = 0\n\twhile i < str_len do\n\t\tif string.sub(str_copy, 1, 1) == string.sub(str, 1, 1) then\n\t\t\treturn rotations\n\t\telse\n\t\t\tstr_copy = string.sub(str_copy, 2, str_len) .. string.sub(str_copy, 1, 1)\n\t\t\trotations = rotations + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn rotations\nend",
    "\tlocal str_len = #str\n\tlocal str_concat = str .. str\n\tlocal i = 2\n\tlocal j = 1\n\tlocal lps = {}\n\tlps[1] = 0\n\twhile i <= str_len do\n\t\tif str_concat:sub(i, i) == str_concat:sub(j, j) then\n\t\t\tlps[i] = j + 1\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\tif j ~= 1 then\n\t\t\t\tj = lps[j - 1]\n\t\t\telse\n\t\t\t\tlps[i] = 0\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn str_len - lps[str_len]\nend",
    "\tlocal len = #str\n\tlocal temp = str..str\n\tlocal count = 0\n\tlocal min = len\n\tfor i = 2, len do\n\t\tcount = 0\n\t\tfor j = i, i + len - 1 do\n\t\t\tif temp[j] ~= str[count + 1] then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tcount = count + 1\n\t\tend\n\t\tif count == len and min > i - 1 then\n\t\t\tmin = i - 1\n\t\tend\n\tend\n\treturn min\nend",
    "    local str_len = #str\n    local concat_str = str .. str\n    local min_len = str_len\n    local min_index = 0\n    for i = 1, str_len do\n        local sub_str = string.sub(concat_str, i, i + str_len - 1)\n        if sub_str < min_len then\n            min_len = sub_str\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local str_len = string.len(str)\n    local temp = str .. str\n    local i = 1\n    local j = 1\n    local k = 0\n    while i <= str_len and j <= str_len do\n        if temp[i] == temp[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - k\n            j = j - k\n            k = 0\n        end\n        if j == str_len + 1 then\n            return i - 1\n        end\n        k = k + 1\n    end\n    return 0\nend",
    "    local len = string.len(str)\n    local temp = str .. str\n    local i = 2\n    local j = 1\n    local lps = {}\n    lps[1] = 0\n    while i < 2 * len do\n        if str[i] == str[j] then\n            lps[i] = j + 1\n            i = i + 1\n            j = j + 1\n        else\n            if j ~= 0 then\n                j = lps[j - 1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return len - lps[len - 1]\nend",
    "    local str_len = #str\n    local str_double = str .. str\n    local i = 1\n    local j = 2\n    local lps = {}\n    lps[1] = 0\n    while j <= str_len do\n        if str:sub(i, i) == str:sub(j, j) then\n            lps[j] = i + 1\n            i = i + 1\n            j = j + 1\n        else\n            if i ~= 1 then\n                i = lps[i - 1]\n            else\n                lps[j] = 0\n                j = j + 1\n            end\n        end\n    end\n    return str_len - lps[str_len]\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal len = string.len(str)\n\tlocal temp = str..str\n\tlocal i = 2\n\tlocal j = 1\n\tlocal lps = {}\n\tlps[1] = 0\n\twhile i < len do\n\t\tif str[i] == str[j] then\n\t\t\tlps[i] = j + 1\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\tif j ~= 0 then\n\t\t\t\tj = lps[j]\n\t\t\telse\n\t\t\t\tlps[i] = 0\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal res = lps[len]\n\tif res > 0 and len % (len - res) == 0 then\n\t\treturn len - res\n\telse\n\t\treturn len\n\tend\nend",
    "\tlocal str_len = #str\n\tlocal str_concat = str .. str\n\tlocal min_rotations = str_len\n\tlocal i = 1\n\twhile i <= str_len do\n\t\tlocal j = i + 1\n\t\tlocal k = i\n\t\twhile j <= str_len do\n\t\t\tif str_concat:sub(i, i) == str_concat:sub(j, j) then\n\t\t\t\tj = j + 1\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif j - i < min_rotations then\n\t\t\tmin_rotations = j - i\n\t\t\tk = i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn min_rotations\nend",
    "    local len = #str\n    local temp = str .. str\n    local i = 2\n    local j = 1\n    local lps = {}\n    lps[0] = 0\n    lps[1] = 0\n    while i < 2 * len do\n        if temp[i] == temp[j] then\n            j = j + 1\n            lps[i] = j\n            i = i + 1\n        else\n            if j ~= 0 then\n                j = lps[j - 1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return len - lps[len - 1]\nend",
    "    local len = #str\n    local str = str..str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i <= len and j <= len do\n        k = 0\n        while k < len and str:sub(i, i+k) == str:sub(j, j+k) do\n            k = k + 1\n        end\n        if str:sub(i, i+k) > str:sub(j, j+k) then\n            i = i + k + 1\n            if i == j then\n                j = j + 1\n            end\n        else\n            j = j + k + 1\n            if i == j then\n                j = j + 1\n            end\n        end\n    end\n    return i\nend",
    "\tlocal str1 = str\n\tlocal str2 = str\n\tlocal str3 = str\n\tlocal str4 = str\n\tlocal str5 = str\n\tlocal str6 = str\n\tlocal str7 = str\n\tlocal str8 = str\n\tlocal str9 = str\n\tlocal str10 = str\n\tlocal str11 = str\n\tlocal str12 = str\n\tlocal str13 = str\n\tlocal str14 = str\n\tlocal str15 = str\n\tlocal str16 = str\n\tlocal str17 = str\n\tlocal str18 = str\n\tlocal str19 = str\n\tlocal str20 = str\n\tlocal str21 = str\n\tlocal str22 = str\n\tlocal str23 = str\n\tlocal str24 = str\n\tlocal str25 = str\n\tlocal str26 = str\n\tlocal str27 = str\n\tlocal str28 = str\n\tlocal str29 = str\n\tlocal str30 = str\n\tlocal str31 = str\n\tlocal str32 = str\n\tlocal str33 = str\n\tlocal str34 = str\n\tlocal str35 = str\n\tlocal str36 = str\n\tlocal str37 = str\n\tlocal str38 = str\n\tlocal str39 = str\n\tlocal str40 = str\n\tlocal str41 = str\n\tlocal str42 = str\n\tlocal str43 = str\n\tlocal str44 = str\n\tlocal str45 = str\n\tlocal str46 = str\n\tlocal str47 = str\n\tlocal str48 = str\n\tlocal str49 = str\n\tlocal str50 = str\n\tlocal str51 = str\n\tlocal str52 = str\n\tlocal str53 = str\n\tlocal str54 = str\n\tlocal str55 = str\n\tlocal str56 = str\n\tlocal str57 = str\n\tlocal str58 = str\n\tlocal str59 = str\n\tlocal str60 = str\n\tlocal str61 = str\n\tlocal str62 = str\n\tlocal str63 = str\n\tlocal str64 = str\n\tlocal str65 = str\n\tlocal str66 = str\n\tlocal str67 = str\n\tlocal str68 = str\n\tlocal str69 = str\n\tlocal str70 = str\n\tlocal str71 = str\n\tlocal str72 = str\n\tlocal str73 = str\n",
    "  local str_len = string.len(str)\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    local str_rotated = string.sub(str_concat, i, i + str_len - 1)\n    if str_rotated == str then\n      if i < min_rotations then\n        min_rotations = i\n      end\n    end\n  end\n  return min_rotations\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        if str_concat:sub(i, i + str_len - 1) == str then\n            min_rotations = math.min(min_rotations, i - 1)\n        end\n    end\n    return min_rotations\nend",
    "\tlocal len = #str\n\tlocal temp = str..str\n\tlocal i = 2\n\tlocal j = 1\n\tlocal k = 0\n\twhile i <= len do\n\t\tk = 0\n\t\twhile k < len and str[k+1] == temp[i+k] do\n\t\t\tk = k + 1\n\t\tend\n\t\tif k == len then\n\t\t\treturn i\n\t\tend\n\t\tif str[k+1] > temp[i+k] then\n\t\t\tj = i\n\t\tend\n\t\ti = i + k - next[k]\n\tend\n\treturn j\nend",
    "    local len = string.len(str)\n    local temp = str .. str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i <= len and j <= len do\n        if temp[i + k] == temp[j + k] then\n            k = k + 1\n        elseif temp[i + k] > temp[j + k] then\n            i = i + k + 1\n            if i <= j then\n                i = j + 1\n            end\n            k = 0\n        else\n            j = j + k + 1\n            if j <= i then\n                j = i + 1\n            end\n            k = 0\n        end\n    end\n    return math.min(i, j)\nend",
    "\tlocal str1 = str .. str\n\tlocal n = #str\n\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 0\n\twhile i < n and j < n do\n\t\tk = 0\n\t\twhile k < n and str1[i + k] == str1[j + k] do\n\t\t\tk = k + 1\n\t\tend\n\t\tif k == n then\n\t\t\tbreak\n\t\tend\n\t\tif str1[i + k] > str1[j + k] then\n\t\t\ti = i + k + 1\n\t\telse\n\t\t\tj = j + k + 1\n\t\tend\n\t\tif i == j then\n\t\t\tj = j + 1\n\t\tend\n\tend\n\treturn math.min(i, j)\nend",
    "    local str = str .. str\n    local n = #str\n    local lps = compute_LPS(str)\n    local i = 1\n    local j = 1\n    local count = 0\n    while i <= n do\n        if str:sub(i, i) == str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        end\n        if j == n + 1 then\n            count = count + 1\n            j = lps[j - 1]\n        elseif i < n and str:sub(i, i) ~= str:sub(j, j) then\n            if j ~= 0 then\n                j = lps[j - 1]\n            else\n                i = i + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal len = #str\n\tlocal str2 = str .. str\n\tlocal i = 1\n\tlocal j = 2\n\twhile i <= len and j <= len do\n\t\tlocal k = 0\n\t\twhile k < len and str[i + k] == str2[j + k] do\n\t\t\tk = k + 1\n\t\tend\n\t\tif k == len then\n\t\t\treturn j\n\t\tend\n\t\tif str[i + k] > str2[j + k] then\n\t\t\ti = i + k + 1\n\t\telse\n\t\t\tj = j + k + 1\n\t\tend\n\t\tif i == j then\n\t\t\tj = j + 1\n\t\tend\n\tend\n\treturn 0\nend",
    "\tlocal str_len = #str\n\tlocal str_concat = str .. str\n\tlocal min_rotations = str_len\n\tfor i = 1, str_len do\n\t\tlocal sub_str = string.sub(str_concat, i, i + str_len - 1)\n\t\tif sub_str == str then\n\t\t\tmin_rotations = i - 1\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "    local len = string.len(str)\n    local temp = str .. str\n    local i = 1\n    local j = 1\n    local k = 1\n    while i <= len and j <= len and k <= len do\n        if temp[i] == temp[j] then\n            i = i + 1\n            j = j + 1\n        elseif temp[i] ~= temp[j] then\n            if temp[i] == temp[k] then\n                i = i + 1\n                k = k + 1\n            elseif temp[j] == temp[k] then\n                j = j + 1\n                k = k + 1\n            else\n                return -1\n            end\n        end\n    end\n    return k - 1\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local len = string.len(str)\n    local str = str..str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i < len and j < len do\n        k = 0\n        while k < len and string.sub(str, i, i+k) == string.sub(str, j, j+k) do\n            k = k + 1\n        end\n        if string.sub(str, i, i+k) > string.sub(str, j, j+k) then\n            i = i + k + 1\n            if i == j then\n                i = i + 1\n            end\n        else\n            j = j + k + 1\n            if i == j then\n                j = j + 1\n            end\n        end\n    end\n    return math.min(i, j)\nend",
    "\tlocal str_len = #str\n\tlocal str_double = str .. str\n\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 0\n\tlocal lps = {}\n\tlps[0] = 0\n\twhile i < str_len do\n\t\tif str_double[i] == str_double[j] then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\tk = k + 1\n\t\t\tlps[i] = k\n\t\telse\n\t\t\tif k ~= 0 then\n\t\t\t\tk = lps[k]\n\t\t\telse\n\t\t\t\ti = i + 1\n\t\t\t\tlps[i] = 0\n\t\t\tend\n\t\tend\n\tend\n\treturn str_len - lps[str_len]\nend",
    "    local len = #str\n    local temp = str..str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i < len and j < len do\n        k = 0\n        while k < len and temp[i+k] == temp[j+k] do\n            k = k + 1\n        end\n        if temp[i+k] > temp[j+k] then\n            i = i + k + 1\n            if i == j then\n                j = j + 1\n            end\n        else\n            j = j + k + 1\n            if i == j then\n                j = j + 1\n            end\n        end\n    end\n    return i\nend",
    "    local n = #str\n    local concat = str .. str\n    local i = 2\n    local j = 1\n    local lps = {}\n    lps[1] = 0\n    while i < n do\n        if concat[i] == concat[j] then\n            lps[i] = j + 1\n            i = i + 1\n            j = j + 1\n        else\n            if j ~= 0 then\n                j = lps[j - 1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return lps[n - 1]\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local i = 1\n    local j = 1\n    local k = 0\n    local lps = {}\n    while i < str_len do\n        if str_concat[i] == str_concat[j] then\n            i = i + 1\n            j = j + 1\n            lps[i] = k + 1\n            k = k + 1\n        else\n            if k ~= 0 then\n                k = lps[k]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n            j = j + 1\n        end\n    end\n    return lps[str_len]\nend",
    "    local len = #str\n    local temp = str..str\n    local i = 2\n    local j = 1\n    local lps = {}\n    lps[1] = 0\n    while i < len do\n        if temp[i] == temp[j] then\n            j = j + 1\n            lps[i] = j\n            i = i + 1\n        else\n            if j ~= 0 then\n                j = lps[j-1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return len - lps[len-1]\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_double = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local rotations = 0\n        for j = 1, str_len do\n            if str_double:sub(i + j - 1, i + j - 1) ~= str:sub(j, j) then\n                rotations = rotations + 1\n            end\n        end\n        if rotations < min_rotations then\n            min_rotations = rotations\n        end\n    end\n    return min_rotations\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 2, str_len do\n    local sub_str = string.sub(str_concat, i, i + str_len - 1)\n    if sub_str == str then\n      min_rotations = str_len - i + 1\n      break\n    end\n  end\n  return min_rotations\nend",
    "    local str_len = str:len()\n    local str_len_1 = str_len - 1\n    local str_len_2 = str_len - 2\n    local str_len_3 = str_len - 3\n    local str_len_4 = str_len - 4\n    local str_len_5 = str_len - 5\n    local str_len_6 = str_len - 6\n    local str_len_7 = str_len - 7\n    local str_len_8 = str_len - 8\n    local str_len_9 = str_len - 9\n    local str_len_10 = str_len - 10\n    local str_len_11 = str_len - 11\n    local str_len_12 = str_len - 12\n    local str_len_13 = str_len - 13\n    local str_len_14 = str_len - 14\n    local str_len_15 = str_len - 15\n    local str_len_16 = str_len - 16\n    local str_len_17 = str_len - 17\n    local str_len_18 = str_len - 18\n    local str_len_19 = str_len - 19\n    local str_len_20 = str_len - 20\n    local str_len_21 = str_len - 21\n    local str_len_22 = str_len - 22\n    local str_len_23 = str_len - 23\n    local str_len_24 = str_len - 24\n    local str_len_25 = str_len - 25\n    local str_len_26 = str_len - 26\n    local str_len_27 = str_len - 27\n    local str_len_28 = str_len - 28\n    local str_len_29 = str_len - 29\n    local str_len_30 = str_len - 30\n    local str_len_31 = str_len - 31\n    local str_len_32 = str_len - 32\n    local str_len_33 = str_len - 33\n    local str_len_34 = str_len - 34\n    local str_len_35 = str_len - 35\n    local str_len_36 = str_",
    "    local len = #str\n    local temp = str..str\n    local i = 2\n    local j = 1\n    local k = 0\n    local lps = {}\n    lps[1] = 0\n    while i < len do\n        if temp[i] == temp[j] then\n            j = j + 1\n            i = i + 1\n            lps[i] = j\n        else\n            if j ~= 1 then\n                j = lps[j-1] + 1\n            else\n                i = i + 1\n                lps[i] = 0\n            end\n        end\n    end\n    return len - lps[len]\nend",
    "\tlocal str_len = string.len(str)\n\tlocal min_rotations = str_len\n\tlocal str_concat = str .. str\n\tfor i = 1, str_len do\n\t\tlocal rotations = 0\n\t\tlocal j = i\n\t\twhile j <= str_len do\n\t\t\tif string.sub(str, j, j) ~= string.sub(str_concat, j, j) then\n\t\t\t\trotations = rotations + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\tif rotations < min_rotations then\n\t\t\tmin_rotations = rotations\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "    local str1 = str..str\n    local n = #str\n    local i, j = 1, 2\n    local k = 0\n    while i <= n and j <= n do\n        k = k + 1\n        if str1:sub(i, i+k-1) == str1:sub(j, j+k-1) then\n            i = i + k\n            j = j + k\n            k = 0\n        elseif str1:sub(i, i+k-1) < str1:sub(j, j+k-1) then\n            j = j + k + 1\n            k = 0\n            if i == j then j = j + 1 end\n        else\n            i = i + k + 1\n            k = 0\n            if i == j then i = i + 1 end\n        end\n    end\n    return i < j and i or j\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local temp = str .. str\n    local i = 2\n    local j = 1\n    local k = 0\n    local lps = {}\n    lps[1] = 0\n    while i < len do\n        if temp[i] == temp[j] then\n            k = k + 1\n            lps[i] = k\n            i = i + 1\n            j = j + 1\n        else\n            if k ~= 0 then\n                k = lps[k]\n                j = j - k\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return lps[len]\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local i = 1\n    local j = 1\n    local k = 0\n    local lps = {}\n    lps[1] = 0\n    while i < str_len do\n        if str_concat[i] == str_concat[j] then\n            i = i + 1\n            j = j + 1\n            k = k + 1\n            lps[i] = k\n        else\n            if k ~= 0 then\n                k = lps[k]\n            else\n                i = i + 1\n                lps[i] = 0\n            end\n        end\n    end\n    return lps[str_len]\nend",
    "    local len = #str\n    local temp = str .. str\n    local i = 2\n    local j = 1\n    local k = 0\n    local lps = {}\n    lps[1] = 0\n    while i < len do\n        if temp[i] == temp[j] then\n            j = j + 1\n            lps[i] = j\n            i = i + 1\n        else\n            if j ~= 0 then\n                j = lps[j - 1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return len - lps[len - 1]\nend",
    "    local str_len = #str\n    local str_double = str .. str\n    local i = 1\n    local j = 1\n    local k = 0\n    local lps = {}\n    lps[0] = 0\n    while i < str_len do\n        if str_double[i+1] == str_double[j+1] then\n            k = k + 1\n            lps[i] = k\n            i = i + 1\n            j = j + 1\n        else\n            if k ~= 0 then\n                k = lps[k-1]\n                j = k + 1\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return str_len - lps[str_len-1]\nend",
    "\tlocal str_len = string.len(str)\n\tlocal min_rotations = str_len\n\tlocal str_concat = str .. str\n\tfor i = 1, str_len do\n\t\tlocal str_sub = string.sub(str_concat, i, i + str_len - 1)\n\t\tif str_sub == str then\n\t\t\tmin_rotations = i - 1\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "    local str1 = str\n    local str2 = str\n    local n = #str\n    for i = 1, n do\n        str1 = string.sub(str1, 2) .. string.sub(str1, 1, 1)\n        if str1 == str then\n            return i\n        end\n    end\n    return 0\nend",
    "  local len = #str\n  local str1 = str..str\n  local i = 1\n  local j = 2\n  local k = 0\n  while i <= len and j <= len do\n    if str1:sub(i,i) == str1:sub(j,j) then\n      i = i + 1\n      j = j + 1\n    else\n      if k > 0 then\n        k = k - 1\n        i = i - k\n        j = j - k\n      else\n        k = 0\n        j = j + 1\n      end\n    end\n  end\n  return i - 1\nend",
    "    local len = #str\n    local str = str..str\n    local i, j = 1, 2\n    while i <= len and j <= len do\n        local k = 0\n        while k < len and str:sub(i+k, i+k) == str:sub(j+k, j+k) do\n            k = k + 1\n        end\n        if k == len then\n            return i\n        end\n        if str:sub(i+k, i+k) > str:sub(j+k, j+k) then\n            i = i + k + 1\n            if i == j then\n                j = j + 1\n            end\n        else\n            j = j + k + 1\n            if i == j then\n                i = i + 1\n            end\n        end\n    end\n    return i\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    local i = 2\n    while i <= str_len do\n        local str_sub = string.sub(str_concat, i, i + str_len - 1)\n        if str_sub == str then\n            min_rotations = i - 1\n            break\n        end\n        i = i + 1\n    end\n    return min_rotations\nend",
    "\tlocal str1 = str .. str\n\tlocal len = #str\n\tlocal min = len\n\tfor i = 1, len do\n\t\tlocal str2 = str1:sub(i, i + len - 1)\n\t\tif str2 < min then\n\t\t\tmin = str2\n\t\tend\n\tend\n\treturn min\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local count = 0\n    for i = 1, str_len do\n        if str_concat:sub(i, i + str_len - 1) == str then\n            return count\n        end\n        count = count + 1\n    end\n    return count\nend",
    "    local len = string.len(str)\n    local temp = str .. str\n    local i = 2\n    local j = 1\n    local lps = {}\n    lps[1] = 0\n    while i < len do\n        if str[i] == str[j] then\n            lps[i] = j + 1\n            i = i + 1\n            j = j + 1\n        else\n            if j ~= 0 then\n                j = lps[j - 1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return len - lps[len - 1]\nend",
    "    local str1 = str\n    local str2 = str\n    local n = #str\n    for i = 1, n - 1 do\n        str1 = str1:sub(2) .. str1:sub(1, 1)\n        if str1 == str then\n            return i\n        end\n    end\n    return 0\nend",
    "    local str_len = #str\n    local str_double = str .. str\n    local i = 2\n    local j = 1\n    local lps = {}\n    lps[1] = 0\n    while i <= str_len do\n        if str:sub(i, i) == str:sub(j, j) then\n            lps[i] = j + 1\n            i = i + 1\n            j = j + 1\n        else\n            if j ~= 1 then\n                j = lps[j - 1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return str_len - lps[str_len]\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local str = str .. str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i <= len and j <= len do\n        k = 0\n        while k < len and str:sub(i, i + k) == str:sub(j, j + k) do\n            k = k + 1\n        end\n        if k == len then\n            break\n        end\n        if str:sub(i, i + k) > str:sub(j, j + k) then\n            i = i + k + 1\n            if i == j then\n                j = j + 1\n            end\n        else\n            j = j + k + 1\n            if i == j then\n                j = j + 1\n            end\n        end\n    end\n    return i\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local i = 1\n    local j = 1\n    local k = 0\n    local lps = {}\n    lps[1] = 0\n    while i < str_len do\n        if str_concat[i] == str_concat[j] then\n            i = i + 1\n            j = j + 1\n            k = k + 1\n            lps[i] = k\n        else\n            if k ~= 0 then\n                k = lps[k]\n                j = k + 1\n            else\n                i = i + 1\n                j = 1\n                lps[i] = 0\n            end\n        end\n    end\n    return lps[str_len]\nend",
    "    local len = string.len(str)\n    local temp = str..str\n    local i = 2\n    local j = 1\n    local lps = {}\n    lps[1] = 0\n    while i < 2*len do\n        if str[i] == str[j] then\n            lps[i] = j + 1\n            i = i + 1\n            j = j + 1\n        else\n            if j ~= 0 then\n                j = lps[j-1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return lps[len-1]\nend",
    "    local str_len = #str\n    local temp = str..str\n    local i = 1\n    local j = 1\n    local k = 0\n    while i <= str_len and j <= str_len do\n        if temp[i] == temp[j] then\n            i = i + 1\n            j = j + 1\n        else\n            if k > 0 then\n                k = k - 1\n                i = i - k\n                j = j - k\n            else\n                k = 0\n                i = i + 1\n            end\n        end\n    end\n    return j - i\nend",
    "\tlocal n = #str\n\tlocal concat = str..str\n\tlocal i = 2\n\tlocal j = 1\n\tlocal lps = {}\n\tlps[1] = 0\n\twhile i <= n do\n\t\tif concat[i] == concat[j] then\n\t\t\tlps[i] = j + 1\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\tif j ~= 1 then\n\t\t\t\tj = lps[j-1]\n\t\t\telse\n\t\t\t\tlps[i] = 0\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn n - lps[n]\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local i = 1\n    local j = 2\n    local lps = {}\n    lps[1] = 0\n    while j <= str_len do\n        if str:sub(i, i) == str:sub(j, j) then\n            lps[j] = i + 1\n            i = i + 1\n            j = j + 1\n        else\n            if i ~= 1 then\n                i = lps[i - 1]\n            else\n                lps[j] = 0\n                j = j + 1\n            end\n        end\n    end\n    return str_len - lps[str_len]\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    if str_concat:sub(i, i + str_len - 1) == str then\n      min_rotations = math.min(min_rotations, i - 1)\n    end\n  end\n  return min_rotations\nend",
    "    local len = string.len(str)\n    local temp = str .. str\n    local i = 2\n    local j = 1\n    local k = 0\n    local lps = {}\n    lps[1] = 0\n    while i < 2 * len do\n        if str[i] == str[j] then\n            k = k + 1\n            lps[i] = k\n            i = i + 1\n            j = j + 1\n        else\n            if k ~= 0 then\n                k = lps[k]\n                j = j - k\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return len - lps[len]\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    local sub_str = string.sub(str_concat, i, i + str_len - 1)\n    if sub_str == str then\n      min_rotations = i - 1\n      break\n    end\n  end\n  return min_rotations\nend",
    "    local len = string.len(str)\n    local min_rotations = len\n    local str_double = str .. str\n    for i = 2, len do\n        local s = string.sub(str_double, i, i + len - 1)\n        if s < str then\n            min_rotations = len - i + 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal len = string.len(str)\n\tlocal temp = str .. str\n\tlocal min = len\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tfor i = 1, len do\n\t\tj = i\n\t\tk = 0\n\t\twhile true do\n\t\t\tk = k + 1\n\t\t\tif k >= len then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tif string.sub(temp, j, j) ~= string.sub(temp, i, i) then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\tif k < min and k ~= len then\n\t\t\tmin = k\n\t\tend\n\tend\n\treturn min\nend",
    "    local str_len = #str\n    local str_double = str .. str\n    local i = 2\n    local j = 1\n    local lps = {}\n    lps[0] = 0\n    lps[1] = 0\n    while i < str_len do\n        if str_double[i] == str_double[j] then\n            j = j + 1\n            lps[i] = j\n            i = i + 1\n        else\n            if j ~= 0 then\n                j = lps[j - 1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return str_len - lps[str_len - 1]\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local temp = str..str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i < len and j < len do\n        k = 0\n        while k < len and temp[i+k] == temp[j+k] do\n            k = k + 1\n        end\n        if temp[i+k] > temp[j+k] then\n            i = i + k + 1\n            if i == j then\n                i = i + 1\n            end\n        else\n            j = j + k + 1\n            if i == j then\n                j = j + 1\n            end\n        end\n    end\n    return math.min(i, j)\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = 0\n    local min_index = 0\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        local sub_str_len = string.len(sub_str)\n        local sub_str_concat = sub_str .. sub_str\n        local rotations = 0\n        for j = 1, sub_str_len do\n            local sub_sub_str = string.sub(sub_str_concat, j, j + sub_str_len - 1)\n            if sub_sub_str == str then\n                rotations = j - 1\n                break\n            end\n        end\n        if rotations < min_rotations or min_rotations == 0 then\n            min_rotations = rotations\n            min_index = i\n        end\n    end\n    return min_rotations, min_index\nend",
    "\tlocal len = #str\n\tlocal temp = str..str\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 0\n\twhile (i < len and j < len) do\n\t\tk = 0\n\t\twhile (k < len) do\n\t\t\tif (str[i+k] ~= temp[j+k]) then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tk = k + 1\n\t\tend\n\t\tif (k == len) then\n\t\t\treturn j\n\t\tend\n\t\tif (str[i+k] > temp[j+k]) then\n\t\t\ti = i + k + 1\n\t\telse\n\t\t\tj = j + k + 1\n\t\tend\n\t\tif (i == j) then\n\t\t\tj = j + 1\n\t\tend\n\tend\n\treturn i\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local i = 1\n    local j = 1\n    local k = 0\n    local lps = {}\n    lps[1] = 0\n    while i < str_len do\n        if str:sub(i,i) == str:sub(j,j) then\n            i = i + 1\n            j = j + 1\n            k = k + 1\n            lps[i] = k\n        else\n            if k ~= 0 then\n                k = lps[k]\n                j = k + 1\n            else\n                lps[i] = 0\n                i = i + 1\n                j = 1\n            end\n        end\n    end\n    local result = str_len - lps[str_len]\n    if result == str_len then\n        return 0\n    else\n        return result\n    end\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str = str\n    local len = string.len(str)\n    local min = len\n    local i = 1\n    local j = 1\n    local k = 1\n    local temp = \"\"\n    while i <= len do\n        j = 1\n        k = i\n        temp = \"\"\n        while j <= len do\n            temp = temp .. string.sub(str, k, k)\n            k = k + 1\n            if k > len then\n                k = 1\n            end\n            j = j + 1\n        end\n        if temp < str then\n            min = i\n            str = temp\n        end\n        i = i + 1\n    end\n    return min\nend",
    "    local str_len = string.len(str)\n    local str_concat = str..str\n    local min_rotations = str_len\n    for i=1,str_len do\n        local sub_str = string.sub(str_concat,i,i+str_len-1)\n        if sub_str == str then\n            min_rotations = i-1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local temp = str..str\n    local i = 2\n    local j = 1\n    local k = 0\n    local lps = {}\n    lps[1] = 0\n    while i < 2*len do\n        if temp[i] == temp[j] then\n            j = j + 1\n            lps[i] = j - 1\n            i = i + 1\n        else\n            if j ~= 1 then\n                j = lps[j-1] + 1\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return len - lps[len]\nend",
    "    local len = #str\n    local temp = str .. str\n    local i = 2\n    local j = 1\n    local k = 0\n    local lps = {}\n    lps[1] = 0\n    while i < len do\n        if temp[i] == temp[j] then\n            k = k + 1\n            lps[i] = k\n            i = i + 1\n            j = j + 1\n        else\n            if k ~= 0 then\n                k = lps[k]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n            j = 1\n        end\n    end\n    return len - lps[len - 1]\nend",
    "    local len = #str\n    local temp = str..str\n    local i = 1\n    local j = 2\n    local k = 0\n    local lps = {}\n    while j < len do\n        if temp[i] == temp[j] then\n            i = i + 1\n            j = j + 1\n            lps[j] = i\n        else\n            if i == 0 then\n                j = j + 1\n                lps[j] = 0\n            else\n                i = lps[i]\n            end\n        end\n    end\n    return len - lps[len]\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local i = 1\n    local j = 1\n    local k = 1\n    while i <= str_len and j <= str_len and k <= str_len do\n        if str_concat:sub(i, i + k - 1) == str_concat:sub(j, j + k - 1) then\n            k = k + 1\n        else\n            if str_concat:sub(i, i) < str_concat:sub(j, j) then\n                i = i + k\n            else\n                j = j + k\n            end\n            if i == j then\n                j = j + 1\n            end\n            k = 1\n        end\n    end\n    return math.min(i, j)\nend",
    "    local len = string.len(str)\n    local str2 = str .. str\n    local i = 2\n    local j = 1\n    local lps = {}\n    lps[1] = 0\n    while i < len do\n        if str[i] == str[j] then\n            lps[i] = j + 1\n            i = i + 1\n            j = j + 1\n        else\n            if j ~= 0 then\n                j = lps[j - 1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return len - lps[len - 1]\nend",
    "    local len = string.len(str)\n    local temp = str .. str\n    local i = 1\n    local j = 1\n    local k = 0\n    while i <= len and j <= len do\n        if temp[i] == temp[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - k\n            k = 0\n            j = j - k\n        end\n        if j == len + 1 then\n            k = i\n        end\n    end\n    return k\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local i = 1\n    while i <= str_len do\n        if str_concat:sub(i, i + str_len - 1) == str then\n            return i - 1\n        end\n        i = i + 1\n    end\n    return 0\nend",
    "    local str_len = #str\n    local str_concat = str..str\n    local min_rotations = str_len\n    for i=1, str_len do\n        local sub_str = string.sub(str_concat, i, i+str_len-1)\n        if sub_str == str then\n            min_rotations = i-1\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal len = string.len(str)\n\tlocal temp = str..str\n\tlocal i = 0\n\tlocal j = 1\n\tlocal k = 0\n\tlocal lps = {}\n\twhile j < len do\n\t\tif temp[i+1] == temp[j+1] then\n\t\t\ti = i + 1\n\t\t\tlps[j] = i\n\t\t\tj = j + 1\n\t\telse\n\t\t\tif i ~= 0 then\n\t\t\t\ti = lps[i-1]\n\t\t\telse\n\t\t\t\tlps[j] = 0\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn len - lps[len-1]\nend",
    "    local rotations = 0\n    local str_len = #str\n    local str_copy = str\n    local str_copy_2 = str\n    for i = 1, str_len do\n        str_copy = str_copy:sub(2) .. str_copy:sub(1,1)\n        if str_copy == str_copy_2 then\n            rotations = i\n            break\n        end\n    end\n    return rotations\nend",
    "    local str1 = str\n    local str2 = str\n    local len = string.len(str)\n    for i = 1, len do\n        str1 = string.sub(str1, 2) .. string.sub(str1, 1, 1)\n        if str1 == str then\n            return i\n        end\n    end\n    return 0\nend",
    "    local str = str\n    local str_len = string.len(str)\n    local str_len_1 = str_len - 1\n    local str_len_2 = str_len - 2\n    local str_len_3 = str_len - 3\n    local str_len_4 = str_len - 4\n    local str_len_5 = str_len - 5\n    local str_len_6 = str_len - 6\n    local str_len_7 = str_len - 7\n    local str_len_8 = str_len - 8\n    local str_len_9 = str_len - 9\n    local str_len_10 = str_len - 10\n    local str_len_11 = str_len - 11\n    local str_len_12 = str_len - 12\n    local str_len_13 = str_len - 13\n    local str_len_14 = str_len - 14\n    local str_len_15 = str_len - 15\n    local str_len_16 = str_len - 16\n    local str_len_17 = str_len - 17\n    local str_len_18 = str_len - 18\n    local str_len_19 = str_len - 19\n    local str_len_20 = str_len - 20\n    local str_len_21 = str_len - 21\n    local str_len_22 = str_len - 22\n    local str_len_23 = str_len - 23\n    local str_len_24 = str_len - 24\n    local str_len_25 = str_len - 25\n    local str_len_26 = str_len - 26\n    local str_len_27 = str_len - 27\n    local str_len_28 = str_len - 28\n    local str_len_29 = str_len - 29\n    local str_len_30 = str_len - 30\n    local str_len_31 = str_len - 31\n    local str_len_32 = str_len - 32\n    local str_len_33 = str_len - 33\n    local str_len_34 = str_len - 34\n    local str_len_35 = str_len - 35\n    local",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_copy = str\n    local min_rotations = 0\n    for i = 1, str_len do\n        local first_char = str_copy:sub(1, 1)\n        str_copy = str_copy:sub(2) .. first_char\n        if str_copy == str then\n            min_rotations = i\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local substr = string.sub(str_concat, i, i + str_len - 1)\n        if str == substr then\n            if i < min_rotations then\n                min_rotations = i\n            end\n        end\n    end\n    return min_rotations\nend",
    "    local str1 = str\n    local str2 = str\n    local n = #str\n    for i = 1, n do\n        str1 = string.sub(str1, 2) .. string.sub(str1, 1, 1)\n        if str1 == str2 then\n            return i\n        end\n    end\n    return 0\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "  local len = #str\n  local concat = str .. str\n  local min = len\n  for i = 1, len do\n    local sub = string.sub(concat, i, i + len - 1)\n    if sub < min then\n      min = sub\n    end\n  end\n  return min\nend",
    "    local len = string.len(str)\n    local temp = str .. str\n    local i = 1\n    local j = 1\n    local k = 0\n    while i <= len and j <= len do\n        if temp[i] == temp[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - k\n            j = j - k\n            k = 0\n            if temp[i] == temp[j] then\n                i = i + 1\n                j = j + 1\n            else\n                i = i + 1\n            end\n        end\n        if j == len + 1 then\n            k = i\n        end\n    end\n    return k\nend",
    "\tlocal str1 = str\n\tlocal str2 = str\n\tlocal count = 0\n\tlocal len = string.len(str)\n\twhile (count < len) do\n\t\tstr2 = string.sub(str2, 2) .. string.sub(str2, 1, 1)\n\t\tcount = count + 1\n\t\tif (str1 == str2) then\n\t\t\treturn count\n\t\tend\n\tend\n\treturn 0\nend",
    "  local len = #str\n  local str2 = str .. str\n  local i = 1\n  local j = 2\n  local k = 0\n  while i <= len and j <= len do\n    k = 0\n    while k < len and str[i + k] == str[j + k] do\n      k = k + 1\n    end\n    if k == len then\n      break\n    end\n    if str[i + k] > str[j + k] then\n      i = i + k + 1\n    else\n      j = j + k + 1\n    end\n    if i == j then\n      j = j + 1\n    end\n  end\n  return math.min(i, j)\nend",
    "    local str_len = #str\n    local str_double = str .. str\n    local min_rotations = str_len\n    local i = 1\n    while i <= str_len do\n        local j = i + str_len - 1\n        local sub_str = string.sub(str_double, i, j)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n        i = i + 1\n    end\n    return min_rotations\nend",
    "\tlocal len = #str\n\tlocal count = 0\n\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal min = len\n\tlocal min_index = 0\n\tlocal temp = {}\n\tlocal temp_str = \"\"\n\twhile i <= len do\n\t\ttemp[i] = str[i]\n\t\ti = i + 1\n\tend\n\twhile j <= len do\n\t\tcount = 0\n\t\tk = 1\n\t\ttemp_str = \"\"\n\t\twhile k <= len do\n\t\t\ttemp_str = temp_str .. temp[k]\n\t\t\tk = k + 1\n\t\tend\n\t\tif temp_str == str then\n\t\t\tif count < min then\n\t\t\t\tmin = count\n\t\t\t\tmin_index = j\n\t\t\tend\n\t\tend\n\t\tcount = count + 1\n\t\ttemp[len + 1] = temp[1]\n\t\ti = 1\n\t\twhile i < len do\n\t\t\ttemp[i] = temp[i + 1]\n\t\t\ti = i + 1\n\t\tend\n\t\tj = j + 1\n\tend\n\treturn min_index\nend",
    "  local str1 = str\n  local str2 = str\n  local str3 = str\n  local str4 = str\n  local str5 = str\n  local str6 = str\n  local str7 = str\n  local str8 = str\n  local str9 = str\n  local str10 = str\n  local str11 = str\n  local str12 = str\n  local str13 = str\n  local str14 = str\n  local str15 = str\n  local str16 = str\n  local str17 = str\n  local str18 = str\n  local str19 = str\n  local str20 = str\n  local str21 = str\n  local str22 = str\n  local str23 = str\n  local str24 = str\n  local str25 = str\n  local str26 = str\n  local str27 = str\n  local str28 = str\n  local str29 = str\n  local str30 = str\n  local str31 = str\n  local str32 = str\n  local str33 = str\n  local str34 = str\n  local str35 = str\n  local str36 = str\n  local str37 = str\n  local str38 = str\n  local str39 = str\n  local str40 = str\n  local str41 = str\n  local str42 = str\n  local str43 = str\n  local str44 = str\n  local str45 = str\n  local str46 = str\n  local str47 = str\n  local str48 = str\n  local str49 = str\n  local str50 = str\n  local str51 = str\n  local str52 = str\n  local str53 = str\n  local str54 = str\n  local str55 = str\n  local str56 = str\n  local str57 = str\n  local str58 = str\n  local str59 = str\n  local str60 = str\n  local str61 = str\n  local str62 = str\n  local str63 = str\n  local str64 = str\n  local str65 = str\n  local str66 = str\n  local str67 = str\n  local str68 = str\n  local str69 = str\n  local str70 = str\n  local str71 = str\n  local str72 = str\n  local str73 = str\n",
    "    local len = string.len(str)\n    local str = str..str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i <= len and j <= len do\n        k = 0\n        while k < len and string.sub(str, i, i+k) == string.sub(str, j, j+k) do\n            k = k + 1\n        end\n        if k == len then\n            break\n        end\n        if string.sub(str, i, i+k) > string.sub(str, j, j+k) then\n            i = i + k + 1\n        else\n            j = j + k + 1\n        end\n        if i == j then\n            j = j + 1\n        end\n    end\n    return math.min(i, j)\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 2, str_len do\n        if str_concat:sub(i, i + str_len - 1) < str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal len = #str\n\tlocal temp = str..str\n\tlocal i = 2\n\tlocal j = 1\n\tlocal k = 0\n\tlocal lps = {}\n\tlps[1] = 0\n\twhile i < len do\n\t\tif temp[i] == temp[j] then\n\t\t\tk = k + 1\n\t\t\tlps[i] = k\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\tif k ~= 0 then\n\t\t\t\tk = lps[k]\n\t\t\t\tj = j - k\n\t\t\telse\n\t\t\t\tlps[i] = 0\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn len - lps[len]\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local i = 1\n    local j = 1\n    local k = 0\n    while i < str_len and j < str_len do\n        if str_concat:sub(i, i) == str_concat:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            k = j\n            j = j + 1\n            i = 1\n        end\n    end\n    return k\nend",
    "    local str_len = #str\n    local str_double = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        if str_double:sub(i, i + str_len - 1) == str then\n            min_rotations = math.min(min_rotations, i - 1)\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_double = str .. str\n    local i = 1\n    while i <= str_len do\n        if str_double:sub(i, i + str_len - 1) == str then\n            return i - 1\n        end\n        i = i + 1\n    end\n    return 0\nend",
    "    local len = string.len(str)\n    local temp = str..str\n    local i, j = 1, 2\n    while i <= len and j <= len do\n        local k = 0\n        while k < len and string.sub(temp, i+k, i+k) == string.sub(temp, j+k, j+k) do\n            k = k + 1\n        end\n        if k == len then\n            return j - i\n        end\n        if string.sub(temp, i+k, i+k) > string.sub(temp, j+k, j+k) then\n            i = i + k + 1\n        else\n            j = j + k + 1\n        end\n        if i == j then\n            j = j + 1\n        end\n    end\n    return 0\nend",
    "    local str1 = str\n    local str2 = str\n    local n = #str\n    for i = 1, n do\n        str1 = string.sub(str1, 2, n) .. string.sub(str1, 1, 1)\n        if str1 == str then\n            return i\n        end\n    end\n    return 0\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 2, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = str_len - i + 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local len = string.len(str)\n    local str = str .. str\n    local i, j = 1, 2\n    while i <= len and j <= len do\n        local k = 0\n        while k < len and str:sub(i + k, i + k) == str:sub(j + k, j + k) do\n            k = k + 1\n        end\n        if k == len then\n            return i\n        end\n        if str:sub(i + k, i + k) > str:sub(j + k, j + k) then\n            i = i + k + 1\n        else\n            j = j + k + 1\n        end\n        if i == j then\n            j = j + 1\n        end\n    end\n    return i\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    local sub_str = string.sub(str_concat, i, i + str_len - 1)\n    if sub_str == str then\n      min_rotations = i - 1\n      break\n    end\n  end\n  return min_rotations\nend",
    "    local len = #str\n    local str = str..str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i <= len and j <= len do\n        k = 0\n        while k < len and str[i+k] == str[j+k] do\n            k = k + 1\n        end\n        if k == len then\n            break\n        end\n        if str[i+k] > str[j+k] then\n            i = i + k + 1\n        else\n            j = j + k + 1\n        end\n        if i == j then\n            j = j + 1\n        end\n    end\n    return i\nend",
    "\tlocal str_len = string.len(str)\n\tlocal str_concat = str..str\n\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 0\n\tlocal lps = {}\n\tlps[1] = 0\n\twhile i < str_len do\n\t\tif str_concat[i] == str_concat[j] then\n\t\t\tk = k + 1\n\t\t\tlps[i] = k\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\tif k ~= 0 then\n\t\t\t\tk = lps[k]\n\t\t\telse\n\t\t\t\tlps[i] = 0\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\t\tj = 1\n\t\tend\n\tend\n\treturn str_len - lps[str_len]\nend",
    "    local len = string.len(str)\n    local temp = str .. str\n    local i = 2\n    local j = 1\n    local lps = {}\n    lps[1] = 0\n    while i < len do\n        if str[i] == str[j] then\n            lps[i] = j + 1\n            i = i + 1\n            j = j + 1\n        else\n            if j ~= 0 then\n                j = lps[j - 1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return len - lps[len - 1]\nend",
    "    local len = #str\n    local temp = str .. str\n    local i = 2\n    local j = 1\n    local lps = {}\n    lps[1] = 0\n    while i < len do\n        if temp[i] == temp[j] then\n            lps[i] = j + 1\n            i = i + 1\n            j = j + 1\n        else\n            if j ~= 0 then\n                j = lps[j - 1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return len - lps[len - 1]\nend",
    "  local len = #str\n  local str2 = str..str\n  local i = 2\n  local j = 1\n  local lps = {}\n  lps[1] = 0\n  while i < len do\n    if str2[i] == str2[j] then\n      lps[i] = j + 1\n      i = i + 1\n      j = j + 1\n    else\n      if j ~= 0 then\n        j = lps[j - 1]\n      else\n        lps[i] = 0\n        i = i + 1\n      end\n    end\n  end\n  return len - lps[len - 1]\nend",
    "    local len = #str\n    local temp = str .. str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i <= len and j <= len do\n        k = 0\n        while k < len and temp[i + k] == temp[j + k] do\n            k = k + 1\n        end\n        if k == len then\n            break\n        end\n        if temp[i + k] > temp[j + k] then\n            i = i + k + 1\n        else\n            j = j + k + 1\n        end\n        if i == j then\n            j = j + 1\n        end\n    end\n    return math.min(i, j)\nend",
    "    local len = #str\n    local min_rotations = len\n    local str_concat = str .. str\n    for i = 1, len do\n        local sub_str = string.sub(str_concat, i, i + len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local i = 0\n  local j = 1\n  local lps = {}\n  lps[0] = 0\n  while j < str_len do\n    if str_concat:sub(i+1,i+1) == str_concat:sub(j+1,j+1) then\n      i = i + 1\n      lps[j] = i\n      j = j + 1\n    else\n      if i ~= 0 then\n        i = lps[i-1]\n      else\n        lps[j] = 0\n        j = j + 1\n      end\n    end\n  end\n  return str_len - lps[str_len-1]\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_len = str_len\n    local min_index = 0\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str < min_len then\n            min_len = sub_str\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "\tlocal str_len = #str\n\tlocal str_concat = str .. str\n\tlocal min_rotations = str_len\n\tfor i = 1, str_len do\n\t\tlocal sub_str = string.sub(str_concat, i, i + str_len - 1)\n\t\tif sub_str == str then\n\t\t\tmin_rotations = i - 1\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "  local len = string.len(str)\n  local temp = str .. str\n  local i = 2\n  local j = 1\n  local lps = {}\n  lps[1] = 0\n  while i < len do\n    if str[i] == str[j] then\n      lps[i] = j + 1\n      i = i + 1\n      j = j + 1\n    else\n      if j ~= 0 then\n        j = lps[j - 1]\n      else\n        lps[i] = 0\n        i = i + 1\n      end\n    end\n  end\n  return len - lps[len - 1]\nend",
    "\tlocal len = #str\n\tlocal temp = str..str\n\tlocal i = 2\n\tlocal j = 1\n\tlocal lps = {}\n\tlps[1] = 0\n\twhile i < len do\n\t\tif temp[i] == temp[j] then\n\t\t\tlps[i] = j + 1\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\tif j ~= 0 then\n\t\t\t\tj = lps[j-1]\n\t\t\telse\n\t\t\t\tlps[i] = 0\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn len - lps[len-1]\nend",
    "\tlocal len = string.len(str)\n\tlocal temp = str..str\n\tlocal min = len\n\tfor i = 1, len do\n\t\tlocal s = string.sub(temp, i, i+len-1)\n\t\tif s < min then\n\t\t\tmin = s\n\t\tend\n\tend\n\treturn min\nend",
    "    local len = #str\n    local temp = str .. str\n    local i = 2\n    local j = 1\n    local k = 0\n    while i <= len and j <= len do\n        if temp[i] == temp[j] then\n            i = i + 1\n            j = j + 1\n        else\n            if k > 0 then\n                k = k - 1\n                j = k + 1\n            else\n                i = i + 1\n            end\n        end\n        if j > k then\n            k = j - 1\n        end\n    end\n    return k\nend",
    "  local str_len = string.len(str)\n  local str_concat = str .. str\n  local i = 0\n  local j = 1\n  local k = 0\n  local lps = {}\n  lps[0] = 0\n  while j < str_len do\n    if str_concat:sub(i+1,i+1) == str_concat:sub(j+1,j+1) then\n      i = i + 1\n      j = j + 1\n      lps[j] = i\n    else\n      if i ~= 0 then\n        i = lps[i]\n      else\n        j = j + 1\n        lps[j] = 0\n      end\n    end\n  end\n  return str_len - lps[str_len]\nend",
    "    local len = #str\n    local str = str .. str\n    local i = 0\n    local j = 1\n    local k = 0\n    while i < len and j < len and k < len do\n        if str[i+k] == str[j+k] then\n            k = k + 1\n        else\n            if str[i+k] > str[j+k] then\n                i = i + k + 1\n            else\n                j = j + k + 1\n            end\n            if i == j then\n                j = j + 1\n            end\n            k = 0\n        end\n    end\n    return math.min(i, j)\nend",
    "    local len = string.len(str)\n    local temp = str .. str\n    local min_rotations = len\n    for i = 2, len do\n        local rotations = string.sub(temp, i, i + len - 1)\n        if rotations < str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local temp = str..str\n    local i = 2\n    local j = 1\n    local k = 0\n    local lps = {}\n    lps[1] = 0\n    while i < len do\n        if str[i] == str[j] then\n            j = j + 1\n            i = i + 1\n            lps[i] = j\n        else\n            if j ~= 0 then\n                j = lps[j]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    i = 1\n    j = 1\n    while i < len do\n        if temp[i] == str[j] then\n            i = i + 1\n            j = j + 1\n        else\n            if j ~= 0 then\n                j = lps[j]\n            else\n                i = i + 1\n            end\n        end\n        if j == len then\n            k = i - len\n            break\n        end\n    end\n    return k\nend",
    "    local str_len = string.len(str)\n    local str_copy = str\n    local count = 0\n    while true do\n        local str_copy = string.sub(str_copy, 2)..string.sub(str_copy, 1, 1)\n        count = count + 1\n        if str_copy == str then\n            return count\n        end\n    end\nend",
    "  local str_len = string.len(str)\n  local str_concat = str .. str\n  local i = 1\n  local j = 1\n  local k = 0\n  while i < str_len and j < str_len do\n    if str:sub(i, i) == str:sub(j, j) then\n      i = i + 1\n      j = j + 1\n    else\n      j = j + 1\n      k = 0\n      i = 1\n    end\n    if i == j then\n      k = k + 1\n    end\n  end\n  return k\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal len = #str\n\tlocal temp = str..str\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 0\n\twhile i <= len and j <= len do\n\t\tk = 0\n\t\twhile k < len and temp[i+k] == temp[j+k] do\n\t\t\tk = k + 1\n\t\tend\n\t\tif k == len then\n\t\t\tbreak\n\t\tend\n\t\tif temp[i+k] > temp[j+k] then\n\t\t\ti = i + k + 1\n\t\telse\n\t\t\tj = j + k + 1\n\t\tend\n\t\tif i == j then\n\t\t\tj = j + 1\n\t\tend\n\tend\n\treturn math.min(i, j)\nend",
    "\tlocal str1 = str\n\tlocal str2 = str\n\tlocal n = #str\n\tlocal count = 0\n\tfor i=1,n do\n\t\tstr1 = str1:sub(2)..str1:sub(1,1)\n\t\tif str1 == str2 then\n\t\t\treturn count\n\t\tend\n\t\tcount = count + 1\n\tend\n\treturn count\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "  local str_len = string.len(str)\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    local str_rotated = string.sub(str_concat, i, i + str_len - 1)\n    if str_rotated == str then\n      min_rotations = i - 1\n      break\n    end\n  end\n  return min_rotations\nend",
    "    local len = string.len(str)\n    local str2 = str .. str\n    local i = 1\n    local j = 2\n    local k = 0\n    local lps = {}\n    while i < len and j < len do\n        if str2[i] == str2[j] then\n            lps[j] = i + 1\n            i = i + 1\n            j = j + 1\n        else\n            if k > 0 then\n                k = lps[k]\n            else\n                lps[j] = 0\n                j = j + 1\n            end\n        end\n    end\n    return len - lps[len - 1]\nend",
    "    local str_len = #str\n    local str_double = str .. str\n    local i = 1\n    local j = 1\n    local k = 1\n    local lps = {}\n    lps[1] = 0\n    while i < str_len do\n        if str_double[i] == str_double[j] then\n            i = i + 1\n            j = j + 1\n            lps[i] = j\n        else\n            if j ~= 1 then\n                j = lps[j - 1] + 1\n            else\n                i = i + 1\n                lps[i] = 0\n            end\n        end\n    end\n    return lps[str_len]\nend",
    "    local len = #str\n    local temp = str..str\n    local i = 2\n    local j = 1\n    local lps = {}\n    lps[1] = 0\n    while i < len do\n        if temp[i] == temp[j] then\n            j = j + 1\n            lps[i] = j\n            i = i + 1\n        else\n            if j ~= 0 then\n                j = lps[j-1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return len - lps[len-1]\nend",
    "\tlocal str_len = #str\n\tlocal str_concat = str .. str\n\tlocal min_rotations = str_len\n\tlocal i = 1\n\twhile i <= str_len do\n\t\tlocal j = i + 1\n\t\tlocal k = i\n\t\twhile j <= str_len do\n\t\t\tif str_concat:sub(i, i) == str_concat:sub(j, j) then\n\t\t\t\tj = j + 1\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif j - i < min_rotations then\n\t\t\tmin_rotations = j - i\n\t\tend\n\t\ti = k + 1\n\tend\n\treturn min_rotations\nend",
    "    local str = str .. str\n    local n = #str\n    local lps = compute_LPS(str)\n    return n - lps[n]\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_double = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        if str_double:sub(i, i + str_len - 1) == str then\n            min_rotations = str_len - i + 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal len = #str\n\tlocal temp = str .. str\n\tlocal i = 2\n\tlocal j = 1\n\tlocal k = 0\n\tlocal lps = {}\n\tlps[1] = 0\n\twhile i < len do\n\t\tif str[i] == str[j] then\n\t\t\tj = j + 1\n\t\t\ti = i + 1\n\t\t\tlps[i] = j\n\t\telse\n\t\t\tif j ~= 0 then\n\t\t\t\tj = lps[j]\n\t\t\telse\n\t\t\t\tlps[i] = 0\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\tend\n\ti = 1\n\tj = 1\n\twhile i < len do\n\t\tif temp[i] == str[j] then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\tif j ~= 0 then\n\t\t\t\tj = lps[j]\n\t\t\telse\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn j\nend",
    "  local len = #str\n  local str2 = str .. str\n  local i = 1\n  local j = 2\n  local k = 0\n  while i <= len and j <= len do\n    k = 0\n    while k < len and str2[i + k] == str2[j + k] do\n      k = k + 1\n    end\n    if k == len then\n      break\n    end\n    if str2[i + k] > str2[j + k] then\n      i = i + k + 1\n    else\n      j = j + k + 1\n    end\n    if i == j then\n      j = j + 1\n    end\n  end\n  return math.min(i, j)\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local str_sub = string.sub(str_concat, i, i + str_len - 1)\n        if str_sub == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = #str\n    local str_double = str .. str\n    local min_rotations = str_len\n    for i = 2, str_len do\n        local is_equal = true\n        for j = 1, str_len do\n            if str_double:sub(i + j - 1, i + j - 1) ~= str:sub(j, j) then\n                is_equal = false\n                break\n            end\n        end\n        if is_equal then\n            min_rotations = math.min(min_rotations, i - 1)\n        end\n    end\n    return min_rotations\nend",
    "    local str1 = str .. str\n    local n = #str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i <= n and j <= n do\n        k = k + 1\n        if str1:sub(i, i + k - 1) == str1:sub(j, j + k - 1) then\n            i = i + k\n            j = j + k\n            k = 0\n        elseif str1:sub(i, i + k - 1) > str1:sub(j, j + k - 1) then\n            j = j + k + 1\n            k = 0\n        else\n            i = i + k + 1\n            k = 0\n        end\n        if i == j then\n            j = j + 1\n        end\n    end\n    return i < j and i or j\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 2, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = str_len - i + 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal str_len = #str\n\tlocal str_concat = str .. str\n\tlocal min_rotations = str_len\n\tfor i = 1, str_len do\n\t\tlocal substr = string.sub(str_concat, i, i + str_len - 1)\n\t\tif str == substr then\n\t\t\tif i < min_rotations then\n\t\t\t\tmin_rotations = i\n\t\t\tend\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tlocal len = #str\n\tlocal count = 0\n\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal temp = \"\"\n\tlocal temp1 = \"\"\n\tlocal temp2 = \"\"\n\tlocal temp3 = \"\"\n\tlocal temp4 = \"\"\n\tlocal temp5 = \"\"\n\tlocal temp6 = \"\"\n\tlocal temp7 = \"\"\n\tlocal temp8 = \"\"\n\tlocal temp9 = \"\"\n\tlocal temp10 = \"\"\n\tlocal temp11 = \"\"\n\tlocal temp12 = \"\"\n\tlocal temp13 = \"\"\n\tlocal temp14 = \"\"\n\tlocal temp15 = \"\"\n\tlocal temp16 = \"\"\n\tlocal temp17 = \"\"\n\tlocal temp18 = \"\"\n\tlocal temp19 = \"\"\n\tlocal temp20 = \"\"\n\tlocal temp21 = \"\"\n\tlocal temp22 = \"\"\n\tlocal temp23 = \"\"\n\tlocal temp24 = \"\"\n\tlocal temp25 = \"\"\n\tlocal temp26 = \"\"\n\tlocal temp27 = \"\"\n\tlocal temp28 = \"\"\n\tlocal temp29 = \"\"\n\tlocal temp30 = \"\"\n\tlocal temp31 = \"\"\n\tlocal temp32 = \"\"\n\tlocal temp33 = \"\"\n\tlocal temp34 = \"\"\n\tlocal temp35 = \"\"\n\tlocal temp36 = \"\"\n\tlocal temp37 = \"\"\n\tlocal temp38 = \"\"\n\tlocal temp39 = \"\"\n\tlocal temp40 = \"\"\n\tlocal temp41 = \"\"\n\tlocal temp42 = \"\"\n\tlocal temp43 = \"\"\n\tlocal temp44 = \"\"\n\tlocal temp45 = \"\"\n\tlocal temp46 = \"\"\n\tlocal temp47 = \"\"\n\tlocal temp48 = \"\"\n\tlocal temp49 = \"\"\n\tlocal temp50 = \"\"\n\tlocal temp51 = \"\"\n\tlocal temp52 = \"\"\n\tlocal temp53 = \"\"\n\tlocal temp54 = \"\"\n\tlocal temp55 = \"\"\n\tlocal temp56 = \"\"\n\tlocal temp57 = \"\"\n\tlocal temp58 = \"\"\n\tlocal temp59 = \"\"\n\tlocal temp60 = \"\"\n\tlocal temp61 = \"\"\n\tlocal temp62 = \"\"\n\tlocal temp63 = \"\"\n\tlocal temp64 = \"\"\n\tlocal temp65 = \"\"\n\tlocal temp66 = \"\"\n\tlocal temp67 = \"\"\n\tlocal temp68 =",
    "    local str = str .. str\n    local n = #str\n    local lps = computeLPSArray(str)\n    return n - lps[n]\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 2, str_len do\n    local sub_str = string.sub(str_concat, i, i + str_len - 1)\n    if sub_str == str then\n      min_rotations = str_len - i + 1\n      break\n    end\n  end\n  return min_rotations\nend",
    "\tlocal str_len = string.len(str)\n\tlocal temp = str .. str\n\tfor i = 1, str_len do\n\t\tif string.sub(temp, i, i + str_len - 1) == str then\n\t\t\treturn i - 1\n\t\tend\n\tend\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local str_sub = string.sub(str_concat, i, i + str_len - 1)\n        if str_sub == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal str_len = string.len(str)\n\tlocal temp = str .. str\n\tlocal i = 2\n\tlocal j = 1\n\tlocal lps = {}\n\tlps[1] = 0\n\twhile i < str_len do\n\t\tif str[i] == str[j] then\n\t\t\tlps[i] = j + 1\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\tif j ~= 0 then\n\t\t\t\tj = lps[j - 1]\n\t\t\telse\n\t\t\t\tlps[i] = 0\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn str_len - lps[str_len - 1]\nend",
    "    local len = #str\n    local str1 = str..str\n    local i = 0\n    local j = 1\n    local k = 0\n    while i < len and j < len and k < len do\n        if str1:sub(i+1, i+1) == str1:sub(j+1, j+1) then\n            i = i + 1\n            j = j + 1\n            k = k + 1\n        elseif str1:sub(i+1, i+1) < str1:sub(j+1, j+1) then\n            j = j + k + 1\n            k = 0\n            i = 0\n        else\n            i = i + k + 1\n            k = 0\n            j = j - i + 1\n            i = 0\n        end\n    end\n    return i\nend",
    "    local str1 = str\n    local str2 = str\n    local len = #str\n    local i = 0\n    while i < len do\n        i = i + 1\n        str1 = str1:sub(2) .. str1:sub(1, 1)\n        if str1 == str2 then\n            return i\n        end\n    end\n    return 0\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local i = 1\n    local j = 1\n    local k = 1\n    local min_len = str_len\n    local min_index = 0\n    while i <= str_len do\n        j = i\n        k = 1\n        while j <= str_len do\n            if str_concat[j] ~= str[k] then\n                break\n            end\n            j = j + 1\n            k = k + 1\n        end\n        if k < min_len then\n            min_len = k\n            min_index = i\n        end\n        i = i + 1\n    end\n    return min_index\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local str_len = string.len(str)\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local str = str .. str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i <= len and j <= len do\n        k = 0\n        while k < len and str:sub(i, i + k) == str:sub(j, j + k) do\n            k = k + 1\n        end\n        if k == len then\n            break\n        end\n        if str:byte(i + k) > str:byte(j + k) then\n            i = i + k + 1\n            if i == j then\n                j = j + 1\n            end\n        else\n            j = j + k + 1\n            if i == j then\n                j = j + 1\n            end\n        end\n    end\n    return i\nend",
    "    local len = string.len(str)\n    local str1 = str .. str\n    local min = len\n    for i = 1, len do\n        local str2 = string.sub(str1, i, i + len - 1)\n        if str2 == str then\n            min = 0\n            break\n        end\n        local count = 0\n        for j = 1, len do\n            if string.sub(str, j, j) ~= string.sub(str2, j, j) then\n                count = count + 1\n            end\n        end\n        if count < min then\n            min = count\n        end\n    end\n    return min\nend",
    "    local str1 = str .. str\n    local n = #str\n    local i = 2\n    local j = 1\n    local lps = {}\n    lps[1] = 0\n    while i <= n do\n        if str1[i] == str1[j] then\n            j = j + 1\n            lps[i] = j\n            i = i + 1\n        else\n            if j ~= 1 then\n                j = lps[j - 1]\n            else\n                lps[i] = 0\n                i = i + 1\n            end\n        end\n    end\n    return n - lps[n]\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    if str_concat:sub(i, i + str_len - 1) == str then\n      min_rotations = math.min(min_rotations, i - 1)\n    end\n  end\n  return min_rotations\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local i = 1\n  local j = 2\n  local lps = {}\n  lps[1] = 0\n  while j < str_len do\n    if str_concat[i] == str_concat[j] then\n      i = i + 1\n      lps[j] = i\n      j = j + 1\n    else\n      if i ~= 0 then\n        i = lps[i - 1]\n      else\n        lps[j] = 0\n        j = j + 1\n      end\n    end\n  end\n  return str_len - lps[str_len - 1]\nend",
    "    local len = string.len(str)\n    local temp = str .. str\n    local min = len\n    for i = 2, len do\n        local sub = string.sub(temp, i, i + len - 1)\n        if sub < str then\n            min = len - i + 1\n            break\n        end\n    end\n    return min\nend",
    "  local len = #str\n  local str_str = str..str\n  local i = 2\n  local j = 1\n  local lps = {}\n  lps[1] = 0\n  while i < len do\n    if str_str[i] == str_str[j] then\n      lps[i] = j + 1\n      i = i + 1\n      j = j + 1\n    else\n      if j ~= 0 then\n        j = lps[j-1]\n      else\n        lps[i] = 0\n        i = i + 1\n      end\n    end\n  end\n  return len - lps[len-1]\nend"
  ]
}