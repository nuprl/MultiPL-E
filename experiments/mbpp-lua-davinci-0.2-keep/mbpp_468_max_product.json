{
  "name": "mbpp_468_max_product",
  "language": "lua",
  "prompt": "-- Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nlocal function max_product(arr)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product\n    lu.assertEquals(candidate({3, 100, 4, 5, 150, 6}), 3000)\n    lu.assertEquals(candidate({4, 42, 55, 68, 80}), 50265600)\n    lu.assertEquals(candidate({10, 22, 9, 33, 21, 50, 41, 60}), 2460)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local max_product = 1\n  local max_product_ending_here = 1\n  local min_product_ending_here = 1",
    "    local max_product = 1\n    local max_product_ending_here = 1\n    local min_product_ending_here = 1",
    "  local max = arr[1]\n  local min = arr[1]\n  local result = arr[1]\n  for i = 2, #arr do\n    local a = arr[i] * max\n    local b = arr[i] * min\n    max = math.max(math.max(a, b), arr[i])\n    min = math.min(math.min(a, b), arr[i])\n    result = math.max(result, max)\n  end\n  return result\nend",
    "  local max_product = 1\n  local min_product = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product = max_product * arr[i]\n      min_product = math.min(min_product * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product = 1\n      min_product = 1\n    else\n      local temp = max_product\n      max_product = math.max(min_product * arr[i], 1)\n      min_product = temp * arr[i]\n    end\n    if max_so_far < max_product then\n      max_so_far = max_product\n    end\n  end\n  return max_so_far\nend",
    "  local max_product = 1\n  local min_product = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product = max_product * arr[i]\n      min_product = math.min(min_product * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product = 1\n      min_product = 1\n    else\n      local temp = max_product\n      max_product = math.max(min_product * arr[i], 1)\n      min_product = temp * arr[i]\n    end\n    if max_so_far < max_product then\n      max_so_far = max_product\n    end\n  end\n  return max_so_far\nend",
    "  local max = arr[1]\n  local min = arr[1]\n  local res = arr[1]\n  for i = 2, #arr do\n    local a = arr[i]\n    local b = a * max\n    local c = a * min\n    max = math.max(a, b, c)\n    min = math.min(a, b, c)\n    res = math.max(res, max)\n  end\n  return res\nend",
    "  local max_product = 1\n  local min_product = 1\n  local max_so_far = 1",
    "  local max_prod = 0\n  local prod = 1\n  for i = 1, #arr do\n    prod = prod * arr[i]\n    if prod > max_prod then\n      max_prod = prod\n    end\n  end\n  return max_prod\nend",
    "  local max_product = 1\n  local min_product = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product = max_product * arr[i]\n      min_product = math.min(min_product * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product = 1\n      min_product = 1\n    else\n      local temp = max_product\n      max_product = math.max(min_product * arr[i], 1)\n      min_product = temp * arr[i]\n    end\n    if max_so_far < max_product then\n      max_so_far = max_product\n    end\n  end\n  return max_so_far\nend",
    "  local max_product = 1\n  local min_product = 1\n  local max_so_far = 1\n  for i=1,#arr do\n    if arr[i] > 0 then\n      max_product = max_product * arr[i]\n      min_product = math.min(min_product * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product = 1\n      min_product = 1\n    else\n      local temp = max_product\n      max_product = math.max(min_product * arr[i], 1)\n      min_product = temp * arr[i]\n    end\n    if max_so_far < max_product then\n      max_so_far = max_product\n    end\n  end\n  return max_so_far\nend",
    "  local max_product = 1\n  local max_product_ending_here = 1\n  local min_product_ending_here = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product_ending_here = max_product_ending_here * arr[i]\n      min_product_ending_here = math.min(min_product_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product_ending_here = 1\n      min_product_ending_here = 1\n    else\n      local temp = max_product_ending_here\n      max_product_ending_here = math.max(min_product_ending_here * arr[i], 1)\n      min_product_ending_here = temp * arr[i]\n    end\n    if max_product < max_product_ending_here then\n      max_product = max_product_ending_here\n    end\n  end\n  return max_product\nend",
    "    local max_so_far = 1\n    local min_so_far = 1\n    local max_product = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_so_far = max_so_far * arr[i]\n            min_so_far = math.min(min_so_far * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_so_far = 1\n            min_so_far = 1\n        else\n            local temp = max_so_far\n            max_so_far = math.max(min_so_far * arr[i], 1)\n            min_so_far = temp * arr[i]\n        end\n        if max_product < max_so_far then\n            max_product = max_so_far\n        end\n    end\n    return max_product\nend",
    "  local max_prod = 1\n  local prod = 1\n  for i = 1, #arr do\n    prod = prod * arr[i]\n    if prod > max_prod then\n      max_prod = prod\n    end\n  end\n  return max_prod\nend",
    "  local max_product = 1\n  local max_product_ending_here = 1\n  local min_product_ending_here = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_product_ending_here = max_product_ending_here * v\n      min_product_ending_here = math.min(min_product_ending_here * v, 1)\n    elseif v == 0 then\n      max_product_ending_here = 1\n      min_product_ending_here = 1\n    else\n      local temp = max_product_ending_here\n      max_product_ending_here = math.max(min_product_ending_here * v, 1)\n      min_product_ending_here = temp * v\n    end\n    if max_product < max_product_ending_here then\n      max_product = max_product_ending_here\n    end\n  end\n  return max_product\nend",
    "  local max = arr[1]\n  local min = arr[1]\n  local result = arr[1]\n  for i = 2, #arr do\n    local a = arr[i] * max\n    local b = arr[i] * min\n    max = math.max(math.max(a, b), arr[i])\n    min = math.min(math.min(a, b), arr[i])\n    result = math.max(result, max)\n  end\n  return result\nend",
    "  local max_product = 1\n  local max_product_ending_here = 1\n  local min_product_ending_here = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_product_ending_here = max_product_ending_here * v\n      min_product_ending_here = min(min_product_ending_here * v, 1)\n    elseif v == 0 then\n      max_product_ending_here = 1\n      min_product_ending_here = 1\n    else\n      local temp = max_product_ending_here\n      max_product_ending_here = max(min_product_ending_here * v, 1)\n      min_product_ending_here = temp * v\n    end\n    if max_product < max_product_ending_here then\n      max_product = max_product_ending_here\n    end\n  end\n  return max_product\nend",
    "  local max_product = 1\n  local max_so_far = 1\n  local min_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_so_far = max_so_far * v\n      min_so_far = min(min_so_far * v, 1)\n    elseif v == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = max(min_so_far * v, 1)\n      min_so_far = temp * v\n    end\n    max_product = max(max_product, max_so_far)\n  end\n  return max_product\nend",
    "  local max_product = 1\n  local min_product = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product = max_product * arr[i]\n      min_product = math.min(min_product * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product = 1\n      min_product = 1\n    else\n      local temp = max_product\n      max_product = math.max(min_product * arr[i], 1)\n      min_product = temp * arr[i]\n    end\n    if max_so_far < max_product then\n      max_so_far = max_product\n    end\n  end\n  return max_so_far\nend",
    "  local max_product = arr[1]\n  local min_product = arr[1]\n  local result = arr[1]\n  for i = 2, #arr do\n    local a = arr[i] * max_product\n    local b = arr[i] * min_product\n    max_product = math.max(math.max(a, b), arr[i])\n    min_product = math.min(math.min(a, b), arr[i])\n    result = math.max(result, max_product)\n  end\n  return result\nend",
    "  local max_prod = 1\n  local max_so_far = 1\n  local min_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_so_far = max_so_far * arr[i]\n      min_so_far = min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_so_far = 1\n      min_so_far = 1\n    else\n      local temp = max_so_far\n      max_so_far = max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_prod < max_so_far then\n      max_prod = max_so_far\n    end\n  end\n  return max_prod\nend"
  ]
}