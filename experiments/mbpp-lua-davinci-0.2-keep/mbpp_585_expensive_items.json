{
  "name": "mbpp_585_expensive_items",
  "language": "lua",
  "prompt": "-- Write a function to find the n most expensive items in a given dataset.\nlocal function expensive_items(items, n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = expensive_items\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}}, 1), {{['name'] = 'Item-2', ['price'] = 555.22}})\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-3', ['price'] = 45.09}}, 2), {{['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-1', ['price'] = 101.1}})\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-3', ['price'] = 45.09}, {['name'] = 'Item-4', ['price'] = 22.75}}, 1), {{['name'] = 'Item-2', ['price'] = 555.22}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local items_sorted = sort_items(items, \"price\")\n    local items_expensive = {}\n    for i = 1, n do\n        table.insert(items_expensive, items_sorted[i])\n    end\n    return items_expensive\nend",
    "  local sorted = sort_by_price(items)\n  local result = {}\n  for i = 1, n do\n    result[i] = sorted[i]\n  end\n  return result\nend",
    "  local items_sorted = {}\n  for _, item in ipairs(items) do\n    table.insert(items_sorted, item)\n  end\n  table.sort(items_sorted, function(a, b) return a.price > b.price end)\n  return items_sorted\nend",
    "    local sorted = {}\n    for _, item in pairs(items) do\n        table.insert(sorted, item)\n    end\n    table.sort(sorted, function(a, b) return a.price > b.price end)\n    local result = {}\n    for i = 1, n do\n        table.insert(result, sorted[i])\n    end\n    return result\nend",
    "  local sorted_items = sort_items(items)\n  local expensive_items = {}\n  for i = 1, n do\n    table.insert(expensive_items, sorted_items[i])\n  end\n  return expensive_items\nend",
    "  local items_sorted = sort_by_price(items)\n  local n_most_expensive = {}\n  for i = 1, n do\n    table.insert(n_most_expensive, items_sorted[i])\n  end\n  return n_most_expensive\nend",
    "  local items_sorted = sort_by_price(items)\n  local expensive_items = {}\n  for i = 1, n do\n    table.insert(expensive_items, items_sorted[i])\n  end\n  return expensive_items\nend",
    "  local sorted = {}\n  for _, item in pairs(items) do\n    table.insert(sorted, item)\n  end\n  table.sort(sorted, function(a, b) return a.price > b.price end)\n  return sorted\nend",
    "    local function compare(a, b)\n        return a.price > b.price\n    end\n    table.sort(items, compare)\n    local result = {}\n    for i = 1, n do\n        table.insert(result, items[i])\n    end\n    return result\nend",
    "    local items_sorted = {}\n    for i, v in pairs(items) do\n        table.insert(items_sorted, v)\n    end\n    table.sort(items_sorted, function(a, b) return a.price > b.price end)\n    local items_n = {}\n    for i = 1, n do\n        table.insert(items_n, items_sorted[i])\n    end\n    return items_n\nend",
    "    local sorted = {}\n    for _, v in pairs(items) do\n        table.insert(sorted, v)\n    end\n    table.sort(sorted, function(a, b) return a.price > b.price end)\n    return sorted[1], sorted[2], sorted[3], sorted[4], sorted[5]\nend",
    "  local items_sorted = {}\n  for _, item in pairs(items) do\n    table.insert(items_sorted, item)\n  end\n  table.sort(items_sorted, function(a, b) return a.price > b.price end)\n  local result = {}\n  for i = 1, n do\n    table.insert(result, items_sorted[i])\n  end\n  return result\nend",
    "  local function sort_by_price(a, b)\n    return a.price > b.price\n  end\n  table.sort(items, sort_by_price)\n  local expensive_items = {}\n  for i = 1, n do\n    table.insert(expensive_items, items[i])\n  end\n  return expensive_items\nend",
    "  local sorted = {}\n  for _, item in pairs(items) do\n    table.insert(sorted, item)\n  end\n  table.sort(sorted, function(a, b) return a.price > b.price end)\n  local result = {}\n  for i = 1, n do\n    table.insert(result, sorted[i])\n  end\n  return result\nend",
    "  local sorted = {}\n  for _, item in pairs(items) do\n    table.insert(sorted, item)\n  end\n  table.sort(sorted, function(a, b)\n    return a.price > b.price\n  end)\n  return sorted\nend",
    "    local sorted = sort_by_price(items)\n    local expensive = {}\n    for i = 1, n do\n        expensive[i] = sorted[i]\n    end\n    return expensive\nend",
    "\tlocal function sort_by_price(a, b)\n\t\treturn a.price < b.price\n\tend\n\ttable.sort(items, sort_by_price)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = items[i]\n\tend\n\treturn result\nend",
    "    local sorted = {}\n    for _, item in ipairs(items) do\n        table.insert(sorted, item)\n    end\n    table.sort(sorted, function(a, b) return a.price > b.price end)\n    local result = {}\n    for i = 1, n do\n        table.insert(result, sorted[i])\n    end\n    return result\nend",
    "  local sorted = {}\n  for _, item in pairs(items) do\n    table.insert(sorted, item)\n  end\n  table.sort(sorted, function(a, b) return a.price > b.price end)\n  return sorted\nend",
    "    local sorted_items = {}\n    for i, item in ipairs(items) do\n        table.insert(sorted_items, item)\n    end\n    table.sort(sorted_items, function(a, b) return a.price > b.price end)\n    local result = {}\n    for i = 1, n do\n        table.insert(result, sorted_items[i])\n    end\n    return result\nend"
  ]
}