{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "lua",
  "prompt": "-- Write a function to pack consecutive duplicates of a given list elements into sublists.\nlocal function pack_consecutive_duplicates(list1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pack_consecutive_duplicates\n    lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), {{0, 0}, {1}, {2}, {3}, {4, 4}, {5}, {6, 6, 6}, {7}, {8}, {9}, {4, 4}})\n    lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), {{10, 10}, {15}, {19}, {18, 18}, {17}, {26, 26}, {17}, {18}, {10}})\n    lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd'}), {{'a', 'a'}, {'b'}, {'c'}, {'d', 'd'}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local list2 = {}\n    local sublist = {}\n    local last_element = nil\n    for i, element in ipairs(list1) do\n        if element ~= last_element then\n            table.insert(list2, sublist)\n            sublist = {}\n        end\n        table.insert(sublist, element)\n        last_element = element\n    end\n    table.insert(list2, sublist)\n    return list2\nend",
    "    local result = {}\n    local current_sublist = {}\n    local current_element = nil\n    for _, element in ipairs(list1) do\n        if element ~= current_element then\n            if #current_sublist > 0 then\n                table.insert(result, current_sublist)\n            end\n            current_sublist = {element}\n            current_element = element\n        else\n            table.insert(current_sublist, element)\n        end\n    end\n    if #current_sublist > 0 then\n        table.insert(result, current_sublist)\n    end\n    return result\nend",
    "    local result = {}\n    local current_sublist = {}\n    local previous_element = nil\n    for _, element in ipairs(list1) do\n        if element == previous_element then\n            table.insert(current_sublist, element)\n        else\n            table.insert(result, current_sublist)\n            current_sublist = {element}\n        end\n        previous_element = element\n    end\n    table.insert(result, current_sublist)\n    return result\nend",
    "\tlocal list2 = {}\n\tlocal sublist = {}\n\tlocal last_element = nil\n\tfor _, element in ipairs(list1) do\n\t\tif element ~= last_element then\n\t\t\tif #sublist > 0 then\n\t\t\t\ttable.insert(list2, sublist)\n\t\t\tend\n\t\t\tsublist = {element}\n\t\telse\n\t\t\ttable.insert(sublist, element)\n\t\tend\n\t\tlast_element = element\n\tend\n\tif #sublist > 0 then\n\t\ttable.insert(list2, sublist)\n\tend\n\treturn list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local last_element = nil\n    for _, element in ipairs(list1) do\n        if element ~= last_element then\n            table.insert(list2, sublist)\n            sublist = {}\n        end\n        table.insert(sublist, element)\n        last_element = element\n    end\n    table.insert(list2, sublist)\n    return list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local prev = nil\n    for _, v in ipairs(list1) do\n        if v ~= prev then\n            if #sublist > 0 then\n                table.insert(list2, sublist)\n            end\n            sublist = {v}\n        else\n            table.insert(sublist, v)\n        end\n        prev = v\n    end\n    if #sublist > 0 then\n        table.insert(list2, sublist)\n    end\n    return list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local last_element = nil\n    for _, element in ipairs(list1) do\n        if element ~= last_element then\n            table.insert(list2, sublist)\n            sublist = {}\n        end\n        table.insert(sublist, element)\n        last_element = element\n    end\n    table.insert(list2, sublist)\n    return list2\nend",
    "  local list2 = {}\n  local current_element = nil\n  local current_sublist = {}\n  for _, element in ipairs(list1) do\n    if element ~= current_element then\n      table.insert(list2, current_sublist)\n      current_sublist = {}\n      current_element = element\n    end\n    table.insert(current_sublist, element)\n  end\n  table.insert(list2, current_sublist)\n  return list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local last_element = nil\n    for _, element in ipairs(list1) do\n        if element ~= last_element then\n            if #sublist > 0 then\n                table.insert(list2, sublist)\n            end\n            sublist = {}\n        end\n        table.insert(sublist, element)\n        last_element = element\n    end\n    if #sublist > 0 then\n        table.insert(list2, sublist)\n    end\n    return list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local last_element = list1[1]\n    for _, element in ipairs(list1) do\n        if element == last_element then\n            table.insert(sublist, element)\n        else\n            table.insert(list2, sublist)\n            sublist = {element}\n            last_element = element\n        end\n    end\n    table.insert(list2, sublist)\n    return list2\nend",
    "    local list2 = {}\n    local list3 = {}\n    local count = 1\n    local flag = false\n    for i = 1, #list1 do\n        if list1[i] == list1[i + 1] then\n            list3[count] = list1[i]\n            count = count + 1\n            flag = true\n        else\n            list3[count] = list1[i]\n            count = 1\n            if flag then\n                list2[#list2 + 1] = list3\n                list3 = {}\n                flag = false\n            else\n                list2[#list2 + 1] = list3[1]\n                list3 = {}\n            end\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local prev = nil",
    "\tlocal list2 = {}\n\tlocal list3 = {}\n\tlocal list4 = {}\n\tlocal list5 = {}\n\tlocal list6 = {}\n\tlocal list7 = {}\n\tlocal list8 = {}\n\tlocal list9 = {}\n\tlocal list10 = {}\n\tlocal list11 = {}\n\tlocal list12 = {}\n\tlocal list13 = {}\n\tlocal list14 = {}\n\tlocal list15 = {}\n\tlocal list16 = {}\n\tlocal list17 = {}\n\tlocal list18 = {}\n\tlocal list19 = {}\n\tlocal list20 = {}\n\tlocal list21 = {}\n\tlocal list22 = {}\n\tlocal list23 = {}\n\tlocal list24 = {}\n\tlocal list25 = {}\n\tlocal list26 = {}\n\tlocal list27 = {}\n\tlocal list28 = {}\n\tlocal list29 = {}\n\tlocal list30 = {}\n\tlocal list31 = {}\n\tlocal list32 = {}\n\tlocal list33 = {}\n\tlocal list34 = {}\n\tlocal list35 = {}\n\tlocal list36 = {}\n\tlocal list37 = {}\n\tlocal list38 = {}\n\tlocal list39 = {}\n\tlocal list40 = {}\n\tlocal list41 = {}\n\tlocal list42 = {}\n\tlocal list43 = {}\n\tlocal list44 = {}\n\tlocal list45 = {}\n\tlocal list46 = {}\n\tlocal list47 = {}\n\tlocal list48 = {}\n\tlocal list49 = {}\n\tlocal list50 = {}\n\tlocal list51 = {}\n\tlocal list52 = {}\n\tlocal list53 = {}\n\tlocal list54 = {}\n\tlocal list55 = {}\n\tlocal list56 = {}\n\tlocal list57 = {}\n\tlocal list58 = {}\n\tlocal list59 = {}\n\tlocal list60 = {}\n\tlocal list61 = {}\n\tlocal list62 = {}\n\tlocal list63 = {}\n\tlocal list64 = {}\n\tlocal list65 = {}\n\tlocal list66 = {}\n\tlocal list67 = {}\n\tlocal list68 = {}\n\tlocal list69 = {}\n\tlocal list70 = {}\n\tlocal list71 = {}\n\tlocal list72 = {}\n\tlocal list73 = {}\n\tlocal list74 = {}\n",
    "  local packed = {}\n  local current_element = nil\n  local current_element_index = 0\n  for i, v in ipairs(list1) do\n    if v ~= current_element then\n      current_element = v\n      current_element_index = current_element_index + 1\n      packed[current_element_index] = {v}\n    else\n      table.insert(packed[current_element_index], v)\n    end\n  end\n  return packed\nend",
    "  local list2 = {}\n  local sublist = {}\n  local previous = nil\n  for i, v in ipairs(list1) do\n    if v ~= previous then\n      if #sublist > 0 then\n        table.insert(list2, sublist)\n      end\n      sublist = {}\n    end\n    table.insert(sublist, v)\n    previous = v\n  end\n  table.insert(list2, sublist)\n  return list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local last_element = nil\n    for _, element in ipairs(list1) do\n        if element ~= last_element then\n            table.insert(list2, sublist)\n            sublist = {}\n        end\n        table.insert(sublist, element)\n        last_element = element\n    end\n    table.insert(list2, sublist)\n    return list2\nend",
    "    local result = {}\n    local current_sublist = {}\n    local previous_element = nil\n    for _, element in ipairs(list1) do\n        if element ~= previous_element then\n            table.insert(result, current_sublist)\n            current_sublist = {}\n        end\n        table.insert(current_sublist, element)\n        previous_element = element\n    end\n    table.insert(result, current_sublist)\n    return result\nend",
    "    local list2 = {}\n    local sublist = {}\n    local last_element = nil\n    for _, element in ipairs(list1) do\n        if element ~= last_element then\n            table.insert(list2, sublist)\n            sublist = {}\n        end\n        table.insert(sublist, element)\n        last_element = element\n    end\n    table.insert(list2, sublist)\n    return list2\nend",
    "\tlocal list2 = {}\n\tlocal i = 1\n\twhile i <= #list1 do\n\t\tlocal j = i + 1\n\t\twhile j <= #list1 and list1[i] == list1[j] do\n\t\t\tj = j + 1\n\t\tend\n\t\tlist2[#list2 + 1] = {unpack(list1, i, j - 1)}\n\t\ti = j\n\tend\n\treturn list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local prev_item = nil\n    for _, item in ipairs(list1) do\n        if item ~= prev_item then\n            table.insert(list2, sublist)\n            sublist = {}\n        end\n        table.insert(sublist, item)\n        prev_item = item\n    end\n    table.insert(list2, sublist)\n    return list2\nend"
  ]
}