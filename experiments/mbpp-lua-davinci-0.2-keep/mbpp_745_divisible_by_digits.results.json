{
  "name": "mbpp_745_divisible_by_digits",
  "language": "lua",
  "prompt": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local number = i\n    local digits = {}\n    while number > 0 do\n      local digit = number % 10\n      if digit ~= 0 then\n        table.insert(digits, digit)\n      end\n      number = math.floor(number / 10)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3n3mive8.lua:31: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp3n3mive8.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i=startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpat3w8zhy.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpat3w8zhy.lua:10: in local 'candidate'\n\t/tmp/tmpat3w8zhy.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = (num - digit) / 10\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function is_divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch('%d') do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if is_divisible(i) then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdbsiwdw9.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpdbsiwdw9.lua:8: in local 'is_divisible'\n\t/tmp/tmpdbsiwdw9.lua:17: in local 'candidate'\n\t/tmp/tmpdbsiwdw9.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0jbe9wey.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp0jbe9wey.lua:10: in local 'candidate'\n\t/tmp/tmp0jbe9wey.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local is_divisible = true\n        for digit in tostring(i):gmatch(\"%d\") do\n            if i % tonumber(digit) ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjrfcnr99.lua:7: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpjrfcnr99.lua:7: in local 'candidate'\n\t/tmp/tmpjrfcnr99.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch('%d') do\n            digits[#digits+1] = tonumber(digit)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            divisible_numbers[#divisible_numbers+1] = i\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5z4z1stn.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp5z4z1stn.lua:10: in local 'candidate'\n\t/tmp/tmp5z4z1stn.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = i\n        local digits = {}\n        while number > 0 do\n            local digit = number % 10\n            if digit ~= 0 then\n                table.insert(digits, digit)\n            end\n            number = math.floor(number / 10)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmncwsct.lua:31: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmppmncwsct.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, divisor)\n      if num == 0 then\n        return true\n      elseif num % divisor == 0 then\n        return divisible_by_digits_helper_helper(math.floor(num / 10), divisor)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_helper_helper(num, num % 10)\n  end\n  local function divisible_by_digits_helper_helper(startnum, endnum, acc)\n    if startnum == endnum then\n      if divisible_by_digits_helper(startnum) then\n        return {startnum}\n      else\n        return {}\n      end\n    elseif divisible_by_digits_helper(startnum) then\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, {startnum})\n    else\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, {})\n    end\n  end\n  return divisible_by_digits_helper_helper(startnum, endnum, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy168ufrd.lua:4: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpy168ufrd.lua:4: in function </tmp/tmpy168ufrd.lua:4>\n\t(...tail calls...)\n\t/tmp/tmpy168ufrd.lua:22: in function </tmp/tmpy168ufrd.lua:15>\n\t(...tail calls...)\n\t/tmp/tmpy168ufrd.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_helper(i) then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4xswjgpd.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp4xswjgpd.lua:8: in local 'divisible_by_digits_helper'\n\t/tmp/tmp4xswjgpd.lua:17: in local 'candidate'\n\t/tmp/tmp4xswjgpd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    local number = i\n    while number > 0 do\n      local digit = number % 10\n      if digit == 0 then\n        break\n      end\n      table.insert(digits, digit)\n      number = math.floor(number / 10)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jgkbg72.lua:32: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp4jgkbg72.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_by_digits = {}\n    for i=startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = (num - digit) / 10\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbhdosm4a.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpbhdosm4a.lua:10: in local 'candidate'\n\t/tmp/tmpbhdosm4a.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(n)\n    local function divisible_by_digit(n, d)\n      return n % d == 0\n    end\n    local function digits(n)\n      local t = {}\n      while n > 0 do\n        local d = n % 10\n        t[#t + 1] = d\n        n = (n - d) / 10\n      end\n      return t\n    end\n    for _, d in ipairs(digits(n)) do\n      if not divisible_by_digit(n, d) then\n        return false\n      end\n    end\n    return true\n  end\n  local t = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      t[#t + 1] = i\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqf4rpu86.lua:4: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpqf4rpu86.lua:4: in local 'divisible_by_digit'\n\t/tmp/tmpqf4rpu86.lua:17: in local 'divisible'\n\t/tmp/tmpqf4rpu86.lua:25: in local 'candidate'\n\t/tmp/tmpqf4rpu86.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits+1] = tonumber(digit)\n        end\n        local is_divisible = true\n        for _, digit in ipairs(digits) do\n            if digit == 0 or i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            divisible_numbers[#divisible_numbers+1] = i\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl_vepgp1.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpl_vepgp1.lua:8: in local 'divisible'\n\t/tmp/tmpl_vepgp1.lua:17: in local 'candidate'\n\t/tmp/tmpl_vepgp1.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch('%d') do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpalpqyeq6.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpalpqyeq6.lua:10: in local 'candidate'\n\t/tmp/tmpalpqyeq6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, digit)\n      if digit == 0 then\n        return true\n      elseif num % digit == 0 then\n        return divisible_by_digits_helper_helper(num, digit / 10)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_helper_helper(num, num)\n  end\n  local function divisible_by_digits_helper_helper(startnum, endnum)\n    if startnum > endnum then\n      return {}\n    elseif divisible_by_digits_helper(startnum) then\n      return {startnum} + divisible_by_digits_helper_helper(startnum + 1, endnum)\n    else\n      return divisible_by_digits_helper_helper(startnum + 1, endnum)\n    end\n  end\n  return divisible_by_digits_helper_helper(startnum, endnum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9v7wapc.lua:30: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {}\nstack traceback:\n\t/tmp/tmpc9v7wapc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwpa7j4b.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpgwpa7j4b.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, digit)\n      if digit == 0 then return true end\n      if num % digit == 0 then\n        return divisible_by_digits_helper_helper(num, digit / 10)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_helper_helper(num, num)\n  end\n  local function divisible_by_digits_helper_helper(startnum, endnum, acc)\n    if startnum > endnum then return acc end\n    if divisible_by_digits_helper(startnum) then\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, acc .. startnum .. ' ')\n    else\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, acc)\n    end\n  end\n  return divisible_by_digits_helper_helper(startnum, endnum, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo90pf0ji.lua:28: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpo90pf0ji.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcarywt5e.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpcarywt5e.lua:9: in local 'candidate'\n\t/tmp/tmpcarywt5e.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            table.insert(digits, tonumber(digit))\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf5vl78tp.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpf5vl78tp.lua:10: in local 'candidate'\n\t/tmp/tmpf5vl78tp.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local num_str = tostring(num)\n        for i = 1, #num_str do\n            local digit = tonumber(num_str:sub(i, i))\n            if digit == 0 or num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_helper(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits+1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible(i) then\n            result[#result+1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4mkhcj76.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp4mkhcj76.lua:8: in local 'divisible'\n\t/tmp/tmp4mkhcj76.lua:17: in local 'candidate'\n\t/tmp/tmp4mkhcj76.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, digit)\n      return num % digit == 0\n    end\n    return num % 10 == 0 and num % 100 == 0 and num % 1000 == 0 and num % 10000 == 0 and num % 100000 == 0 and num % 1000000 == 0 and num % 10000000 == 0 and num % 100000000 == 0 and num % 1000000000 == 0 and num % 10000000000 == 0 and num % 100000000000 == 0 and num % 1000000000000 == 0 and num % 10000000000000 == 0 and num % 100000000000000 == 0 and num % 1000000000000000 == 0 and num % 10000000000000000 == 0 and num % 100000000000000000 == 0 and num % 1000000000000000000 == 0 and num % 10000000000000000000 == 0 and num % 100000000000000000000 == 0 and num % 1000000000000000000000 == 0 and num % 10000000000000000000000 == 0 and num % 100000000000000000000000 == 0 and num % 1000000000000000000000000 == 0 and num % 10000000000000000000000000 == 0 and num % 100000000000000000000000000 == 0 and num % 1000000000000000000000000000 == 0 and num % 10000000000000000000000000000 == 0 and num % 100000000000000000000000000000 == 0 and num % 1000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000000000 == 0 and num\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "lua: /tmp/tmpz4f_b2go.lua:8: 'end' expected (to close 'function' at line 3) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible_by_all = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit ~= 0 and i % digit ~= 0 then\n\t\t\t\tdivisible_by_all = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible_by_all then\n\t\t\ttable.insert(divisible, i)\n\t\tend\n\tend\n\treturn divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jk925h_.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp_jk925h_.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(num, divisor)\n\t\t\tif num == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tif divisor % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\treturn divisible_by_digits_inner_inner(math.floor(num / 10), divisor)\n\t\tend\n\t\treturn divisible_by_digits_inner_inner(num, num)\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible_by_digits_inner(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = num_to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsl5_fnhv.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpsl5_fnhv.lua:10: in local 'candidate'\n\t/tmp/tmpsl5_fnhv.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(divisible_by_digits, i)\n    end\n  end\n  return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbx4ytx0g.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpbx4ytx0g.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = tostring(i)\n        local divisible = true\n        for j = 1, #num do\n            if i % tonumber(num:sub(j, j)) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl3tb1fqq.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpl3tb1fqq.lua:8: in local 'candidate'\n\t/tmp/tmpl3tb1fqq.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local num = i\n    local is_divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if is_divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local digits = {}\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 then\n                break\n            end\n            table.insert(digits, digit)\n            num = math.floor(num / 10)\n        end\n        if #digits > 0 then\n            local divisible = true\n            for _, digit in ipairs(digits) do\n                if i % digit ~= 0 then\n                    divisible = false\n                    break\n                end\n            end\n            if divisible then\n                table.insert(divisible_by_digits, i)\n            end\n        end\n    end\n    return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(n)\n        local digits = {}\n        for i = 1, #tostring(n) do\n            digits[i] = tonumber(tostring(n):sub(i, i))\n        end\n        for _, v in ipairs(digits) do\n            if n % v ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf2hk4ptk.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpf2hk4ptk.lua:8: in local 'divisible'\n\t/tmp/tmpf2hk4ptk.lua:17: in local 'candidate'\n\t/tmp/tmpf2hk4ptk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local divisible_by_all = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible_by_all = false\n                break\n            end\n        end\n        if divisible_by_all then\n            divisible[#divisible + 1] = i\n        end\n    end\n    return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgk65x1a.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmppgk65x1a.lua:10: in local 'candidate'\n\t/tmp/tmppgk65x1a.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible_by_all = true\n    for j = 1, #num do\n      local digit = tonumber(num:sub(j, j))\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n    end\n    if divisible_by_all then\n      divisible[#divisible + 1] = i\n    end\n  end\n  return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_oalpf0.lua:24: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpr_oalpf0.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, digit)\n      if digit == 0 then\n        return true\n      elseif num % digit == 0 then\n        return divisible_by_digits_helper_helper(num, digit / 10)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_helper_helper(num, num)\n  end\n  local function divisible_by_digits_helper_helper(startnum, endnum, acc)\n    if startnum > endnum then\n      return acc\n    elseif divisible_by_digits_helper(startnum) then\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, {startnum} + acc)\n    else\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, acc)\n    end\n  end\n  return divisible_by_digits_helper_helper(startnum, endnum, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvo67u_8t.lua:30: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {}\nstack traceback:\n\t/tmp/tmpvo67u_8t.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_inner(n)\n\t\tlocal function divisible_by_digits_inner_inner(d)\n\t\t\treturn n % d == 0\n\t\tend\n\t\treturn all(divisible_by_digits_inner_inner, digits(n))\n\tend\n\treturn filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_bhsfhn7.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp_bhsfhn7.lua:9: in local 'candidate'\n\t/tmp/tmp_bhsfhn7.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rrd0e_4.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp9rrd0e_4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit ~= 0 and i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj7v3vw0.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpyj7v3vw0.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_helper(num)\n\t\tlocal num_str = tostring(num)\n\t\tfor i = 1, #num_str do\n\t\t\tlocal digit = tonumber(num_str:sub(i, i))\n\t\t\tif digit == 0 or num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible_by_digits_helper(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = get_digits(i)\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ukz88y_.lua:5: attempt to call a nil value (global 'get_digits')\nstack traceback:\n\t/tmp/tmp7ukz88y_.lua:5: in local 'candidate'\n\t/tmp/tmp7ukz88y_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = i\n        local divisible = true\n        while number > 0 do\n            local digit = number % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            number = math.floor(number / 10)\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfmynlfv.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpgfmynlfv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local is_divisible = true\n        for digit in tostring(i):gmatch(\"%d\") do\n            if i % tonumber(digit) ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptz9l993k.lua:7: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmptz9l993k.lua:7: in local 'candidate'\n\t/tmp/tmptz9l993k.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        return all(divisible_by_digit, digits(num))\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdqvn_n_d.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpdqvn_n_d.lua:9: in local 'candidate'\n\t/tmp/tmpdqvn_n_d.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digits_inner_inner(num, digit)\n      if digit == 0 then return true end\n      if num % digit == 0 then\n        return divisible_by_digits_inner_inner(num, digit // 10)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_inner_inner(num, num)\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_inner(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97lfisla.lua:26: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 21 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 21 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 13\n  - A[14]: 14\n  - A[15]: 15\n  - A[16]: 16\n  - A[17]: 17\n  - A[18]: 18\n  - A[19]: 19\n  - A[20]: 20\n* Common parts at the end of the lists\n  = A[21], B[13]: 22\nstack traceback:\n\t/tmp/tmp97lfisla.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digits_inner_inner(num, divisor)\n      if num == 0 then\n        return true\n      else\n        return num % divisor == 0 and divisible_by_digits_inner_inner(math.floor(num / 10), divisor)\n      end\n    end\n    return divisible_by_digits_inner_inner(num, num % 10)\n  end\n  local function divisible_by_digits_inner_inner(startnum, endnum, acc)\n    if startnum > endnum then\n      return acc\n    else\n      return divisible_by_digits_inner_inner(startnum + 1, endnum, divisible_by_digits_inner(startnum) and acc or acc .. startnum .. \" \")\n    end\n  end\n  return divisible_by_digits_inner_inner(startnum, endnum, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_kdqjls.lua:4: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpw_kdqjls.lua:4: in function </tmp/tmpw_kdqjls.lua:4>\n\t(...tail calls...)\n\t/tmp/tmpw_kdqjls.lua:17: in function </tmp/tmpw_kdqjls.lua:13>\n\t(...tail calls...)\n\t/tmp/tmpw_kdqjls.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(num, divisor)\n\t\t\tif num == 0 then\n\t\t\t\treturn true\n\t\t\telseif num % divisor == 0 then\n\t\t\t\treturn divisible_by_digits_inner_inner(math.floor(num / 10), divisor)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn divisible_by_digits_inner_inner(num, num % 10)\n\tend\n\tlocal function divisible_by_digits_inner_inner(startnum, endnum, acc)\n\t\tif startnum > endnum then\n\t\t\treturn acc\n\t\telseif divisible_by_digits_inner(startnum) then\n\t\t\treturn divisible_by_digits_inner_inner(startnum + 1, endnum, acc .. startnum .. \" \")\n\t\telse\n\t\t\treturn divisible_by_digits_inner_inner(startnum + 1, endnum, acc)\n\t\tend\n\tend\n\treturn divisible_by_digits_inner_inner(startnum, endnum, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8nyqibuv.lua:4: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp8nyqibuv.lua:4: in function </tmp/tmp8nyqibuv.lua:4>\n\t(...tail calls...)\n\t/tmp/tmp8nyqibuv.lua:18: in function </tmp/tmp8nyqibuv.lua:15>\n\t(...tail calls...)\n\t/tmp/tmp8nyqibuv.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_w37_baz.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp_w37_baz.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i=startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm787hy0o.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpm787hy0o.lua:8: in local 'divisible'\n\t/tmp/tmpm787hy0o.lua:17: in local 'candidate'\n\t/tmp/tmpm787hy0o.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local is_divisible = true\n        for _, digit in ipairs(string.split(tostring(i), '')) do\n            if i % tonumber(digit) ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7a97niia.lua:6: attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp7a97niia.lua:6: in local 'candidate'\n\t/tmp/tmp7a97niia.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for i=1,#digits do\n      if num % digits[i] ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i=startnum,endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8hw3n17y.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp8hw3n17y.lua:8: in local 'divisible_by_digits_helper'\n\t/tmp/tmp8hw3n17y.lua:17: in local 'candidate'\n\t/tmp/tmp8hw3n17y.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_inner(num)\n        local function divisible_by_digits_inner_inner(num)\n            local function divisible_by_digits_inner_inner_inner(num)\n                local function divisible_by_digits_inner_inner_inner_inner(num)\n                    local function divisible_by_digits_inner_inner_inner_inner_inner(num)\n                        local function divisible_by_digits_inner_inner_inner_inner_inner_inner(num)\n                            local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner(num)\n                                local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                    local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                        local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                            local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                                local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                                    local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                                        local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                                            local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(num)\n                                                                local function divisible_by_digits_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner_inner(\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "lua: /tmp/tmp58tmly7c.lua:19: ')' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function is_divisible(num)\n\t\tlocal digits = tostring(num)\n\t\tfor i = 1, #digits do\n\t\t\tif num % tonumber(digits:sub(i, i)) ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif is_divisible(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyogtvmu.lua:6: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpoyogtvmu.lua:6: in local 'is_divisible'\n\t/tmp/tmpoyogtvmu.lua:14: in local 'candidate'\n\t/tmp/tmpoyogtvmu.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_helper(num)\n\t\tlocal function divisible_by_digit(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\treturn all(divisible_by_digit, digits(num))\n\tend\n\treturn filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc3wo4468.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpc3wo4468.lua:9: in local 'candidate'\n\t/tmp/tmpc3wo4468.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = string.gmatch(tostring(num), \"%d\")\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpabshxqzi.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpabshxqzi.lua:10: in local 'candidate'\n\t/tmp/tmpabshxqzi.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digits_inner_inner(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digits_inner_inner, digits(num))\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3nebi78r.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp3nebi78r.lua:9: in local 'candidate'\n\t/tmp/tmp3nebi78r.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(digits, divisible_by_digit)\n    end\n    return filter(range(startnum, endnum), divisible_by_digits_helper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0bll8ul_.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp0bll8ul_.lua:10: in local 'candidate'\n\t/tmp/tmp0bll8ul_.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digits_inner_inner(num, digit)\n      return num % digit == 0\n    end\n    return num % 10 == 0 and num % 100 == 0 and num % 1000 == 0 and num % 10000 == 0 and num % 100000 == 0 and num % 1000000 == 0 and num % 10000000 == 0 and num % 100000000 == 0 and num % 1000000000 == 0 and num % 10000000000 == 0 and num % 100000000000 == 0 and num % 1000000000000 == 0 and num % 10000000000000 == 0 and num % 100000000000000 == 0 and num % 1000000000000000 == 0 and num % 10000000000000000 == 0 and num % 100000000000000000 == 0 and num % 1000000000000000000 == 0 and num % 10000000000000000000 == 0 and num % 100000000000000000000 == 0 and num % 1000000000000000000000 == 0 and num % 10000000000000000000000 == 0 and num % 100000000000000000000000 == 0 and num % 1000000000000000000000000 == 0 and num % 10000000000000000000000000 == 0 and num % 100000000000000000000000000 == 0 and num % 1000000000000000000000000000 == 0 and num % 10000000000000000000000000000 == 0 and num % 100000000000000000000000000000 == 0 and num % 1000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "lua: /tmp/tmpz611_h3b.lua:8: 'end' expected (to close 'function' at line 3) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi7t5_k6p.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpi7t5_k6p.lua:8: in local 'divisible_by_digits_helper'\n\t/tmp/tmpi7t5_k6p.lua:17: in local 'candidate'\n\t/tmp/tmpi7t5_k6p.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local digits = {}\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 then\n        table.insert(digits, digit)\n      end\n      num = math.floor(num / 10)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(divisible_by_digits, i)\n    end\n  end\n  return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0_lmams.lua:31: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpp0_lmams.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(n)\n    local function divisible_by_digit(d)\n      return n % d == 0\n    end\n    for d in tostring(n):gmatch(\"%d\") do\n      if not divisible_by_digit(tonumber(d)) then\n        return false\n      end\n    end\n    return true\n  end\n  local t = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      table.insert(t, i)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk37cvulr.lua:4: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpk37cvulr.lua:4: in local 'divisible_by_digit'\n\t/tmp/tmpk37cvulr.lua:8: in local 'divisible'\n\t/tmp/tmpk37cvulr.lua:16: in local 'candidate'\n\t/tmp/tmpk37cvulr.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local digits = {}\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 then\n                break\n            end\n            table.insert(digits, digit)\n            num = math.floor(num / 10)\n        end\n        if #digits > 0 then\n            local divisible = true\n            for _, digit in ipairs(digits) do\n                if i % digit ~= 0 then\n                    divisible = false\n                    break\n                end\n            end\n            if divisible then\n                table.insert(divisible_by_digits, i)\n            end\n        end\n    end\n    return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = (num - digit) / 10\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            divisible_numbers[#divisible_numbers + 1] = i\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdirhbhlu.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpdirhbhlu.lua:10: in local 'candidate'\n\t/tmp/tmpdirhbhlu.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible = true\n    for j = 1, #num do\n      if i % tonumber(num:sub(j, j)) ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgoc_icuu.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpgoc_icuu.lua:8: in local 'candidate'\n\t/tmp/tmpgoc_icuu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwpa7j4b.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpgwpa7j4b.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplxpxettj.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmplxpxettj.lua:8: in local 'divisible_by_digits_helper'\n\t/tmp/tmplxpxettj.lua:17: in local 'candidate'\n\t/tmp/tmplxpxettj.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i=startnum,endnum do\n        local str = tostring(i)\n        local divisible = true\n        for j=1,#str do\n            local digit = tonumber(str:sub(j,j))\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rxnqm7p.lua:24: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp1rxnqm7p.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local digits = {}\n    local num = i\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 then\n        table.insert(digits, digit)\n      end\n      num = math.floor(num / 10)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(divisible_by_digits, i)\n    end\n  end\n  return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5vkbp0o.lua:31: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpb5vkbp0o.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local num_str = tostring(num)\n        for i = 1, #num_str do\n            local digit = tonumber(num_str:sub(i, i))\n            if digit == 0 or num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_helper(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_nums = {}\n  for i=startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(divisible_nums, i)\n    end\n  end\n  return divisible_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(n)\n    local function divisible_by_digit(d)\n      return n % d == 0\n    end\n    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n      digits[#digits + 1] = tonumber(d)\n    end\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr2r78i74.lua:13: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpr2r78i74.lua:13: in local 'candidate'\n\t/tmp/tmpr2r78i74.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl_vepgp1.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpl_vepgp1.lua:8: in local 'divisible'\n\t/tmp/tmpl_vepgp1.lua:17: in local 'candidate'\n\t/tmp/tmpl_vepgp1.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local number = i\n    local divisible = true\n    while number > 0 do\n      local digit = number % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      number = math.floor(number / 10)\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function is_divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      table.insert(digits, tonumber(digit))\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if is_divisible(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp59l6i73o.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp59l6i73o.lua:8: in local 'is_divisible'\n\t/tmp/tmp59l6i73o.lua:17: in local 'candidate'\n\t/tmp/tmp59l6i73o.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        local num = i\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 then\n                break\n            end\n            table.insert(digits, digit)\n            num = math.floor(num / 10)\n        end\n        if num == 0 then\n            local divisible = true\n            for _, digit in ipairs(digits) do\n                if i % digit ~= 0 then\n                    divisible = false\n                    break\n                end\n            end\n            if divisible then\n                table.insert(divisible_numbers, i)\n            end\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local is_divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if is_divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible(num)\n\t\tlocal digits = {}\n\t\tfor digit in tostring(num):gmatch(\"%d\") do\n\t\t\tdigits[#digits + 1] = tonumber(digit)\n\t\tend\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible(i) then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphhkng22n.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmphhkng22n.lua:8: in local 'divisible'\n\t/tmp/tmphhkng22n.lua:17: in local 'candidate'\n\t/tmp/tmphhkng22n.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible_numbers = {}\n\tfor i = startnum, endnum do\n\t\tlocal divisible = true\n\t\tlocal number = i\n\t\twhile number > 0 do\n\t\t\tlocal digit = number % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnumber = math.floor(number / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_numbers, i)\n\t\tend\n\tend\n\treturn divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal divisible = true\n\t\tfor digit in tostring(i):gmatch('%d') do\n\t\t\tif i % tonumber(digit) ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb6bidgcj.lua:7: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpb6bidgcj.lua:7: in local 'candidate'\n\t/tmp/tmpb6bidgcj.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            divisible_by_digits[#divisible_by_digits + 1] = i\n        end\n    end\n    return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcwo95dkf.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpcwo95dkf.lua:10: in local 'candidate'\n\t/tmp/tmpcwo95dkf.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = (num - digit) / 10\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0jbe9wey.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp0jbe9wey.lua:10: in local 'candidate'\n\t/tmp/tmp0jbe9wey.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i=startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_helper(n)\n\t\tlocal function divisible_by_digit(d)\n\t\t\treturn n % d == 0\n\t\tend\n\t\treturn all(divisible_by_digit, digits(n))\n\tend\n\treturn filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppjadrzy8.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmppjadrzy8.lua:9: in local 'candidate'\n\t/tmp/tmppjadrzy8.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        return all(divisible_by_digit, digits(num))\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdqvn_n_d.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpdqvn_n_d.lua:9: in local 'candidate'\n\t/tmp/tmpdqvn_n_d.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuahffvjs.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpuahffvjs.lua:10: in local 'candidate'\n\t/tmp/tmpuahffvjs.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local divisible = true\n        for digit in tostring(i):gmatch('%d') do\n            if i % tonumber(digit) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwrybrqfa.lua:7: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpwrybrqfa.lua:7: in local 'candidate'\n\t/tmp/tmpwrybrqfa.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_helper(n)\n\t\tlocal function divisible_by_digit(n, d)\n\t\t\treturn n % d == 0\n\t\tend\n\t\tlocal function digits(n)\n\t\t\tlocal digits = {}\n\t\t\twhile n > 0 do\n\t\t\t\ttable.insert(digits, n % 10)\n\t\t\t\tn = math.floor(n / 10)\n\t\t\tend\n\t\t\treturn digits\n\t\tend\n\t\tlocal function all_digits_divisible(n, digits)\n\t\t\tfor _, d in ipairs(digits) do\n\t\t\t\tif not divisible_by_digit(n, d) then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\t\treturn all_digits_divisible(n, digits(n))\n\tend\n\tlocal function range(startnum, endnum)\n\t\tlocal range = {}\n\t\tfor i = startnum, endnum do\n\t\t\ttable.insert(range, i)\n\t\tend\n\t\treturn range\n\tend\n\treturn filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7t8efcgl.lua:32: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp7t8efcgl.lua:32: in local 'candidate'\n\t/tmp/tmp7t8efcgl.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6_3nik7c.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp6_3nik7c.lua:9: in local 'candidate'\n\t/tmp/tmp6_3nik7c.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local is_divisible = true\n        for digit in tostring(i):gmatch('%d') do\n            if i % tonumber(digit) ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqev8arr.lua:7: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpwqev8arr.lua:7: in local 'candidate'\n\t/tmp/tmpwqev8arr.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        local number = i\n        while number > 0 do\n            local digit = number % 10\n            if digit ~= 0 then\n                table.insert(digits, digit)\n            end\n            number = math.floor(number / 10)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpir2n5x7j.lua:31: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpir2n5x7j.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    local num = i\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 then\n        break\n      end\n      table.insert(digits, digit)\n      num = math.floor(num / 10)\n    end\n    if num == 0 then\n      local divisible = true\n      for _, digit in ipairs(digits) do\n        if i % digit ~= 0 then\n          divisible = false\n          break\n        end\n      end\n      if divisible then\n        table.insert(divisible_numbers, i)\n      end\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local digits = tostring(i):split(\"\")\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % tonumber(digit) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp525sqsf3.lua:5: attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp525sqsf3.lua:5: in local 'candidate'\n\t/tmp/tmp525sqsf3.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      divisible_by_digits[#divisible_by_digits + 1] = i\n    end\n  end\n  return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            divisible_by_digits[#divisible_by_digits + 1] = i\n        end\n    end\n    return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(digits, divisible_by_digit)\n    end\n    return filter(range(startnum, endnum), divisible_by_digits_helper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0bll8ul_.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp0bll8ul_.lua:10: in local 'candidate'\n\t/tmp/tmp0bll8ul_.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function is_divisible(num)\n    local function is_divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(digits, is_divisible_by_digit)\n  end\n  return filter(range(startnum, endnum), is_divisible)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxu68hcpp.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpxu68hcpp.lua:10: in local 'candidate'\n\t/tmp/tmpxu68hcpp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_helper(num)\n\t\tlocal function divisible_by_digit(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\treturn string.gmatch(num, \"%d\")\n\t\t\t:all(divisible_by_digit)\n\tend\n\treturn range(startnum, endnum)\n\t\t:filter(divisible_by_digits_helper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0pfqurc_.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp0pfqurc_.lua:10: in local 'candidate'\n\t/tmp/tmp0pfqurc_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\treturn all(divisible_by_digits_inner_inner, digits(num))\n\tend\n\treturn filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph8v5pkuf.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmph8v5pkuf.lua:9: in local 'candidate'\n\t/tmp/tmph8v5pkuf.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_predicate(num)\n    local digits = to_digits(num)\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  return filter(divisible_by_digits_predicate, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfmhuf8r3.lua:12: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpfmhuf8r3.lua:12: in local 'candidate'\n\t/tmp/tmpfmhuf8r3.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = tostring(i)\n        local divisible = true\n        for j = 1, #num do\n            if i % tonumber(num:sub(j, j)) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl3tb1fqq.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpl3tb1fqq.lua:8: in local 'candidate'\n\t/tmp/tmpl3tb1fqq.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = tostring(i)\n        local is_divisible = true\n        for j = 1, #num do\n            local digit = tonumber(num:sub(j, j))\n            if digit ~= 0 and i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurlj9m7p.lua:24: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpurlj9m7p.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = (num - digit) / 10\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(digits, divisible_by_digit)\n    end\n    return filter(range(startnum, endnum), divisible_by_digits_helper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0bll8ul_.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp0bll8ul_.lua:10: in local 'candidate'\n\t/tmp/tmp0bll8ul_.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_inner(num)\n\t\tlocal digits = {}\n\t\tlocal num_copy = num\n\t\twhile num_copy > 0 do\n\t\t\tlocal digit = num_copy % 10\n\t\t\tif digit == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\ttable.insert(digits, digit)\n\t\t\tnum_copy = math.floor(num_copy / 10)\n\t\tend\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible_by_digits_inner(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible_numbers = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal is_divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tis_divisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif is_divisible then\n\t\t\ttable.insert(divisible_numbers, i)\n\t\tend\n\tend\n\treturn divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local digits = {}\n        local num_copy = num\n        while num_copy > 0 do\n            table.insert(digits, num_copy % 10)\n            num_copy = math.floor(num_copy / 10)\n        end\n        for _, digit in ipairs(digits) do\n            if digit == 0 then\n                return false\n            end\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for num = startnum, endnum do\n        if divisible_by_digits_helper(num) then\n            table.insert(result, num)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(digits, divisible_by_digit)\n  end\n  return filter(range(startnum, endnum), divisible_by_digits_helper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb6fbrore.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpb6fbrore.lua:10: in local 'candidate'\n\t/tmp/tmpb6fbrore.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_w37_baz.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp_w37_baz.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      divisible[#divisible + 1] = i\n    end\n  end\n  return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3zjjco07.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp3zjjco07.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            divisible_numbers[#divisible_numbers + 1] = i\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdirhbhlu.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpdirhbhlu.lua:10: in local 'candidate'\n\t/tmp/tmpdirhbhlu.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local numbers = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_inner(i) then\n      numbers[#numbers + 1] = i\n    end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp165gokl7.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp165gokl7.lua:8: in local 'divisible_by_digits_inner'\n\t/tmp/tmp165gokl7.lua:17: in local 'candidate'\n\t/tmp/tmp165gokl7.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplxpxettj.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmplxpxettj.lua:8: in local 'divisible_by_digits_helper'\n\t/tmp/tmplxpxettj.lua:17: in local 'candidate'\n\t/tmp/tmplxpxettj.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local is_divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rr4ym5o.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp0rr4ym5o.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuahffvjs.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpuahffvjs.lua:10: in local 'candidate'\n\t/tmp/tmpuahffvjs.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpovi3sk8b.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpovi3sk8b.lua:9: in local 'candidate'\n\t/tmp/tmpovi3sk8b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbhdosm4a.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpbhdosm4a.lua:10: in local 'candidate'\n\t/tmp/tmpbhdosm4a.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function is_divisible(num)\n        local function is_divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(digits, is_divisible_by_digit)\n    end\n    return filter(range(startnum, endnum), is_divisible)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvoprr6w0.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpvoprr6w0.lua:10: in local 'candidate'\n\t/tmp/tmpvoprr6w0.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function is_divisible(num)\n\t\tlocal digits = {}\n\t\tfor digit in tostring(num):gmatch(\"%d\") do\n\t\t\ttable.insert(digits, tonumber(digit))\n\t\tend\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif is_divisible(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp67nztluj.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp67nztluj.lua:8: in local 'is_divisible'\n\t/tmp/tmp67nztluj.lua:17: in local 'candidate'\n\t/tmp/tmp67nztluj.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal is_divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tis_divisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif is_divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            divisible_numbers[#divisible_numbers + 1] = i\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdirhbhlu.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpdirhbhlu.lua:10: in local 'candidate'\n\t/tmp/tmpdirhbhlu.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit ~= 0 and i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj7v3vw0.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpyj7v3vw0.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch('%d') do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local is_divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            divisible_numbers[#divisible_numbers + 1] = i\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg6nj2jd7.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpg6nj2jd7.lua:10: in local 'candidate'\n\t/tmp/tmpg6nj2jd7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local digits = {}\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 then\n        table.insert(digits, digit)\n      end\n      num = math.floor(num / 10)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(divisible_by_digits, i)\n    end\n  end\n  return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0_lmams.lua:31: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpp0_lmams.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function is_divisible(num)\n        local function is_divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(digits, is_divisible_by_digit)\n    end\n    return filter(range(startnum, endnum), is_divisible)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvoprr6w0.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpvoprr6w0.lua:10: in local 'candidate'\n\t/tmp/tmpvoprr6w0.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    return filter(\n        function(n)\n            local digits = to_digits(n)\n            for _, d in ipairs(digits) do\n                if d == 0 or n % d ~= 0 then\n                    return false\n                end\n            end\n            return true\n        end,\n        range(startnum, endnum)\n    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnrkziwiq.lua:13: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpnrkziwiq.lua:13: in local 'candidate'\n\t/tmp/tmpnrkziwiq.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local digits = {}\n        local num = i\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 then\n                break\n            end\n            table.insert(digits, digit)\n            num = math.floor(num / 10)\n        end\n        local is_divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpquqj715m.lua:32: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpquqj715m.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local digits = {}\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 then\n        break\n      end\n      table.insert(digits, digit)\n      num = math.floor(num / 10)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpwifo12.lua:32: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpmpwifo12.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible_by_all = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible_by_all = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible_by_all then\n            table.insert(divisible, i)\n        end\n    end\n    return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(num, divisor)\n\t\t\tif num == 0 then\n\t\t\t\treturn true\n\t\t\telseif num % divisor == 0 then\n\t\t\t\treturn divisible_by_digits_inner_inner(math.floor(num / 10), divisor)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn divisible_by_digits_inner_inner(num, num % 10)\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible_by_digits_inner(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1nl97osm.lua:4: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp1nl97osm.lua:4: in function </tmp/tmp1nl97osm.lua:4>\n\t(...tail calls...)\n\t/tmp/tmp1nl97osm.lua:17: in local 'candidate'\n\t/tmp/tmp1nl97osm.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_by_digits[#divisible_by_digits + 1] = i\n    end\n  end\n  return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuy8rb6e4.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpuy8rb6e4.lua:10: in local 'candidate'\n\t/tmp/tmpuy8rb6e4.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits+1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible(i) then\n            result[#result+1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4mkhcj76.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp4mkhcj76.lua:8: in local 'divisible'\n\t/tmp/tmp4mkhcj76.lua:17: in local 'candidate'\n\t/tmp/tmp4mkhcj76.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = string.gmatch(tostring(num), \"%d\")\n    return all(digits, divisible_by_digit)\n  end\n  return filter(range(startnum, endnum), divisible_by_digits_inner)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgkjbhxcr.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpgkjbhxcr.lua:10: in local 'candidate'\n\t/tmp/tmpgkjbhxcr.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digits_helper_helper(num, divisor)\n            if num == 0 then\n                return true\n            elseif num % divisor ~= 0 then\n                return false\n            else\n                return divisible_by_digits_helper_helper(num // 10, divisor)\n            end\n        end\n        return divisible_by_digits_helper_helper(num, num % 10)\n    end\n    local function divisible_by_digits_helper_helper(num)\n        if num == 0 then\n            return true\n        elseif not divisible_by_digits_helper(num) then\n            return false\n        else\n            return divisible_by_digits_helper_helper(num // 10)\n        end\n    end\n    local function divisible_by_digits_helper_helper_helper(num)\n        if num == 0 then\n            return true\n        elseif not divisible_by_digits_helper_helper(num) then\n            return false\n        else\n            return divisible_by_digits_helper_helper_helper(num // 10)\n        end\n    end\n    local function divisible_by_digits_helper_helper_helper_helper(num)\n        if num == 0 then\n            return true\n        elseif not divisible_by_digits_helper_helper_helper(num) then\n            return false\n        else\n            return divisible_by_digits_helper_helper_helper_helper(num // 10)\n        end\n    end\n    local function divisible_by_digits_helper_helper_helper_helper_helper(num)\n        if num == 0 then\n            return true\n        elseif not divisible_by_digits_helper_helper_helper_helper(num) then\n            return false\n        else\n            return divisible_by_digits_helper_helper_helper_helper_helper(num // 10\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "",
      "stderr": "lua: /tmp/tmptf3qjf53.lua:49: ')' expected (to close '(' at line 48) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_w37_baz.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp_w37_baz.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible = true\n    for j = 1, #num do\n      local digit = tonumber(num:sub(j, j))\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(divisible_by_digits, i)\n    end\n  end\n  return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function is_divisible(num)\n        local digits = {}\n        for i = 1, #num do\n            digits[i] = tonumber(num:sub(i, i))\n        end\n        for i = 1, #digits do\n            if num % digits[i] ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuhuznd81.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            table.insert(digits, tonumber(digit))\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf5vl78tp.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpf5vl78tp.lua:10: in local 'candidate'\n\t/tmp/tmpf5vl78tp.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch('%d') do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local is_divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n    end\n    if is_divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp064jql_y.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp064jql_y.lua:10: in local 'candidate'\n\t/tmp/tmp064jql_y.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cde52sb.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp3cde52sb.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits+1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible(i) then\n            result[#result+1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4mkhcj76.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp4mkhcj76.lua:8: in local 'divisible'\n\t/tmp/tmp4mkhcj76.lua:17: in local 'candidate'\n\t/tmp/tmp4mkhcj76.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_w37_baz.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp_w37_baz.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible_by_all = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible_by_all = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible_by_all then\n\t\t\ttable.insert(divisible, i)\n\t\tend\n\tend\n\treturn divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpovi3sk8b.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpovi3sk8b.lua:9: in local 'candidate'\n\t/tmp/tmpovi3sk8b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible_by_digits = {}\n\tfor i=startnum, endnum do\n\t\tif i % tonumber(i:sub(1,1)) == 0 and i % tonumber(i:sub(2,2)) == 0 then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpflbv3jxl.lua:5: attempt to index a number value (local 'i')\nstack traceback:\n\t/tmp/tmpflbv3jxl.lua:5: in local 'candidate'\n\t/tmp/tmpflbv3jxl.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local number = i\n    local divisible = true\n    while number > 0 do\n      local digit = number % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      number = math.floor(number / 10)\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea0sx6rl.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpea0sx6rl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible = {}\n  for i = startnum, endnum do\n    local divisible_by_all = true\n    for digit in tostring(i):gmatch('%d') do\n      if i % tonumber(digit) ~= 0 then\n        divisible_by_all = false\n        break\n      end\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpljlyjkhl.lua:7: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpljlyjkhl.lua:7: in local 'candidate'\n\t/tmp/tmpljlyjkhl.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      divisible_by_digits[#divisible_by_digits + 1] = i\n    end\n  end\n  return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digits_helper_helper(num, digit)\n            if digit == 0 then\n                return true\n            elseif num % digit == 0 then\n                return divisible_by_digits_helper_helper(num, digit / 10)\n            else\n                return false\n            end\n        end\n        return divisible_by_digits_helper_helper(num, num)\n    end\n    local function divisible_by_digits_helper_helper(startnum, endnum, acc)\n        if startnum > endnum then\n            return acc\n        elseif divisible_by_digits_helper(startnum) then\n            return divisible_by_digits_helper_helper(startnum + 1, endnum, acc .. startnum .. \" \")\n        else\n            return divisible_by_digits_helper_helper(startnum + 1, endnum, acc)\n        end\n    end\n    return divisible_by_digits_helper_helper(startnum, endnum, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7fmd47pv.lua:30: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: \"\"\nstack traceback:\n\t/tmp/tmp7fmd47pv.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665509949,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local is_divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n    end\n    if is_divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvf483p2r.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpvf483p2r.lua:10: in local 'candidate'\n\t/tmp/tmpvf483p2r.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local is_divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n    end\n    if is_divisible then\n      divisible[#divisible + 1] = i\n    end\n  end\n  return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_u9kdi5.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpi_u9kdi5.lua:10: in local 'candidate'\n\t/tmp/tmpi_u9kdi5.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_helper(num)\n\t\tlocal function divisible_by_digit(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\tlocal digits = {}\n\t\tfor digit in tostring(num):gmatch(\"%d\") do\n\t\t\tdigits[#digits + 1] = tonumber(digit)\n\t\tend\n\t\treturn all(divisible_by_digit, digits)\n\tend\n\tlocal numbers = {}\n\tfor num = startnum, endnum do\n\t\tif divisible_by_digits_helper(num) then\n\t\t\tnumbers[#numbers + 1] = num\n\t\tend\n\tend\n\treturn numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvq1yxn4r.lua:11: attempt to call a nil value (global 'all')\nstack traceback:\n\t/tmp/tmpvq1yxn4r.lua:11: in local 'divisible_by_digits_helper'\n\t/tmp/tmpvq1yxn4r.lua:15: in local 'candidate'\n\t/tmp/tmpvq1yxn4r.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = tostring(i):gmatch(\"%d\")\n        local divisible = true\n        for digit in digits do\n            if i % tonumber(digit) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zc54foz.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp7zc54foz.lua:8: in local 'candidate'\n\t/tmp/tmp7zc54foz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal digits = {}\n\t\tfor digit in tostring(i):gmatch('%d') do\n\t\t\ttable.insert(digits, tonumber(digit))\n\t\tend\n\t\tlocal is_divisible = true\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif i % digit ~= 0 then\n\t\t\t\tis_divisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp10_met2.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpp10_met2.lua:10: in local 'candidate'\n\t/tmp/tmpp10_met2.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_inner(num)\n\t\tlocal num_str = tostring(num)\n\t\tfor i = 1, #num_str do\n\t\t\tlocal digit = tonumber(num_str:sub(i, i))\n\t\t\tif digit == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tif num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\treturn divisible_by_digits_inner\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxsf98xq.lua:22: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: function: 0x55fe7bac3420\nstack traceback:\n\t/tmp/tmpoxsf98xq.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal is_divisible = true\n\t\tlocal num = i\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tis_divisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif is_divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_w37_baz.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp_w37_baz.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for i = 1, #digits do\n      if num % digits[i] ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpthxzfaz6.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpthxzfaz6.lua:8: in local 'divisible'\n\t/tmp/tmpthxzfaz6.lua:17: in local 'candidate'\n\t/tmp/tmpthxzfaz6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local num = i\n        local digits = {}\n        while num > 0 do\n            local digit = num % 10\n            if digit > 0 then\n                table.insert(digits, digit)\n            end\n            num = math.floor(num / 10)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_by_digits, i)\n        end\n    end\n    return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3z4frstu.lua:31: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp3z4frstu.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digits_inner_inner(num, divisor)\n      return num % divisor == 0\n    end\n    local function divisible_by_digits_inner_inner_inner(num, divisor)\n      return divisible_by_digits_inner_inner(num, divisor) and divisible_by_digits_inner_inner(num, math.floor(divisor / 10))\n    end\n    return divisible_by_digits_inner_inner_inner(num, num)\n  end\n  local function divisible_by_digits_inner_inner(startnum, endnum, acc)\n    if startnum > endnum then\n      return acc\n    else\n      if divisible_by_digits_inner(startnum) then\n        return divisible_by_digits_inner_inner(startnum + 1, endnum, acc .. startnum .. ' ')\n      else\n        return divisible_by_digits_inner_inner(startnum + 1, endnum, acc)\n      end\n    end\n  end\n  return divisible_by_digits_inner_inner(startnum, endnum, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122610,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09ycbk40.lua:4: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp09ycbk40.lua:4: in upvalue 'divisible_by_digits_inner_inner'\n\t/tmp/tmp09ycbk40.lua:8: in function </tmp/tmp09ycbk40.lua:7>\n\t(...tail calls...)\n\t/tmp/tmp09ycbk40.lua:16: in function </tmp/tmp09ycbk40.lua:12>\n\t(...tail calls...)\n\t/tmp/tmp09ycbk40.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}