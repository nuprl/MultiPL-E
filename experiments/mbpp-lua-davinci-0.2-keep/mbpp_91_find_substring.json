{
  "name": "mbpp_91_find_substring",
  "language": "lua",
  "prompt": "-- Write a function to check if a string is present as a substring in a given list of string values.\nlocal function find_substring(str1, sub_str)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_substring\n    lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'ack'), true)\n    lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'abc'), false)\n    lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'ange'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    if str1 == nil or sub_str == nil then\n        return false\n    end\n    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    for i = 1, str1_len - sub_str_len + 1 do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str1_len and j <= sub_str_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str1_len and j <= sub_str_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "  local found = false\n  for i, str2 in ipairs(sub_str) do\n    if str1:find(str2) then\n      found = true\n      break\n    end\n  end\n  return found\nend",
    "    return string.find(str1, sub_str)\nend",
    "    local str_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str_len and j <= sub_str_len do\n        if str1[i] == sub_str[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local str1_len = #str1\n    local sub_str_len = #sub_str\n    local i = 1\n    local j = 1\n    while i <= str1_len and j <= sub_str_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "    return string.find(str1, sub_str)\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    for i = 1, str1_len - sub_str_len + 1 do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    local str2 = str1:lower()\n    local sub_str2 = sub_str:lower()\n    local found = false\n    for i = 1, #str2 do\n        if str2:sub(i, i + #sub_str2 - 1) == sub_str2 then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "  local result = false\n  for _, str2 in pairs(sub_str) do\n    if string.find(str1, str2) then\n      result = true\n      break\n    end\n  end\n  return result\nend",
    "\tif str1:find(sub_str) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    for i = 1, str1_len - sub_str_len + 1 do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "  local str1_len = string.len(str1)\n  local sub_str_len = string.len(sub_str)\n  local i = 1\n  local j = 1\n  while i <= str1_len and j <= sub_str_len do\n    if str1:sub(i, i) == sub_str:sub(j, j) then\n      i = i + 1\n      j = j + 1\n    else\n      i = i - j + 2\n      j = 1\n    end\n  end\n  if j > sub_str_len then\n    return true\n  else\n    return false\n  end\nend",
    "    local str1_len = #str1\n    local sub_str_len = #sub_str\n    for i = 1, str1_len - sub_str_len + 1 do\n        local j = 1\n        while j <= sub_str_len and str1:sub(i + j - 1, i + j - 1) == sub_str:sub(j, j) do\n            j = j + 1\n        end\n        if j > sub_str_len then\n            return true\n        end\n    end\n    return false\nend",
    "    return string.find(str1, sub_str)\nend",
    "    local str_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str_len and j <= sub_str_len do\n        if string.sub(str1, i, i) == string.sub(sub_str, j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "    local found = false\n    for i, str2 in ipairs(sub_str) do\n        if str1:find(str2) then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    return string.find(str1, sub_str)\nend",
    "\tlocal found = false\n\tfor _, str2 in ipairs(sub_str) do\n\t\tif string.find(str1, str2) then\n\t\t\tfound = true\n\t\t\tbreak\n\t\tend\n\tend\n\treturn found\nend",
    "    return string.find(str1, sub_str)\nend",
    "  local str_len = string.len(str1)\n  local sub_len = string.len(sub_str)\n  local i = 1\n  local j = 1\n  while i <= str_len do\n    if string.sub(str1, i, i + sub_len - 1) == sub_str then\n      return true\n    end\n    i = i + 1\n  end\n  return false\nend",
    "    local found = false\n    for i = 1, #str1 do\n        if string.sub(str1, i, i + #sub_str - 1) == sub_str then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    local found = false\n    for i = 1, #str1 do\n        if string.sub(str1, i, i + #sub_str - 1) == sub_str then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    local str_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str_len do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n        i = i + 1\n    end\n    return false\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str1_len and j <= sub_str_len do\n        if str1[i] == sub_str[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "\tlocal str_len = string.len(str1)\n\tlocal sub_str_len = string.len(sub_str)\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= str_len and j <= sub_str_len do\n\t\tif str1[i] == sub_str[j] then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\ti = i - j + 2\n\t\t\tj = 1\n\t\tend\n\tend\n\tif j > sub_str_len then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal str_len = string.len(str1)\n\tlocal sub_str_len = string.len(sub_str)\n\tfor i = 1, str_len - sub_str_len + 1 do\n\t\tif string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "    local found = false\n    for i, str2 in ipairs(sub_str) do\n        if str1:find(str2) then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    for i = 1, #str1 do\n        if str1:sub(i, i + #sub_str - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    local str_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    for i = 1, str_len - sub_str_len + 1 do\n        local j = 1\n        while j <= sub_str_len do\n            if string.sub(str1, i + j - 1, i + j - 1) ~= string.sub(sub_str, j, j) then\n                break\n            end\n            j = j + 1\n        end\n        if j > sub_str_len then\n            return true\n        end\n    end\n    return false\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "  for i = 1, #str1 do\n    if str1:sub(i, i + #sub_str - 1) == sub_str then\n      return true\n    end\n  end\n  return false\nend",
    "    local str_len = string.len(str1)\n    local sub_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    local found = false\n    while i <= str_len and j <= sub_len do\n        if str1[i] == sub_str[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n        if j > sub_len then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    for i = 1, str1_len - sub_str_len + 1 do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    local found = false\n    for i = 1, #str1 do\n        if string.sub(str1, i, i + #sub_str - 1) == sub_str then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    for i = 1, #str1 do\n        if str1:sub(i, i + #sub_str - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    if (string.find(str1, sub_str) ~= nil) then\n        return true\n    else\n        return false\n    end\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local str1_sub_str_len = str1_len - sub_str_len\n    for i = 1, str1_sub_str_len do\n        local j = 1\n        while j <= sub_str_len do\n            if string.sub(str1, i + j - 1, i + j - 1) ~= string.sub(sub_str, j, j) then\n                break\n            end\n            j = j + 1\n        end\n        if j > sub_str_len then\n            return true\n        end\n    end\n    return false\nend",
    "    if (string.find(str1, sub_str) ~= nil) then\n        return true\n    end\n    return false\nend",
    "    return string.find(str1, sub_str)\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "  local str1_len = #str1\n  local sub_str_len = #sub_str\n  local i = 1\n  local j = 1\n  while i <= str1_len and j <= sub_str_len do\n    if str1:sub(i, i) == sub_str:sub(j, j) then\n      i = i + 1\n      j = j + 1\n    else\n      i = i - j + 2\n      j = 1\n    end\n  end\n  if j > sub_str_len then\n    return true\n  else\n    return false\n  end\nend",
    "\tif str1:find(sub_str) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local str_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    for i = 1, str_len - sub_str_len + 1 do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str1_len and j <= sub_str_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "\treturn string.find(str1, sub_str)\nend",
    "    return string.find(str1, sub_str)\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    local found = false\n    while i <= str1_len and j <= sub_str_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n        if j > sub_str_len then\n            found = true\n        end\n    end\n    return found\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "\tif string.find(str1, sub_str) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local str2 = string.lower(str1)\n    local sub_str2 = string.lower(sub_str)\n    local found = string.find(str2, sub_str2)\n    if found then\n        return true\n    else\n        return false\n    end\nend",
    "    if str1 == nil or sub_str == nil then\n        return false\n    end\n    local str_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    if str_len < sub_str_len then\n        return false\n    end\n    for i = 1, str_len - sub_str_len + 1 do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "\tif str1 == nil or sub_str == nil then\n\t\treturn false\n\tend\n\treturn string.find(str1, sub_str, 1, true) ~= nil\nend",
    "  for i = 1, #str1 do\n    if string.sub(str1, i, i + #sub_str - 1) == sub_str then\n      return true\n    end\n  end\n  return false\nend",
    "\tlocal str2 = str1:lower()\n\tlocal str3 = sub_str:lower()\n\tlocal found = str2:find(str3)\n\tif found then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    for i = 1, str1_len - sub_str_len + 1 do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    local found = false\n    for i = 1, #str1 do\n        if str1:sub(i, i + #sub_str - 1) == sub_str then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    for i = 1, #str1 do\n        if string.sub(str1, i, i + #sub_str - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    return string.find(str1, sub_str)\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    return string.find(str1, sub_str)\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    for i = 1, str1_len - sub_str_len + 1 do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    for i = 1, str1_len - sub_str_len + 1 do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    for i = 1, #str1 do\n        if string.sub(str1, i, i + #sub_str - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if not str1 or not sub_str then\n        return false\n    end\n    return string.find(str1, sub_str)\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    local found = false\n    for i = 1, #str1 do\n        if str1:sub(i, i + #sub_str - 1) == sub_str then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    for i = 1, str1_len - sub_str_len + 1 do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    for i = 1, #str1 do\n        if str1:sub(i, i + #sub_str - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "\tlocal str1_len = string.len(str1)\n\tlocal sub_str_len = string.len(sub_str)\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= str1_len and j <= sub_str_len do\n\t\tif str1[i] == sub_str[j] then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\ti = i - j + 2\n\t\t\tj = 1\n\t\tend\n\tend\n\tif j > sub_str_len then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal len = string.len(sub_str)\n\tfor i = 1, string.len(str1) - len + 1 do\n\t\tif string.sub(str1, i, i + len - 1) == sub_str then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "    local str = str1:lower()\n    local substr = sub_str:lower()\n    return str:find(substr)\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    for i = 1, str1_len - sub_str_len + 1 do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if (string.find(str1, sub_str) ~= nil) then\n        return true\n    else\n        return false\n    end\nend",
    "\tif string.find(str1, sub_str) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local found = false\n    for i = 1, #str1 do\n        if str1:sub(i, i + #sub_str - 1) == sub_str then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    local str_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    local found = false\n    while i <= str_len and j <= sub_str_len do\n        if str1[i] == sub_str[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n        if j > sub_str_len then\n            found = true\n        end\n    end\n    return found\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local str1_len = #str1\n    local sub_str_len = #sub_str\n    local i = 1\n    local j = 1\n    local found = false\n    while i <= str1_len and j <= sub_str_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - (j - 2)\n            j = 1\n        end\n        if j == sub_str_len + 1 then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    local found = false\n    while i <= str1_len and j <= sub_str_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n        if j > sub_str_len then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    for i = 1, #str1 do\n        if str1:sub(i, i + #sub_str - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "\tlocal found = false\n\tfor _, str2 in ipairs(sub_str) do\n\t\tif str1:find(str2) then\n\t\t\tfound = true\n\t\t\tbreak\n\t\tend\n\tend\n\treturn found\nend",
    "    return string.find(str1, sub_str)\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local found = false\n    for i = 1, #str1 do\n        if str1:sub(i, i + #sub_str - 1) == sub_str then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str1_len and j <= sub_str_len do\n        if str1[i] == sub_str[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "    if str1 == nil or sub_str == nil then\n        return false\n    end\n    return string.find(str1, sub_str) ~= nil\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    if str1 == nil or sub_str == nil then\n        return false\n    end\n    return string.find(str1, sub_str) ~= nil\nend",
    "  local found = false\n  for i, str2 in ipairs(sub_str) do\n    if string.find(str1, str2) then\n      found = true\n      break\n    end\n  end\n  return found\nend",
    "    local str = str1:lower()\n    local sub = sub_str:lower()\n    local found = false\n    for i = 1, #str do\n        if str:sub(i, i + #sub - 1) == sub then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str1_len and j <= sub_str_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str1_len and j <= sub_str_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if string.find(str1, sub_str) ~= nil then\n        return true\n    else\n        return false\n    end\nend",
    "    if str1 == nil or sub_str == nil then\n        return false\n    end\n    if string.find(str1, sub_str) ~= nil then\n        return true\n    else\n        return false\n    end\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    for i = 1, #str1 do\n        if str1:sub(i, i + #sub_str - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local str_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    while i <= str_len do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n        i = i + 1\n    end\n    return false\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str1_len and j <= sub_str_len do\n        if str1[i] == sub_str[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal res = false\n\tfor i = 1, #str1 do\n\t\tif string.sub(str1, i, i + #sub_str - 1) == sub_str then\n\t\t\tres = true\n\t\t\tbreak\n\t\tend\n\tend\n\treturn res\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str1_len and j <= sub_str_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "    return string.find(str1, sub_str)\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if not str1 or not sub_str then\n        return false\n    end\n    return string.find(str1, sub_str)\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if not str1 or not sub_str then\n        return false\n    end\n    return string.find(str1, sub_str) ~= nil\nend",
    "    local str_len = string.len(str1)\n    local sub_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str_len and j <= sub_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_len then\n        return true\n    else\n        return false\n    end\nend",
    "    for i = 1, #str1 do\n        if string.sub(str1, i, i + #sub_str - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    for i = 1, #str1 do\n        if string.sub(str1, i, i + #sub_str - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    return string.find(str1, sub_str)\nend",
    "    local str_len = string.len(sub_str)\n    local str1_len = string.len(str1)\n    local i = 1\n    local j = 1\n    while i <= str1_len do\n        if string.sub(str1, i, i + str_len - 1) == sub_str then\n            return true\n        end\n        i = i + 1\n    end\n    return false\nend",
    "    for i = 1, #str1 do\n        if string.sub(str1, i, i + #sub_str - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    for i = 1, #str1 do\n        if string.sub(str1, i, i + #sub_str - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    local found = false\n    for i = 1, #str1 do\n        if str1:sub(i, i + #sub_str - 1) == sub_str then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str1_len and j <= sub_str_len do\n        if str1[i] == sub_str[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "    local str_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str_len and j <= sub_str_len do\n        if str1[i] == sub_str[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    while i <= str1_len and j <= sub_str_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n    end\n    if j > sub_str_len then\n        return true\n    else\n        return false\n    end\nend",
    "    return string.find(str1, sub_str)\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local str_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    local found = false\n    while i <= str_len and j <= sub_str_len do\n        if str1[i] == sub_str[j] then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n        if j > sub_str_len then\n            found = true\n        end\n    end\n    return found\nend",
    "\tif str1:find(sub_str) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    end\n    return false\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if str1 == nil or sub_str == nil then\n        return false\n    end\n    return string.find(str1, sub_str) ~= nil\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    return string.find(str1, sub_str)\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local str2 = string.lower(str1)\n    local str3 = string.lower(sub_str)\n    if str2:find(str3) then\n        return true\n    else\n        return false\n    end\nend",
    "    if type(str1) ~= \"string\" or type(sub_str) ~= \"string\" then\n        return false\n    end\n    return string.find(str1, sub_str) ~= nil\nend",
    "  if type(str1) ~= \"string\" or type(sub_str) ~= \"string\" then\n    return false\n  end\n  local str1_len = string.len(str1)\n  local sub_str_len = string.len(sub_str)\n  if str1_len < sub_str_len then\n    return false\n  end\n  local i = 0\n  while i < str1_len do\n    local j = 0\n    while j < sub_str_len do\n      if string.sub(str1, i+j, i+j) ~= string.sub(sub_str, j, j) then\n        break\n      end\n      j = j + 1\n    end\n    if j == sub_str_len then\n      return true\n    end\n    i = i + 1\n  end\n  return false\nend",
    "    local found = false\n    for i = 1, #str1 do\n        if string.sub(str1, i, i + #sub_str - 1) == sub_str then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "  if str1 == nil or sub_str == nil then\n    return false\n  end\n  return string.find(str1, sub_str) ~= nil\nend",
    "    local str_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    local found = false\n    while i <= str_len and j <= sub_str_len do\n        if string.sub(str1, i, i) == string.sub(sub_str, j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n        if j > sub_str_len then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    if not str1 or not sub_str then\n        return false\n    end\n    return string.find(str1, sub_str) ~= nil\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    return string.find(str1, sub_str)\nend",
    "    local found = false\n    for i = 1, #str1 do\n        if str1:sub(i, i + #sub_str - 1) == sub_str then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    local str = str1:lower()\n    local sub = sub_str:lower()\n    return string.find(str, sub)\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "\tif type(str1) ~= \"string\" or type(sub_str) ~= \"string\" then\n\t\treturn false\n\tend\n\treturn string.find(str1, sub_str)\nend",
    "\tlocal str = string.gsub(str1, sub_str, \"\")\n\tif str == str1 then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend",
    "    local str1_len = #str1\n    local sub_str_len = #sub_str\n    local i = 1\n    local j = 1\n    local found = false\n    while i <= str1_len and j <= sub_str_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n        if j > sub_str_len then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local found = false\n    for i, str2 in ipairs(sub_str) do\n        if string.find(str1, str2) then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    for i = 1, str1_len - sub_str_len + 1 do\n        if string.sub(str1, i, i + sub_str_len - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    return string.find(str1, sub_str)\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    local str_len = string.len(str1)\n    local sub_len = string.len(sub_str)\n    local i = 1\n    while i <= str_len do\n        local j = 1\n        while j <= sub_len do\n            if string.sub(str1, i, i) == string.sub(sub_str, j, j) then\n                i = i + 1\n                j = j + 1\n            else\n                break\n            end\n        end\n        if j == sub_len + 1 then\n            return true\n        end\n        i = i + 1\n    end\n    return false\nend",
    "    if str1:find(sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    for i = 1, #str1 do\n        if string.sub(str1, i, i + #sub_str - 1) == sub_str then\n            return true\n        end\n    end\n    return false\nend",
    "    if not str1 or not sub_str then\n        return false\n    end\n    return string.find(str1, sub_str) ~= nil\nend",
    "\tif not str1 or not sub_str then\n\t\treturn false\n\tend\n\treturn string.find(str1, sub_str) ~= nil\nend",
    "    local str = str1\n    local sub_str = sub_str\n    local i = 1\n    local j = 1\n    local count = 0\n    local len = string.len(sub_str)\n    while i <= string.len(str) do\n        if string.sub(str, i, i) == string.sub(sub_str, j, j) then\n            count = count + 1\n            i = i + 1\n            j = j + 1\n        else\n            i = i + 1\n            j = 1\n            count = 0\n        end\n        if count == len then\n            return true\n        end\n    end\n    return false\nend",
    "    return string.find(str1, sub_str)\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "    return string.find(str1, sub_str) ~= nil\nend",
    "    local str1_len = string.len(str1)\n    local sub_str_len = string.len(sub_str)\n    local i = 1\n    local j = 1\n    local found = false\n    while i <= str1_len and j <= sub_str_len do\n        if str1:sub(i, i) == sub_str:sub(j, j) then\n            i = i + 1\n            j = j + 1\n        else\n            i = i - j + 2\n            j = 1\n        end\n        if j > sub_str_len then\n            found = true\n            break\n        end\n    end\n    return found\nend",
    "    if string.find(str1, sub_str) then\n        return true\n    else\n        return false\n    end\nend",
    "\tif str1:find(sub_str) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "  local str1_len = string.len(str1)\n  local sub_str_len = string.len(sub_str)\n  local i = 1\n  local j = 1\n  local found = false\n  while i <= str1_len and j <= sub_str_len do\n    if str1:sub(i, i) == sub_str:sub(j, j) then\n      i = i + 1\n      j = j + 1\n    else\n      i = i - j + 2\n      j = 1\n    end\n    if j > sub_str_len then\n      found = true\n    end\n  end\n  return found\nend",
    "    if type(str1) ~= \"string\" or type(sub_str) ~= \"string\" then\n        return false\n    end"
  ]
}