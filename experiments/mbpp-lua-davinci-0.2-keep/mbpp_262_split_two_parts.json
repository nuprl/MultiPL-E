{
  "name": "mbpp_262_split_two_parts",
  "language": "lua",
  "prompt": "-- Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nlocal function split_two_parts(list1, L)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_two_parts\n    lu.assertEquals(candidate({1, 1, 2, 3, 4, 4, 5, 1}, 3), {{1, 1, 2}, {3, 4, 4, 5, 1}})\n    lu.assertEquals(candidate({'a', 'b', 'c', 'd'}, 2), {{'a', 'b'}, {'c', 'd'}})\n    lu.assertEquals(candidate({'p', 'y', 't', 'h', 'o', 'n'}, 4), {{'p', 'y', 't', 'h'}, {'o', 'n'}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, L do\n        table.insert(list2, list1[i])\n    end\n    for i = L + 1, #list1 do\n        table.insert(list3, list1[i])\n    end\n    return list2, list3\nend",
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, L do\n        list2[i] = list1[i]\n    end\n    for i = L + 1, #list1 do\n        list3[i - L] = list1[i]\n    end\n    return list2, list3\nend",
    "  local list2 = {}\n  local list3 = {}\n  local i = 1\n  while i <= L do\n    list2[i] = list1[i]\n    i = i + 1\n  end\n  while i <= #list1 do\n    list3[i - L] = list1[i]\n    i = i + 1\n  end\n  return list2, list3\nend",
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, L do\n        list2[i] = list1[i]\n    end\n    for i = L + 1, #list1 do\n        list3[i - L] = list1[i]\n    end\n    return list2, list3\nend",
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, L do\n        list2[i] = list1[i]\n    end\n    for i = L + 1, #list1 do\n        list3[i - L] = list1[i]\n    end\n    return list2, list3\nend",
    "\tlocal list2 = {}\n\tlocal list3 = {}\n\tfor i = 1, L do\n\t\tlist2[i] = list1[i]\n\tend\n\tfor i = L+1, #list1 do\n\t\tlist3[i-L] = list1[i]\n\tend\n\treturn list2, list3\nend",
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, L do\n        list2[i] = list1[i]\n    end\n    for i = L + 1, #list1 do\n        list3[i - L] = list1[i]\n    end\n    return list2, list3\nend",
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, L do\n        list2[i] = list1[i]\n    end\n    for i = L + 1, #list1 do\n        list3[i - L] = list1[i]\n    end\n    return list2, list3\nend",
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, L do\n        table.insert(list2, list1[i])\n    end\n    for i = L + 1, #list1 do\n        table.insert(list3, list1[i])\n    end\n    return list2, list3\nend",
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, L do\n        list2[i] = list1[i]\n    end\n    for i = L + 1, #list1 do\n        list3[i - L] = list1[i]\n    end\n    return list2, list3\nend",
    "  local list2 = {}\n  local list3 = {}\n  local i = 1\n  while i <= L do\n    list2[i] = list1[i]\n    i = i + 1\n  end\n  local j = 1\n  while i <= #list1 do\n    list3[j] = list1[i]\n    i = i + 1\n    j = j + 1\n  end\n  return list2, list3\nend",
    "  local list2 = {}\n  local list3 = {}\n  for i = 1, L do\n    list2[i] = list1[i]\n  end\n  for i = L + 1, #list1 do\n    list3[i - L] = list1[i]\n  end\n  return list2, list3\nend",
    "\tlocal list2 = {}\n\tlocal list3 = {}\n\tfor i = 1, L do\n\t\ttable.insert(list2, list1[i])\n\tend\n\tfor i = L + 1, #list1 do\n\t\ttable.insert(list3, list1[i])\n\tend\n\treturn list2, list3\nend",
    "\tlocal list2 = {}\n\tlocal list3 = {}\n\tfor i = 1, L do\n\t\tlist2[i] = list1[i]\n\tend\n\tfor i = L + 1, #list1 do\n\t\tlist3[i - L] = list1[i]\n\tend\n\treturn list2, list3\nend",
    "    local list2 = {}\n    for i = 1, L do\n        table.insert(list2, table.remove(list1))\n    end\n    return list1, list2\nend",
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, L do\n        list2[i] = list1[i]\n    end\n    for i = L + 1, #list1 do\n        list3[i - L] = list1[i]\n    end\n    return list2, list3\nend",
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, L do\n        list2[i] = list1[i]\n    end\n    for i = L+1, #list1 do\n        list3[i-L] = list1[i]\n    end\n    return list2, list3\nend",
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, L do\n        list2[i] = list1[i]\n    end\n    for i = L + 1, #list1 do\n        list3[i - L] = list1[i]\n    end\n    return list2, list3\nend",
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, L do\n        list2[i] = list1[i]\n    end\n    for i = L + 1, #list1 do\n        list3[i - L] = list1[i]\n    end\n    return list2, list3\nend",
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, L do\n        table.insert(list2, list1[i])\n    end\n    for i = L + 1, #list1 do\n        table.insert(list3, list1[i])\n    end\n    return list2, list3\nend"
  ]
}