{
  "name": "mbpp_92_is_undulating",
  "language": "lua",
  "prompt": "-- Write a function to check whether the given number is undulating or not.\nlocal function is_undulating(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_undulating\n    lu.assertEquals(candidate(1212121), true)\n    lu.assertEquals(candidate(1991), false)\n    lu.assertEquals(candidate(121), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  while i < len do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local len = #s\n  for i = 1, len - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "\tlocal s = tostring(n)\n\tlocal last = s:sub(1, 1)\n\tlocal last_diff = nil\n\tfor i = 2, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tlocal diff = c - last\n\t\tif last_diff and diff ~= last_diff then\n\t\t\treturn false\n\t\tend\n\t\tlast_diff = diff\n\t\tlast = c\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local k = 1\n  local l = 1\n  while i < j do\n    if s:sub(i,i) ~= s:sub(j,j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal k = 1\n\tlocal l = l - 1\n\twhile i <= j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal i = 1\n\tlocal j = #s\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local i = 1\n  local j = 2\n  local k = 3\n  local is_undulating = true\n  while k <= n_len do\n    if n_str:sub(i, i) == n_str:sub(j, j) or\n       n_str:sub(j, j) == n_str:sub(k, k) then\n      is_undulating = false\n      break\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return is_undulating\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local increasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    if digit == last_digit then\n      return false\n    end\n    if increasing then\n      if digit < last_digit then\n        increasing = false\n      end\n    else\n      if digit > last_digit then\n        return false\n      end\n    end\n    last_digit = digit\n  end\n  return true\nend",
    "    local n_str = tostring(n)\n    local n_len = #n_str\n    local is_undulating = true\n    for i = 1, n_len - 2, 2 do\n        if n_str:sub(i, i) ~= n_str:sub(i + 2, i + 2) then\n            is_undulating = false\n            break\n        end\n    end\n    return is_undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal last_diff = nil\n\twhile i < j do\n\t\tlocal a = tonumber(s:sub(i, i))\n\t\tlocal b = tonumber(s:sub(j, j))\n\t\tlocal diff = a - b\n\t\tif last_diff == nil then\n\t\t\tlast_diff = diff\n\t\telseif last_diff ~= diff then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal last = s:sub(1,1)\n\tlocal i = 2\n\tlocal inc = true\n\twhile i <= #s do\n\t\tlocal c = s:sub(i,i)\n\t\tif inc then\n\t\t\tif c < last then\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\tif c > last then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\tlast = c\n\t\tinc = not inc\n\t\ti = i + 1\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local len = #s\n    local i = 1\n    local j = 2\n    local k = 3\n    local l = 4\n    while l <= len do\n        if s:sub(i, j) == s:sub(k, l) then\n            return false\n        end\n        i = i + 1\n        j = j + 1\n        k = k + 1\n        l = l + 1\n    end\n    return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    local k = 1\n    local l = l - 1\n    local flag = true\n    while i < j do\n        if s:sub(i, i) == s:sub(j, j) then\n            i = i + 1\n            j = j - 1\n        else\n            flag = false\n            break\n        end\n    end\n    if flag then\n        return true\n    end\n    flag = true\n    while k < l do\n        if s:sub(k, k) == s:sub(l, l) then\n            k = k + 1\n            l = l - 1\n        else\n            flag = false\n            break\n        end\n    end\n    if flag then\n        return true\n    end\n    return false\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1,1))\n  local increasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i,i))\n    if increasing then\n      if digit < last_digit then\n        increasing = false\n      elseif digit == last_digit then\n        return false\n      end\n    else\n      if digit > last_digit then\n        return false\n      elseif digit == last_digit then\n        return false\n      end\n    end\n    last_digit = digit\n  end\n  return true\nend"
  ]
}