{
  "name": "mbpp_92_is_undulating",
  "language": "lua",
  "prompt": "-- Write a function to check whether the given number is undulating or not.\nlocal function is_undulating(n)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_undulating\n    lu.assertEquals(candidate(1212121), true)\n    lu.assertEquals(candidate(1991), false)\n    lu.assertEquals(candidate(121), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  while i < len do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local len = #s\n  for i = 1, len - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "\tlocal s = tostring(n)\n\tlocal last = s:sub(1, 1)\n\tlocal last_diff = nil\n\tfor i = 2, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tlocal diff = c - last\n\t\tif last_diff and diff ~= last_diff then\n\t\t\treturn false\n\t\tend\n\t\tlast_diff = diff\n\t\tlast = c\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local k = 1\n  local l = 1\n  while i < j do\n    if s:sub(i,i) ~= s:sub(j,j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal k = 1\n\tlocal l = l - 1\n\twhile i <= j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal i = 1\n\tlocal j = #s\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local i = 1\n  local j = 2\n  local k = 3\n  local is_undulating = true\n  while k <= n_len do\n    if n_str:sub(i, i) == n_str:sub(j, j) or\n       n_str:sub(j, j) == n_str:sub(k, k) then\n      is_undulating = false\n      break\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return is_undulating\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local increasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    if digit == last_digit then\n      return false\n    end\n    if increasing then\n      if digit < last_digit then\n        increasing = false\n      end\n    else\n      if digit > last_digit then\n        return false\n      end\n    end\n    last_digit = digit\n  end\n  return true\nend",
    "    local n_str = tostring(n)\n    local n_len = #n_str\n    local is_undulating = true\n    for i = 1, n_len - 2, 2 do\n        if n_str:sub(i, i) ~= n_str:sub(i + 2, i + 2) then\n            is_undulating = false\n            break\n        end\n    end\n    return is_undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal last_diff = nil\n\twhile i < j do\n\t\tlocal a = tonumber(s:sub(i, i))\n\t\tlocal b = tonumber(s:sub(j, j))\n\t\tlocal diff = a - b\n\t\tif last_diff == nil then\n\t\t\tlast_diff = diff\n\t\telseif last_diff ~= diff then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal last = s:sub(1,1)\n\tlocal i = 2\n\tlocal inc = true\n\twhile i <= #s do\n\t\tlocal c = s:sub(i,i)\n\t\tif inc then\n\t\t\tif c < last then\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\tif c > last then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\tlast = c\n\t\tinc = not inc\n\t\ti = i + 1\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local len = #s\n    local i = 1\n    local j = 2\n    local k = 3\n    local l = 4\n    while l <= len do\n        if s:sub(i, j) == s:sub(k, l) then\n            return false\n        end\n        i = i + 1\n        j = j + 1\n        k = k + 1\n        l = l + 1\n    end\n    return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    local k = 1\n    local l = l - 1\n    local flag = true\n    while i < j do\n        if s:sub(i, i) == s:sub(j, j) then\n            i = i + 1\n            j = j - 1\n        else\n            flag = false\n            break\n        end\n    end\n    if flag then\n        return true\n    end\n    flag = true\n    while k < l do\n        if s:sub(k, k) == s:sub(l, l) then\n            k = k + 1\n            l = l - 1\n        else\n            flag = false\n            break\n        end\n    end\n    if flag then\n        return true\n    end\n    return false\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1,1))\n  local increasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i,i))\n    if increasing then\n      if digit < last_digit then\n        increasing = false\n      elseif digit == last_digit then\n        return false\n      end\n    else\n      if digit > last_digit then\n        return false\n      elseif digit == last_digit then\n        return false\n      end\n    end\n    last_digit = digit\n  end\n  return true\nend",
    "  local digits = get_digits(n)\n  local len = #digits\n  local i = 1\n  while i < len do\n    if digits[i] == digits[i+1] then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal i = 1\n\tlocal j = len\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local str = tostring(n)\n  local len = #str\n  local i = 1\n  while i < len do\n    if str:sub(i, i) == str:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tfor i = 1, l - 1 do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_diff = 0\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    local diff = c - last\n    if diff == 0 then\n      return false\n    end\n    if last_diff ~= 0 and diff ~= last_diff then\n      return false\n    end\n    last_diff = diff\n    last = c\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal i = 1\n\twhile i <= #s - 1 do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local n_digits = {}\n  for i = 1, n_len do\n    n_digits[i] = tonumber(n_str:sub(i, i))\n  end\n  local n_digits_len = #n_digits\n  local is_undulating = true\n  for i = 1, n_digits_len - 2 do\n    if n_digits[i] == n_digits[i + 1] then\n      is_undulating = false\n      break\n    end\n  end\n  return is_undulating\nend",
    "  local str = tostring(n)\n  local len = #str\n  local i = 1\n  local j = len\n  local is_undulating = true\n  while i <= len and is_undulating do\n    if str:sub(i, i) == str:sub(j, j) then\n      is_undulating = false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return is_undulating\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  local l = 4\n  while l <= len do\n    if s:sub(i, j) > s:sub(k, l) then\n      return false\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n    l = l + 1\n  end\n  return true\nend",
    "  local n = tostring(n)\n  local last = n:sub(1, 1)\n  local last_diff = 0\n  local diff\n  for i = 2, #n do\n    diff = tonumber(n:sub(i, i)) - tonumber(last)\n    if diff == 0 then\n      return false\n    end\n    if last_diff == 0 then\n      last_diff = diff\n    elseif last_diff ~= diff then\n      return false\n    end\n    last = n:sub(i, i)\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_diff = nil\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    local diff = c - last\n    if last_diff and diff ~= last_diff then\n      return false\n    end\n    last_diff = diff\n    last = c\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    while i < l do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal i = 1\n\tlocal last_digit = tonumber(s:sub(i, i))\n\tlocal last_diff = 0\n\ti = i + 1\n\twhile i <= len do\n\t\tlocal digit = tonumber(s:sub(i, i))\n\t\tlocal diff = digit - last_digit\n\t\tif diff == 0 then\n\t\t\treturn false\n\t\tend\n\t\tif last_diff ~= 0 and diff ~= last_diff then\n\t\t\treturn false\n\t\tend\n\t\tlast_diff = diff\n\t\tlast_digit = digit\n\t\ti = i + 1\n\tend\n\treturn true\nend",
    "  local digits = to_digits(n)\n  local last_digit = digits[1]\n  local last_diff = 0\n  for i = 2, #digits do\n    local digit = digits[i]\n    local diff = digit - last_digit\n    if diff == 0 then\n      return false\n    end\n    if last_diff == 0 then\n      last_diff = diff\n    elseif last_diff ~= diff then\n      return false\n    end\n    last_digit = digit\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local i = 1\n  while i < #s do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal k = 1\n\tlocal m = 1\n\twhile i <= l do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\t\tif i > l then\n\t\t\tbreak\n\t\tend\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\t\tif i > l then\n\t\t\tbreak\n\t\tend\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\t\tif i > l then\n\t\t\tbreak\n\t\tend\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\t\tif i > l then\n\t\t\tbreak\n\t\tend\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\t\tif i > l then\n\t\t\tbreak\n\t\tend\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\t\tif i > l then\n\t\t\tbreak\n\t\tend\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\t\tif i > l then\n\t\t\tbreak\n\t\tend\n\t",
    "    local s = tostring(n)\n    local l = #s\n    for i = 1, l - 1 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  local j = len\n  while i < j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal i = 1\n\tlocal last_digit = tonumber(s:sub(i, i))\n\tlocal last_diff = 0\n\ti = i + 1\n\twhile i <= len do\n\t\tlocal digit = tonumber(s:sub(i, i))\n\t\tlocal diff = digit - last_digit\n\t\tif diff == 0 then\n\t\t\treturn false\n\t\tend\n\t\tif last_diff ~= 0 and diff ~= last_diff then\n\t\t\treturn false\n\t\tend\n\t\tlast_diff = diff\n\t\tlast_digit = digit\n\t\ti = i + 1\n\tend\n\treturn true\nend",
    "\tlocal str = tostring(n)\n\tlocal len = #str\n\tlocal i = 1\n\twhile i < len do\n\t\tif str:sub(i, i) == str:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 1 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = 2\n    while j <= l do\n        if s:sub(i, i) == s:sub(j, j) then\n            return false\n        end\n        i = i + 1\n        j = j + 1\n    end\n    return true\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = 1\n  while i <= #digits - 1 do\n    if digits[i] == digits[i + 1] then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  local last = s:sub(i, i)\n  local last_diff = 0\n  local diff = 0\n  while i < len do\n    i = i + 1\n    local c = s:sub(i, i)\n    diff = c - last\n    if diff == 0 then\n      return false\n    end\n    if last_diff == 0 then\n      last_diff = diff\n    elseif last_diff * diff < 0 then\n      last_diff = diff\n    else\n      return false\n    end\n    last = c\n  end\n  return true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local is_undulating = true\n  for i = 1, n_len - 2 do\n    local a, b, c = tonumber(n_str:sub(i, i)), tonumber(n_str:sub(i + 1, i + 1)), tonumber(n_str:sub(i + 2, i + 2))\n    if (a < b and b < c) or (a > b and b > c) then\n      is_undulating = false\n      break\n    end\n  end\n  return is_undulating\nend",
    "\tlocal str = tostring(n)\n\tlocal len = #str\n\tfor i = 1, len - 1 do\n\t\tif str:sub(i, i) == str:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  local last_diff = nil\n  while k <= l do\n    local d1 = tonumber(s:sub(i, i))\n    local d2 = tonumber(s:sub(j, j))\n    local d3 = tonumber(s:sub(k, k))\n    local diff1 = d2 - d1\n    local diff2 = d3 - d2\n    if diff1 == 0 or diff2 == 0 then\n      return false\n    end\n    if last_diff == nil then\n      last_diff = diff1\n    elseif last_diff * diff1 < 0 then\n      last_diff = diff2\n    else\n      return false\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local i = 1\n  local j = 2\n  local k = 3\n  local is_undulating = true\n  while k <= n_len do\n    if n_str:sub(i, i) == n_str:sub(j, j) or n_str:sub(j, j) == n_str:sub(k, k) then\n      is_undulating = false\n      break\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return is_undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tfor i = 1, l - 1 do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1,1))\n  local is_increasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i,i))\n    if is_increasing then\n      if digit < last_digit then\n        is_increasing = false\n      elseif digit == last_digit then\n        return false\n      end\n    else\n      if digit > last_digit then\n        return false\n      elseif digit == last_digit then\n        return false\n      end\n    end\n    last_digit = digit\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_was_increasing = true\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    local is_increasing = c > last\n    if is_increasing == last_was_increasing then\n      return false\n    end\n    last = c\n    last_was_increasing = is_increasing\n  end\n  return true\nend",
    "    local last_digit = n % 10\n    n = n / 10\n    local is_increasing = true\n    while n > 0 do\n        local digit = n % 10\n        if is_increasing then\n            if digit > last_digit then\n                return false\n            end\n        else\n            if digit < last_digit then\n                return false\n            end\n        end\n        last_digit = digit\n        n = n / 10\n        is_increasing = not is_increasing\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local k = 1\n  local l = l - 1\n  while i <= j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    if s:sub(k, k) ~= s:sub(l, l) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n    k = k + 1\n    l = l - 1\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    local k = 1\n    local l = l - 1\n    while i <= j do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            return false\n        end\n        if s:sub(k, k) ~= s:sub(l, l) then\n            return false\n        end\n        i = i + 1\n        j = j - 1\n        k = k + 1\n        l = l - 1\n    end\n    return true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local is_undulating = true\n  for i = 1, n_len - 2 do\n    local first_digit = tonumber(n_str:sub(i, i))\n    local second_digit = tonumber(n_str:sub(i + 1, i + 1))\n    local third_digit = tonumber(n_str:sub(i + 2, i + 2))\n    if first_digit == second_digit or second_digit == third_digit then\n      is_undulating = false\n      break\n    end\n  end\n  return is_undulating\nend",
    "    local str = tostring(n)\n    local len = #str\n    local last_digit = tonumber(str:sub(1, 1))\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, len do\n        local digit = tonumber(str:sub(i, i))\n        if digit > last_digit then\n            is_decreasing = false\n        elseif digit < last_digit then\n            is_increasing = false\n        end\n        last_digit = digit\n    end\n    return is_increasing or is_decreasing\nend",
    "\tlocal digits = get_digits(n)\n\tlocal len = #digits\n\tlocal last_digit = digits[len]\n\tlocal last_diff = 0\n\tfor i = len - 1, 1, -1 do\n\t\tlocal digit = digits[i]\n\t\tlocal diff = last_digit - digit\n\t\tif diff == last_diff then\n\t\t\treturn false\n\t\tend\n\t\tlast_diff = diff\n\t\tlast_digit = digit\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local last_diff = nil\n  while i < j do\n    local d1 = tonumber(s:sub(i, i))\n    local d2 = tonumber(s:sub(j, j))\n    local diff = d1 - d2\n    if last_diff and diff ~= last_diff then\n      return false\n    end\n    last_diff = diff\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 1 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n  end\n  return true\nend",
    "  local str = tostring(n)\n  local len = #str\n  local i = 1\n  local j = len\n  local last = nil\n  while i < j do\n    local a = tonumber(str:sub(i, i))\n    local b = tonumber(str:sub(j, j))\n    if a < b then\n      if last == nil or last == \">\" then\n        last = \"<\"\n      else\n        return false\n      end\n    elseif a > b then\n      if last == nil or last == \"<\" then\n        last = \">\"\n      else\n        return false\n      end\n    else\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local last = n % 10\n  n = math.floor(n / 10)\n  local current = n % 10\n  n = math.floor(n / 10)\n  local is_increasing = current > last\n  while n > 0 do\n    last = current\n    current = n % 10\n    n = math.floor(n / 10)\n    if is_increasing and current > last then\n      return false\n    elseif not is_increasing and current < last then\n      return false\n    end\n    is_increasing = not is_increasing\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local increasing = true\n  local decreasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    if digit > last_digit then\n      decreasing = false\n    elseif digit < last_digit then\n      increasing = false\n    end\n    last_digit = digit\n  end\n  return increasing or decreasing\nend",
    "    local s = tostring(n)\n    local len = #s\n    local i = 1\n    local j = len\n    while i < j do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            return false\n        end\n        i = i + 1\n        j = j - 1\n    end\n    return true\nend",
    "    local n_str = tostring(n)\n    local n_len = #n_str\n    local is_undulating = true\n    for i = 1, n_len - 1 do\n        if (n_str:sub(i, i) == n_str:sub(i + 1, i + 1)) then\n            is_undulating = false\n            break\n        end\n    end\n    return is_undulating\nend",
    "\tlocal n_str = tostring(n)\n\tlocal n_len = #n_str\n\tlocal n_digits = {}\n\tfor i = 1, n_len do\n\t\tn_digits[i] = tonumber(n_str:sub(i, i))\n\tend\n\tlocal is_undulating = true\n\tlocal is_increasing = true\n\tfor i = 1, n_len - 1 do\n\t\tif n_digits[i] == n_digits[i + 1] then\n\t\t\tis_undulating = false\n\t\t\tbreak\n\t\tend\n\t\tif is_increasing then\n\t\t\tif n_digits[i] > n_digits[i + 1] then\n\t\t\t\tis_increasing = false\n\t\t\tend\n\t\telse\n\t\t\tif n_digits[i] < n_digits[i + 1] then\n\t\t\t\tis_undulating = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn is_undulating\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  while i < len do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    if digit > last_digit then\n      is_decreasing = false\n    elseif digit < last_digit then\n      is_increasing = false\n    end\n    last_digit = digit\n  end\n  return is_increasing or is_decreasing\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  while k <= l do\n    if s:sub(i, i) == s:sub(j, j) then\n      return false\n    end\n    if s:sub(i, i) == s:sub(k, k) then\n      return false\n    end\n    if s:sub(j, j) == s:sub(k, k) then\n      return false\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local last_diff = nil\n  while i < j do\n    local diff = s:byte(i) - s:byte(j)\n    if last_diff and diff ~= last_diff then\n      return false\n    end\n    last_diff = diff\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local k = 1\n  while i < j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn true\nend",
    "  local digits = get_digits(n)\n  local prev_sign = nil\n  for i = 1, #digits - 1 do\n    local sign = digits[i] - digits[i + 1]\n    if sign == 0 then\n      return false\n    end\n    if prev_sign ~= nil and sign ~= prev_sign then\n      return false\n    end\n    prev_sign = sign\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  while k <= l do\n    if s:sub(i,i) == s:sub(j,j) or s:sub(j,j) == s:sub(k,k) then\n      return false\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 3\n\twhile k <= l do\n\t\tif s:sub(i, i) == s:sub(j, j) or s:sub(j, j) == s:sub(k, k) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j + 1\n\t\tk = k + 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = 1\n  local k = 1\n  local a = {}\n  local b = {}\n  local c = {}\n  while i <= l do\n    a[j] = tonumber(s:sub(i, i))\n    i = i + 1\n    j = j + 1\n  end\n  while k < l do\n    b[k] = a[k] - a[k + 1]\n    k = k + 1\n  end\n  local m = 1\n  local n = 1\n  local o = 1\n  while m < l - 1 do\n    c[n] = b[m] - b[m + 1]\n    m = m + 1\n    n = n + 1\n  end\n  while o < l - 2 do\n    if c[o] ~= 0 then\n      return false\n    end\n    o = o + 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local increasing = true\n  local decreasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    if digit > last_digit then\n      decreasing = false\n    elseif digit < last_digit then\n      increasing = false\n    end\n    last_digit = digit\n  end\n  return increasing or decreasing\nend",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_diff = 0\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    local diff = c - last\n    if diff == 0 then\n      return false\n    end\n    if last_diff ~= 0 and diff ~= last_diff then\n      return false\n    end\n    last_diff = diff\n    last = c\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_was_odd = (last % 2) == 1\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    local is_odd = (c % 2) == 1\n    if is_odd == last_was_odd then\n      return false\n    end\n    last_was_odd = is_odd\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local n_digits = {}\n  for i = 1, n_len do\n    n_digits[i] = tonumber(n_str:sub(i, i))\n  end\n  local is_undulating = true\n  local is_increasing = true\n  for i = 1, n_len - 1 do\n    if n_digits[i] > n_digits[i + 1] then\n      is_increasing = false\n    elseif n_digits[i] < n_digits[i + 1] then\n      is_increasing = true\n    end\n    if is_increasing then\n      if n_digits[i] > n_digits[i + 1] then\n        is_undulating = false\n      end\n    else\n      if n_digits[i] < n_digits[i + 1] then\n        is_undulating = false\n      end\n    end\n  end\n  return is_undulating\nend",
    "\tlocal n_str = tostring(n)\n\tlocal n_len = #n_str\n\tlocal last_digit = tonumber(n_str:sub(1, 1))\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, n_len do\n\t\tlocal digit = tonumber(n_str:sub(i, i))\n\t\tif is_increasing then\n\t\t\tif digit < last_digit then\n\t\t\t\tis_increasing = false\n\t\t\tend\n\t\tend\n\t\tif is_decreasing then\n\t\t\tif digit > last_digit then\n\t\t\t\tis_decreasing = false\n\t\t\tend\n\t\tend\n\t\tlast_digit = digit\n\tend\n\treturn is_increasing or is_decreasing\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    while i < l do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    if digit > last_digit then\n      is_decreasing = false\n    elseif digit < last_digit then\n      is_increasing = false\n    end\n    last_digit = digit\n  end\n  return is_increasing or is_decreasing\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local last = nil\n  while i <= j do\n    local a = tonumber(s:sub(i, i))\n    local b = tonumber(s:sub(j, j))\n    if a == b then\n      if last == nil then\n        last = a\n      elseif last ~= a then\n        return false\n      end\n    elseif a ~= b then\n      if last == nil then\n        last = a\n      elseif last ~= a then\n        return false\n      end\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_was_increasing = true\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    if c == last then\n      return false\n    elseif c < last then\n      if not last_was_increasing then\n        return false\n      end\n      last_was_increasing = false\n    else\n      if last_was_increasing then\n        return false\n      end\n      last_was_increasing = true\n    end\n    last = c\n  end\n  return true\nend",
    "  local str = tostring(n)\n  local len = #str\n  for i = 1, len - 2 do\n    if str:sub(i, i) == str:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "    local n_str = tostring(n)\n    local n_len = #n_str\n    local is_undulating = true\n    local i = 1\n    while i < n_len do\n        local a = tonumber(n_str:sub(i, i))\n        local b = tonumber(n_str:sub(i + 1, i + 1))\n        if a == b then\n            is_undulating = false\n            break\n        end\n        i = i + 1\n    end\n    return is_undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal last_digit = tonumber(s:sub(1, 1))\n\tlocal is_increasing = true\n\tfor i = 2, len do\n\t\tlocal digit = tonumber(s:sub(i, i))\n\t\tif is_increasing then\n\t\t\tif digit > last_digit then\n\t\t\t\treturn false\n\t\t\telseif digit < last_digit then\n\t\t\t\tis_increasing = false\n\t\t\tend\n\t\telse\n\t\t\tif digit < last_digit then\n\t\t\t\treturn false\n\t\t\telseif digit > last_digit then\n\t\t\t\tis_increasing = true\n\t\t\tend\n\t\tend\n\t\tlast_digit = digit\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "    local str = tostring(n)\n    local len = #str\n    local is_undulating = true\n    for i = 1, len - 2 do\n        if str:sub(i, i) == str:sub(i + 1, i + 1) then\n            is_undulating = false\n            break\n        end\n    end\n    return is_undulating\nend",
    "    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    local i = 1\n    while i < #digits do\n        if digits[i] == digits[i + 1] then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "    local s = tostring(n)\n    local last_digit = tonumber(s:sub(1, 1))\n    local increasing = true\n    for i = 2, #s do\n        local digit = tonumber(s:sub(i, i))\n        if increasing then\n            if digit > last_digit then\n                return false\n            end\n        else\n            if digit < last_digit then\n                return false\n            end\n        end\n        increasing = not increasing\n        last_digit = digit\n    end\n    return true\nend",
    "\tlocal s = tostring(n)\n\tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i) == s:sub(i + 2, i + 2) then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tfor i = 1, l - 1 do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal i = 1\n\tlocal j = #s\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal i = 1\n\tlocal j = #s\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local i = 1\n  while i < #s do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local str = tostring(n)\n  local len = #str\n  local last = tonumber(str:sub(1, 1))\n  local last_was_increasing = true\n  for i = 2, len do\n    local digit = tonumber(str:sub(i, i))\n    if digit == last then\n      return false\n    end\n    if last_was_increasing then\n      if digit < last then\n        last_was_increasing = false\n      end\n    else\n      if digit > last then\n        return false\n      end\n    end\n    last = digit\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal prev = s:sub(1, 1)\n\tlocal prev_diff = 0\n\tlocal curr_diff = 0\n\tlocal prev_diff_sign = 0\n\tlocal curr_diff_sign = 0\n\tfor i = 2, #s do\n\t\tcurr_diff = tonumber(s:sub(i, i)) - tonumber(prev)\n\t\tcurr_diff_sign = curr_diff / math.abs(curr_diff)\n\t\tif prev_diff_sign ~= 0 and curr_diff_sign ~= 0 and prev_diff_sign ~= curr_diff_sign then\n\t\t\treturn true\n\t\tend\n\t\tprev_diff_sign = curr_diff_sign\n\t\tprev_diff = curr_diff\n\t\tprev = s:sub(i, i)\n\tend\n\treturn false\nend",
    "    local str = tostring(n)\n    local len = #str\n    local prev = tonumber(str:sub(1, 1))\n    local curr = tonumber(str:sub(2, 2))\n    local next = tonumber(str:sub(3, 3))\n    local i = 2\n    local inc = true\n    local dec = true\n    while i < len do\n        if inc and curr < next then\n            inc = false\n        elseif dec and curr > next then\n            dec = false\n        end\n        if not inc and not dec then\n            return false\n        end\n        prev = curr\n        curr = next\n        next = tonumber(str:sub(i + 2, i + 2))\n        i = i + 1\n    end\n    return true\nend",
    "\tlocal s = tostring(n)\n\tlocal last_digit = tonumber(s:sub(1,1))\n\tlocal increasing = true\n\tfor i = 2, #s do\n\t\tlocal digit = tonumber(s:sub(i,i))\n\t\tif increasing then\n\t\t\tif digit < last_digit then\n\t\t\t\tincreasing = false\n\t\t\telseif digit == last_digit then\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\tif digit > last_digit then\n\t\t\t\treturn false\n\t\t\telseif digit == last_digit then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\tlast_digit = digit\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  local is_odd = true\n  while i < len do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    if is_odd then\n      if s:sub(i, i) > s:sub(i + 1, i + 1) then\n        is_odd = false\n      elseif s:sub(i, i) < s:sub(i + 1, i + 1) then\n        return false\n      end\n    else\n      if s:sub(i, i) < s:sub(i + 1, i + 1) then\n        is_odd = true\n      elseif s:sub(i, i) > s:sub(i + 1, i + 1) then\n        return false\n      end\n    end\n    i = i + 1\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local len = #s\n    local i = 1\n    while i < len do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  local last_diff = nil\n  while i < len do\n    local cur_diff = s:sub(i, i) - s:sub(i + 1, i + 1)\n    if last_diff ~= nil and last_diff * cur_diff > 0 then\n      return false\n    end\n    last_diff = cur_diff\n    i = i + 1\n  end\n  return true\nend",
    "\tlocal digits = {}\n\tlocal last_digit = nil\n\tlocal last_digit_type = nil\n\tlocal undulating = true\n\tfor digit in tostring(n):gmatch('%d') do\n\t\tdigit = tonumber(digit)\n\t\tif last_digit then\n\t\t\tif last_digit_type == 'increasing' then\n\t\t\t\tif digit < last_digit then\n\t\t\t\t\tlast_digit_type = 'decreasing'\n\t\t\t\telseif digit > last_digit then\n\t\t\t\t\tundulating = false\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\telseif last_digit_type == 'decreasing' then\n\t\t\t\tif digit > last_digit then\n\t\t\t\t\tlast_digit_type = 'increasing'\n\t\t\t\telseif digit < last_digit then\n\t\t\t\t\tundulating = false\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\tlast_digit_type = 'increasing'\n\t\tend\n\t\tlast_digit = digit\n\tend\n\treturn undulating\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local d = 0\n  local e = 0\n  local f = 0\n  while i < j do\n    d = tonumber(s:sub(i, i))\n    e = tonumber(s:sub(j, j))\n    if d ~= e then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local str = tostring(n)\n  local len = #str\n  local i = 1\n  local j = len\n  while i < j do\n    if str:sub(i, i) ~= str:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local str = tostring(n)\n  local len = #str\n  for i = 1, len - 1 do\n    if str:sub(i, i) == str:sub(i + 1, i + 1) then\n      return false\n    end\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local n_digits = {}\n  for i = 1, n_len do\n    n_digits[i] = tonumber(n_str:sub(i, i))\n  end\n  local is_undulating = true\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 1, n_len - 1 do\n    if n_digits[i] < n_digits[i + 1] then\n      is_decreasing = false\n    elseif n_digits[i] > n_digits[i + 1] then\n      is_increasing = false\n    end\n    if not is_increasing and not is_decreasing then\n      is_undulating = false\n      break\n    end\n  end\n  return is_undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal i = 1\n\twhile i < len do\n\t\tlocal d1 = tonumber(s:sub(i, i))\n\t\tlocal d2 = tonumber(s:sub(i + 1, i + 1))\n\t\tif d1 > d2 then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local i = 1\n  local j = #s\n  while i < j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tfor i = 1, #s - 1 do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_diff = nil\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    local diff = c - last\n    if last_diff == nil then\n      last_diff = diff\n    elseif last_diff ~= diff then\n      return false\n    end\n    last = c\n  end\n  return true\nend",
    "    local n_str = tostring(n)\n    local n_len = #n_str\n    local is_undulating = true\n    for i = 1, n_len - 2 do\n        if n_str:sub(i, i) == n_str:sub(i + 2, i + 2) then\n            is_undulating = false\n            break\n        end\n    end\n    return is_undulating\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local prev = s:sub(i, i)\n  local curr = s:sub(j, j)\n  while i < j do\n    if prev == curr then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n    prev = curr\n    curr = s:sub(j, j)\n  end\n  return true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local i = 1\n  local j = n_len\n  local is_undulating = true\n  while i < j do\n    if n_str:sub(i, i) ~= n_str:sub(j, j) then\n      is_undulating = false\n      break\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return is_undulating\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  local last_digit = tonumber(s:sub(1, 1))\n  local last_diff = 0\n  while i < len do\n    local digit = tonumber(s:sub(i + 1, i + 1))\n    local diff = digit - last_digit\n    if diff == 0 then\n      return false\n    end\n    if last_diff == 0 then\n      last_diff = diff\n    elseif last_diff ~= diff then\n      return false\n    end\n    last_digit = digit\n    i = i + 1\n  end\n  return true\nend",
    "  local digits = to_digits(n)\n  local even = true\n  for i = 1, #digits - 1 do\n    if even then\n      if digits[i] < digits[i + 1] then\n        return false\n      end\n    else\n      if digits[i] > digits[i + 1] then\n        return false\n      end\n    end\n    even = not even\n  end\n  return true\nend",
    "    local n_str = tostring(n)\n    local n_len = #n_str\n    local is_undulating = true\n    for i = 1, n_len - 1 do\n        local a = tonumber(n_str:sub(i, i))\n        local b = tonumber(n_str:sub(i + 1, i + 1))\n        if a == b then\n            is_undulating = false\n            break\n        end\n    end\n    return is_undulating\nend",
    "\tlocal str = tostring(n)\n\tlocal len = #str\n\tlocal i = 1\n\twhile i <= len - 1 do\n\t\tif str:sub(i, i) == str:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local last_digit = s:sub(1, 1)\n    local last_digit_type = tonumber(last_digit) % 2\n    for i = 2, #s do\n        local digit = s:sub(i, i)\n        local digit_type = tonumber(digit) % 2\n        if digit_type == last_digit_type then\n            return false\n        end\n        last_digit_type = digit_type\n    end\n    return true\nend",
    "  local digits = to_digits(n)\n  local last_digit = digits[1]\n  local last_diff = 0\n  for i = 2, #digits do\n    local digit = digits[i]\n    local diff = digit - last_digit\n    if diff == 0 then\n      return false\n    elseif diff == last_diff then\n      return false\n    end\n    last_digit = digit\n    last_diff = diff\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal last = s:sub(1,1)\n\tlocal last_diff = 0\n\tfor i = 2, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal diff = c - last\n\t\tif diff == 0 then\n\t\t\treturn false\n\t\tend\n\t\tif last_diff == 0 then\n\t\t\tlast_diff = diff\n\t\telseif last_diff ~= diff then\n\t\t\treturn false\n\t\tend\n\t\tlast = c\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 3\n\tlocal last = s:sub(1, 1)\n\tlocal curr = s:sub(2, 2)\n\tlocal next = s:sub(3, 3)\n\twhile k <= l do\n\t\tif last == curr and curr == next then\n\t\t\treturn false\n\t\tend\n\t\tif last == curr then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\tk = k + 1\n\t\t\tlast = s:sub(i, i)\n\t\t\tcurr = s:sub(j, j)\n\t\t\tnext = s:sub(k, k)\n\t\telseif curr == next then\n\t\t\tj = j + 1\n\t\t\tk = k + 1\n\t\t\tcurr = s:sub(j, j)\n\t\t\tnext = s:sub(k, k)\n\t\telse\n\t\t\ti = j\n\t\t\tj = k\n\t\t\tk = k + 1\n\t\t\tlast = curr\n\t\t\tcurr = next\n\t\t\tnext = s:sub(k, k)\n\t\tend\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local last_diff = nil\n  while i < j do\n    local a = tonumber(s:sub(i, i))\n    local b = tonumber(s:sub(j, j))\n    local diff = a - b\n    if last_diff and diff ~= last_diff then\n      return false\n    end\n    last_diff = diff\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "    local n_str = tostring(n)\n    local n_len = #n_str\n    local i = 1\n    while i < n_len do\n        if n_str:sub(i, i) == n_str:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  while i < j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = 2\n    local k = 3\n    local last = 0\n    local curr = 0\n    local next = 0\n    local is_undulating = true\n    while i < l do\n        last = tonumber(s:sub(i, i))\n        curr = tonumber(s:sub(j, j))\n        next = tonumber(s:sub(k, k))\n        if last < curr and curr > next then\n            is_undulating = false\n            break\n        end\n        i = i + 1\n        j = j + 1\n        k = k + 1\n    end\n    return is_undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal last = s:sub(1,1)\n\tlocal last_diff = nil\n\tfor i = 2, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal diff = c - last\n\t\tif last_diff == nil then\n\t\t\tlast_diff = diff\n\t\telseif last_diff == diff then\n\t\t\treturn false\n\t\telse\n\t\t\tlast_diff = diff\n\t\tend\n\t\tlast = c\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local i = 1\n  while i < #s do\n    if s:sub(i,i) == s:sub(i+1,i+1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local i = 1\n  while i < #s do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  while k <= l do\n    if s:sub(i,i) ~= s:sub(j,j) then\n      return false\n    end\n    if s:sub(j,j) ~= s:sub(k,k) then\n      return false\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    while i < l do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    while i < l do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    digits[#digits + 1] = tonumber(d)\n  end\n  local i = 1\n  while i < #digits do\n    if digits[i] == digits[i + 1] then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = 2\n    local k = 3\n    while k <= l do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            return false\n        end\n        if s:sub(j, j) ~= s:sub(k, k) then\n            return false\n        end\n        i = i + 1\n        j = j + 1\n        k = k + 1\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_was_increasing = nil\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    local is_increasing = c > last\n    if last_was_increasing == nil then\n      last_was_increasing = is_increasing\n    elseif last_was_increasing ~= is_increasing then\n      return true\n    end\n    last = c\n  end\n  return false\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    while i < l do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "  local s = tostring(n)\n  local i = 1\n  while i < #s do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "    local s = tostring(n)\n    local i = 1\n    while i < #s do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local last_diff = nil\n  while i < j do\n    local a = tonumber(s:sub(i, i))\n    local b = tonumber(s:sub(j, j))\n    local diff = a - b\n    if last_diff and diff ~= last_diff then\n      return false\n    end\n    last_diff = diff\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tfor i = 1, l - 2 do\n\t\tif s:sub(i, i) == s:sub(i + 2, i + 2) then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  while i < len do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local str = tostring(n)\n  local len = #str\n  local last_digit = tonumber(str:sub(1, 1))\n  local is_increasing = true\n  for i = 2, len do\n    local digit = tonumber(str:sub(i, i))\n    if digit == last_digit then\n      return false\n    end\n    if is_increasing then\n      if digit < last_digit then\n        is_increasing = false\n      end\n    else\n      if digit > last_digit then\n        return false\n      end\n    end\n    last_digit = digit\n  end\n  return true\nend",
    "  local s = tostring(n)\n  for i = 1, #s - 1 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  local j = len\n  local last_diff = nil\n  while i < j do\n    local a = tonumber(s:sub(i, i))\n    local b = tonumber(s:sub(j, j))\n    local diff = a - b\n    if last_diff and diff ~= last_diff then\n      return false\n    end\n    last_diff = diff\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 3\n\twhile k <= l do\n\t\tif s:sub(i,i) == s:sub(k,k) then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\t\tj = j + 1\n\t\tk = k + 1\n\tend\n\treturn false\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local i = 1\n  local j = 2\n  local k = 3\n  local is_undulating = true\n  while k <= n_len do\n    if n_str:sub(i, i) == n_str:sub(j, j) or n_str:sub(j, j) == n_str:sub(k, k) then\n      is_undulating = false\n      break\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return is_undulating\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local k = 1\n  local l = l - 1\n  while i <= j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    if s:sub(k, k) ~= s:sub(l, l) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n    k = k + 1\n    l = l - 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal last = s:sub(1, 1)\n\tlocal last_was_increasing = false\n\tfor i = 2, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tif c < last then\n\t\t\tif last_was_increasing then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlast_was_increasing = false\n\t\telseif c > last then\n\t\t\tif not last_was_increasing then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlast_was_increasing = true\n\t\tend\n\t\tlast = c\n\tend\n\treturn true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local is_undulating = true\n  for i = 1, n_len - 2 do\n    if n_str:sub(i, i) == n_str:sub(i + 2, i + 2) then\n      is_undulating = false\n      break\n    end\n  end\n  return is_undulating\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local last_c = nil\n  local last_d = nil\n  while i <= j do\n    local c = s:sub(i, i)\n    local d = s:sub(j, j)\n    if c ~= d then\n      return false\n    end\n    if last_c and last_d then\n      if last_c == last_d and c ~= last_c then\n        return false\n      end\n    end\n    last_c = c\n    last_d = d\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local i = 1\n  while i < n_len do\n    if n_str:sub(i, i) == n_str:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  local undulating = true\n  while k <= l do\n    if s:sub(i, i) == s:sub(j, j) then\n      undulating = false\n      break\n    end\n    if s:sub(j, j) == s:sub(k, k) then\n      undulating = false\n      break\n    end\n    if s:sub(i, i) > s:sub(j, j) then\n      if s:sub(j, j) > s:sub(k, k) then\n        undulating = false\n        break\n      end\n    else\n      if s:sub(j, j) < s:sub(k, k) then\n        undulating = false\n        break\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal k = l - 1\n\tlocal a = {}\n\tlocal b = {}\n\twhile i <= k do\n\t\ta[i] = tonumber(s:sub(i, i))\n\t\tb[i] = tonumber(s:sub(j, j))\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\tfor i = 1, k do\n\t\tif a[i] ~= b[i] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    while i < j do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            return false\n        end\n        i = i + 1\n        j = j - 1\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  local j = len\n  local last_diff = nil\n  while i < j do\n    local diff = s:sub(i,i) - s:sub(j,j)\n    if last_diff == nil then\n      last_diff = diff\n    elseif last_diff ~= diff then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    local k = 1\n    local undulating = true\n    while i < j and undulating do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            undulating = false\n        end\n        i = i + 1\n        j = j - 1\n        k = k + 1\n    end\n    return undulating\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  local a = tonumber(s:sub(i, i))\n  local b = tonumber(s:sub(j, j))\n  local c = tonumber(s:sub(k, k))\n  local d = a - b\n  local e = b - c\n  while k <= l do\n    if d ~= e then\n      return false\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n    a = tonumber(s:sub(i, i))\n    b = tonumber(s:sub(j, j))\n    c = tonumber(s:sub(k, k))\n    d = a - b\n    e = b - c\n  end\n  return true\nend",
    "\tlocal n_str = tostring(n)\n\tlocal n_len = #n_str\n\tlocal n_digits = {}\n\tfor i = 1, n_len do\n\t\tn_digits[i] = tonumber(n_str:sub(i, i))\n\tend\n\tlocal is_undulating = true\n\tfor i = 1, n_len - 1 do\n\t\tif (n_digits[i] % 2 == 0 and n_digits[i + 1] % 2 == 0) or (n_digits[i] % 2 == 1 and n_digits[i + 1] % 2 == 1) then\n\t\t\tis_undulating = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn is_undulating\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local is_undulating = true\n  for i = 1, n_len - 2 do\n    if (n_str:sub(i, i) == n_str:sub(i + 2, i + 2)) then\n      is_undulating = false\n      break\n    end\n  end\n  return is_undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal last_c = s:sub(1, 1)\n\tlocal last_d = 0\n\tfor i = 2, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tlocal d = tonumber(c) - tonumber(last_c)\n\t\tif d == 0 then\n\t\t\treturn false\n\t\tend\n\t\tif d == last_d then\n\t\t\treturn false\n\t\tend\n\t\tlast_c = c\n\t\tlast_d = d\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 1 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local last_diff = 0\n  local diff = 0\n  while i < j do\n    diff = s:byte(i) - s:byte(j)\n    if diff == 0 then\n      return false\n    end\n    if last_diff ~= 0 and diff ~= last_diff then\n      return false\n    end\n    last_diff = diff\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local i = 1\n  while i < #s do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "\tlocal str = tostring(n)\n\tlocal len = #str\n\tlocal last_digit = tonumber(str:sub(len, len))\n\tlocal last_last_digit = tonumber(str:sub(len - 1, len - 1))\n\tlocal last_last_last_digit = tonumber(str:sub(len - 2, len - 2))\n\tif last_digit == last_last_digit then\n\t\treturn false\n\tend\n\tif last_digit > last_last_digit then\n\t\tif last_last_digit > last_last_last_digit then\n\t\t\treturn false\n\t\tend\n\telse\n\t\tif last_last_digit < last_last_last_digit then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local i = 1\n  local j = #s\n  local last = nil\n  while i < j do\n    local a = tonumber(s:sub(i, i))\n    local b = tonumber(s:sub(j, j))\n    if a == b then\n      return false\n    end\n    if last then\n      if last == a and b > a then\n        return false\n      end\n      if last == b and a > b then\n        return false\n      end\n    end\n    last = a\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "\tlocal digits = {}\n\tlocal last_digit = nil\n\tlocal last_diff = nil\n\tlocal diff = nil\n\tlocal undulating = true\n\tfor digit in tostring(n):gmatch(\"%d\") do\n\t\tdigit = tonumber(digit)\n\t\tif last_digit then\n\t\t\tdiff = digit - last_digit\n\t\t\tif last_diff then\n\t\t\t\tif diff == last_diff then\n\t\t\t\t\tundulating = false\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tlast_diff = diff\n\t\tend\n\t\tlast_digit = digit\n\tend\n\treturn undulating\nend",
    "  local digits = {}\n  for digit in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(digit))\n  end\n  local i = 1\n  while i < #digits do\n    if digits[i] == digits[i+1] then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend",
    "  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = 1\n  while i < #digits do\n    if digits[i] == digits[i + 1] then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal last_digit = tonumber(s:sub(1, 1))\n\tlocal last_diff = 0\n\tfor i = 2, #s do\n\t\tlocal digit = tonumber(s:sub(i, i))\n\t\tlocal diff = digit - last_digit\n\t\tif diff == 0 then\n\t\t\treturn false\n\t\tend\n\t\tif last_diff ~= 0 and diff ~= last_diff then\n\t\t\treturn false\n\t\tend\n\t\tlast_diff = diff\n\t\tlast_digit = digit\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  while i < j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i,i) == s:sub(i+1,i+1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local last_digit = s:sub(1, 1)\n    local last_diff = nil\n    for i = 2, #s do\n        local digit = s:sub(i, i)\n        local diff = digit - last_digit\n        if last_diff and last_diff ~= diff then\n            return false\n        end\n        last_diff = diff\n        last_digit = digit\n    end\n    return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 3\n\tlocal a, b, c\n\twhile k <= l do\n\t\ta = tonumber(s:sub(i, i))\n\t\tb = tonumber(s:sub(j, j))\n\t\tc = tonumber(s:sub(k, k))\n\t\tif a < b and b > c then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\t\tj = j + 1\n\t\tk = k + 1\n\tend\n\treturn false\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local prev = s:sub(1, 1)\n  local curr = s:sub(l, l)\n  local next = s:sub(2, 2)\n  while i < j do\n    if prev == curr then\n      return false\n    end\n    if next == curr then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n    prev = curr\n    curr = next\n    next = s:sub(i + 1, i + 1)\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    local k = 1\n    local m = l\n    local u = true\n    while i <= j do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            u = false\n            break\n        end\n        i = i + 1\n        j = j - 1\n    end\n    while k <= m do\n        if s:sub(k, k) ~= s:sub(m, m) then\n            u = false\n            break\n        end\n        k = k + 1\n        m = m - 1\n    end\n    return u\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "    local str = tostring(n)\n    local len = #str\n    local i = 1\n    local prev = tonumber(str:sub(i, i))\n    local next = tonumber(str:sub(i + 1, i + 1))\n    local is_increasing = prev < next\n    i = i + 1\n    while i <= len do\n        prev = next\n        next = tonumber(str:sub(i, i))\n        if is_increasing and prev > next then\n            return false\n        elseif not is_increasing and prev < next then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend",
    "\tlocal s = tostring(n)\n\tlocal last = s:sub(1, 1)\n\tlocal last_diff = nil\n\tfor i = 2, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tlocal diff = c - last\n\t\tif last_diff == nil then\n\t\t\tlast_diff = diff\n\t\telseif last_diff ~= diff then\n\t\t\treturn false\n\t\tend\n\t\tlast = c\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  while i < len do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1,1)\n  local last_was_increasing = nil\n  for i = 2, #s do\n    local c = s:sub(i,i)\n    if c == last then\n      return false\n    end\n    local is_increasing = c > last\n    if last_was_increasing ~= nil and last_was_increasing ~= is_increasing then\n      return false\n    end\n    last_was_increasing = is_increasing\n    last = c\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal i = 1\n\twhile i < #s do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal is_undulating = true\n\tfor i = 1, len - 2 do\n\t\tif s:sub(i, i) == s:sub(i + 2, i + 2) then\n\t\t\tis_undulating = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn is_undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal u = true\n\twhile i < j do\n\t\tif s:sub(i,i) ~= s:sub(j,j) then\n\t\t\tu = false\n\t\t\tbreak\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn u\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  while i < len do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local str = tostring(n)\n  local len = #str\n  local i = 1\n  local j = len\n  local prev = nil\n  while i <= j do\n    if str:sub(i, i) ~= str:sub(j, j) then\n      if prev and prev ~= str:sub(i, i) then\n        return false\n      end\n      prev = str:sub(i, i)\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local flag = true\n  while i < j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      flag = false\n      break\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return flag\nend"
  ]
}