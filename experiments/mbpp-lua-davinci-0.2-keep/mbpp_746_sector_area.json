{
  "name": "mbpp_746_sector_area",
  "language": "lua",
  "prompt": "-- Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nlocal function sector_area(r, a)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sector_area\n    lu.assertEquals(candidate(4, 45), 6.283185307179586)\n    lu.assertEquals(candidate(9, 45), 31.808625617596654)\n    lu.assertEquals(candidate(9, 361), None)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "\tif a > 360 then\n\t\treturn nil\n\tend\n\treturn (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r ^ 2 * a) / 2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r*r*a)/360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a/360)*math.pi*r*r\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "\tif a > 360 then\n\t\treturn nil\n\tend\n\treturn (a/360)*math.pi*r*r\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r*r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "  if a > 360 then\n    return nil\n  else\n    return (a/360)*math.pi*r^2\n  end\nend",
    "  if a > 360 then\n    return nil\n  end\n  return (a/360) * math.pi * r^2\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a/360)*math.pi*r^2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    end\n    return 0.5 * r * r * a\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "\tif a > 360 then\n\t\treturn nil\n\telse\n\t\treturn r * r * a / 360\n\tend\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a/360)*math.pi*r^2\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (math.pi * r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r*r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r*r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "\tif a > 360 then\n\t\treturn nil\n\telse\n\t\treturn r * r * a / 360\n\tend\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a/360) * math.pi * r^2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r^2\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a/360) * math.pi * r^2\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r*r\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r^2 * a) / 2\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r*r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r^2 * a) / 2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r*r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "\tif a > 360 then\n\t\treturn nil\n\telse\n\t\treturn (r*r*a)/360\n\tend\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r^2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a/360) * math.pi * r^2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "  if a > 360 then\n    return nil\n  else\n    return (a / 360) * math.pi * r * r\n  end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r^2 * a) / 2\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r^2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r^2 * a) / 2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r^2 * a) / 2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a/360)*math.pi*r*r\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r^2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r*r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r*r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r^2\n    end\nend",
    "  if a > 360 then\n    return nil\n  end\n  return (a / 360) * math.pi * r^2\nend",
    "    if a > 360 then return nil end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r^2 * a) / 2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r^2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r*r\n    end\nend",
    "    if a > 360 then return nil end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "\tif a > 360 then\n\t\treturn nil\n\telse\n\t\treturn (a/360)*math.pi*r*r\n\tend\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360) * math.pi * r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r^2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "\tif a > 360 then\n\t\treturn nil\n\telse\n\t\treturn (a / 360) * math.pi * r * r\n\tend\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * (r ^ 2)\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r^2 * a) / 2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r^2 * a) / 2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "\tif a > 360 then\n\t\treturn nil\n\telse\n\t\treturn (math.pi * r^2 * a) / 360\n\tend\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a/360)*math.pi*r*r\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r^2 * a) / 2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "\tif a > 360 then return nil end\n\treturn (a / 360) * math.pi * r^2\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "  if a > 360 then\n    return nil\n  else\n    return (r^2 * a) / 2\n  end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r*r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360) * math.pi * r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r^2 * a) / 2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r^2 * a) / 2\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r^2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (math.pi * r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (math.pi * r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a/360)*math.pi*r^2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a/360)*math.pi*r^2\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (r * r * a) / 360\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a/360) * math.pi * r^2\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (r * r * a) / 360\n    end\nend",
    "    if a > 360 then\n        return nil\n    else\n        return (a / 360) * math.pi * r * r\n    end\nend",
    "    if a > 360 then\n        return nil\n    end\n    return (a / 360) * math.pi * r * r\nend"
  ]
}