{
  "name": "mbpp_438_count_bidirectional",
  "language": "lua",
  "prompt": "-- Write a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal count = 0\n\tfor _, test in ipairs(test_list) do\n\t\tif test.bidirectional then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if v == w and i ~= j then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, tup in ipairs(test_list) do\n        if tup[1] == tup[2] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, t in ipairs(test_list) do\n        if t.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j]:reverse() then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "   local count = 0\n   for _, t in ipairs(test_list) do\n      local t1, t2 = t[1], t[2]\n      if t1[1] == t2[2] and t1[2] == t2[1] then\n         count = count + 1\n      end\n   end\n   return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        local test_rev = {test[2], test[1]}\n        for j = 1, #test_list do\n            if test_list[j][1] == test_rev[1] and test_list[j][2] == test_rev[2] then\n                count = count + 1\n                break\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if i ~= j and v == w then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor _, v in ipairs(test_list) do\n\t\tif v[1] == v[2] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "   local count = 0\n   for i = 1, #test_list do\n      for j = i+1, #test_list do\n         if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n            count = count + 1\n         end\n      end\n   end\n   return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if i ~= j and v == w then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i, v in ipairs(test_list) do\n        if v[1] == v[2] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[i] == test_list[j] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j]:reverse() then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i=1,#test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i, v in ipairs(test_list) do\n\t\tfor j, w in ipairs(test_list) do\n\t\t\tif i ~= j and v == w then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    local t1 = test_list[i]\n    for j = i + 1, #test_list do\n      local t2 = test_list[j]\n      if t1[1] == t2[2] and t1[2] == t2[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local test_tuple = test_list[i]\n        local test_tuple_rev = {test_tuple[2], test_tuple[1]}\n        for j = i + 1, #test_list do\n            if test_list[j][1] == test_tuple_rev[1] and\n               test_list[j][2] == test_tuple_rev[2] then\n                count = count + 1\n                break\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if v == w and i ~= j then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    local t1 = test_list[i]\n    for j = i + 1, #test_list do\n      local t2 = test_list[j]\n      if t1[1] == t2[2] and t1[2] == t2[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local a, b = test_list[i][1], test_list[i][2]\n        for j = 1, #test_list do\n            local c, d = test_list[j][1], test_list[j][2]\n            if a == c and b == d then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    local test = test_list[i]\n    local a, b = test[1], test[2]\n    if a and b and a[1] == b[2] and a[2] == b[1] then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if v == w and i ~= j then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if i ~= j and v[1] == w[2] and v[2] == w[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local t = test_list[i]\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tlocal test_tuple = test_list[i]\n\t\tlocal test_tuple_rev = {test_tuple[2], test_tuple[1]}\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[j][1] == test_tuple_rev[1] and test_list[j][2] == test_tuple_rev[2] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "   local count = 0\n   for _, test in ipairs(test_list) do\n      if test.bidirectional then\n         count = count + 1\n      end\n   end\n   return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if v[1] == w[2] and v[2] == w[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[3] and t[2] == t[4] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "   local count = 0\n   for i = 1, #test_list do\n      for j = i + 1, #test_list do\n         if test_list[i] == test_list[j]:reverse() then\n            count = count + 1\n         end\n      end\n   end\n   return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local a = test_list[i]\n        for j = i + 1, #test_list do\n            local b = test_list[j]\n            if a[1] == b[2] and a[2] == b[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor _, test in ipairs(test_list) do\n\t\tif test.bidirectional then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j]:reverse() then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, t in ipairs(test_list) do\n    local a, b = t[1], t[2]\n    if a and b and a[1] == b[2] and a[2] == b[1] then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    local a = test_list[i]\n    for j = i + 1, #test_list do\n      local b = test_list[j]\n      if a[1] == b[2] and a[2] == b[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if v[1] == w[2] and v[2] == w[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local t = test_list[i]\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "   local count = 0\n   for i = 1, #test_list do\n      for j = i + 1, #test_list do\n         if test_list[i] == test_list[j]:reverse() then\n            count = count + 1\n         end\n      end\n   end\n   return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i, v in ipairs(test_list) do\n        local a, b = v[1], v[2]\n        for j, w in ipairs(test_list) do\n            if i ~= j then\n                local c, d = w[1], w[2]\n                if a == d and b == c then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local a = test_list[i]\n        for j = i + 1, #test_list do\n            local b = test_list[j]\n            if a[1] == b[2] and a[2] == b[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, t in ipairs(test_list) do\n    local a, b = t[1], t[2]\n    if a and b and a ~= b then\n      local a_b = a .. \"-\" .. b\n      local b_a = b .. \"-\" .. a\n      if not bidirectional_pairs[a_b] and not bidirectional_pairs[b_a] then\n        bidirectional_pairs[a_b] = true\n        bidirectional_pairs[b_a] = true\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    local t = test_list[i]\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and\n         test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i, t1 in ipairs(test_list) do\n        for j, t2 in ipairs(test_list) do\n            if i ~= j and t1[1] == t2[2] and t1[2] == t2[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if v == w and i ~= j then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if i ~= j and v == w then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if v == w and i ~= j then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if i ~= j then\n                if v == w.reverse then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tlocal a = test_list[i]\n\t\tfor j = i + 1, #test_list do\n\t\t\tlocal b = test_list[j]\n\t\t\tif a[1] == b[2] and a[2] == b[1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local t = test_list[i]\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if v == w and i ~= j then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor _, test in ipairs(test_list) do\n\t\tif test.bidirectional then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[3] and t[2] == t[4] then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local item = test_list[i]\n        if item[1] == item[2] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    local t = test_list[i]\n    local t_rev = {t[2], t[1]}\n    for j = i + 1, #test_list do\n      if test_list[j][1] == t[2] and test_list[j][2] == t[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i=1, #test_list do\n    local a, b = test_list[i][1], test_list[i][2]\n    if a ~= b then\n      for j=i+1, #test_list do\n        local c, d = test_list[j][1], test_list[j][2]\n        if a == d and b == c then\n          count = count + 1\n          break\n        end\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local a = test_list[i]\n        for j = i + 1, #test_list do\n            local b = test_list[j]\n            if a[1] == b[2] and a[2] == b[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    local t1 = test_list[i]\n    for j = i + 1, #test_list do\n      local t2 = test_list[j]\n      if t1[1] == t2[2] and t1[2] == t2[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if i ~= j and v == w then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j]:reverse() then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    local test = test_list[i]\n    local a, b = test[1], test[2]\n    if a ~= b and test_list[i][b] == a then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local test_tuple = test_list[i]\n        local test_tuple_rev = {test_tuple[2], test_tuple[1]}\n        for j = 1, #test_list do\n            if test_list[j][1] == test_tuple_rev[1] and\n               test_list[j][2] == test_tuple_rev[2] then\n                count = count + 1\n                break\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "   local count = 0\n   for _, test in ipairs(test_list) do\n      if test.bidirectional then\n         count = count + 1\n      end\n   end\n   return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j]:reverse() then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i, v in ipairs(test_list) do\n    for j, w in ipairs(test_list) do\n      if v == w and i ~= j then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = 1, #test_list do\n            if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j]:reverse() then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, v in ipairs(test_list) do\n        if v.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j]:reverse() then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, test in ipairs(test_list) do\n    if test.bidirectional then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor _, test in ipairs(test_list) do\n\t\tif test.bidirectional then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local a = test_list[i]\n        for j = i + 1, #test_list do\n            local b = test_list[j]\n            if a[1] == b[2] and a[2] == b[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if i ~= j and v == w then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for _, t in ipairs(test_list) do\n    if t[1] == t[2] then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j]:reverse() then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j]:reverse() then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local test_tuple = test_list[i]\n        local test_tuple_rev = {test_tuple[2], test_tuple[1]}\n        for j = 1, #test_list do\n            if test_list[j][1] == test_tuple_rev[1] and test_list[j][2] == test_tuple_rev[2] then\n                count = count + 1\n                break\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "   local count = 0\n   for i,v in ipairs(test_list) do\n      for j,w in ipairs(test_list) do\n         if i ~= j and v == w then\n            count = count + 1\n         end\n      end\n   end\n   return count\nend",
    "    local count = 0\n    for _, test in ipairs(test_list) do\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i, v in ipairs(test_list) do\n        for j, w in ipairs(test_list) do\n            if v[1] == w[2] and v[2] == w[1] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, t in ipairs(test_list) do\n        if t[1] == t[2] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    local t1 = test_list[i]\n    for j = i + 1, #test_list do\n      local t2 = test_list[j]\n      if t1[1] == t2[2] and t1[2] == t2[1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        for j = i + 1, #test_list do\n            if test_list[i] == test_list[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if test.bidirectional then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_list do\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i][1] == test_list[j][2] and test_list[i][2] == test_list[j][1] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_list do\n    for j = i + 1, #test_list do\n      if test_list[i] == test_list[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend"
  ]
}