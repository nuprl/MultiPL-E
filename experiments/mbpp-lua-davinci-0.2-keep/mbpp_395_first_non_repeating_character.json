{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "lua",
  "prompt": "-- Write a python function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local count = {}\n    local result = \"\"\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            result = k\n            break\n        end\n    end\n    return result\nend",
    "    local char_count = {}\n    local index = {}\n    local result = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n            index[str1:sub(i, i)] = i\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            table.insert(result, {index[k], k})\n        end\n    end\n    table.sort(result, function(a, b) return a[1] < b[1] end)\n    return result[1][2]\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local result = ''\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n        else\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            result = str1:sub(i, i)\n            break\n        end\n    end\n    return result\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] then\n            count[char] = count[char] + 1\n        else\n            count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local index = {}\n    local result = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == nil then\n            count[c] = 1\n            index[c] = i\n        else\n            count[c] = count[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            table.insert(result, c)\n        end\n    end\n    table.sort(result, function(a, b)\n        return index[a] < index[b]\n    end)\n    return result[1]\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    local first_non_repeating_char = nil\n    for i = 1, #str1 do\n        local char = string.sub(str1, i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = string.sub(str1, i, i)\n        if char_count[char] == 1 then\n            first_non_repeating_char = char\n            break\n        end\n    end\n    return first_non_repeating_char\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend"
  ]
}