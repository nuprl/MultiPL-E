{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "lua",
  "prompt": "-- Write a python function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local count = {}\n    local result = \"\"\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            result = k\n            break\n        end\n    end\n    return result\nend",
    "    local char_count = {}\n    local index = {}\n    local result = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n            index[str1:sub(i, i)] = i\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            table.insert(result, {index[k], k})\n        end\n    end\n    table.sort(result, function(a, b) return a[1] < b[1] end)\n    return result[1][2]\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local result = ''\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n        else\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            result = str1:sub(i, i)\n            break\n        end\n    end\n    return result\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] then\n            count[char] = count[char] + 1\n        else\n            count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local index = {}\n    local result = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == nil then\n            count[c] = 1\n            index[c] = i\n        else\n            count[c] = count[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            table.insert(result, c)\n        end\n    end\n    table.sort(result, function(a, b)\n        return index[a] < index[b]\n    end)\n    return result[1]\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    local first_non_repeating_char = nil\n    for i = 1, #str1 do\n        local char = string.sub(str1, i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = string.sub(str1, i, i)\n        if char_count[char] == 1 then\n            first_non_repeating_char = char\n            break\n        end\n    end\n    return first_non_repeating_char\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n        else\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n        else\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "\tlocal count = {}\n\tlocal index = {}\n\tlocal result = \"\"\n\tfor i = 1, #str1 do\n\t\tif count[str1:sub(i, i)] == nil then\n\t\t\tcount[str1:sub(i, i)] = 1\n\t\t\tindex[str1:sub(i, i)] = i\n\t\telse\n\t\t\tcount[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n\t\tend\n\tend\n\tlocal min_index = math.huge\n\tfor k, v in pairs(count) do\n\t\tif v == 1 and index[k] < min_index then\n\t\t\tresult = k\n\t\t\tmin_index = index[k]\n\t\tend\n\tend\n\treturn result\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count={}\n    local index={}\n    for i=1, #str1 do\n        local c=str1:sub(i,i)\n        if count[c]==nil then\n            count[c]=1\n            index[c]=i\n        else\n            count[c]=count[c]+1\n        end\n    end\n    local result\n    local min_index=math.huge\n    for k,v in pairs(count) do\n        if v==1 and index[k]<min_index then\n            result=k\n            min_index=index[k]\n        end\n    end\n    return result\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "\tlocal char_count = {}\n\tlocal result = \"\"\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_count[char] == nil then\n\t\t\tchar_count[char] = 1\n\t\telse\n\t\t\tchar_count[char] = char_count[char] + 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_count[char] == 1 then\n\t\t\tresult = char\n\t\t\tbreak\n\t\tend\n\tend\n\treturn result\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local index = {}\n    local result = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == nil then\n            count[c] = 1\n            index[c] = i\n        else\n            count[c] = count[c] + 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            table.insert(result, k)\n        end\n    end\n    table.sort(result, function(a, b)\n        return index[a] < index[b]\n    end)\n    return result[1]\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local count={}\n    local index={}\n    local result\n    local min_index=math.huge\n    for i=1,#str1 do\n        if count[str1:sub(i,i)]==nil then\n            count[str1:sub(i,i)]=1\n            index[str1:sub(i,i)]=i\n        else\n            count[str1:sub(i,i)]=count[str1:sub(i,i)]+1\n        end\n    end\n    for k,v in pairs(count) do\n        if v==1 and index[k]<min_index then\n            result=k\n            min_index=index[k]\n        end\n    end\n    return result\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local result = ''\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            result = k\n            break\n        end\n    end\n    return result\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local chars = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if not chars[char] then\n            chars[char] = 1\n        else\n            chars[char] = chars[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if not chars[c] then\n            chars[c] = 1\n        else\n            chars[c] = chars[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if char_count[c] == nil then\n            char_count[c] = 1\n        else\n            char_count[c] = char_count[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if char_count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i,i)] then\n            count[str1:sub(i,i)] = count[str1:sub(i,i)] + 1\n        else\n            count[str1:sub(i,i)] = 1\n        end\n    end\n    for k,v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if char_count[c] == nil then\n            char_count[c] = 1\n        else\n            char_count[c] = char_count[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if char_count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local index = {}\n    local result = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == nil then\n            count[c] = 1\n            index[c] = i\n        else\n            count[c] = count[c] + 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            table.insert(result, {index[k], k})\n        end\n    end\n    table.sort(result, function(a, b) return a[1] < b[1] end)\n    return result[1][2]\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    local index = 1\n    local len = string.len(str1)\n    local char = string.sub(str1, index, index)\n    while len >= index do\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n        index = index + 1\n        char = string.sub(str1, index, index)\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n        else\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    local first_non_repeating_char = nil\n    for i = 1, #str1 do\n        local char = string.sub(str1, i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = string.sub(str1, i, i)\n        if char_count[char] == 1 then\n            first_non_repeating_char = char\n            break\n        end\n    end\n    return first_non_repeating_char\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if char_count[c] == nil then\n            char_count[c] = 1\n        else\n            char_count[c] = char_count[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if char_count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "\tlocal char_count = {}\n\tfor i = 1, #str1 do\n\t\tif char_count[str1:sub(i, i)] then\n\t\t\tchar_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n\t\telse\n\t\t\tchar_count[str1:sub(i, i)] = 1\n\t\tend\n\tend\n\tfor k, v in pairs(char_count) do\n\t\tif v == 1 then\n\t\t\treturn k\n\t\tend\n\tend\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    local index = {}\n    local len = string.len(str1)\n    local result = \"\"\n    for i = 1, len do\n        local char = string.sub(str1, i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n        if index[char] == nil then\n            index[char] = i\n        end\n    end\n    local min_index = len + 1\n    for k, v in pairs(char_count) do\n        if v == 1 and index[k] < min_index then\n            result = k\n            min_index = index[k]\n        end\n    end\n    return result\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return -1\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i,i)] == nil then\n            char_count[str1:sub(i,i)] = 1\n        else\n            char_count[str1:sub(i,i)] = char_count[str1:sub(i,i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i,i)] == 1 then\n            return str1:sub(i,i)\n        end\n    end\n    return nil\nend",
    "    local chars = {}\n    for i = 1, #str1 do\n        local c = string.sub(str1, i, i)\n        if chars[c] == nil then\n            chars[c] = 1\n        else\n            chars[c] = chars[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = string.sub(str1, i, i)\n        if chars[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "\tlocal char_count = {}\n\tfor i = 1, #str1 do\n\t\tif char_count[str1:sub(i, i)] then\n\t\t\tchar_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n\t\telse\n\t\t\tchar_count[str1:sub(i, i)] = 1\n\t\tend\n\tend\n\tfor k, v in pairs(char_count) do\n\t\tif v == 1 then\n\t\t\treturn k\n\t\tend\n\tend\n\treturn nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local char_table = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_table[char] then\n            char_table[char] = char_table[char] + 1\n        else\n            char_table[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_table[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    local first_non_repeating_character = \"\"\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            first_non_repeating_character = str1:sub(i, i)\n            break\n        end\n    end\n    return first_non_repeating_character\nend",
    "    local count = {}\n    local result = \"\"",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local count = {}\n    local index = {}\n    local result = \"\"\n    local min_index = math.huge\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == nil then\n            count[char] = 1\n            index[char] = i\n        else\n            count[char] = count[char] + 1\n        end\n    end\n    for k, v in pairs(index) do\n        if count[k] == 1 and v < min_index then\n            result = k\n            min_index = v\n        end\n    end\n    return result\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local index = {}\n    local result = \"\"\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n            index[str1:sub(i, i)] = i\n        else\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        end\n    end\n    local min_index = math.huge\n    for k, v in pairs(count) do\n        if v == 1 and index[k] < min_index then\n            result = k\n            min_index = index[k]\n        end\n    end\n    return result\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if char_count[c] == nil then\n            char_count[c] = 1\n        else\n            char_count[c] = char_count[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if char_count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    local first_non_repeating_char = ''\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            first_non_repeating_char = str1:sub(i, i)\n            break\n        end\n    end\n    return first_non_repeating_char\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if char_count[c] == nil then\n            char_count[c] = 1\n        else\n            char_count[c] = char_count[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if char_count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    for i = 1, #str1 do\n        if str1:find(str1:sub(i,i), i + 1) == nil then\n            return str1:sub(i,i)\n        end\n    end\n    return nil\nend",
    "    local chars = {}\n    for i = 1, #str1 do\n        if not chars[str1:sub(i, i)] then\n            chars[str1:sub(i, i)] = 1\n        else\n            chars[str1:sub(i, i)] = chars[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if chars[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i,i)] == nil then\n            char_count[str1:sub(i,i)] = 1\n        else\n            char_count[str1:sub(i,i)] = char_count[str1:sub(i,i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i,i)] == 1 then\n            return str1:sub(i,i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if not chars[c] then\n            chars[c] = 1\n        else\n            chars[c] = chars[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local index = {}\n    local result = nil\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == nil then\n            count[char] = 1\n            index[char] = i\n        else\n            count[char] = count[char] + 1\n            index[char] = nil\n        end\n    end\n    for k, v in pairs(index) do\n        if result == nil or v < result then\n            result = v\n        end\n    end\n    return result\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    local index = {}\n    local str_len = string.len(str1)\n    local result = nil\n    local min_index = str_len",
    "\tlocal char_count = {}\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif not char_count[char] then\n\t\t\tchar_count[char] = 1\n\t\telse\n\t\t\tchar_count[char] = char_count[char] + 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_count[char] == 1 then\n\t\t\treturn char\n\t\tend\n\tend\n\treturn nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    local result = ''\n    for i = 1, #str1 do\n        if count[str1:sub(i,i)] == nil then\n            count[str1:sub(i,i)] = 1\n        else\n            count[str1:sub(i,i)] = count[str1:sub(i,i)] + 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            result = k\n            break\n        end\n    end\n    return result\nend",
    "    for i = 1, #str1 do\n        if str1:find(str1:sub(i, i), i + 1) == nil then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local letters = {}\n    local first_non_repeating_character = ''\n    for i = 1, #str1 do\n        local letter = str1:sub(i, i)\n        if letters[letter] == nil then\n            letters[letter] = 1\n        else\n            letters[letter] = letters[letter] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local letter = str1:sub(i, i)\n        if letters[letter] == 1 then\n            first_non_repeating_character = letter\n            break\n        end\n    end\n    return first_non_repeating_character\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i,i)] == nil then\n            char_count[str1:sub(i,i)] = 1\n        else\n            char_count[str1:sub(i,i)] = char_count[str1:sub(i,i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i,i)] == 1 then\n            return str1:sub(i,i)\n        end\n    end\n    return nil\nend"
  ]
}